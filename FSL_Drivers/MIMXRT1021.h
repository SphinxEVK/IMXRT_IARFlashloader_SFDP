/*
** ###################################################################
**     Processors:          MIMXRT1021CAF4A
**                          MIMXRT1021CAG4A
**                          MIMXRT1021DAF5A
**                          MIMXRT1021DAG5A
**
**     Compilers:           Keil ARM C/C++ Compiler
**                          Freescale C/C++ for Embedded ARM
**                          GNU C Compiler
**                          IAR ANSI C/C++ Compiler for ARM
**
**     Reference manual:    iMX1020RT_RM_Rev_A.pdf
**     Version:             rev. 0.1, 2017-11-06
**     Build:               b171106
**
**     Abstract:
**         This header file implements peripheral memory map for MIMXRT1021
**         processor.
**
**     Copyright 1997-2016 Freescale Semiconductor, Inc.
**     Copyright 2016-2017 NXP
**
**     http:                 www.nxp.com
**     mail:                 support@nxp.com
**
**     Revisions:
**     - rev. 0.1 (2017-11-06)
**         Initial version.
**
** ###################################################################
*/

/*!
 * @file MIMXRT1021.h
 * @version 0.1
 * @date 2017-11-06
 * @brief Peripheral memory map for MIMXRT1021
 *
 * This header file implements peripheral memory map for MIMXRT1021 processor.
 */


/* ----------------------------------------------------------------------------
   -- MCU activation
   ---------------------------------------------------------------------------- */

/* Prevention from multiple including the same memory map */
#if !defined(MCU_MIMXRT1021)  /* Check if memory map has not been already included */
#define MCU_MIMXRT1021

/* Check if another memory map has not been also included */
#if (defined(MCU_ACTIVE))
  #error MIMXRT1021 memory map: There is already included another memory map. Only one memory map can be included.
#endif /* (defined(MCU_ACTIVE)) */
#define MCU_ACTIVE

#include <stdint.h>

/** Memory map major version (memory maps with equal major version number are
 * compatible) */
#define MCU_MEM_MAP_VERSION 0x0000U
/** Memory map minor version */
#define MCU_MEM_MAP_VERSION_MINOR 0x0001U


/* ----------------------------------------------------------------------------
   -- Interrupt vector numbers
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Interrupt_vector_numbers Interrupt vector numbers
 * @{
 */

/** Interrupt Number Definitions */
typedef enum {
  INT_Initial_Stack_Pointer    = 0,                /**< Initial Stack Pointer */
  INT_Initial_Program_Counter  = 1,                /**< Initial Program Counter */
  INT_NMI                      = 2,                /**< Non-maskable Interrupt (NMI) */
  INT_Hard_Fault               = 3,                /**< Hard Fault */
  INT_Reserved0                = 4,                /**< Reserved interrupt */
  INT_Reserved1                = 5,                /**< Reserved interrupt */
  INT_Reserved2                = 6,                /**< Reserved interrupt */
  INT_Reserved3                = 7,                /**< Reserved interrupt */
  INT_Reserved4                = 8,                /**< Reserved interrupt */
  INT_Reserved5                = 9,                /**< Reserved interrupt */
  INT_Reserved6                = 10,               /**< Reserved interrupt */
  INT_SVCall                   = 11,               /**< Supervisor call (SVCall) */
  INT_Reserved7                = 12,               /**< Reserved interrupt */
  INT_Reserved8                = 13,               /**< Reserved interrupt */
  INT_PendableSrvReq           = 14,               /**< Pendable request for system service (PendableSrvReq) */
  INT_SysTick                  = 15,               /**< System tick timer (SysTick) */
  INT_DMA0_DMA16               = 16,               /**< DMA channel 0/16 transfer complete */
  INT_DMA1_DMA17               = 17,               /**< DMA channel 1/17 transfer complete */
  INT_DMA2_DMA18               = 18,               /**< DMA channel 2/18 transfer complete */
  INT_DMA3_DMA19               = 19,               /**< DMA channel 3/19 transfer complete */
  INT_DMA4_DMA20               = 20,               /**< DMA channel 4/20 transfer complete */
  INT_DMA5_DMA21               = 21,               /**< DMA channel 5/21 transfer complete */
  INT_DMA6_DMA22               = 22,               /**< DMA channel 6/22 transfer complete */
  INT_DMA7_DMA23               = 23,               /**< DMA channel 7/23 transfer complete */
  INT_DMA8_DMA24               = 24,               /**< DMA channel 8/24 transfer complete */
  INT_DMA9_DMA25               = 25,               /**< DMA channel 9/25 transfer complete */
  INT_DMA10_DMA26              = 26,               /**< DMA channel 10/26 transfer complete */
  INT_DMA11_DMA27              = 27,               /**< DMA channel 11/27 transfer complete */
  INT_DMA12_DMA28              = 28,               /**< DMA channel 12/28 transfer complete */
  INT_DMA13_DMA29              = 29,               /**< DMA channel 13/29 transfer complete */
  INT_DMA14_DMA30              = 30,               /**< DMA channel 14/30 transfer complete */
  INT_DMA15_DMA31              = 31,               /**< DMA channel 15/31 transfer complete */
  INT_DMA_ERROR                = 32,               /**< DMA error interrupt channels 0-15 / 16-31 */
  INT_CTI0_ERROR               = 33,               /**< CTI0_Error */
  INT_CTI1_ERROR               = 34,               /**< CTI1_Error */
  INT_CORE                     = 35,               /**< CorePlatform exception IRQ */
  INT_LPUART1                  = 36,               /**< LPUART1 TX interrupt and RX interrupt */
  INT_LPUART2                  = 37,               /**< LPUART2 TX interrupt and RX interrupt */
  INT_LPUART3                  = 38,               /**< LPUART3 TX interrupt and RX interrupt */
  INT_LPUART4                  = 39,               /**< LPUART4 TX interrupt and RX interrupt */
  INT_LPUART5                  = 40,               /**< LPUART5 TX interrupt and RX interrupt */
  INT_LPUART6                  = 41,               /**< LPUART6 TX interrupt and RX interrupt */
  INT_LPUART7                  = 42,               /**< LPUART7 TX interrupt and RX interrupt */
  INT_LPUART8                  = 43,               /**< LPUART8 TX interrupt and RX interrupt */
  INT_LPI2C1                   = 44,               /**< LPI2C1 interrupt */
  INT_LPI2C2                   = 45,               /**< LPI2C2 interrupt */
  INT_LPI2C3                   = 46,               /**< LPI2C3 interrupt */
  INT_LPI2C4                   = 47,               /**< LPI2C4 interrupt */
  INT_LPSPI1                   = 48,               /**< LPSPI1 single interrupt vector for all sources */
  INT_LPSPI2                   = 49,               /**< LPSPI2 single interrupt vector for all sources */
  INT_LPSPI3                   = 50,               /**< LPSPI3 single interrupt vector for all sources */
  INT_LPSPI4                   = 51,               /**< LPSPI4  single interrupt vector for all sources */
  INT_CAN1                     = 52,               /**< CAN1 interrupt */
  INT_CAN2                     = 53,               /**< CAN2 interrupt */
  INT_FLEXRAM                  = 54,               /**< FlexRAM address out of range Or access hit IRQ */
  INT_KPP                      = 55,               /**< Keypad nterrupt */
  INT_Reserved56               = 56,               /**< Reserved interrupt */
  INT_GPR_IRQ                  = 57,               /**< GPR interrupt */
  INT_Reserved58               = 58,               /**< Reserved interrupt */
  INT_Reserved59               = 59,               /**< Reserved interrupt */
  INT_Reserved60               = 60,               /**< Reserved interrupt */
  INT_WDOG2                    = 61,               /**< WDOG2 interrupt */
  INT_SNVS_HP_WRAPPER          = 62,               /**< SRTC Consolidated Interrupt. Non TZ */
  INT_SNVS_HP_WRAPPER_TZ       = 63,               /**< SRTC Security Interrupt. TZ */
  INT_SNVS_LP_WRAPPER          = 64,               /**< ON-OFF button press shorter than 5 secs (pulse event) */
  INT_Reserved65               = 65,               /**< Reserved interrupt */
  INT_DCP                      = 66,               /**< DCP_IRQ interrupt */
  INT_DCP_VMI                  = 67,               /**< DCP_VMI_IRQ interrupt */
  INT_Reserved68               = 68,               /**< Reserved interrupt */
  INT_TRNG                     = 69,               /**< TRNG interrupt */
  INT_Reserved70               = 70,               /**< Reserved interrupt */
  INT_Reserved71               = 71,               /**< Reserved interrupt */
  INT_SAI1                     = 72,               /**< SAI1 interrupt */
  INT_SAI2                     = 73,               /**< SAI1 interrupt */
  INT_SAI3_RX                  = 74,               /**< SAI3 interrupt */
  INT_SAI3_TX                  = 75,               /**< SAI3 interrupt */
  INT_SPDIF                    = 76,               /**< SPDIF interrupt */
  INT_PMU                      = 77,               /**< PMU interrupt */
  INT_Reserved78               = 78,               /**< Reserved interrupt */
  INT_TEMP_LOW_HIGH            = 79,               /**< TEMPMON interrupt */
  INT_TEMP_PANIC               = 80,               /**< TEMPMON interrupt */
  INT_USB_PHY1                 = 81,               /**< USBPHY (UTMI0), Interrupt */
  INT_Reserved82               = 82,               /**< Reserved interrupt */
  INT_ADC1                     = 83,               /**< ADC1 interrupt */
  INT_ADC2                     = 84,               /**< ADC2 interrupt */
  INT_DCDC                     = 85,               /**< DCDC interrupt */
  INT_Reserved86               = 86,               /**< Reserved interrupt */
  INT_Reserved87               = 87,               /**< Reserved interrupt */
  INT_GPIO1_INT0               = 88,               /**< Active HIGH Interrupt from INT0 from GPIO */
  INT_GPIO1_INT1               = 89,               /**< Active HIGH Interrupt from INT1 from GPIO */
  INT_GPIO1_INT2               = 90,               /**< Active HIGH Interrupt from INT2 from GPIO */
  INT_GPIO1_INT3               = 91,               /**< Active HIGH Interrupt from INT3 from GPIO */
  INT_GPIO1_INT4               = 92,               /**< Active HIGH Interrupt from INT4 from GPIO */
  INT_GPIO1_INT5               = 93,               /**< Active HIGH Interrupt from INT5 from GPIO */
  INT_GPIO1_INT6               = 94,               /**< Active HIGH Interrupt from INT6 from GPIO */
  INT_GPIO1_INT7               = 95,               /**< Active HIGH Interrupt from INT7 from GPIO */
  INT_GPIO1_Combined_0_15      = 96,               /**< Combined interrupt indication for GPIO1 signal 0 throughout 15 */
  INT_GPIO1_Combined_16_31     = 97,               /**< Combined interrupt indication for GPIO1 signal 16 throughout 31 */
  INT_GPIO2_Combined_0_15      = 98,               /**< Combined interrupt indication for GPIO2 signal 0 throughout 15 */
  INT_GPIO2_Combined_16_31     = 99,               /**< Combined interrupt indication for GPIO2 signal 16 throughout 31 */
  INT_GPIO3_Combined_0_15      = 100,              /**< Combined interrupt indication for GPIO3 signal 0 throughout 15 */
  INT_GPIO3_Combined_16_31     = 101,              /**< Combined interrupt indication for GPIO3 signal 16 throughout 31 */
  INT_Reserved102              = 102,              /**< Reserved interrupt */
  INT_Reserved103              = 103,              /**< Reserved interrupt */
  INT_GPIO5_Combined_0_15      = 104,              /**< Combined interrupt indication for GPIO5 signal 0 throughout 15 */
  INT_GPIO5_Combined_16_31     = 105,              /**< Combined interrupt indication for GPIO5 signal 16 throughout 31 */
  INT_FLEXIO1                  = 106,              /**< FLEXIO1 interrupt */
  INT_Reserved107              = 107,              /**< Reserved interrupt */
  INT_WDOG1                    = 108,              /**< WDOG1 interrupt */
  INT_RTWDOG                   = 109,              /**< RTWDOG interrupt */
  INT_EWM                      = 110,              /**< EWM interrupt */
  INT_CCM_1                    = 111,              /**< CCM IRQ1 interrupt */
  INT_CCM_2                    = 112,              /**< CCM IRQ2 interrupt */
  INT_GPC                      = 113,              /**< GPC interrupt */
  INT_SRC                      = 114,              /**< SRC interrupt */
  INT_Reserved115              = 115,              /**< Reserved interrupt */
  INT_GPT1                     = 116,              /**< GPT1 interrupt */
  INT_GPT2                     = 117,              /**< GPT2 interrupt */
  INT_PWM1_0                   = 118,              /**< PWM1 capture 0, compare 0, or reload 0 interrupt */
  INT_PWM1_1                   = 119,              /**< PWM1 capture 1, compare 1, or reload 0 interrupt */
  INT_PWM1_2                   = 120,              /**< PWM1 capture 2, compare 2, or reload 0 interrupt */
  INT_PWM1_3                   = 121,              /**< PWM1 capture 3, compare 3, or reload 0 interrupt */
  INT_PWM1_FAULT               = 122,              /**< PWM1 fault or reload error interrupt */
  INT_Reserved123              = 123,              /**< Reserved interrupt */
  INT_FLEXSPI                  = 124,              /**< FlexSPI0 interrupt */
  INT_SEMC                     = 125,              /**< Reserved interrupt */
  INT_USDHC1                   = 126,              /**< USDHC1 interrupt */
  INT_USDHC2                   = 127,              /**< USDHC2 interrupt */
  INT_Reserved128              = 128,              /**< Reserved interrupt */
  INT_USB_OTG1                 = 129,              /**< USBO2 USB OTG1 */
  INT_ENET                     = 130,              /**< ENET interrupt */
  INT_ENET_1588_Timer          = 131,              /**< ENET_1588_Timer interrupt */
  INT_XBAR1_IRQ_0_1            = 132,              /**< XBAR1 interrupt */
  INT_XBAR1_IRQ_2_3            = 133,              /**< XBAR1 interrupt */
  INT_ADC_ETC_IRQ0             = 134,              /**< ADCETC IRQ0 interrupt */
  INT_ADC_ETC_IRQ1             = 135,              /**< ADCETC IRQ1 interrupt */
  INT_ADC_ETC_IRQ2             = 136,              /**< ADCETC IRQ2 interrupt */
  INT_ADC_ETC_ERROR_IRQ        = 137,              /**< ADCETC Error IRQ interrupt */
  INT_PIT                      = 138,              /**< PIT interrupt */
  INT_ACMP1                    = 139,              /**< ACMP interrupt */
  INT_ACMP2                    = 140,              /**< ACMP interrupt */
  INT_ACMP3                    = 141,              /**< ACMP interrupt */
  INT_ACMP4                    = 142,              /**< ACMP interrupt */
  INT_Reserved143              = 143,              /**< Reserved interrupt */
  INT_Reserved144              = 144,              /**< Reserved interrupt */
  INT_ENC1                     = 145,              /**< ENC1 interrupt */
  INT_ENC2                     = 146,              /**< ENC2 interrupt */
  INT_Reserved147              = 147,              /**< Reserved interrupt */
  INT_Reserved148              = 148,              /**< Reserved interrupt */
  INT_TMR1                     = 149,              /**< TMR1 interrupt */
  INT_TMR2                     = 150,              /**< TMR2 interrupt */
  INT_Reserved151              = 151,              /**< Reserved interrupt */
  INT_Reserved152              = 152,              /**< Reserved interrupt */
  INT_PWM2_0                   = 153,              /**< PWM2 capture 0, compare 0, or reload 0 interrupt */
  INT_PWM2_1                   = 154,              /**< PWM2 capture 1, compare 1, or reload 0 interrupt */
  INT_PWM2_2                   = 155,              /**< PWM2 capture 2, compare 2, or reload 0 interrupt */
  INT_PWM2_3                   = 156,              /**< PWM2 capture 3, compare 3, or reload 0 interrupt */
  INT_PWM2_FAULT               = 157               /**< PWM2 fault or reload error interrupt */
} IRQInterruptIndex;

/*!
 * @}
 */ /* end of group Interrupt_vector_numbers */


/* ----------------------------------------------------------------------------
   -- Peripheral type defines
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Peripheral_defines Peripheral type defines
 * @{
 */


/*
** Start of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
  #pragma push
  #pragma anon_unions
#elif defined(__CWCC__)
  #pragma push
  #pragma cpp_extensions on
#elif defined(__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined(__IAR_SYSTEMS_ICC__)
  #pragma language=extended
#else
  #error Not supported compiler type
#endif

/* ----------------------------------------------------------------------------
   -- ADC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ADC_Peripheral ADC
 * @{
 */

/** ADC - Peripheral register structure */
typedef struct ADC_MemMap {
  uint32_t HC[8];                                  /**< Control register for hardware triggers, array offset: 0x0, array step: 0x4 */
  uint32_t HS;                                     /**< Status register for HW triggers, offset: 0x20 */
  uint32_t R[8];                                   /**< Data result register for HW triggers, array offset: 0x24, array step: 0x4 */
  uint32_t CFG;                                    /**< Configuration register, offset: 0x44 */
  uint32_t GC;                                     /**< General control register, offset: 0x48 */
  uint32_t GS;                                     /**< General status register, offset: 0x4C */
  uint32_t CV;                                     /**< Compare value register, offset: 0x50 */
  uint32_t OFS;                                    /**< Offset correction value register, offset: 0x54 */
  uint32_t CAL;                                    /**< Calibration value register, offset: 0x58 */
} volatile *ADC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- ADC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ADC_Register_Accessor_Macros ADC - Register accessor macros
 * @{
 */


/* ADC - Register accessors */
#define ADC_HC_REG(base,index)                   ((base)->HC[index])
#define ADC_HS_REG(base)                         ((base)->HS)
#define ADC_R_REG(base,index)                    ((base)->R[index])
#define ADC_CFG_REG(base)                        ((base)->CFG)
#define ADC_GC_REG(base)                         ((base)->GC)
#define ADC_GS_REG(base)                         ((base)->GS)
#define ADC_CV_REG(base)                         ((base)->CV)
#define ADC_OFS_REG(base)                        ((base)->OFS)
#define ADC_CAL_REG(base)                        ((base)->CAL)

/*!
 * @}
 */ /* end of group ADC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- ADC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ADC_Register_Masks ADC Register Masks
 * @{
 */

/*! @name HC - Control register for hardware triggers */
#define ADC_HC_ADCH_MASK                         (0x1FU)
#define ADC_HC_ADCH_SHIFT                        (0U)
#define ADC_HC_ADCH(x)                           (((uint32_t)(((uint32_t)(x)) << ADC_HC_ADCH_SHIFT)) & ADC_HC_ADCH_MASK)
#define ADC_HC_AIEN_MASK                         (0x80U)
#define ADC_HC_AIEN_SHIFT                        (7U)

/* The count of ADC_HC */
#define ADC_HC_COUNT                             (8U)

/*! @name HS - Status register for HW triggers */
#define ADC_HS_COCO0_MASK                        (0x1U)
#define ADC_HS_COCO0_SHIFT                       (0U)

/*! @name R - Data result register for HW triggers */
#define ADC_R_CDATA_MASK                         (0xFFFU)
#define ADC_R_CDATA_SHIFT                        (0U)
#define ADC_R_CDATA(x)                           (((uint32_t)(((uint32_t)(x)) << ADC_R_CDATA_SHIFT)) & ADC_R_CDATA_MASK)

/* The count of ADC_R */
#define ADC_R_COUNT                              (8U)

/*! @name CFG - Configuration register */
#define ADC_CFG_ADICLK_MASK                      (0x3U)
#define ADC_CFG_ADICLK_SHIFT                     (0U)
#define ADC_CFG_ADICLK(x)                        (((uint32_t)(((uint32_t)(x)) << ADC_CFG_ADICLK_SHIFT)) & ADC_CFG_ADICLK_MASK)
#define ADC_CFG_MODE_MASK                        (0xCU)
#define ADC_CFG_MODE_SHIFT                       (2U)
#define ADC_CFG_MODE(x)                          (((uint32_t)(((uint32_t)(x)) << ADC_CFG_MODE_SHIFT)) & ADC_CFG_MODE_MASK)
#define ADC_CFG_ADLSMP_MASK                      (0x10U)
#define ADC_CFG_ADLSMP_SHIFT                     (4U)
#define ADC_CFG_ADIV_MASK                        (0x60U)
#define ADC_CFG_ADIV_SHIFT                       (5U)
#define ADC_CFG_ADIV(x)                          (((uint32_t)(((uint32_t)(x)) << ADC_CFG_ADIV_SHIFT)) & ADC_CFG_ADIV_MASK)
#define ADC_CFG_ADLPC_MASK                       (0x80U)
#define ADC_CFG_ADLPC_SHIFT                      (7U)
#define ADC_CFG_ADSTS_MASK                       (0x300U)
#define ADC_CFG_ADSTS_SHIFT                      (8U)
#define ADC_CFG_ADSTS(x)                         (((uint32_t)(((uint32_t)(x)) << ADC_CFG_ADSTS_SHIFT)) & ADC_CFG_ADSTS_MASK)
#define ADC_CFG_ADHSC_MASK                       (0x400U)
#define ADC_CFG_ADHSC_SHIFT                      (10U)
#define ADC_CFG_REFSEL_MASK                      (0x1800U)
#define ADC_CFG_REFSEL_SHIFT                     (11U)
#define ADC_CFG_REFSEL(x)                        (((uint32_t)(((uint32_t)(x)) << ADC_CFG_REFSEL_SHIFT)) & ADC_CFG_REFSEL_MASK)
#define ADC_CFG_ADTRG_MASK                       (0x2000U)
#define ADC_CFG_ADTRG_SHIFT                      (13U)
#define ADC_CFG_AVGS_MASK                        (0xC000U)
#define ADC_CFG_AVGS_SHIFT                       (14U)
#define ADC_CFG_AVGS(x)                          (((uint32_t)(((uint32_t)(x)) << ADC_CFG_AVGS_SHIFT)) & ADC_CFG_AVGS_MASK)
#define ADC_CFG_OVWREN_MASK                      (0x10000U)
#define ADC_CFG_OVWREN_SHIFT                     (16U)

/*! @name GC - General control register */
#define ADC_GC_ADACKEN_MASK                      (0x1U)
#define ADC_GC_ADACKEN_SHIFT                     (0U)
#define ADC_GC_DMAEN_MASK                        (0x2U)
#define ADC_GC_DMAEN_SHIFT                       (1U)
#define ADC_GC_ACREN_MASK                        (0x4U)
#define ADC_GC_ACREN_SHIFT                       (2U)
#define ADC_GC_ACFGT_MASK                        (0x8U)
#define ADC_GC_ACFGT_SHIFT                       (3U)
#define ADC_GC_ACFE_MASK                         (0x10U)
#define ADC_GC_ACFE_SHIFT                        (4U)
#define ADC_GC_AVGE_MASK                         (0x20U)
#define ADC_GC_AVGE_SHIFT                        (5U)
#define ADC_GC_ADCO_MASK                         (0x40U)
#define ADC_GC_ADCO_SHIFT                        (6U)
#define ADC_GC_CAL_MASK                          (0x80U)
#define ADC_GC_CAL_SHIFT                         (7U)

/*! @name GS - General status register */
#define ADC_GS_ADACT_MASK                        (0x1U)
#define ADC_GS_ADACT_SHIFT                       (0U)
#define ADC_GS_CALF_MASK                         (0x2U)
#define ADC_GS_CALF_SHIFT                        (1U)
#define ADC_GS_AWKST_MASK                        (0x4U)
#define ADC_GS_AWKST_SHIFT                       (2U)

/*! @name CV - Compare value register */
#define ADC_CV_CV1_MASK                          (0xFFFU)
#define ADC_CV_CV1_SHIFT                         (0U)
#define ADC_CV_CV1(x)                            (((uint32_t)(((uint32_t)(x)) << ADC_CV_CV1_SHIFT)) & ADC_CV_CV1_MASK)
#define ADC_CV_CV2_MASK                          (0xFFF0000U)
#define ADC_CV_CV2_SHIFT                         (16U)
#define ADC_CV_CV2(x)                            (((uint32_t)(((uint32_t)(x)) << ADC_CV_CV2_SHIFT)) & ADC_CV_CV2_MASK)

/*! @name OFS - Offset correction value register */
#define ADC_OFS_OFS_MASK                         (0xFFFU)
#define ADC_OFS_OFS_SHIFT                        (0U)
#define ADC_OFS_OFS(x)                           (((uint32_t)(((uint32_t)(x)) << ADC_OFS_OFS_SHIFT)) & ADC_OFS_OFS_MASK)
#define ADC_OFS_SIGN_MASK                        (0x1000U)
#define ADC_OFS_SIGN_SHIFT                       (12U)

/*! @name CAL - Calibration value register */
#define ADC_CAL_CAL_CODE_MASK                    (0xFU)
#define ADC_CAL_CAL_CODE_SHIFT                   (0U)
#define ADC_CAL_CAL_CODE(x)                      (((uint32_t)(((uint32_t)(x)) << ADC_CAL_CAL_CODE_SHIFT)) & ADC_CAL_CAL_CODE_MASK)


/*!
 * @}
 */ /* end of group ADC_Register_Masks */


/* ADC - Peripheral instance base addresses */
/** Peripheral ADC1 base pointer */
#define ADC1_BASE_PTR                            ((ADC_MemMapPtr)0x400C4000u)
/** Peripheral ADC2 base pointer */
#define ADC2_BASE_PTR                            ((ADC_MemMapPtr)0x400C8000u)
/** Array initializer of ADC peripheral base pointers */
#define ADC_BASE_PTRS                            { ADC1_BASE_PTR, ADC2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- ADC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ADC_Register_Accessor_Macros ADC - Register accessor macros
 * @{
 */


/* ADC - Register instance definitions */
/* ADC1 */
#define ADC1_HC0                                 ADC_HC_REG(ADC1_BASE_PTR,0)
#define ADC1_HC1                                 ADC_HC_REG(ADC1_BASE_PTR,1)
#define ADC1_HC2                                 ADC_HC_REG(ADC1_BASE_PTR,2)
#define ADC1_HC3                                 ADC_HC_REG(ADC1_BASE_PTR,3)
#define ADC1_HC4                                 ADC_HC_REG(ADC1_BASE_PTR,4)
#define ADC1_HC5                                 ADC_HC_REG(ADC1_BASE_PTR,5)
#define ADC1_HC6                                 ADC_HC_REG(ADC1_BASE_PTR,6)
#define ADC1_HC7                                 ADC_HC_REG(ADC1_BASE_PTR,7)
#define ADC1_HS                                  ADC_HS_REG(ADC1_BASE_PTR)
#define ADC1_R0                                  ADC_R_REG(ADC1_BASE_PTR,0)
#define ADC1_R1                                  ADC_R_REG(ADC1_BASE_PTR,1)
#define ADC1_R2                                  ADC_R_REG(ADC1_BASE_PTR,2)
#define ADC1_R3                                  ADC_R_REG(ADC1_BASE_PTR,3)
#define ADC1_R4                                  ADC_R_REG(ADC1_BASE_PTR,4)
#define ADC1_R5                                  ADC_R_REG(ADC1_BASE_PTR,5)
#define ADC1_R6                                  ADC_R_REG(ADC1_BASE_PTR,6)
#define ADC1_R7                                  ADC_R_REG(ADC1_BASE_PTR,7)
#define ADC1_CFG                                 ADC_CFG_REG(ADC1_BASE_PTR)
#define ADC1_GC                                  ADC_GC_REG(ADC1_BASE_PTR)
#define ADC1_GS                                  ADC_GS_REG(ADC1_BASE_PTR)
#define ADC1_CV                                  ADC_CV_REG(ADC1_BASE_PTR)
#define ADC1_OFS                                 ADC_OFS_REG(ADC1_BASE_PTR)
#define ADC1_CAL                                 ADC_CAL_REG(ADC1_BASE_PTR)
/* ADC2 */
#define ADC2_HC0                                 ADC_HC_REG(ADC2_BASE_PTR,0)
#define ADC2_HC1                                 ADC_HC_REG(ADC2_BASE_PTR,1)
#define ADC2_HC2                                 ADC_HC_REG(ADC2_BASE_PTR,2)
#define ADC2_HC3                                 ADC_HC_REG(ADC2_BASE_PTR,3)
#define ADC2_HC4                                 ADC_HC_REG(ADC2_BASE_PTR,4)
#define ADC2_HC5                                 ADC_HC_REG(ADC2_BASE_PTR,5)
#define ADC2_HC6                                 ADC_HC_REG(ADC2_BASE_PTR,6)
#define ADC2_HC7                                 ADC_HC_REG(ADC2_BASE_PTR,7)
#define ADC2_HS                                  ADC_HS_REG(ADC2_BASE_PTR)
#define ADC2_R0                                  ADC_R_REG(ADC2_BASE_PTR,0)
#define ADC2_R1                                  ADC_R_REG(ADC2_BASE_PTR,1)
#define ADC2_R2                                  ADC_R_REG(ADC2_BASE_PTR,2)
#define ADC2_R3                                  ADC_R_REG(ADC2_BASE_PTR,3)
#define ADC2_R4                                  ADC_R_REG(ADC2_BASE_PTR,4)
#define ADC2_R5                                  ADC_R_REG(ADC2_BASE_PTR,5)
#define ADC2_R6                                  ADC_R_REG(ADC2_BASE_PTR,6)
#define ADC2_R7                                  ADC_R_REG(ADC2_BASE_PTR,7)
#define ADC2_CFG                                 ADC_CFG_REG(ADC2_BASE_PTR)
#define ADC2_GC                                  ADC_GC_REG(ADC2_BASE_PTR)
#define ADC2_GS                                  ADC_GS_REG(ADC2_BASE_PTR)
#define ADC2_CV                                  ADC_CV_REG(ADC2_BASE_PTR)
#define ADC2_OFS                                 ADC_OFS_REG(ADC2_BASE_PTR)
#define ADC2_CAL                                 ADC_CAL_REG(ADC2_BASE_PTR)

/* ADC - Register array accessors */
#define ADC1_HC(index)                           ADC_HC_REG(ADC1_BASE_PTR,index)
#define ADC2_HC(index)                           ADC_HC_REG(ADC2_BASE_PTR,index)
#define ADC1_R(index)                            ADC_R_REG(ADC1_BASE_PTR,index)
#define ADC2_R(index)                            ADC_R_REG(ADC2_BASE_PTR,index)

/*!
 * @}
 */ /* end of group ADC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group ADC_Peripheral */


/* ----------------------------------------------------------------------------
   -- ADC_ETC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ADC_ETC_Peripheral ADC_ETC
 * @{
 */

/** ADC_ETC - Peripheral register structure */
typedef struct ADC_ETC_MemMap {
  uint32_t CTRL;                                   /**< ADC_ETC Global Control Register, offset: 0x0 */
  uint32_t DONE0_1_IRQ;                            /**< ETC DONE0 and DONE1 IRQ State Register, offset: 0x4 */
  uint32_t DONE2_ERR_IRQ;                          /**< ETC DONE_2 and DONE_ERR IRQ State Register, offset: 0x8 */
  uint32_t DMA_CTRL;                               /**< ETC DMA control Register, offset: 0xC */
  struct {                                         /* offset: 0x10, array step: 0x28 */
    uint32_t TRIGn_CTRL;                             /**< ETC_TRIG0 Control Register..ETC_TRIG7 Control Register, array offset: 0x10, array step: 0x28 */
    uint32_t TRIGn_COUNTER;                          /**< ETC_TRIG0 Counter Register..ETC_TRIG7 Counter Register, array offset: 0x14, array step: 0x28 */
    uint32_t TRIGn_CHAIN_1_0;                        /**< ETC_TRIG Chain 0/1 Register, array offset: 0x18, array step: 0x28 */
    uint32_t TRIGn_CHAIN_3_2;                        /**< ETC_TRIG Chain 2/3 Register, array offset: 0x1C, array step: 0x28 */
    uint32_t TRIGn_CHAIN_5_4;                        /**< ETC_TRIG Chain 4/5 Register, array offset: 0x20, array step: 0x28 */
    uint32_t TRIGn_CHAIN_7_6;                        /**< ETC_TRIG Chain 6/7 Register, array offset: 0x24, array step: 0x28 */
    uint32_t TRIGn_RESULT_1_0;                       /**< ETC_TRIG Result Data 1/0 Register, array offset: 0x28, array step: 0x28 */
    uint32_t TRIGn_RESULT_3_2;                       /**< ETC_TRIG Result Data 3/2 Register, array offset: 0x2C, array step: 0x28 */
    uint32_t TRIGn_RESULT_5_4;                       /**< ETC_TRIG Result Data 5/4 Register, array offset: 0x30, array step: 0x28 */
    uint32_t TRIGn_RESULT_7_6;                       /**< ETC_TRIG Result Data 7/6 Register, array offset: 0x34, array step: 0x28 */
  } TRIG[8];
} volatile *ADC_ETC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- ADC_ETC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ADC_ETC_Register_Accessor_Macros ADC_ETC - Register accessor macros
 * @{
 */


/* ADC_ETC - Register accessors */
#define ADC_ETC_CTRL_REG(base)                   ((base)->CTRL)
#define ADC_ETC_DONE0_1_IRQ_REG(base)            ((base)->DONE0_1_IRQ)
#define ADC_ETC_DONE2_ERR_IRQ_REG(base)          ((base)->DONE2_ERR_IRQ)
#define ADC_ETC_DMA_CTRL_REG(base)               ((base)->DMA_CTRL)
#define ADC_ETC_TRIGn_CTRL_REG(base,index)       ((base)->TRIG[index].TRIGn_CTRL)
#define ADC_ETC_TRIGn_COUNTER_REG(base,index)    ((base)->TRIG[index].TRIGn_COUNTER)
#define ADC_ETC_TRIGn_CHAIN_1_0_REG(base,index)  ((base)->TRIG[index].TRIGn_CHAIN_1_0)
#define ADC_ETC_TRIGn_CHAIN_3_2_REG(base,index)  ((base)->TRIG[index].TRIGn_CHAIN_3_2)
#define ADC_ETC_TRIGn_CHAIN_5_4_REG(base,index)  ((base)->TRIG[index].TRIGn_CHAIN_5_4)
#define ADC_ETC_TRIGn_CHAIN_7_6_REG(base,index)  ((base)->TRIG[index].TRIGn_CHAIN_7_6)
#define ADC_ETC_TRIGn_RESULT_1_0_REG(base,index) ((base)->TRIG[index].TRIGn_RESULT_1_0)
#define ADC_ETC_TRIGn_RESULT_3_2_REG(base,index) ((base)->TRIG[index].TRIGn_RESULT_3_2)
#define ADC_ETC_TRIGn_RESULT_5_4_REG(base,index) ((base)->TRIG[index].TRIGn_RESULT_5_4)
#define ADC_ETC_TRIGn_RESULT_7_6_REG(base,index) ((base)->TRIG[index].TRIGn_RESULT_7_6)

/*!
 * @}
 */ /* end of group ADC_ETC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- ADC_ETC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ADC_ETC_Register_Masks ADC_ETC Register Masks
 * @{
 */

/*! @name CTRL - ADC_ETC Global Control Register */
#define ADC_ETC_CTRL_TRIG_ENABLE_MASK            (0xFFU)
#define ADC_ETC_CTRL_TRIG_ENABLE_SHIFT           (0U)
#define ADC_ETC_CTRL_TRIG_ENABLE(x)              (((uint32_t)(((uint32_t)(x)) << ADC_ETC_CTRL_TRIG_ENABLE_SHIFT)) & ADC_ETC_CTRL_TRIG_ENABLE_MASK)
#define ADC_ETC_CTRL_EXT0_TRIG_ENABLE_MASK       (0x100U)
#define ADC_ETC_CTRL_EXT0_TRIG_ENABLE_SHIFT      (8U)
#define ADC_ETC_CTRL_EXT0_TRIG_PRIORITY_MASK     (0xE00U)
#define ADC_ETC_CTRL_EXT0_TRIG_PRIORITY_SHIFT    (9U)
#define ADC_ETC_CTRL_EXT0_TRIG_PRIORITY(x)       (((uint32_t)(((uint32_t)(x)) << ADC_ETC_CTRL_EXT0_TRIG_PRIORITY_SHIFT)) & ADC_ETC_CTRL_EXT0_TRIG_PRIORITY_MASK)
#define ADC_ETC_CTRL_EXT1_TRIG_ENABLE_MASK       (0x1000U)
#define ADC_ETC_CTRL_EXT1_TRIG_ENABLE_SHIFT      (12U)
#define ADC_ETC_CTRL_EXT1_TRIG_PRIORITY_MASK     (0xE000U)
#define ADC_ETC_CTRL_EXT1_TRIG_PRIORITY_SHIFT    (13U)
#define ADC_ETC_CTRL_EXT1_TRIG_PRIORITY(x)       (((uint32_t)(((uint32_t)(x)) << ADC_ETC_CTRL_EXT1_TRIG_PRIORITY_SHIFT)) & ADC_ETC_CTRL_EXT1_TRIG_PRIORITY_MASK)
#define ADC_ETC_CTRL_PRE_DIVIDER_MASK            (0xFF0000U)
#define ADC_ETC_CTRL_PRE_DIVIDER_SHIFT           (16U)
#define ADC_ETC_CTRL_PRE_DIVIDER(x)              (((uint32_t)(((uint32_t)(x)) << ADC_ETC_CTRL_PRE_DIVIDER_SHIFT)) & ADC_ETC_CTRL_PRE_DIVIDER_MASK)
#define ADC_ETC_CTRL_TSC_BYPASS_MASK             (0x40000000U)
#define ADC_ETC_CTRL_TSC_BYPASS_SHIFT            (30U)
#define ADC_ETC_CTRL_SOFTRST_MASK                (0x80000000U)
#define ADC_ETC_CTRL_SOFTRST_SHIFT               (31U)

/*! @name DONE0_1_IRQ - ETC DONE0 and DONE1 IRQ State Register */
#define ADC_ETC_DONE0_1_IRQ_TRIG0_DONE0_MASK     (0x1U)
#define ADC_ETC_DONE0_1_IRQ_TRIG0_DONE0_SHIFT    (0U)
#define ADC_ETC_DONE0_1_IRQ_TRIG1_DONE0_MASK     (0x2U)
#define ADC_ETC_DONE0_1_IRQ_TRIG1_DONE0_SHIFT    (1U)
#define ADC_ETC_DONE0_1_IRQ_TRIG2_DONE0_MASK     (0x4U)
#define ADC_ETC_DONE0_1_IRQ_TRIG2_DONE0_SHIFT    (2U)
#define ADC_ETC_DONE0_1_IRQ_TRIG3_DONE0_MASK     (0x8U)
#define ADC_ETC_DONE0_1_IRQ_TRIG3_DONE0_SHIFT    (3U)
#define ADC_ETC_DONE0_1_IRQ_TRIG4_DONE0_MASK     (0x10U)
#define ADC_ETC_DONE0_1_IRQ_TRIG4_DONE0_SHIFT    (4U)
#define ADC_ETC_DONE0_1_IRQ_TRIG5_DONE0_MASK     (0x20U)
#define ADC_ETC_DONE0_1_IRQ_TRIG5_DONE0_SHIFT    (5U)
#define ADC_ETC_DONE0_1_IRQ_TRIG6_DONE0_MASK     (0x40U)
#define ADC_ETC_DONE0_1_IRQ_TRIG6_DONE0_SHIFT    (6U)
#define ADC_ETC_DONE0_1_IRQ_TRIG7_DONE0_MASK     (0x80U)
#define ADC_ETC_DONE0_1_IRQ_TRIG7_DONE0_SHIFT    (7U)
#define ADC_ETC_DONE0_1_IRQ_TRIG0_DONE1_MASK     (0x10000U)
#define ADC_ETC_DONE0_1_IRQ_TRIG0_DONE1_SHIFT    (16U)
#define ADC_ETC_DONE0_1_IRQ_TRIG1_DONE1_MASK     (0x20000U)
#define ADC_ETC_DONE0_1_IRQ_TRIG1_DONE1_SHIFT    (17U)
#define ADC_ETC_DONE0_1_IRQ_TRIG2_DONE1_MASK     (0x40000U)
#define ADC_ETC_DONE0_1_IRQ_TRIG2_DONE1_SHIFT    (18U)
#define ADC_ETC_DONE0_1_IRQ_TRIG3_DONE1_MASK     (0x80000U)
#define ADC_ETC_DONE0_1_IRQ_TRIG3_DONE1_SHIFT    (19U)
#define ADC_ETC_DONE0_1_IRQ_TRIG4_DONE1_MASK     (0x100000U)
#define ADC_ETC_DONE0_1_IRQ_TRIG4_DONE1_SHIFT    (20U)
#define ADC_ETC_DONE0_1_IRQ_TRIG5_DONE1_MASK     (0x200000U)
#define ADC_ETC_DONE0_1_IRQ_TRIG5_DONE1_SHIFT    (21U)
#define ADC_ETC_DONE0_1_IRQ_TRIG6_DONE1_MASK     (0x400000U)
#define ADC_ETC_DONE0_1_IRQ_TRIG6_DONE1_SHIFT    (22U)
#define ADC_ETC_DONE0_1_IRQ_TRIG7_DONE1_MASK     (0x800000U)
#define ADC_ETC_DONE0_1_IRQ_TRIG7_DONE1_SHIFT    (23U)

/*! @name DONE2_ERR_IRQ - ETC DONE_2 and DONE_ERR IRQ State Register */
#define ADC_ETC_DONE2_ERR_IRQ_TRIG0_DONE2_MASK   (0x1U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG0_DONE2_SHIFT  (0U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG1_DONE2_MASK   (0x2U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG1_DONE2_SHIFT  (1U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG2_DONE2_MASK   (0x4U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG2_DONE2_SHIFT  (2U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG3_DONE2_MASK   (0x8U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG3_DONE2_SHIFT  (3U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG4_DONE2_MASK   (0x10U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG4_DONE2_SHIFT  (4U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG5_DONE2_MASK   (0x20U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG5_DONE2_SHIFT  (5U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG6_DONE2_MASK   (0x40U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG6_DONE2_SHIFT  (6U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG7_DONE2_MASK   (0x80U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG7_DONE2_SHIFT  (7U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG0_ERR_MASK     (0x10000U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG0_ERR_SHIFT    (16U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG1_ERR_MASK     (0x20000U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG1_ERR_SHIFT    (17U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG2_ERR_MASK     (0x40000U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG2_ERR_SHIFT    (18U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG3_ERR_MASK     (0x80000U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG3_ERR_SHIFT    (19U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG4_ERR_MASK     (0x100000U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG4_ERR_SHIFT    (20U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG5_ERR_MASK     (0x200000U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG5_ERR_SHIFT    (21U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG6_ERR_MASK     (0x400000U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG6_ERR_SHIFT    (22U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG7_ERR_MASK     (0x800000U)
#define ADC_ETC_DONE2_ERR_IRQ_TRIG7_ERR_SHIFT    (23U)

/*! @name DMA_CTRL - ETC DMA control Register */
#define ADC_ETC_DMA_CTRL_TRIG0_ENABLE_MASK       (0x1U)
#define ADC_ETC_DMA_CTRL_TRIG0_ENABLE_SHIFT      (0U)
#define ADC_ETC_DMA_CTRL_TRIG1_ENABLE_MASK       (0x2U)
#define ADC_ETC_DMA_CTRL_TRIG1_ENABLE_SHIFT      (1U)
#define ADC_ETC_DMA_CTRL_TRIG2_ENABLE_MASK       (0x4U)
#define ADC_ETC_DMA_CTRL_TRIG2_ENABLE_SHIFT      (2U)
#define ADC_ETC_DMA_CTRL_TRIG3_ENABLE_MASK       (0x8U)
#define ADC_ETC_DMA_CTRL_TRIG3_ENABLE_SHIFT      (3U)
#define ADC_ETC_DMA_CTRL_TRIG4_ENABLE_MASK       (0x10U)
#define ADC_ETC_DMA_CTRL_TRIG4_ENABLE_SHIFT      (4U)
#define ADC_ETC_DMA_CTRL_TRIG5_ENABLE_MASK       (0x20U)
#define ADC_ETC_DMA_CTRL_TRIG5_ENABLE_SHIFT      (5U)
#define ADC_ETC_DMA_CTRL_TRIG6_ENABLE_MASK       (0x40U)
#define ADC_ETC_DMA_CTRL_TRIG6_ENABLE_SHIFT      (6U)
#define ADC_ETC_DMA_CTRL_TRIG7_ENABLE_MASK       (0x80U)
#define ADC_ETC_DMA_CTRL_TRIG7_ENABLE_SHIFT      (7U)
#define ADC_ETC_DMA_CTRL_TRIG0_REQ_MASK          (0x10000U)
#define ADC_ETC_DMA_CTRL_TRIG0_REQ_SHIFT         (16U)
#define ADC_ETC_DMA_CTRL_TRIG1_REQ_MASK          (0x20000U)
#define ADC_ETC_DMA_CTRL_TRIG1_REQ_SHIFT         (17U)
#define ADC_ETC_DMA_CTRL_TRIG2_REQ_MASK          (0x40000U)
#define ADC_ETC_DMA_CTRL_TRIG2_REQ_SHIFT         (18U)
#define ADC_ETC_DMA_CTRL_TRIG3_REQ_MASK          (0x80000U)
#define ADC_ETC_DMA_CTRL_TRIG3_REQ_SHIFT         (19U)
#define ADC_ETC_DMA_CTRL_TRIG4_REQ_MASK          (0x100000U)
#define ADC_ETC_DMA_CTRL_TRIG4_REQ_SHIFT         (20U)
#define ADC_ETC_DMA_CTRL_TRIG5_REQ_MASK          (0x200000U)
#define ADC_ETC_DMA_CTRL_TRIG5_REQ_SHIFT         (21U)
#define ADC_ETC_DMA_CTRL_TRIG6_REQ_MASK          (0x400000U)
#define ADC_ETC_DMA_CTRL_TRIG6_REQ_SHIFT         (22U)
#define ADC_ETC_DMA_CTRL_TRIG7_REQ_MASK          (0x800000U)
#define ADC_ETC_DMA_CTRL_TRIG7_REQ_SHIFT         (23U)

/*! @name TRIGn_CTRL - ETC_TRIG0 Control Register..ETC_TRIG7 Control Register */
#define ADC_ETC_TRIGn_CTRL_SW_TRIG_MASK          (0x1U)
#define ADC_ETC_TRIGn_CTRL_SW_TRIG_SHIFT         (0U)
#define ADC_ETC_TRIGn_CTRL_TRIG_MODE_MASK        (0x10U)
#define ADC_ETC_TRIGn_CTRL_TRIG_MODE_SHIFT       (4U)
#define ADC_ETC_TRIGn_CTRL_TRIG_CHAIN_MASK       (0x700U)
#define ADC_ETC_TRIGn_CTRL_TRIG_CHAIN_SHIFT      (8U)
#define ADC_ETC_TRIGn_CTRL_TRIG_CHAIN(x)         (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CTRL_TRIG_CHAIN_SHIFT)) & ADC_ETC_TRIGn_CTRL_TRIG_CHAIN_MASK)
#define ADC_ETC_TRIGn_CTRL_TRIG_PRIORITY_MASK    (0x7000U)
#define ADC_ETC_TRIGn_CTRL_TRIG_PRIORITY_SHIFT   (12U)
#define ADC_ETC_TRIGn_CTRL_TRIG_PRIORITY(x)      (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CTRL_TRIG_PRIORITY_SHIFT)) & ADC_ETC_TRIGn_CTRL_TRIG_PRIORITY_MASK)
#define ADC_ETC_TRIGn_CTRL_SYNC_MODE_MASK        (0x10000U)
#define ADC_ETC_TRIGn_CTRL_SYNC_MODE_SHIFT       (16U)

/* The count of ADC_ETC_TRIGn_CTRL */
#define ADC_ETC_TRIGn_CTRL_COUNT                 (8U)

/*! @name TRIGn_COUNTER - ETC_TRIG0 Counter Register..ETC_TRIG7 Counter Register */
#define ADC_ETC_TRIGn_COUNTER_INIT_DELAY_MASK    (0xFFFFU)
#define ADC_ETC_TRIGn_COUNTER_INIT_DELAY_SHIFT   (0U)
#define ADC_ETC_TRIGn_COUNTER_INIT_DELAY(x)      (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_COUNTER_INIT_DELAY_SHIFT)) & ADC_ETC_TRIGn_COUNTER_INIT_DELAY_MASK)
#define ADC_ETC_TRIGn_COUNTER_SAMPLE_INTERVAL_MASK (0xFFFF0000U)
#define ADC_ETC_TRIGn_COUNTER_SAMPLE_INTERVAL_SHIFT (16U)
#define ADC_ETC_TRIGn_COUNTER_SAMPLE_INTERVAL(x) (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_COUNTER_SAMPLE_INTERVAL_SHIFT)) & ADC_ETC_TRIGn_COUNTER_SAMPLE_INTERVAL_MASK)

/* The count of ADC_ETC_TRIGn_COUNTER */
#define ADC_ETC_TRIGn_COUNTER_COUNT              (8U)

/*! @name TRIGn_CHAIN_1_0 - ETC_TRIG Chain 0/1 Register */
#define ADC_ETC_TRIGn_CHAIN_1_0_CSEL0_MASK       (0xFU)
#define ADC_ETC_TRIGn_CHAIN_1_0_CSEL0_SHIFT      (0U)
#define ADC_ETC_TRIGn_CHAIN_1_0_CSEL0(x)         (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_1_0_CSEL0_SHIFT)) & ADC_ETC_TRIGn_CHAIN_1_0_CSEL0_MASK)
#define ADC_ETC_TRIGn_CHAIN_1_0_HWTS0_MASK       (0xFF0U)
#define ADC_ETC_TRIGn_CHAIN_1_0_HWTS0_SHIFT      (4U)
#define ADC_ETC_TRIGn_CHAIN_1_0_HWTS0(x)         (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_1_0_HWTS0_SHIFT)) & ADC_ETC_TRIGn_CHAIN_1_0_HWTS0_MASK)
#define ADC_ETC_TRIGn_CHAIN_1_0_B2B0_MASK        (0x1000U)
#define ADC_ETC_TRIGn_CHAIN_1_0_B2B0_SHIFT       (12U)
#define ADC_ETC_TRIGn_CHAIN_1_0_IE0_MASK         (0x6000U)
#define ADC_ETC_TRIGn_CHAIN_1_0_IE0_SHIFT        (13U)
#define ADC_ETC_TRIGn_CHAIN_1_0_IE0(x)           (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_1_0_IE0_SHIFT)) & ADC_ETC_TRIGn_CHAIN_1_0_IE0_MASK)
#define ADC_ETC_TRIGn_CHAIN_1_0_CSEL1_MASK       (0xF0000U)
#define ADC_ETC_TRIGn_CHAIN_1_0_CSEL1_SHIFT      (16U)
#define ADC_ETC_TRIGn_CHAIN_1_0_CSEL1(x)         (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_1_0_CSEL1_SHIFT)) & ADC_ETC_TRIGn_CHAIN_1_0_CSEL1_MASK)
#define ADC_ETC_TRIGn_CHAIN_1_0_HWTS1_MASK       (0xFF00000U)
#define ADC_ETC_TRIGn_CHAIN_1_0_HWTS1_SHIFT      (20U)
#define ADC_ETC_TRIGn_CHAIN_1_0_HWTS1(x)         (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_1_0_HWTS1_SHIFT)) & ADC_ETC_TRIGn_CHAIN_1_0_HWTS1_MASK)
#define ADC_ETC_TRIGn_CHAIN_1_0_B2B1_MASK        (0x10000000U)
#define ADC_ETC_TRIGn_CHAIN_1_0_B2B1_SHIFT       (28U)
#define ADC_ETC_TRIGn_CHAIN_1_0_IE1_MASK         (0x60000000U)
#define ADC_ETC_TRIGn_CHAIN_1_0_IE1_SHIFT        (29U)
#define ADC_ETC_TRIGn_CHAIN_1_0_IE1(x)           (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_1_0_IE1_SHIFT)) & ADC_ETC_TRIGn_CHAIN_1_0_IE1_MASK)

/* The count of ADC_ETC_TRIGn_CHAIN_1_0 */
#define ADC_ETC_TRIGn_CHAIN_1_0_COUNT            (8U)

/*! @name TRIGn_CHAIN_3_2 - ETC_TRIG Chain 2/3 Register */
#define ADC_ETC_TRIGn_CHAIN_3_2_CSEL2_MASK       (0xFU)
#define ADC_ETC_TRIGn_CHAIN_3_2_CSEL2_SHIFT      (0U)
#define ADC_ETC_TRIGn_CHAIN_3_2_CSEL2(x)         (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_3_2_CSEL2_SHIFT)) & ADC_ETC_TRIGn_CHAIN_3_2_CSEL2_MASK)
#define ADC_ETC_TRIGn_CHAIN_3_2_HWTS2_MASK       (0xFF0U)
#define ADC_ETC_TRIGn_CHAIN_3_2_HWTS2_SHIFT      (4U)
#define ADC_ETC_TRIGn_CHAIN_3_2_HWTS2(x)         (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_3_2_HWTS2_SHIFT)) & ADC_ETC_TRIGn_CHAIN_3_2_HWTS2_MASK)
#define ADC_ETC_TRIGn_CHAIN_3_2_B2B2_MASK        (0x1000U)
#define ADC_ETC_TRIGn_CHAIN_3_2_B2B2_SHIFT       (12U)
#define ADC_ETC_TRIGn_CHAIN_3_2_IE2_MASK         (0x6000U)
#define ADC_ETC_TRIGn_CHAIN_3_2_IE2_SHIFT        (13U)
#define ADC_ETC_TRIGn_CHAIN_3_2_IE2(x)           (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_3_2_IE2_SHIFT)) & ADC_ETC_TRIGn_CHAIN_3_2_IE2_MASK)
#define ADC_ETC_TRIGn_CHAIN_3_2_CSEL3_MASK       (0xF0000U)
#define ADC_ETC_TRIGn_CHAIN_3_2_CSEL3_SHIFT      (16U)
#define ADC_ETC_TRIGn_CHAIN_3_2_CSEL3(x)         (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_3_2_CSEL3_SHIFT)) & ADC_ETC_TRIGn_CHAIN_3_2_CSEL3_MASK)
#define ADC_ETC_TRIGn_CHAIN_3_2_HWTS3_MASK       (0xFF00000U)
#define ADC_ETC_TRIGn_CHAIN_3_2_HWTS3_SHIFT      (20U)
#define ADC_ETC_TRIGn_CHAIN_3_2_HWTS3(x)         (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_3_2_HWTS3_SHIFT)) & ADC_ETC_TRIGn_CHAIN_3_2_HWTS3_MASK)
#define ADC_ETC_TRIGn_CHAIN_3_2_B2B3_MASK        (0x10000000U)
#define ADC_ETC_TRIGn_CHAIN_3_2_B2B3_SHIFT       (28U)
#define ADC_ETC_TRIGn_CHAIN_3_2_IE3_MASK         (0x60000000U)
#define ADC_ETC_TRIGn_CHAIN_3_2_IE3_SHIFT        (29U)
#define ADC_ETC_TRIGn_CHAIN_3_2_IE3(x)           (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_3_2_IE3_SHIFT)) & ADC_ETC_TRIGn_CHAIN_3_2_IE3_MASK)

/* The count of ADC_ETC_TRIGn_CHAIN_3_2 */
#define ADC_ETC_TRIGn_CHAIN_3_2_COUNT            (8U)

/*! @name TRIGn_CHAIN_5_4 - ETC_TRIG Chain 4/5 Register */
#define ADC_ETC_TRIGn_CHAIN_5_4_CSEL4_MASK       (0xFU)
#define ADC_ETC_TRIGn_CHAIN_5_4_CSEL4_SHIFT      (0U)
#define ADC_ETC_TRIGn_CHAIN_5_4_CSEL4(x)         (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_5_4_CSEL4_SHIFT)) & ADC_ETC_TRIGn_CHAIN_5_4_CSEL4_MASK)
#define ADC_ETC_TRIGn_CHAIN_5_4_HWTS4_MASK       (0xFF0U)
#define ADC_ETC_TRIGn_CHAIN_5_4_HWTS4_SHIFT      (4U)
#define ADC_ETC_TRIGn_CHAIN_5_4_HWTS4(x)         (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_5_4_HWTS4_SHIFT)) & ADC_ETC_TRIGn_CHAIN_5_4_HWTS4_MASK)
#define ADC_ETC_TRIGn_CHAIN_5_4_B2B4_MASK        (0x1000U)
#define ADC_ETC_TRIGn_CHAIN_5_4_B2B4_SHIFT       (12U)
#define ADC_ETC_TRIGn_CHAIN_5_4_IE4_MASK         (0x6000U)
#define ADC_ETC_TRIGn_CHAIN_5_4_IE4_SHIFT        (13U)
#define ADC_ETC_TRIGn_CHAIN_5_4_IE4(x)           (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_5_4_IE4_SHIFT)) & ADC_ETC_TRIGn_CHAIN_5_4_IE4_MASK)
#define ADC_ETC_TRIGn_CHAIN_5_4_CSEL5_MASK       (0xF0000U)
#define ADC_ETC_TRIGn_CHAIN_5_4_CSEL5_SHIFT      (16U)
#define ADC_ETC_TRIGn_CHAIN_5_4_CSEL5(x)         (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_5_4_CSEL5_SHIFT)) & ADC_ETC_TRIGn_CHAIN_5_4_CSEL5_MASK)
#define ADC_ETC_TRIGn_CHAIN_5_4_HWTS5_MASK       (0xFF00000U)
#define ADC_ETC_TRIGn_CHAIN_5_4_HWTS5_SHIFT      (20U)
#define ADC_ETC_TRIGn_CHAIN_5_4_HWTS5(x)         (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_5_4_HWTS5_SHIFT)) & ADC_ETC_TRIGn_CHAIN_5_4_HWTS5_MASK)
#define ADC_ETC_TRIGn_CHAIN_5_4_B2B5_MASK        (0x10000000U)
#define ADC_ETC_TRIGn_CHAIN_5_4_B2B5_SHIFT       (28U)
#define ADC_ETC_TRIGn_CHAIN_5_4_IE5_MASK         (0x60000000U)
#define ADC_ETC_TRIGn_CHAIN_5_4_IE5_SHIFT        (29U)
#define ADC_ETC_TRIGn_CHAIN_5_4_IE5(x)           (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_5_4_IE5_SHIFT)) & ADC_ETC_TRIGn_CHAIN_5_4_IE5_MASK)

/* The count of ADC_ETC_TRIGn_CHAIN_5_4 */
#define ADC_ETC_TRIGn_CHAIN_5_4_COUNT            (8U)

/*! @name TRIGn_CHAIN_7_6 - ETC_TRIG Chain 6/7 Register */
#define ADC_ETC_TRIGn_CHAIN_7_6_CSEL6_MASK       (0xFU)
#define ADC_ETC_TRIGn_CHAIN_7_6_CSEL6_SHIFT      (0U)
#define ADC_ETC_TRIGn_CHAIN_7_6_CSEL6(x)         (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_7_6_CSEL6_SHIFT)) & ADC_ETC_TRIGn_CHAIN_7_6_CSEL6_MASK)
#define ADC_ETC_TRIGn_CHAIN_7_6_HWTS6_MASK       (0xFF0U)
#define ADC_ETC_TRIGn_CHAIN_7_6_HWTS6_SHIFT      (4U)
#define ADC_ETC_TRIGn_CHAIN_7_6_HWTS6(x)         (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_7_6_HWTS6_SHIFT)) & ADC_ETC_TRIGn_CHAIN_7_6_HWTS6_MASK)
#define ADC_ETC_TRIGn_CHAIN_7_6_B2B6_MASK        (0x1000U)
#define ADC_ETC_TRIGn_CHAIN_7_6_B2B6_SHIFT       (12U)
#define ADC_ETC_TRIGn_CHAIN_7_6_IE6_MASK         (0x6000U)
#define ADC_ETC_TRIGn_CHAIN_7_6_IE6_SHIFT        (13U)
#define ADC_ETC_TRIGn_CHAIN_7_6_IE6(x)           (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_7_6_IE6_SHIFT)) & ADC_ETC_TRIGn_CHAIN_7_6_IE6_MASK)
#define ADC_ETC_TRIGn_CHAIN_7_6_CSEL7_MASK       (0xF0000U)
#define ADC_ETC_TRIGn_CHAIN_7_6_CSEL7_SHIFT      (16U)
#define ADC_ETC_TRIGn_CHAIN_7_6_CSEL7(x)         (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_7_6_CSEL7_SHIFT)) & ADC_ETC_TRIGn_CHAIN_7_6_CSEL7_MASK)
#define ADC_ETC_TRIGn_CHAIN_7_6_HWTS7_MASK       (0xFF00000U)
#define ADC_ETC_TRIGn_CHAIN_7_6_HWTS7_SHIFT      (20U)
#define ADC_ETC_TRIGn_CHAIN_7_6_HWTS7(x)         (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_7_6_HWTS7_SHIFT)) & ADC_ETC_TRIGn_CHAIN_7_6_HWTS7_MASK)
#define ADC_ETC_TRIGn_CHAIN_7_6_B2B7_MASK        (0x10000000U)
#define ADC_ETC_TRIGn_CHAIN_7_6_B2B7_SHIFT       (28U)
#define ADC_ETC_TRIGn_CHAIN_7_6_IE7_MASK         (0x60000000U)
#define ADC_ETC_TRIGn_CHAIN_7_6_IE7_SHIFT        (29U)
#define ADC_ETC_TRIGn_CHAIN_7_6_IE7(x)           (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_CHAIN_7_6_IE7_SHIFT)) & ADC_ETC_TRIGn_CHAIN_7_6_IE7_MASK)

/* The count of ADC_ETC_TRIGn_CHAIN_7_6 */
#define ADC_ETC_TRIGn_CHAIN_7_6_COUNT            (8U)

/*! @name TRIGn_RESULT_1_0 - ETC_TRIG Result Data 1/0 Register */
#define ADC_ETC_TRIGn_RESULT_1_0_DATA0_MASK      (0xFFFU)
#define ADC_ETC_TRIGn_RESULT_1_0_DATA0_SHIFT     (0U)
#define ADC_ETC_TRIGn_RESULT_1_0_DATA0(x)        (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_RESULT_1_0_DATA0_SHIFT)) & ADC_ETC_TRIGn_RESULT_1_0_DATA0_MASK)
#define ADC_ETC_TRIGn_RESULT_1_0_DATA1_MASK      (0xFFF0000U)
#define ADC_ETC_TRIGn_RESULT_1_0_DATA1_SHIFT     (16U)
#define ADC_ETC_TRIGn_RESULT_1_0_DATA1(x)        (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_RESULT_1_0_DATA1_SHIFT)) & ADC_ETC_TRIGn_RESULT_1_0_DATA1_MASK)

/* The count of ADC_ETC_TRIGn_RESULT_1_0 */
#define ADC_ETC_TRIGn_RESULT_1_0_COUNT           (8U)

/*! @name TRIGn_RESULT_3_2 - ETC_TRIG Result Data 3/2 Register */
#define ADC_ETC_TRIGn_RESULT_3_2_DATA2_MASK      (0xFFFU)
#define ADC_ETC_TRIGn_RESULT_3_2_DATA2_SHIFT     (0U)
#define ADC_ETC_TRIGn_RESULT_3_2_DATA2(x)        (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_RESULT_3_2_DATA2_SHIFT)) & ADC_ETC_TRIGn_RESULT_3_2_DATA2_MASK)
#define ADC_ETC_TRIGn_RESULT_3_2_DATA3_MASK      (0xFFF0000U)
#define ADC_ETC_TRIGn_RESULT_3_2_DATA3_SHIFT     (16U)
#define ADC_ETC_TRIGn_RESULT_3_2_DATA3(x)        (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_RESULT_3_2_DATA3_SHIFT)) & ADC_ETC_TRIGn_RESULT_3_2_DATA3_MASK)

/* The count of ADC_ETC_TRIGn_RESULT_3_2 */
#define ADC_ETC_TRIGn_RESULT_3_2_COUNT           (8U)

/*! @name TRIGn_RESULT_5_4 - ETC_TRIG Result Data 5/4 Register */
#define ADC_ETC_TRIGn_RESULT_5_4_DATA4_MASK      (0xFFFU)
#define ADC_ETC_TRIGn_RESULT_5_4_DATA4_SHIFT     (0U)
#define ADC_ETC_TRIGn_RESULT_5_4_DATA4(x)        (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_RESULT_5_4_DATA4_SHIFT)) & ADC_ETC_TRIGn_RESULT_5_4_DATA4_MASK)
#define ADC_ETC_TRIGn_RESULT_5_4_DATA5_MASK      (0xFFF0000U)
#define ADC_ETC_TRIGn_RESULT_5_4_DATA5_SHIFT     (16U)
#define ADC_ETC_TRIGn_RESULT_5_4_DATA5(x)        (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_RESULT_5_4_DATA5_SHIFT)) & ADC_ETC_TRIGn_RESULT_5_4_DATA5_MASK)

/* The count of ADC_ETC_TRIGn_RESULT_5_4 */
#define ADC_ETC_TRIGn_RESULT_5_4_COUNT           (8U)

/*! @name TRIGn_RESULT_7_6 - ETC_TRIG Result Data 7/6 Register */
#define ADC_ETC_TRIGn_RESULT_7_6_DATA6_MASK      (0xFFFU)
#define ADC_ETC_TRIGn_RESULT_7_6_DATA6_SHIFT     (0U)
#define ADC_ETC_TRIGn_RESULT_7_6_DATA6(x)        (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_RESULT_7_6_DATA6_SHIFT)) & ADC_ETC_TRIGn_RESULT_7_6_DATA6_MASK)
#define ADC_ETC_TRIGn_RESULT_7_6_DATA7_MASK      (0xFFF0000U)
#define ADC_ETC_TRIGn_RESULT_7_6_DATA7_SHIFT     (16U)
#define ADC_ETC_TRIGn_RESULT_7_6_DATA7(x)        (((uint32_t)(((uint32_t)(x)) << ADC_ETC_TRIGn_RESULT_7_6_DATA7_SHIFT)) & ADC_ETC_TRIGn_RESULT_7_6_DATA7_MASK)

/* The count of ADC_ETC_TRIGn_RESULT_7_6 */
#define ADC_ETC_TRIGn_RESULT_7_6_COUNT           (8U)


/*!
 * @}
 */ /* end of group ADC_ETC_Register_Masks */


/* ADC_ETC - Peripheral instance base addresses */
/** Peripheral ADC_ETC base pointer */
#define ADC_ETC_BASE_PTR                         ((ADC_ETC_MemMapPtr)0x403B0000u)
/** Array initializer of ADC_ETC peripheral base pointers */
#define ADC_ETC_BASE_PTRS                        { ADC_ETC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- ADC_ETC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ADC_ETC_Register_Accessor_Macros ADC_ETC - Register accessor macros
 * @{
 */


/* ADC_ETC - Register instance definitions */
/* ADC_ETC */
#define ADC_ETC_CTRL                             ADC_ETC_CTRL_REG(ADC_ETC_BASE_PTR)
#define ADC_ETC_DONE0_1_IRQ                      ADC_ETC_DONE0_1_IRQ_REG(ADC_ETC_BASE_PTR)
#define ADC_ETC_DONE2_ERR_IRQ                    ADC_ETC_DONE2_ERR_IRQ_REG(ADC_ETC_BASE_PTR)
#define ADC_ETC_DMA_CTRL                         ADC_ETC_DMA_CTRL_REG(ADC_ETC_BASE_PTR)
#define ADC_ETC_TRIG0_CTRL                       ADC_ETC_TRIGn_CTRL_REG(ADC_ETC_BASE_PTR,0)
#define ADC_ETC_TRIG0_COUNTER                    ADC_ETC_TRIGn_COUNTER_REG(ADC_ETC_BASE_PTR,0)
#define ADC_ETC_TRIG0_CHAIN_1_0                  ADC_ETC_TRIGn_CHAIN_1_0_REG(ADC_ETC_BASE_PTR,0)
#define ADC_ETC_TRIG0_CHAIN_3_2                  ADC_ETC_TRIGn_CHAIN_3_2_REG(ADC_ETC_BASE_PTR,0)
#define ADC_ETC_TRIG0_CHAIN_5_4                  ADC_ETC_TRIGn_CHAIN_5_4_REG(ADC_ETC_BASE_PTR,0)
#define ADC_ETC_TRIG0_CHAIN_7_6                  ADC_ETC_TRIGn_CHAIN_7_6_REG(ADC_ETC_BASE_PTR,0)
#define ADC_ETC_TRIG0_RESULT_1_0                 ADC_ETC_TRIGn_RESULT_1_0_REG(ADC_ETC_BASE_PTR,0)
#define ADC_ETC_TRIG0_RESULT_3_2                 ADC_ETC_TRIGn_RESULT_3_2_REG(ADC_ETC_BASE_PTR,0)
#define ADC_ETC_TRIG0_RESULT_5_4                 ADC_ETC_TRIGn_RESULT_5_4_REG(ADC_ETC_BASE_PTR,0)
#define ADC_ETC_TRIG0_RESULT_7_6                 ADC_ETC_TRIGn_RESULT_7_6_REG(ADC_ETC_BASE_PTR,0)
#define ADC_ETC_TRIG1_CTRL                       ADC_ETC_TRIGn_CTRL_REG(ADC_ETC_BASE_PTR,1)
#define ADC_ETC_TRIG1_COUNTER                    ADC_ETC_TRIGn_COUNTER_REG(ADC_ETC_BASE_PTR,1)
#define ADC_ETC_TRIG1_CHAIN_1_0                  ADC_ETC_TRIGn_CHAIN_1_0_REG(ADC_ETC_BASE_PTR,1)
#define ADC_ETC_TRIG1_CHAIN_3_2                  ADC_ETC_TRIGn_CHAIN_3_2_REG(ADC_ETC_BASE_PTR,1)
#define ADC_ETC_TRIG1_CHAIN_5_4                  ADC_ETC_TRIGn_CHAIN_5_4_REG(ADC_ETC_BASE_PTR,1)
#define ADC_ETC_TRIG1_CHAIN_7_6                  ADC_ETC_TRIGn_CHAIN_7_6_REG(ADC_ETC_BASE_PTR,1)
#define ADC_ETC_TRIG1_RESULT_1_0                 ADC_ETC_TRIGn_RESULT_1_0_REG(ADC_ETC_BASE_PTR,1)
#define ADC_ETC_TRIG1_RESULT_3_2                 ADC_ETC_TRIGn_RESULT_3_2_REG(ADC_ETC_BASE_PTR,1)
#define ADC_ETC_TRIG1_RESULT_5_4                 ADC_ETC_TRIGn_RESULT_5_4_REG(ADC_ETC_BASE_PTR,1)
#define ADC_ETC_TRIG1_RESULT_7_6                 ADC_ETC_TRIGn_RESULT_7_6_REG(ADC_ETC_BASE_PTR,1)
#define ADC_ETC_TRIG2_CTRL                       ADC_ETC_TRIGn_CTRL_REG(ADC_ETC_BASE_PTR,2)
#define ADC_ETC_TRIG2_COUNTER                    ADC_ETC_TRIGn_COUNTER_REG(ADC_ETC_BASE_PTR,2)
#define ADC_ETC_TRIG2_CHAIN_1_0                  ADC_ETC_TRIGn_CHAIN_1_0_REG(ADC_ETC_BASE_PTR,2)
#define ADC_ETC_TRIG2_CHAIN_3_2                  ADC_ETC_TRIGn_CHAIN_3_2_REG(ADC_ETC_BASE_PTR,2)
#define ADC_ETC_TRIG2_CHAIN_5_4                  ADC_ETC_TRIGn_CHAIN_5_4_REG(ADC_ETC_BASE_PTR,2)
#define ADC_ETC_TRIG2_CHAIN_7_6                  ADC_ETC_TRIGn_CHAIN_7_6_REG(ADC_ETC_BASE_PTR,2)
#define ADC_ETC_TRIG2_RESULT_1_0                 ADC_ETC_TRIGn_RESULT_1_0_REG(ADC_ETC_BASE_PTR,2)
#define ADC_ETC_TRIG2_RESULT_3_2                 ADC_ETC_TRIGn_RESULT_3_2_REG(ADC_ETC_BASE_PTR,2)
#define ADC_ETC_TRIG2_RESULT_5_4                 ADC_ETC_TRIGn_RESULT_5_4_REG(ADC_ETC_BASE_PTR,2)
#define ADC_ETC_TRIG2_RESULT_7_6                 ADC_ETC_TRIGn_RESULT_7_6_REG(ADC_ETC_BASE_PTR,2)
#define ADC_ETC_TRIG3_CTRL                       ADC_ETC_TRIGn_CTRL_REG(ADC_ETC_BASE_PTR,3)
#define ADC_ETC_TRIG3_COUNTER                    ADC_ETC_TRIGn_COUNTER_REG(ADC_ETC_BASE_PTR,3)
#define ADC_ETC_TRIG3_CHAIN_1_0                  ADC_ETC_TRIGn_CHAIN_1_0_REG(ADC_ETC_BASE_PTR,3)
#define ADC_ETC_TRIG3_CHAIN_3_2                  ADC_ETC_TRIGn_CHAIN_3_2_REG(ADC_ETC_BASE_PTR,3)
#define ADC_ETC_TRIG3_CHAIN_5_4                  ADC_ETC_TRIGn_CHAIN_5_4_REG(ADC_ETC_BASE_PTR,3)
#define ADC_ETC_TRIG3_CHAIN_7_6                  ADC_ETC_TRIGn_CHAIN_7_6_REG(ADC_ETC_BASE_PTR,3)
#define ADC_ETC_TRIG3_RESULT_1_0                 ADC_ETC_TRIGn_RESULT_1_0_REG(ADC_ETC_BASE_PTR,3)
#define ADC_ETC_TRIG3_RESULT_3_2                 ADC_ETC_TRIGn_RESULT_3_2_REG(ADC_ETC_BASE_PTR,3)
#define ADC_ETC_TRIG3_RESULT_5_4                 ADC_ETC_TRIGn_RESULT_5_4_REG(ADC_ETC_BASE_PTR,3)
#define ADC_ETC_TRIG3_RESULT_7_6                 ADC_ETC_TRIGn_RESULT_7_6_REG(ADC_ETC_BASE_PTR,3)
#define ADC_ETC_TRIG4_CTRL                       ADC_ETC_TRIGn_CTRL_REG(ADC_ETC_BASE_PTR,4)
#define ADC_ETC_TRIG4_COUNTER                    ADC_ETC_TRIGn_COUNTER_REG(ADC_ETC_BASE_PTR,4)
#define ADC_ETC_TRIG4_CHAIN_1_0                  ADC_ETC_TRIGn_CHAIN_1_0_REG(ADC_ETC_BASE_PTR,4)
#define ADC_ETC_TRIG4_CHAIN_3_2                  ADC_ETC_TRIGn_CHAIN_3_2_REG(ADC_ETC_BASE_PTR,4)
#define ADC_ETC_TRIG4_CHAIN_5_4                  ADC_ETC_TRIGn_CHAIN_5_4_REG(ADC_ETC_BASE_PTR,4)
#define ADC_ETC_TRIG4_CHAIN_7_6                  ADC_ETC_TRIGn_CHAIN_7_6_REG(ADC_ETC_BASE_PTR,4)
#define ADC_ETC_TRIG4_RESULT_1_0                 ADC_ETC_TRIGn_RESULT_1_0_REG(ADC_ETC_BASE_PTR,4)
#define ADC_ETC_TRIG4_RESULT_3_2                 ADC_ETC_TRIGn_RESULT_3_2_REG(ADC_ETC_BASE_PTR,4)
#define ADC_ETC_TRIG4_RESULT_5_4                 ADC_ETC_TRIGn_RESULT_5_4_REG(ADC_ETC_BASE_PTR,4)
#define ADC_ETC_TRIG4_RESULT_7_6                 ADC_ETC_TRIGn_RESULT_7_6_REG(ADC_ETC_BASE_PTR,4)
#define ADC_ETC_TRIG5_CTRL                       ADC_ETC_TRIGn_CTRL_REG(ADC_ETC_BASE_PTR,5)
#define ADC_ETC_TRIG5_COUNTER                    ADC_ETC_TRIGn_COUNTER_REG(ADC_ETC_BASE_PTR,5)
#define ADC_ETC_TRIG5_CHAIN_1_0                  ADC_ETC_TRIGn_CHAIN_1_0_REG(ADC_ETC_BASE_PTR,5)
#define ADC_ETC_TRIG5_CHAIN_3_2                  ADC_ETC_TRIGn_CHAIN_3_2_REG(ADC_ETC_BASE_PTR,5)
#define ADC_ETC_TRIG5_CHAIN_5_4                  ADC_ETC_TRIGn_CHAIN_5_4_REG(ADC_ETC_BASE_PTR,5)
#define ADC_ETC_TRIG5_CHAIN_7_6                  ADC_ETC_TRIGn_CHAIN_7_6_REG(ADC_ETC_BASE_PTR,5)
#define ADC_ETC_TRIG5_RESULT_1_0                 ADC_ETC_TRIGn_RESULT_1_0_REG(ADC_ETC_BASE_PTR,5)
#define ADC_ETC_TRIG5_RESULT_3_2                 ADC_ETC_TRIGn_RESULT_3_2_REG(ADC_ETC_BASE_PTR,5)
#define ADC_ETC_TRIG5_RESULT_5_4                 ADC_ETC_TRIGn_RESULT_5_4_REG(ADC_ETC_BASE_PTR,5)
#define ADC_ETC_TRIG5_RESULT_7_6                 ADC_ETC_TRIGn_RESULT_7_6_REG(ADC_ETC_BASE_PTR,5)
#define ADC_ETC_TRIG6_CTRL                       ADC_ETC_TRIGn_CTRL_REG(ADC_ETC_BASE_PTR,6)
#define ADC_ETC_TRIG6_COUNTER                    ADC_ETC_TRIGn_COUNTER_REG(ADC_ETC_BASE_PTR,6)
#define ADC_ETC_TRIG6_CHAIN_1_0                  ADC_ETC_TRIGn_CHAIN_1_0_REG(ADC_ETC_BASE_PTR,6)
#define ADC_ETC_TRIG6_CHAIN_3_2                  ADC_ETC_TRIGn_CHAIN_3_2_REG(ADC_ETC_BASE_PTR,6)
#define ADC_ETC_TRIG6_CHAIN_5_4                  ADC_ETC_TRIGn_CHAIN_5_4_REG(ADC_ETC_BASE_PTR,6)
#define ADC_ETC_TRIG6_CHAIN_7_6                  ADC_ETC_TRIGn_CHAIN_7_6_REG(ADC_ETC_BASE_PTR,6)
#define ADC_ETC_TRIG6_RESULT_1_0                 ADC_ETC_TRIGn_RESULT_1_0_REG(ADC_ETC_BASE_PTR,6)
#define ADC_ETC_TRIG6_RESULT_3_2                 ADC_ETC_TRIGn_RESULT_3_2_REG(ADC_ETC_BASE_PTR,6)
#define ADC_ETC_TRIG6_RESULT_5_4                 ADC_ETC_TRIGn_RESULT_5_4_REG(ADC_ETC_BASE_PTR,6)
#define ADC_ETC_TRIG6_RESULT_7_6                 ADC_ETC_TRIGn_RESULT_7_6_REG(ADC_ETC_BASE_PTR,6)
#define ADC_ETC_TRIG7_CTRL                       ADC_ETC_TRIGn_CTRL_REG(ADC_ETC_BASE_PTR,7)
#define ADC_ETC_TRIG7_COUNTER                    ADC_ETC_TRIGn_COUNTER_REG(ADC_ETC_BASE_PTR,7)
#define ADC_ETC_TRIG7_CHAIN_1_0                  ADC_ETC_TRIGn_CHAIN_1_0_REG(ADC_ETC_BASE_PTR,7)
#define ADC_ETC_TRIG7_CHAIN_3_2                  ADC_ETC_TRIGn_CHAIN_3_2_REG(ADC_ETC_BASE_PTR,7)
#define ADC_ETC_TRIG7_CHAIN_5_4                  ADC_ETC_TRIGn_CHAIN_5_4_REG(ADC_ETC_BASE_PTR,7)
#define ADC_ETC_TRIG7_CHAIN_7_6                  ADC_ETC_TRIGn_CHAIN_7_6_REG(ADC_ETC_BASE_PTR,7)
#define ADC_ETC_TRIG7_RESULT_1_0                 ADC_ETC_TRIGn_RESULT_1_0_REG(ADC_ETC_BASE_PTR,7)
#define ADC_ETC_TRIG7_RESULT_3_2                 ADC_ETC_TRIGn_RESULT_3_2_REG(ADC_ETC_BASE_PTR,7)
#define ADC_ETC_TRIG7_RESULT_5_4                 ADC_ETC_TRIGn_RESULT_5_4_REG(ADC_ETC_BASE_PTR,7)
#define ADC_ETC_TRIG7_RESULT_7_6                 ADC_ETC_TRIGn_RESULT_7_6_REG(ADC_ETC_BASE_PTR,7)

/* ADC_ETC - Register array accessors */
#define ADC_ETC_TRIGn_CTRL(index)                ADC_ETC_TRIGn_CTRL_REG(ADC_ETC_BASE_PTR,index)
#define ADC_ETC_TRIGn_COUNTER(index)             ADC_ETC_TRIGn_COUNTER_REG(ADC_ETC_BASE_PTR,index)
#define ADC_ETC_TRIGn_CHAIN_1_0(index)           ADC_ETC_TRIGn_CHAIN_1_0_REG(ADC_ETC_BASE_PTR,index)
#define ADC_ETC_TRIGn_CHAIN_3_2(index)           ADC_ETC_TRIGn_CHAIN_3_2_REG(ADC_ETC_BASE_PTR,index)
#define ADC_ETC_TRIGn_CHAIN_5_4(index)           ADC_ETC_TRIGn_CHAIN_5_4_REG(ADC_ETC_BASE_PTR,index)
#define ADC_ETC_TRIGn_CHAIN_7_6(index)           ADC_ETC_TRIGn_CHAIN_7_6_REG(ADC_ETC_BASE_PTR,index)
#define ADC_ETC_TRIGn_RESULT_1_0(index)          ADC_ETC_TRIGn_RESULT_1_0_REG(ADC_ETC_BASE_PTR,index)
#define ADC_ETC_TRIGn_RESULT_3_2(index)          ADC_ETC_TRIGn_RESULT_3_2_REG(ADC_ETC_BASE_PTR,index)
#define ADC_ETC_TRIGn_RESULT_5_4(index)          ADC_ETC_TRIGn_RESULT_5_4_REG(ADC_ETC_BASE_PTR,index)
#define ADC_ETC_TRIGn_RESULT_7_6(index)          ADC_ETC_TRIGn_RESULT_7_6_REG(ADC_ETC_BASE_PTR,index)

/*!
 * @}
 */ /* end of group ADC_ETC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group ADC_ETC_Peripheral */


/* ----------------------------------------------------------------------------
   -- AIPSTZ
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AIPSTZ_Peripheral AIPSTZ
 * @{
 */

/** AIPSTZ - Peripheral register structure */
typedef struct AIPSTZ_MemMap {
  uint32_t MPR;                                    /**< Master Priviledge Registers, offset: 0x0 */
  uint8_t RESERVED_0[60];
  uint32_t OPACR;                                  /**< Off-Platform Peripheral Access Control Registers, offset: 0x40 */
  uint32_t OPACR1;                                 /**< Off-Platform Peripheral Access Control Registers, offset: 0x44 */
  uint32_t OPACR2;                                 /**< Off-Platform Peripheral Access Control Registers, offset: 0x48 */
  uint32_t OPACR3;                                 /**< Off-Platform Peripheral Access Control Registers, offset: 0x4C */
  uint32_t OPACR4;                                 /**< Off-Platform Peripheral Access Control Registers, offset: 0x50 */
} volatile *AIPSTZ_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- AIPSTZ - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AIPSTZ_Register_Accessor_Macros AIPSTZ - Register accessor macros
 * @{
 */


/* AIPSTZ - Register accessors */
#define AIPSTZ_MPR_REG(base)                     ((base)->MPR)
#define AIPSTZ_OPACR_REG(base)                   ((base)->OPACR)
#define AIPSTZ_OPACR1_REG(base)                  ((base)->OPACR1)
#define AIPSTZ_OPACR2_REG(base)                  ((base)->OPACR2)
#define AIPSTZ_OPACR3_REG(base)                  ((base)->OPACR3)
#define AIPSTZ_OPACR4_REG(base)                  ((base)->OPACR4)

/*!
 * @}
 */ /* end of group AIPSTZ_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- AIPSTZ Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AIPSTZ_Register_Masks AIPSTZ Register Masks
 * @{
 */

/*! @name MPR - Master Priviledge Registers */
#define AIPSTZ_MPR_MPROT5_MASK                   (0xF00U)
#define AIPSTZ_MPR_MPROT5_SHIFT                  (8U)
#define AIPSTZ_MPR_MPROT5(x)                     (((uint32_t)(((uint32_t)(x)) << AIPSTZ_MPR_MPROT5_SHIFT)) & AIPSTZ_MPR_MPROT5_MASK)
#define AIPSTZ_MPR_MPROT3_MASK                   (0xF0000U)
#define AIPSTZ_MPR_MPROT3_SHIFT                  (16U)
#define AIPSTZ_MPR_MPROT3(x)                     (((uint32_t)(((uint32_t)(x)) << AIPSTZ_MPR_MPROT3_SHIFT)) & AIPSTZ_MPR_MPROT3_MASK)
#define AIPSTZ_MPR_MPROT2_MASK                   (0xF00000U)
#define AIPSTZ_MPR_MPROT2_SHIFT                  (20U)
#define AIPSTZ_MPR_MPROT2(x)                     (((uint32_t)(((uint32_t)(x)) << AIPSTZ_MPR_MPROT2_SHIFT)) & AIPSTZ_MPR_MPROT2_MASK)
#define AIPSTZ_MPR_MPROT1_MASK                   (0xF000000U)
#define AIPSTZ_MPR_MPROT1_SHIFT                  (24U)
#define AIPSTZ_MPR_MPROT1(x)                     (((uint32_t)(((uint32_t)(x)) << AIPSTZ_MPR_MPROT1_SHIFT)) & AIPSTZ_MPR_MPROT1_MASK)
#define AIPSTZ_MPR_MPROT0_MASK                   (0xF0000000U)
#define AIPSTZ_MPR_MPROT0_SHIFT                  (28U)
#define AIPSTZ_MPR_MPROT0(x)                     (((uint32_t)(((uint32_t)(x)) << AIPSTZ_MPR_MPROT0_SHIFT)) & AIPSTZ_MPR_MPROT0_MASK)

/*! @name OPACR - Off-Platform Peripheral Access Control Registers */
#define AIPSTZ_OPACR_OPAC7_MASK                  (0xFU)
#define AIPSTZ_OPACR_OPAC7_SHIFT                 (0U)
#define AIPSTZ_OPACR_OPAC7(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC7_SHIFT)) & AIPSTZ_OPACR_OPAC7_MASK)
#define AIPSTZ_OPACR_OPAC6_MASK                  (0xF0U)
#define AIPSTZ_OPACR_OPAC6_SHIFT                 (4U)
#define AIPSTZ_OPACR_OPAC6(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC6_SHIFT)) & AIPSTZ_OPACR_OPAC6_MASK)
#define AIPSTZ_OPACR_OPAC5_MASK                  (0xF00U)
#define AIPSTZ_OPACR_OPAC5_SHIFT                 (8U)
#define AIPSTZ_OPACR_OPAC5(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC5_SHIFT)) & AIPSTZ_OPACR_OPAC5_MASK)
#define AIPSTZ_OPACR_OPAC4_MASK                  (0xF000U)
#define AIPSTZ_OPACR_OPAC4_SHIFT                 (12U)
#define AIPSTZ_OPACR_OPAC4(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC4_SHIFT)) & AIPSTZ_OPACR_OPAC4_MASK)
#define AIPSTZ_OPACR_OPAC3_MASK                  (0xF0000U)
#define AIPSTZ_OPACR_OPAC3_SHIFT                 (16U)
#define AIPSTZ_OPACR_OPAC3(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC3_SHIFT)) & AIPSTZ_OPACR_OPAC3_MASK)
#define AIPSTZ_OPACR_OPAC2_MASK                  (0xF00000U)
#define AIPSTZ_OPACR_OPAC2_SHIFT                 (20U)
#define AIPSTZ_OPACR_OPAC2(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC2_SHIFT)) & AIPSTZ_OPACR_OPAC2_MASK)
#define AIPSTZ_OPACR_OPAC1_MASK                  (0xF000000U)
#define AIPSTZ_OPACR_OPAC1_SHIFT                 (24U)
#define AIPSTZ_OPACR_OPAC1(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC1_SHIFT)) & AIPSTZ_OPACR_OPAC1_MASK)
#define AIPSTZ_OPACR_OPAC0_MASK                  (0xF0000000U)
#define AIPSTZ_OPACR_OPAC0_SHIFT                 (28U)
#define AIPSTZ_OPACR_OPAC0(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC0_SHIFT)) & AIPSTZ_OPACR_OPAC0_MASK)

/*! @name OPACR1 - Off-Platform Peripheral Access Control Registers */
#define AIPSTZ_OPACR1_OPAC15_MASK                (0xFU)
#define AIPSTZ_OPACR1_OPAC15_SHIFT               (0U)
#define AIPSTZ_OPACR1_OPAC15(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC15_SHIFT)) & AIPSTZ_OPACR1_OPAC15_MASK)
#define AIPSTZ_OPACR1_OPAC14_MASK                (0xF0U)
#define AIPSTZ_OPACR1_OPAC14_SHIFT               (4U)
#define AIPSTZ_OPACR1_OPAC14(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC14_SHIFT)) & AIPSTZ_OPACR1_OPAC14_MASK)
#define AIPSTZ_OPACR1_OPAC13_MASK                (0xF00U)
#define AIPSTZ_OPACR1_OPAC13_SHIFT               (8U)
#define AIPSTZ_OPACR1_OPAC13(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC13_SHIFT)) & AIPSTZ_OPACR1_OPAC13_MASK)
#define AIPSTZ_OPACR1_OPAC12_MASK                (0xF000U)
#define AIPSTZ_OPACR1_OPAC12_SHIFT               (12U)
#define AIPSTZ_OPACR1_OPAC12(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC12_SHIFT)) & AIPSTZ_OPACR1_OPAC12_MASK)
#define AIPSTZ_OPACR1_OPAC11_MASK                (0xF0000U)
#define AIPSTZ_OPACR1_OPAC11_SHIFT               (16U)
#define AIPSTZ_OPACR1_OPAC11(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC11_SHIFT)) & AIPSTZ_OPACR1_OPAC11_MASK)
#define AIPSTZ_OPACR1_OPAC10_MASK                (0xF00000U)
#define AIPSTZ_OPACR1_OPAC10_SHIFT               (20U)
#define AIPSTZ_OPACR1_OPAC10(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC10_SHIFT)) & AIPSTZ_OPACR1_OPAC10_MASK)
#define AIPSTZ_OPACR1_OPAC9_MASK                 (0xF000000U)
#define AIPSTZ_OPACR1_OPAC9_SHIFT                (24U)
#define AIPSTZ_OPACR1_OPAC9(x)                   (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC9_SHIFT)) & AIPSTZ_OPACR1_OPAC9_MASK)
#define AIPSTZ_OPACR1_OPAC8_MASK                 (0xF0000000U)
#define AIPSTZ_OPACR1_OPAC8_SHIFT                (28U)
#define AIPSTZ_OPACR1_OPAC8(x)                   (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC8_SHIFT)) & AIPSTZ_OPACR1_OPAC8_MASK)

/*! @name OPACR2 - Off-Platform Peripheral Access Control Registers */
#define AIPSTZ_OPACR2_OPAC23_MASK                (0xFU)
#define AIPSTZ_OPACR2_OPAC23_SHIFT               (0U)
#define AIPSTZ_OPACR2_OPAC23(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC23_SHIFT)) & AIPSTZ_OPACR2_OPAC23_MASK)
#define AIPSTZ_OPACR2_OPAC22_MASK                (0xF0U)
#define AIPSTZ_OPACR2_OPAC22_SHIFT               (4U)
#define AIPSTZ_OPACR2_OPAC22(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC22_SHIFT)) & AIPSTZ_OPACR2_OPAC22_MASK)
#define AIPSTZ_OPACR2_OPAC21_MASK                (0xF00U)
#define AIPSTZ_OPACR2_OPAC21_SHIFT               (8U)
#define AIPSTZ_OPACR2_OPAC21(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC21_SHIFT)) & AIPSTZ_OPACR2_OPAC21_MASK)
#define AIPSTZ_OPACR2_OPAC20_MASK                (0xF000U)
#define AIPSTZ_OPACR2_OPAC20_SHIFT               (12U)
#define AIPSTZ_OPACR2_OPAC20(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC20_SHIFT)) & AIPSTZ_OPACR2_OPAC20_MASK)
#define AIPSTZ_OPACR2_OPAC19_MASK                (0xF0000U)
#define AIPSTZ_OPACR2_OPAC19_SHIFT               (16U)
#define AIPSTZ_OPACR2_OPAC19(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC19_SHIFT)) & AIPSTZ_OPACR2_OPAC19_MASK)
#define AIPSTZ_OPACR2_OPAC18_MASK                (0xF00000U)
#define AIPSTZ_OPACR2_OPAC18_SHIFT               (20U)
#define AIPSTZ_OPACR2_OPAC18(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC18_SHIFT)) & AIPSTZ_OPACR2_OPAC18_MASK)
#define AIPSTZ_OPACR2_OPAC17_MASK                (0xF000000U)
#define AIPSTZ_OPACR2_OPAC17_SHIFT               (24U)
#define AIPSTZ_OPACR2_OPAC17(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC17_SHIFT)) & AIPSTZ_OPACR2_OPAC17_MASK)
#define AIPSTZ_OPACR2_OPAC16_MASK                (0xF0000000U)
#define AIPSTZ_OPACR2_OPAC16_SHIFT               (28U)
#define AIPSTZ_OPACR2_OPAC16(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC16_SHIFT)) & AIPSTZ_OPACR2_OPAC16_MASK)

/*! @name OPACR3 - Off-Platform Peripheral Access Control Registers */
#define AIPSTZ_OPACR3_OPAC31_MASK                (0xFU)
#define AIPSTZ_OPACR3_OPAC31_SHIFT               (0U)
#define AIPSTZ_OPACR3_OPAC31(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC31_SHIFT)) & AIPSTZ_OPACR3_OPAC31_MASK)
#define AIPSTZ_OPACR3_OPAC30_MASK                (0xF0U)
#define AIPSTZ_OPACR3_OPAC30_SHIFT               (4U)
#define AIPSTZ_OPACR3_OPAC30(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC30_SHIFT)) & AIPSTZ_OPACR3_OPAC30_MASK)
#define AIPSTZ_OPACR3_OPAC29_MASK                (0xF00U)
#define AIPSTZ_OPACR3_OPAC29_SHIFT               (8U)
#define AIPSTZ_OPACR3_OPAC29(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC29_SHIFT)) & AIPSTZ_OPACR3_OPAC29_MASK)
#define AIPSTZ_OPACR3_OPAC28_MASK                (0xF000U)
#define AIPSTZ_OPACR3_OPAC28_SHIFT               (12U)
#define AIPSTZ_OPACR3_OPAC28(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC28_SHIFT)) & AIPSTZ_OPACR3_OPAC28_MASK)
#define AIPSTZ_OPACR3_OPAC27_MASK                (0xF0000U)
#define AIPSTZ_OPACR3_OPAC27_SHIFT               (16U)
#define AIPSTZ_OPACR3_OPAC27(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC27_SHIFT)) & AIPSTZ_OPACR3_OPAC27_MASK)
#define AIPSTZ_OPACR3_OPAC26_MASK                (0xF00000U)
#define AIPSTZ_OPACR3_OPAC26_SHIFT               (20U)
#define AIPSTZ_OPACR3_OPAC26(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC26_SHIFT)) & AIPSTZ_OPACR3_OPAC26_MASK)
#define AIPSTZ_OPACR3_OPAC25_MASK                (0xF000000U)
#define AIPSTZ_OPACR3_OPAC25_SHIFT               (24U)
#define AIPSTZ_OPACR3_OPAC25(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC25_SHIFT)) & AIPSTZ_OPACR3_OPAC25_MASK)
#define AIPSTZ_OPACR3_OPAC24_MASK                (0xF0000000U)
#define AIPSTZ_OPACR3_OPAC24_SHIFT               (28U)
#define AIPSTZ_OPACR3_OPAC24(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC24_SHIFT)) & AIPSTZ_OPACR3_OPAC24_MASK)

/*! @name OPACR4 - Off-Platform Peripheral Access Control Registers */
#define AIPSTZ_OPACR4_OPAC33_MASK                (0xF000000U)
#define AIPSTZ_OPACR4_OPAC33_SHIFT               (24U)
#define AIPSTZ_OPACR4_OPAC33(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR4_OPAC33_SHIFT)) & AIPSTZ_OPACR4_OPAC33_MASK)
#define AIPSTZ_OPACR4_OPAC32_MASK                (0xF0000000U)
#define AIPSTZ_OPACR4_OPAC32_SHIFT               (28U)
#define AIPSTZ_OPACR4_OPAC32(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR4_OPAC32_SHIFT)) & AIPSTZ_OPACR4_OPAC32_MASK)


/*!
 * @}
 */ /* end of group AIPSTZ_Register_Masks */


/* AIPSTZ - Peripheral instance base addresses */
/** Peripheral AIPSTZ1 base pointer */
#define AIPSTZ1_BASE_PTR                         ((AIPSTZ_MemMapPtr)0x4007C000u)
/** Peripheral AIPSTZ2 base pointer */
#define AIPSTZ2_BASE_PTR                         ((AIPSTZ_MemMapPtr)0x4017C000u)
/** Peripheral AIPSTZ3 base pointer */
#define AIPSTZ3_BASE_PTR                         ((AIPSTZ_MemMapPtr)0x4027C000u)
/** Peripheral AIPSTZ4 base pointer */
#define AIPSTZ4_BASE_PTR                         ((AIPSTZ_MemMapPtr)0x4037C000u)
/** Array initializer of AIPSTZ peripheral base pointers */
#define AIPSTZ_BASE_PTRS                         { AIPSTZ1_BASE_PTR, AIPSTZ2_BASE_PTR, AIPSTZ3_BASE_PTR, AIPSTZ4_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- AIPSTZ - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AIPSTZ_Register_Accessor_Macros AIPSTZ - Register accessor macros
 * @{
 */


/* AIPSTZ - Register instance definitions */
/* AIPSTZ1 */
#define AIPSTZ1_MPR                              AIPSTZ_MPR_REG(AIPSTZ1_BASE_PTR)
#define AIPSTZ1_OPACR                            AIPSTZ_OPACR_REG(AIPSTZ1_BASE_PTR)
#define AIPSTZ1_OPACR1                           AIPSTZ_OPACR1_REG(AIPSTZ1_BASE_PTR)
#define AIPSTZ1_OPACR2                           AIPSTZ_OPACR2_REG(AIPSTZ1_BASE_PTR)
#define AIPSTZ1_OPACR3                           AIPSTZ_OPACR3_REG(AIPSTZ1_BASE_PTR)
#define AIPSTZ1_OPACR4                           AIPSTZ_OPACR4_REG(AIPSTZ1_BASE_PTR)
/* AIPSTZ2 */
#define AIPSTZ2_MPR                              AIPSTZ_MPR_REG(AIPSTZ2_BASE_PTR)
#define AIPSTZ2_OPACR                            AIPSTZ_OPACR_REG(AIPSTZ2_BASE_PTR)
#define AIPSTZ2_OPACR1                           AIPSTZ_OPACR1_REG(AIPSTZ2_BASE_PTR)
#define AIPSTZ2_OPACR2                           AIPSTZ_OPACR2_REG(AIPSTZ2_BASE_PTR)
#define AIPSTZ2_OPACR3                           AIPSTZ_OPACR3_REG(AIPSTZ2_BASE_PTR)
#define AIPSTZ2_OPACR4                           AIPSTZ_OPACR4_REG(AIPSTZ2_BASE_PTR)
/* AIPSTZ3 */
#define AIPSTZ3_MPR                              AIPSTZ_MPR_REG(AIPSTZ3_BASE_PTR)
#define AIPSTZ3_OPACR                            AIPSTZ_OPACR_REG(AIPSTZ3_BASE_PTR)
#define AIPSTZ3_OPACR1                           AIPSTZ_OPACR1_REG(AIPSTZ3_BASE_PTR)
#define AIPSTZ3_OPACR2                           AIPSTZ_OPACR2_REG(AIPSTZ3_BASE_PTR)
#define AIPSTZ3_OPACR3                           AIPSTZ_OPACR3_REG(AIPSTZ3_BASE_PTR)
#define AIPSTZ3_OPACR4                           AIPSTZ_OPACR4_REG(AIPSTZ3_BASE_PTR)
/* AIPSTZ4 */
#define AIPSTZ4_MPR                              AIPSTZ_MPR_REG(AIPSTZ4_BASE_PTR)
#define AIPSTZ4_OPACR                            AIPSTZ_OPACR_REG(AIPSTZ4_BASE_PTR)
#define AIPSTZ4_OPACR1                           AIPSTZ_OPACR1_REG(AIPSTZ4_BASE_PTR)
#define AIPSTZ4_AIPSTZ1_OPACR2                   AIPSTZ_OPACR2_REG(AIPSTZ4_BASE_PTR)
#define AIPSTZ4_OPACR3                           AIPSTZ_OPACR3_REG(AIPSTZ4_BASE_PTR)
#define AIPSTZ4_OPACR4                           AIPSTZ_OPACR4_REG(AIPSTZ4_BASE_PTR)

/*!
 * @}
 */ /* end of group AIPSTZ_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group AIPSTZ_Peripheral */


/* ----------------------------------------------------------------------------
   -- AOI
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AOI_Peripheral AOI
 * @{
 */

/** AOI - Peripheral register structure */
typedef struct AOI_MemMap {
  struct {                                         /* offset: 0x0, array step: 0x4 */
    uint16_t BFCRT01;                                /**< Boolean Function Term 0 and 1 Configuration Register for EVENTn, array offset: 0x0, array step: 0x4 */
    uint16_t BFCRT23;                                /**< Boolean Function Term 2 and 3 Configuration Register for EVENTn, array offset: 0x2, array step: 0x4 */
  } BFCRT[4];
} volatile *AOI_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- AOI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AOI_Register_Accessor_Macros AOI - Register accessor macros
 * @{
 */


/* AOI - Register accessors */
#define AOI_BFCRT01_REG(base,index)              ((base)->BFCRT[index].BFCRT01)
#define AOI_BFCRT23_REG(base,index)              ((base)->BFCRT[index].BFCRT23)

/*!
 * @}
 */ /* end of group AOI_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- AOI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AOI_Register_Masks AOI Register Masks
 * @{
 */

/*! @name BFCRT01 - Boolean Function Term 0 and 1 Configuration Register for EVENTn */
#define AOI_BFCRT01_PT1_DC_MASK                  (0x3U)
#define AOI_BFCRT01_PT1_DC_SHIFT                 (0U)
#define AOI_BFCRT01_PT1_DC(x)                    (((uint16_t)(((uint16_t)(x)) << AOI_BFCRT01_PT1_DC_SHIFT)) & AOI_BFCRT01_PT1_DC_MASK)
#define AOI_BFCRT01_PT1_CC_MASK                  (0xCU)
#define AOI_BFCRT01_PT1_CC_SHIFT                 (2U)
#define AOI_BFCRT01_PT1_CC(x)                    (((uint16_t)(((uint16_t)(x)) << AOI_BFCRT01_PT1_CC_SHIFT)) & AOI_BFCRT01_PT1_CC_MASK)
#define AOI_BFCRT01_PT1_BC_MASK                  (0x30U)
#define AOI_BFCRT01_PT1_BC_SHIFT                 (4U)
#define AOI_BFCRT01_PT1_BC(x)                    (((uint16_t)(((uint16_t)(x)) << AOI_BFCRT01_PT1_BC_SHIFT)) & AOI_BFCRT01_PT1_BC_MASK)
#define AOI_BFCRT01_PT1_AC_MASK                  (0xC0U)
#define AOI_BFCRT01_PT1_AC_SHIFT                 (6U)
#define AOI_BFCRT01_PT1_AC(x)                    (((uint16_t)(((uint16_t)(x)) << AOI_BFCRT01_PT1_AC_SHIFT)) & AOI_BFCRT01_PT1_AC_MASK)
#define AOI_BFCRT01_PT0_DC_MASK                  (0x300U)
#define AOI_BFCRT01_PT0_DC_SHIFT                 (8U)
#define AOI_BFCRT01_PT0_DC(x)                    (((uint16_t)(((uint16_t)(x)) << AOI_BFCRT01_PT0_DC_SHIFT)) & AOI_BFCRT01_PT0_DC_MASK)
#define AOI_BFCRT01_PT0_CC_MASK                  (0xC00U)
#define AOI_BFCRT01_PT0_CC_SHIFT                 (10U)
#define AOI_BFCRT01_PT0_CC(x)                    (((uint16_t)(((uint16_t)(x)) << AOI_BFCRT01_PT0_CC_SHIFT)) & AOI_BFCRT01_PT0_CC_MASK)
#define AOI_BFCRT01_PT0_BC_MASK                  (0x3000U)
#define AOI_BFCRT01_PT0_BC_SHIFT                 (12U)
#define AOI_BFCRT01_PT0_BC(x)                    (((uint16_t)(((uint16_t)(x)) << AOI_BFCRT01_PT0_BC_SHIFT)) & AOI_BFCRT01_PT0_BC_MASK)
#define AOI_BFCRT01_PT0_AC_MASK                  (0xC000U)
#define AOI_BFCRT01_PT0_AC_SHIFT                 (14U)
#define AOI_BFCRT01_PT0_AC(x)                    (((uint16_t)(((uint16_t)(x)) << AOI_BFCRT01_PT0_AC_SHIFT)) & AOI_BFCRT01_PT0_AC_MASK)

/* The count of AOI_BFCRT01 */
#define AOI_BFCRT01_COUNT                        (4U)

/*! @name BFCRT23 - Boolean Function Term 2 and 3 Configuration Register for EVENTn */
#define AOI_BFCRT23_PT3_DC_MASK                  (0x3U)
#define AOI_BFCRT23_PT3_DC_SHIFT                 (0U)
#define AOI_BFCRT23_PT3_DC(x)                    (((uint16_t)(((uint16_t)(x)) << AOI_BFCRT23_PT3_DC_SHIFT)) & AOI_BFCRT23_PT3_DC_MASK)
#define AOI_BFCRT23_PT3_CC_MASK                  (0xCU)
#define AOI_BFCRT23_PT3_CC_SHIFT                 (2U)
#define AOI_BFCRT23_PT3_CC(x)                    (((uint16_t)(((uint16_t)(x)) << AOI_BFCRT23_PT3_CC_SHIFT)) & AOI_BFCRT23_PT3_CC_MASK)
#define AOI_BFCRT23_PT3_BC_MASK                  (0x30U)
#define AOI_BFCRT23_PT3_BC_SHIFT                 (4U)
#define AOI_BFCRT23_PT3_BC(x)                    (((uint16_t)(((uint16_t)(x)) << AOI_BFCRT23_PT3_BC_SHIFT)) & AOI_BFCRT23_PT3_BC_MASK)
#define AOI_BFCRT23_PT3_AC_MASK                  (0xC0U)
#define AOI_BFCRT23_PT3_AC_SHIFT                 (6U)
#define AOI_BFCRT23_PT3_AC(x)                    (((uint16_t)(((uint16_t)(x)) << AOI_BFCRT23_PT3_AC_SHIFT)) & AOI_BFCRT23_PT3_AC_MASK)
#define AOI_BFCRT23_PT2_DC_MASK                  (0x300U)
#define AOI_BFCRT23_PT2_DC_SHIFT                 (8U)
#define AOI_BFCRT23_PT2_DC(x)                    (((uint16_t)(((uint16_t)(x)) << AOI_BFCRT23_PT2_DC_SHIFT)) & AOI_BFCRT23_PT2_DC_MASK)
#define AOI_BFCRT23_PT2_CC_MASK                  (0xC00U)
#define AOI_BFCRT23_PT2_CC_SHIFT                 (10U)
#define AOI_BFCRT23_PT2_CC(x)                    (((uint16_t)(((uint16_t)(x)) << AOI_BFCRT23_PT2_CC_SHIFT)) & AOI_BFCRT23_PT2_CC_MASK)
#define AOI_BFCRT23_PT2_BC_MASK                  (0x3000U)
#define AOI_BFCRT23_PT2_BC_SHIFT                 (12U)
#define AOI_BFCRT23_PT2_BC(x)                    (((uint16_t)(((uint16_t)(x)) << AOI_BFCRT23_PT2_BC_SHIFT)) & AOI_BFCRT23_PT2_BC_MASK)
#define AOI_BFCRT23_PT2_AC_MASK                  (0xC000U)
#define AOI_BFCRT23_PT2_AC_SHIFT                 (14U)
#define AOI_BFCRT23_PT2_AC(x)                    (((uint16_t)(((uint16_t)(x)) << AOI_BFCRT23_PT2_AC_SHIFT)) & AOI_BFCRT23_PT2_AC_MASK)

/* The count of AOI_BFCRT23 */
#define AOI_BFCRT23_COUNT                        (4U)


/*!
 * @}
 */ /* end of group AOI_Register_Masks */


/* AOI - Peripheral instance base addresses */
/** Peripheral AOI base pointer */
#define AOI_BASE_PTR                             ((AOI_MemMapPtr)0x403B4000u)
/** Array initializer of AOI peripheral base pointers */
#define AOI_BASE_PTRS                            { AOI_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- AOI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AOI_Register_Accessor_Macros AOI - Register accessor macros
 * @{
 */


/* AOI - Register instance definitions */
/* AOI */
#define AOI_BFCRT010                             AOI_BFCRT01_REG(AOI_BASE_PTR,0)
#define AOI_BFCRT230                             AOI_BFCRT23_REG(AOI_BASE_PTR,0)
#define AOI_BFCRT011                             AOI_BFCRT01_REG(AOI_BASE_PTR,1)
#define AOI_BFCRT231                             AOI_BFCRT23_REG(AOI_BASE_PTR,1)
#define AOI_BFCRT012                             AOI_BFCRT01_REG(AOI_BASE_PTR,2)
#define AOI_BFCRT232                             AOI_BFCRT23_REG(AOI_BASE_PTR,2)
#define AOI_BFCRT013                             AOI_BFCRT01_REG(AOI_BASE_PTR,3)
#define AOI_BFCRT233                             AOI_BFCRT23_REG(AOI_BASE_PTR,3)

/* AOI - Register array accessors */
#define AOI_BFCRT01(index)                       AOI_BFCRT01_REG(AOI_BASE_PTR,index)
#define AOI_BFCRT23(index)                       AOI_BFCRT23_REG(AOI_BASE_PTR,index)

/*!
 * @}
 */ /* end of group AOI_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group AOI_Peripheral */


/* ----------------------------------------------------------------------------
   -- CAN
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CAN_Peripheral CAN
 * @{
 */

/** CAN - Peripheral register structure */
typedef struct CAN_MemMap {
  uint32_t MCR;                                    /**< Module Configuration Register, offset: 0x0 */
  uint32_t CTRL1;                                  /**< Control 1 Register, offset: 0x4 */
  uint32_t TIMER;                                  /**< Free Running Timer Register, offset: 0x8 */
  uint8_t RESERVED_0[4];
  uint32_t RXMGMASK;                               /**< Rx Mailboxes Global Mask Register, offset: 0x10 */
  uint32_t RX14MASK;                               /**< Rx Buffer 14 Mask Register, offset: 0x14 */
  uint32_t RX15MASK;                               /**< Rx Buffer 15 Mask Register, offset: 0x18 */
  uint32_t ECR;                                    /**< Error Counter Register, offset: 0x1C */
  uint32_t ESR1;                                   /**< Error and Status 1 Register, offset: 0x20 */
  uint32_t IMASK2;                                 /**< Interrupt Masks 2 Register, offset: 0x24 */
  uint32_t IMASK1;                                 /**< Interrupt Masks 1 Register, offset: 0x28 */
  uint32_t IFLAG2;                                 /**< Interrupt Flags 2 Register, offset: 0x2C */
  uint32_t IFLAG1;                                 /**< Interrupt Flags 1 Register, offset: 0x30 */
  uint32_t CTRL2;                                  /**< Control 2 Register, offset: 0x34 */
  uint32_t ESR2;                                   /**< Error and Status 2 Register, offset: 0x38 */
  uint8_t RESERVED_1[8];
  uint32_t CRCR;                                   /**< CRC Register, offset: 0x44 */
  uint32_t RXFGMASK;                               /**< Rx FIFO Global Mask Register, offset: 0x48 */
  uint32_t RXFIR;                                  /**< Rx FIFO Information Register, offset: 0x4C */
  uint8_t RESERVED_2[48];
  struct {                                         /* offset: 0x80, array step: 0x10 */
    uint32_t CS;                                     /**< Message Buffer 0 CS Register..Message Buffer 63 CS Register, array offset: 0x80, array step: 0x10 */
    uint32_t ID;                                     /**< Message Buffer 0 ID Register..Message Buffer 63 ID Register, array offset: 0x84, array step: 0x10 */
    uint32_t WORD0;                                  /**< Message Buffer 0 WORD0 Register..Message Buffer 63 WORD0 Register, array offset: 0x88, array step: 0x10 */
    uint32_t WORD1;                                  /**< Message Buffer 0 WORD1 Register..Message Buffer 63 WORD1 Register, array offset: 0x8C, array step: 0x10 */
  } MB[64];
  uint8_t RESERVED_3[1024];
  uint32_t RXIMR[64];                              /**< Rx Individual Mask Registers, array offset: 0x880, array step: 0x4 */
  uint8_t RESERVED_4[96];
  uint32_t GFWR;                                   /**< Glitch Filter Width Registers, offset: 0x9E0 */
} volatile *CAN_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- CAN - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CAN_Register_Accessor_Macros CAN - Register accessor macros
 * @{
 */


/* CAN - Register accessors */
#define CAN_MCR_REG(base)                        ((base)->MCR)
#define CAN_CTRL1_REG(base)                      ((base)->CTRL1)
#define CAN_TIMER_REG(base)                      ((base)->TIMER)
#define CAN_RXMGMASK_REG(base)                   ((base)->RXMGMASK)
#define CAN_RX14MASK_REG(base)                   ((base)->RX14MASK)
#define CAN_RX15MASK_REG(base)                   ((base)->RX15MASK)
#define CAN_ECR_REG(base)                        ((base)->ECR)
#define CAN_ESR1_REG(base)                       ((base)->ESR1)
#define CAN_IMASK2_REG(base)                     ((base)->IMASK2)
#define CAN_IMASK1_REG(base)                     ((base)->IMASK1)
#define CAN_IFLAG2_REG(base)                     ((base)->IFLAG2)
#define CAN_IFLAG1_REG(base)                     ((base)->IFLAG1)
#define CAN_CTRL2_REG(base)                      ((base)->CTRL2)
#define CAN_ESR2_REG(base)                       ((base)->ESR2)
#define CAN_CRCR_REG(base)                       ((base)->CRCR)
#define CAN_RXFGMASK_REG(base)                   ((base)->RXFGMASK)
#define CAN_RXFIR_REG(base)                      ((base)->RXFIR)
#define CAN_CS_REG(base,index)                   ((base)->MB[index].CS)
#define CAN_ID_REG(base,index)                   ((base)->MB[index].ID)
#define CAN_WORD0_REG(base,index)                ((base)->MB[index].WORD0)
#define CAN_WORD1_REG(base,index)                ((base)->MB[index].WORD1)
#define CAN_RXIMR_REG(base,index)                ((base)->RXIMR[index])
#define CAN_GFWR_REG(base)                       ((base)->GFWR)

/*!
 * @}
 */ /* end of group CAN_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- CAN Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CAN_Register_Masks CAN Register Masks
 * @{
 */

/*! @name MCR - Module Configuration Register */
#define CAN_MCR_MAXMB_MASK                       (0x7FU)
#define CAN_MCR_MAXMB_SHIFT                      (0U)
#define CAN_MCR_MAXMB(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_MCR_MAXMB_SHIFT)) & CAN_MCR_MAXMB_MASK)
#define CAN_MCR_IDAM_MASK                        (0x300U)
#define CAN_MCR_IDAM_SHIFT                       (8U)
#define CAN_MCR_IDAM(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_MCR_IDAM_SHIFT)) & CAN_MCR_IDAM_MASK)
#define CAN_MCR_AEN_MASK                         (0x1000U)
#define CAN_MCR_AEN_SHIFT                        (12U)
#define CAN_MCR_LPRIOEN_MASK                     (0x2000U)
#define CAN_MCR_LPRIOEN_SHIFT                    (13U)
#define CAN_MCR_IRMQ_MASK                        (0x10000U)
#define CAN_MCR_IRMQ_SHIFT                       (16U)
#define CAN_MCR_SRXDIS_MASK                      (0x20000U)
#define CAN_MCR_SRXDIS_SHIFT                     (17U)
#define CAN_MCR_WAKSRC_MASK                      (0x80000U)
#define CAN_MCR_WAKSRC_SHIFT                     (19U)
#define CAN_MCR_LPMACK_MASK                      (0x100000U)
#define CAN_MCR_LPMACK_SHIFT                     (20U)
#define CAN_MCR_WRNEN_MASK                       (0x200000U)
#define CAN_MCR_WRNEN_SHIFT                      (21U)
#define CAN_MCR_SLFWAK_MASK                      (0x400000U)
#define CAN_MCR_SLFWAK_SHIFT                     (22U)
#define CAN_MCR_SUPV_MASK                        (0x800000U)
#define CAN_MCR_SUPV_SHIFT                       (23U)
#define CAN_MCR_FRZACK_MASK                      (0x1000000U)
#define CAN_MCR_FRZACK_SHIFT                     (24U)
#define CAN_MCR_SOFTRST_MASK                     (0x2000000U)
#define CAN_MCR_SOFTRST_SHIFT                    (25U)
#define CAN_MCR_WAKMSK_MASK                      (0x4000000U)
#define CAN_MCR_WAKMSK_SHIFT                     (26U)
#define CAN_MCR_NOTRDY_MASK                      (0x8000000U)
#define CAN_MCR_NOTRDY_SHIFT                     (27U)
#define CAN_MCR_HALT_MASK                        (0x10000000U)
#define CAN_MCR_HALT_SHIFT                       (28U)
#define CAN_MCR_RFEN_MASK                        (0x20000000U)
#define CAN_MCR_RFEN_SHIFT                       (29U)
#define CAN_MCR_FRZ_MASK                         (0x40000000U)
#define CAN_MCR_FRZ_SHIFT                        (30U)
#define CAN_MCR_MDIS_MASK                        (0x80000000U)
#define CAN_MCR_MDIS_SHIFT                       (31U)

/*! @name CTRL1 - Control 1 Register */
#define CAN_CTRL1_PROPSEG_MASK                   (0x7U)
#define CAN_CTRL1_PROPSEG_SHIFT                  (0U)
#define CAN_CTRL1_PROPSEG(x)                     (((uint32_t)(((uint32_t)(x)) << CAN_CTRL1_PROPSEG_SHIFT)) & CAN_CTRL1_PROPSEG_MASK)
#define CAN_CTRL1_LOM_MASK                       (0x8U)
#define CAN_CTRL1_LOM_SHIFT                      (3U)
#define CAN_CTRL1_LBUF_MASK                      (0x10U)
#define CAN_CTRL1_LBUF_SHIFT                     (4U)
#define CAN_CTRL1_TSYN_MASK                      (0x20U)
#define CAN_CTRL1_TSYN_SHIFT                     (5U)
#define CAN_CTRL1_BOFFREC_MASK                   (0x40U)
#define CAN_CTRL1_BOFFREC_SHIFT                  (6U)
#define CAN_CTRL1_SMP_MASK                       (0x80U)
#define CAN_CTRL1_SMP_SHIFT                      (7U)
#define CAN_CTRL1_RWRNMSK_MASK                   (0x400U)
#define CAN_CTRL1_RWRNMSK_SHIFT                  (10U)
#define CAN_CTRL1_TWRNMSK_MASK                   (0x800U)
#define CAN_CTRL1_TWRNMSK_SHIFT                  (11U)
#define CAN_CTRL1_LPB_MASK                       (0x1000U)
#define CAN_CTRL1_LPB_SHIFT                      (12U)
#define CAN_CTRL1_ERRMSK_MASK                    (0x4000U)
#define CAN_CTRL1_ERRMSK_SHIFT                   (14U)
#define CAN_CTRL1_BOFFMSK_MASK                   (0x8000U)
#define CAN_CTRL1_BOFFMSK_SHIFT                  (15U)
#define CAN_CTRL1_PSEG2_MASK                     (0x70000U)
#define CAN_CTRL1_PSEG2_SHIFT                    (16U)
#define CAN_CTRL1_PSEG2(x)                       (((uint32_t)(((uint32_t)(x)) << CAN_CTRL1_PSEG2_SHIFT)) & CAN_CTRL1_PSEG2_MASK)
#define CAN_CTRL1_PSEG1_MASK                     (0x380000U)
#define CAN_CTRL1_PSEG1_SHIFT                    (19U)
#define CAN_CTRL1_PSEG1(x)                       (((uint32_t)(((uint32_t)(x)) << CAN_CTRL1_PSEG1_SHIFT)) & CAN_CTRL1_PSEG1_MASK)
#define CAN_CTRL1_RJW_MASK                       (0xC00000U)
#define CAN_CTRL1_RJW_SHIFT                      (22U)
#define CAN_CTRL1_RJW(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_CTRL1_RJW_SHIFT)) & CAN_CTRL1_RJW_MASK)
#define CAN_CTRL1_PRESDIV_MASK                   (0xFF000000U)
#define CAN_CTRL1_PRESDIV_SHIFT                  (24U)
#define CAN_CTRL1_PRESDIV(x)                     (((uint32_t)(((uint32_t)(x)) << CAN_CTRL1_PRESDIV_SHIFT)) & CAN_CTRL1_PRESDIV_MASK)

/*! @name TIMER - Free Running Timer Register */
#define CAN_TIMER_TIMER_MASK                     (0xFFFFU)
#define CAN_TIMER_TIMER_SHIFT                    (0U)
#define CAN_TIMER_TIMER(x)                       (((uint32_t)(((uint32_t)(x)) << CAN_TIMER_TIMER_SHIFT)) & CAN_TIMER_TIMER_MASK)

/*! @name RXMGMASK - Rx Mailboxes Global Mask Register */
#define CAN_RXMGMASK_MG_MASK                     (0xFFFFFFFFU)
#define CAN_RXMGMASK_MG_SHIFT                    (0U)
#define CAN_RXMGMASK_MG(x)                       (((uint32_t)(((uint32_t)(x)) << CAN_RXMGMASK_MG_SHIFT)) & CAN_RXMGMASK_MG_MASK)

/*! @name RX14MASK - Rx Buffer 14 Mask Register */
#define CAN_RX14MASK_RX14M_MASK                  (0xFFFFFFFFU)
#define CAN_RX14MASK_RX14M_SHIFT                 (0U)
#define CAN_RX14MASK_RX14M(x)                    (((uint32_t)(((uint32_t)(x)) << CAN_RX14MASK_RX14M_SHIFT)) & CAN_RX14MASK_RX14M_MASK)

/*! @name RX15MASK - Rx Buffer 15 Mask Register */
#define CAN_RX15MASK_RX15M_MASK                  (0xFFFFFFFFU)
#define CAN_RX15MASK_RX15M_SHIFT                 (0U)
#define CAN_RX15MASK_RX15M(x)                    (((uint32_t)(((uint32_t)(x)) << CAN_RX15MASK_RX15M_SHIFT)) & CAN_RX15MASK_RX15M_MASK)

/*! @name ECR - Error Counter Register */
#define CAN_ECR_TX_ERR_COUNTER_MASK              (0xFFU)
#define CAN_ECR_TX_ERR_COUNTER_SHIFT             (0U)
#define CAN_ECR_TX_ERR_COUNTER(x)                (((uint32_t)(((uint32_t)(x)) << CAN_ECR_TX_ERR_COUNTER_SHIFT)) & CAN_ECR_TX_ERR_COUNTER_MASK)
#define CAN_ECR_RX_ERR_COUNTER_MASK              (0xFF00U)
#define CAN_ECR_RX_ERR_COUNTER_SHIFT             (8U)
#define CAN_ECR_RX_ERR_COUNTER(x)                (((uint32_t)(((uint32_t)(x)) << CAN_ECR_RX_ERR_COUNTER_SHIFT)) & CAN_ECR_RX_ERR_COUNTER_MASK)

/*! @name ESR1 - Error and Status 1 Register */
#define CAN_ESR1_WAKINT_MASK                     (0x1U)
#define CAN_ESR1_WAKINT_SHIFT                    (0U)
#define CAN_ESR1_ERRINT_MASK                     (0x2U)
#define CAN_ESR1_ERRINT_SHIFT                    (1U)
#define CAN_ESR1_BOFFINT_MASK                    (0x4U)
#define CAN_ESR1_BOFFINT_SHIFT                   (2U)
#define CAN_ESR1_RX_MASK                         (0x8U)
#define CAN_ESR1_RX_SHIFT                        (3U)
#define CAN_ESR1_FLTCONF_MASK                    (0x30U)
#define CAN_ESR1_FLTCONF_SHIFT                   (4U)
#define CAN_ESR1_FLTCONF(x)                      (((uint32_t)(((uint32_t)(x)) << CAN_ESR1_FLTCONF_SHIFT)) & CAN_ESR1_FLTCONF_MASK)
#define CAN_ESR1_TX_MASK                         (0x40U)
#define CAN_ESR1_TX_SHIFT                        (6U)
#define CAN_ESR1_IDLE_MASK                       (0x80U)
#define CAN_ESR1_IDLE_SHIFT                      (7U)
#define CAN_ESR1_RXWRN_MASK                      (0x100U)
#define CAN_ESR1_RXWRN_SHIFT                     (8U)
#define CAN_ESR1_TXWRN_MASK                      (0x200U)
#define CAN_ESR1_TXWRN_SHIFT                     (9U)
#define CAN_ESR1_STFERR_MASK                     (0x400U)
#define CAN_ESR1_STFERR_SHIFT                    (10U)
#define CAN_ESR1_FRMERR_MASK                     (0x800U)
#define CAN_ESR1_FRMERR_SHIFT                    (11U)
#define CAN_ESR1_CRCERR_MASK                     (0x1000U)
#define CAN_ESR1_CRCERR_SHIFT                    (12U)
#define CAN_ESR1_ACKERR_MASK                     (0x2000U)
#define CAN_ESR1_ACKERR_SHIFT                    (13U)
#define CAN_ESR1_BIT0ERR_MASK                    (0x4000U)
#define CAN_ESR1_BIT0ERR_SHIFT                   (14U)
#define CAN_ESR1_BIT1ERR_MASK                    (0x8000U)
#define CAN_ESR1_BIT1ERR_SHIFT                   (15U)
#define CAN_ESR1_RWRNINT_MASK                    (0x10000U)
#define CAN_ESR1_RWRNINT_SHIFT                   (16U)
#define CAN_ESR1_TWRNINT_MASK                    (0x20000U)
#define CAN_ESR1_TWRNINT_SHIFT                   (17U)
#define CAN_ESR1_SYNCH_MASK                      (0x40000U)
#define CAN_ESR1_SYNCH_SHIFT                     (18U)

/*! @name IMASK2 - Interrupt Masks 2 Register */
#define CAN_IMASK2_BUFHM_MASK                    (0xFFFFFFFFU)
#define CAN_IMASK2_BUFHM_SHIFT                   (0U)
#define CAN_IMASK2_BUFHM(x)                      (((uint32_t)(((uint32_t)(x)) << CAN_IMASK2_BUFHM_SHIFT)) & CAN_IMASK2_BUFHM_MASK)

/*! @name IMASK1 - Interrupt Masks 1 Register */
#define CAN_IMASK1_BUFLM_MASK                    (0xFFFFFFFFU)
#define CAN_IMASK1_BUFLM_SHIFT                   (0U)
#define CAN_IMASK1_BUFLM(x)                      (((uint32_t)(((uint32_t)(x)) << CAN_IMASK1_BUFLM_SHIFT)) & CAN_IMASK1_BUFLM_MASK)

/*! @name IFLAG2 - Interrupt Flags 2 Register */
#define CAN_IFLAG2_BUFHI_MASK                    (0xFFFFFFFFU)
#define CAN_IFLAG2_BUFHI_SHIFT                   (0U)
#define CAN_IFLAG2_BUFHI(x)                      (((uint32_t)(((uint32_t)(x)) << CAN_IFLAG2_BUFHI_SHIFT)) & CAN_IFLAG2_BUFHI_MASK)

/*! @name IFLAG1 - Interrupt Flags 1 Register */
#define CAN_IFLAG1_BUF4TO0I_MASK                 (0x1FU)
#define CAN_IFLAG1_BUF4TO0I_SHIFT                (0U)
#define CAN_IFLAG1_BUF4TO0I(x)                   (((uint32_t)(((uint32_t)(x)) << CAN_IFLAG1_BUF4TO0I_SHIFT)) & CAN_IFLAG1_BUF4TO0I_MASK)
#define CAN_IFLAG1_BUF5I_MASK                    (0x20U)
#define CAN_IFLAG1_BUF5I_SHIFT                   (5U)
#define CAN_IFLAG1_BUF6I_MASK                    (0x40U)
#define CAN_IFLAG1_BUF6I_SHIFT                   (6U)
#define CAN_IFLAG1_BUF7I_MASK                    (0x80U)
#define CAN_IFLAG1_BUF7I_SHIFT                   (7U)
#define CAN_IFLAG1_BUF31TO8I_MASK                (0xFFFFFF00U)
#define CAN_IFLAG1_BUF31TO8I_SHIFT               (8U)
#define CAN_IFLAG1_BUF31TO8I(x)                  (((uint32_t)(((uint32_t)(x)) << CAN_IFLAG1_BUF31TO8I_SHIFT)) & CAN_IFLAG1_BUF31TO8I_MASK)

/*! @name CTRL2 - Control 2 Register */
#define CAN_CTRL2_EACEN_MASK                     (0x10000U)
#define CAN_CTRL2_EACEN_SHIFT                    (16U)
#define CAN_CTRL2_RRS_MASK                       (0x20000U)
#define CAN_CTRL2_RRS_SHIFT                      (17U)
#define CAN_CTRL2_MRP_MASK                       (0x40000U)
#define CAN_CTRL2_MRP_SHIFT                      (18U)
#define CAN_CTRL2_TASD_MASK                      (0xF80000U)
#define CAN_CTRL2_TASD_SHIFT                     (19U)
#define CAN_CTRL2_TASD(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_CTRL2_TASD_SHIFT)) & CAN_CTRL2_TASD_MASK)
#define CAN_CTRL2_RFFN_MASK                      (0xF000000U)
#define CAN_CTRL2_RFFN_SHIFT                     (24U)
#define CAN_CTRL2_RFFN(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_CTRL2_RFFN_SHIFT)) & CAN_CTRL2_RFFN_MASK)
#define CAN_CTRL2_WRMFRZ_MASK                    (0x10000000U)
#define CAN_CTRL2_WRMFRZ_SHIFT                   (28U)

/*! @name ESR2 - Error and Status 2 Register */
#define CAN_ESR2_IMB_MASK                        (0x2000U)
#define CAN_ESR2_IMB_SHIFT                       (13U)
#define CAN_ESR2_VPS_MASK                        (0x4000U)
#define CAN_ESR2_VPS_SHIFT                       (14U)
#define CAN_ESR2_LPTM_MASK                       (0x7F0000U)
#define CAN_ESR2_LPTM_SHIFT                      (16U)
#define CAN_ESR2_LPTM(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_ESR2_LPTM_SHIFT)) & CAN_ESR2_LPTM_MASK)

/*! @name CRCR - CRC Register */
#define CAN_CRCR_TXCRC_MASK                      (0x7FFFU)
#define CAN_CRCR_TXCRC_SHIFT                     (0U)
#define CAN_CRCR_TXCRC(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_CRCR_TXCRC_SHIFT)) & CAN_CRCR_TXCRC_MASK)
#define CAN_CRCR_MBCRC_MASK                      (0x7F0000U)
#define CAN_CRCR_MBCRC_SHIFT                     (16U)
#define CAN_CRCR_MBCRC(x)                        (((uint32_t)(((uint32_t)(x)) << CAN_CRCR_MBCRC_SHIFT)) & CAN_CRCR_MBCRC_MASK)

/*! @name RXFGMASK - Rx FIFO Global Mask Register */
#define CAN_RXFGMASK_FGM_MASK                    (0xFFFFFFFFU)
#define CAN_RXFGMASK_FGM_SHIFT                   (0U)
#define CAN_RXFGMASK_FGM(x)                      (((uint32_t)(((uint32_t)(x)) << CAN_RXFGMASK_FGM_SHIFT)) & CAN_RXFGMASK_FGM_MASK)

/*! @name RXFIR - Rx FIFO Information Register */
#define CAN_RXFIR_IDHIT_MASK                     (0x1FFU)
#define CAN_RXFIR_IDHIT_SHIFT                    (0U)
#define CAN_RXFIR_IDHIT(x)                       (((uint32_t)(((uint32_t)(x)) << CAN_RXFIR_IDHIT_SHIFT)) & CAN_RXFIR_IDHIT_MASK)

/*! @name CS - Message Buffer 0 CS Register..Message Buffer 63 CS Register */
#define CAN_CS_TIME_STAMP_MASK                   (0xFFFFU)
#define CAN_CS_TIME_STAMP_SHIFT                  (0U)
#define CAN_CS_TIME_STAMP(x)                     (((uint32_t)(((uint32_t)(x)) << CAN_CS_TIME_STAMP_SHIFT)) & CAN_CS_TIME_STAMP_MASK)
#define CAN_CS_DLC_MASK                          (0xF0000U)
#define CAN_CS_DLC_SHIFT                         (16U)
#define CAN_CS_DLC(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_CS_DLC_SHIFT)) & CAN_CS_DLC_MASK)
#define CAN_CS_RTR_MASK                          (0x100000U)
#define CAN_CS_RTR_SHIFT                         (20U)
#define CAN_CS_IDE_MASK                          (0x200000U)
#define CAN_CS_IDE_SHIFT                         (21U)
#define CAN_CS_SRR_MASK                          (0x400000U)
#define CAN_CS_SRR_SHIFT                         (22U)
#define CAN_CS_CODE_MASK                         (0xF000000U)
#define CAN_CS_CODE_SHIFT                        (24U)
#define CAN_CS_CODE(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_CS_CODE_SHIFT)) & CAN_CS_CODE_MASK)

/* The count of CAN_CS */
#define CAN_CS_COUNT                             (64U)

/*! @name ID - Message Buffer 0 ID Register..Message Buffer 63 ID Register */
#define CAN_ID_EXT_MASK                          (0x3FFFFU)
#define CAN_ID_EXT_SHIFT                         (0U)
#define CAN_ID_EXT(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_ID_EXT_SHIFT)) & CAN_ID_EXT_MASK)
#define CAN_ID_STD_MASK                          (0x1FFC0000U)
#define CAN_ID_STD_SHIFT                         (18U)
#define CAN_ID_STD(x)                            (((uint32_t)(((uint32_t)(x)) << CAN_ID_STD_SHIFT)) & CAN_ID_STD_MASK)
#define CAN_ID_PRIO_MASK                         (0xE0000000U)
#define CAN_ID_PRIO_SHIFT                        (29U)
#define CAN_ID_PRIO(x)                           (((uint32_t)(((uint32_t)(x)) << CAN_ID_PRIO_SHIFT)) & CAN_ID_PRIO_MASK)

/* The count of CAN_ID */
#define CAN_ID_COUNT                             (64U)

/*! @name WORD0 - Message Buffer 0 WORD0 Register..Message Buffer 63 WORD0 Register */
#define CAN_WORD0_DATA_BYTE_3_MASK               (0xFFU)
#define CAN_WORD0_DATA_BYTE_3_SHIFT              (0U)
#define CAN_WORD0_DATA_BYTE_3(x)                 (((uint32_t)(((uint32_t)(x)) << CAN_WORD0_DATA_BYTE_3_SHIFT)) & CAN_WORD0_DATA_BYTE_3_MASK)
#define CAN_WORD0_DATA_BYTE_2_MASK               (0xFF00U)
#define CAN_WORD0_DATA_BYTE_2_SHIFT              (8U)
#define CAN_WORD0_DATA_BYTE_2(x)                 (((uint32_t)(((uint32_t)(x)) << CAN_WORD0_DATA_BYTE_2_SHIFT)) & CAN_WORD0_DATA_BYTE_2_MASK)
#define CAN_WORD0_DATA_BYTE_1_MASK               (0xFF0000U)
#define CAN_WORD0_DATA_BYTE_1_SHIFT              (16U)
#define CAN_WORD0_DATA_BYTE_1(x)                 (((uint32_t)(((uint32_t)(x)) << CAN_WORD0_DATA_BYTE_1_SHIFT)) & CAN_WORD0_DATA_BYTE_1_MASK)
#define CAN_WORD0_DATA_BYTE_0_MASK               (0xFF000000U)
#define CAN_WORD0_DATA_BYTE_0_SHIFT              (24U)
#define CAN_WORD0_DATA_BYTE_0(x)                 (((uint32_t)(((uint32_t)(x)) << CAN_WORD0_DATA_BYTE_0_SHIFT)) & CAN_WORD0_DATA_BYTE_0_MASK)

/* The count of CAN_WORD0 */
#define CAN_WORD0_COUNT                          (64U)

/*! @name WORD1 - Message Buffer 0 WORD1 Register..Message Buffer 63 WORD1 Register */
#define CAN_WORD1_DATA_BYTE_7_MASK               (0xFFU)
#define CAN_WORD1_DATA_BYTE_7_SHIFT              (0U)
#define CAN_WORD1_DATA_BYTE_7(x)                 (((uint32_t)(((uint32_t)(x)) << CAN_WORD1_DATA_BYTE_7_SHIFT)) & CAN_WORD1_DATA_BYTE_7_MASK)
#define CAN_WORD1_DATA_BYTE_6_MASK               (0xFF00U)
#define CAN_WORD1_DATA_BYTE_6_SHIFT              (8U)
#define CAN_WORD1_DATA_BYTE_6(x)                 (((uint32_t)(((uint32_t)(x)) << CAN_WORD1_DATA_BYTE_6_SHIFT)) & CAN_WORD1_DATA_BYTE_6_MASK)
#define CAN_WORD1_DATA_BYTE_5_MASK               (0xFF0000U)
#define CAN_WORD1_DATA_BYTE_5_SHIFT              (16U)
#define CAN_WORD1_DATA_BYTE_5(x)                 (((uint32_t)(((uint32_t)(x)) << CAN_WORD1_DATA_BYTE_5_SHIFT)) & CAN_WORD1_DATA_BYTE_5_MASK)
#define CAN_WORD1_DATA_BYTE_4_MASK               (0xFF000000U)
#define CAN_WORD1_DATA_BYTE_4_SHIFT              (24U)
#define CAN_WORD1_DATA_BYTE_4(x)                 (((uint32_t)(((uint32_t)(x)) << CAN_WORD1_DATA_BYTE_4_SHIFT)) & CAN_WORD1_DATA_BYTE_4_MASK)

/* The count of CAN_WORD1 */
#define CAN_WORD1_COUNT                          (64U)

/*! @name RXIMR - Rx Individual Mask Registers */
#define CAN_RXIMR_MI_MASK                        (0xFFFFFFFFU)
#define CAN_RXIMR_MI_SHIFT                       (0U)
#define CAN_RXIMR_MI(x)                          (((uint32_t)(((uint32_t)(x)) << CAN_RXIMR_MI_SHIFT)) & CAN_RXIMR_MI_MASK)

/* The count of CAN_RXIMR */
#define CAN_RXIMR_COUNT                          (64U)

/*! @name GFWR - Glitch Filter Width Registers */
#define CAN_GFWR_GFWR_MASK                       (0xFFU)
#define CAN_GFWR_GFWR_SHIFT                      (0U)
#define CAN_GFWR_GFWR(x)                         (((uint32_t)(((uint32_t)(x)) << CAN_GFWR_GFWR_SHIFT)) & CAN_GFWR_GFWR_MASK)


/*!
 * @}
 */ /* end of group CAN_Register_Masks */


/* CAN - Peripheral instance base addresses */
/** Peripheral CAN1 base pointer */
#define CAN1_BASE_PTR                            ((CAN_MemMapPtr)0x401D0000u)
/** Peripheral CAN2 base pointer */
#define CAN2_BASE_PTR                            ((CAN_MemMapPtr)0x401D4000u)
/** Array initializer of CAN peripheral base pointers */
#define CAN_BASE_PTRS                            { CAN1_BASE_PTR, CAN2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- CAN - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CAN_Register_Accessor_Macros CAN - Register accessor macros
 * @{
 */


/* CAN - Register instance definitions */
/* CAN1 */
#define FLEXCAN1_MCR                             CAN_MCR_REG(CAN1_BASE_PTR)
#define FLEXCAN1_CTRL1                           CAN_CTRL1_REG(CAN1_BASE_PTR)
#define FLEXCAN1_TIMER                           CAN_TIMER_REG(CAN1_BASE_PTR)
#define FLEXCAN1_RXMGMASK                        CAN_RXMGMASK_REG(CAN1_BASE_PTR)
#define FLEXCAN1_RX14MASK                        CAN_RX14MASK_REG(CAN1_BASE_PTR)
#define FLEXCAN1_RX15MASK                        CAN_RX15MASK_REG(CAN1_BASE_PTR)
#define FLEXCAN1_ECR                             CAN_ECR_REG(CAN1_BASE_PTR)
#define FLEXCAN1_ESR1                            CAN_ESR1_REG(CAN1_BASE_PTR)
#define FLEXCAN1_IMASK2                          CAN_IMASK2_REG(CAN1_BASE_PTR)
#define FLEXCAN1_IMASK1                          CAN_IMASK1_REG(CAN1_BASE_PTR)
#define FLEXCAN1_IFLAG2                          CAN_IFLAG2_REG(CAN1_BASE_PTR)
#define FLEXCAN1_IFLAG1                          CAN_IFLAG1_REG(CAN1_BASE_PTR)
#define FLEXCAN1_CTRL2                           CAN_CTRL2_REG(CAN1_BASE_PTR)
#define FLEXCAN1_ESR2                            CAN_ESR2_REG(CAN1_BASE_PTR)
#define FLEXCAN1_CRCR                            CAN_CRCR_REG(CAN1_BASE_PTR)
#define FLEXCAN1_RXFGMASK                        CAN_RXFGMASK_REG(CAN1_BASE_PTR)
#define FLEXCAN1_RXFIR                           CAN_RXFIR_REG(CAN1_BASE_PTR)
#define FLEXCAN1_CS0                             CAN_CS_REG(CAN1_BASE_PTR,0)
#define FLEXCAN1_ID0                             CAN_ID_REG(CAN1_BASE_PTR,0)
#define FLEXCAN1_WORD00                          CAN_WORD0_REG(CAN1_BASE_PTR,0)
#define FLEXCAN1_WORD10                          CAN_WORD1_REG(CAN1_BASE_PTR,0)
#define FLEXCAN1_CS1                             CAN_CS_REG(CAN1_BASE_PTR,1)
#define FLEXCAN1_ID1                             CAN_ID_REG(CAN1_BASE_PTR,1)
#define FLEXCAN1_WORD01                          CAN_WORD0_REG(CAN1_BASE_PTR,1)
#define FLEXCAN1_WORD11                          CAN_WORD1_REG(CAN1_BASE_PTR,1)
#define FLEXCAN1_CS2                             CAN_CS_REG(CAN1_BASE_PTR,2)
#define FLEXCAN1_ID2                             CAN_ID_REG(CAN1_BASE_PTR,2)
#define FLEXCAN1_WORD02                          CAN_WORD0_REG(CAN1_BASE_PTR,2)
#define FLEXCAN1_WORD12                          CAN_WORD1_REG(CAN1_BASE_PTR,2)
#define FLEXCAN1_CS3                             CAN_CS_REG(CAN1_BASE_PTR,3)
#define FLEXCAN1_ID3                             CAN_ID_REG(CAN1_BASE_PTR,3)
#define FLEXCAN1_WORD03                          CAN_WORD0_REG(CAN1_BASE_PTR,3)
#define FLEXCAN1_WORD13                          CAN_WORD1_REG(CAN1_BASE_PTR,3)
#define FLEXCAN1_CS4                             CAN_CS_REG(CAN1_BASE_PTR,4)
#define FLEXCAN1_ID4                             CAN_ID_REG(CAN1_BASE_PTR,4)
#define FLEXCAN1_WORD04                          CAN_WORD0_REG(CAN1_BASE_PTR,4)
#define FLEXCAN1_WORD14                          CAN_WORD1_REG(CAN1_BASE_PTR,4)
#define FLEXCAN1_CS5                             CAN_CS_REG(CAN1_BASE_PTR,5)
#define FLEXCAN1_ID5                             CAN_ID_REG(CAN1_BASE_PTR,5)
#define FLEXCAN1_WORD05                          CAN_WORD0_REG(CAN1_BASE_PTR,5)
#define FLEXCAN1_WORD15                          CAN_WORD1_REG(CAN1_BASE_PTR,5)
#define FLEXCAN1_CS6                             CAN_CS_REG(CAN1_BASE_PTR,6)
#define FLEXCAN1_ID6                             CAN_ID_REG(CAN1_BASE_PTR,6)
#define FLEXCAN1_WORD06                          CAN_WORD0_REG(CAN1_BASE_PTR,6)
#define FLEXCAN1_WORD16                          CAN_WORD1_REG(CAN1_BASE_PTR,6)
#define FLEXCAN1_CS7                             CAN_CS_REG(CAN1_BASE_PTR,7)
#define FLEXCAN1_ID7                             CAN_ID_REG(CAN1_BASE_PTR,7)
#define FLEXCAN1_WORD07                          CAN_WORD0_REG(CAN1_BASE_PTR,7)
#define FLEXCAN1_WORD17                          CAN_WORD1_REG(CAN1_BASE_PTR,7)
#define FLEXCAN1_CS8                             CAN_CS_REG(CAN1_BASE_PTR,8)
#define FLEXCAN1_ID8                             CAN_ID_REG(CAN1_BASE_PTR,8)
#define FLEXCAN1_WORD08                          CAN_WORD0_REG(CAN1_BASE_PTR,8)
#define FLEXCAN1_WORD18                          CAN_WORD1_REG(CAN1_BASE_PTR,8)
#define FLEXCAN1_CS9                             CAN_CS_REG(CAN1_BASE_PTR,9)
#define FLEXCAN1_ID9                             CAN_ID_REG(CAN1_BASE_PTR,9)
#define FLEXCAN1_WORD09                          CAN_WORD0_REG(CAN1_BASE_PTR,9)
#define FLEXCAN1_WORD19                          CAN_WORD1_REG(CAN1_BASE_PTR,9)
#define FLEXCAN1_CS10                            CAN_CS_REG(CAN1_BASE_PTR,10)
#define FLEXCAN1_ID10                            CAN_ID_REG(CAN1_BASE_PTR,10)
#define FLEXCAN1_WORD010                         CAN_WORD0_REG(CAN1_BASE_PTR,10)
#define FLEXCAN1_WORD110                         CAN_WORD1_REG(CAN1_BASE_PTR,10)
#define FLEXCAN1_CS11                            CAN_CS_REG(CAN1_BASE_PTR,11)
#define FLEXCAN1_ID11                            CAN_ID_REG(CAN1_BASE_PTR,11)
#define FLEXCAN1_WORD011                         CAN_WORD0_REG(CAN1_BASE_PTR,11)
#define FLEXCAN1_WORD111                         CAN_WORD1_REG(CAN1_BASE_PTR,11)
#define FLEXCAN1_CS12                            CAN_CS_REG(CAN1_BASE_PTR,12)
#define FLEXCAN1_ID12                            CAN_ID_REG(CAN1_BASE_PTR,12)
#define FLEXCAN1_WORD012                         CAN_WORD0_REG(CAN1_BASE_PTR,12)
#define FLEXCAN1_WORD112                         CAN_WORD1_REG(CAN1_BASE_PTR,12)
#define FLEXCAN1_CS13                            CAN_CS_REG(CAN1_BASE_PTR,13)
#define FLEXCAN1_ID13                            CAN_ID_REG(CAN1_BASE_PTR,13)
#define FLEXCAN1_WORD013                         CAN_WORD0_REG(CAN1_BASE_PTR,13)
#define FLEXCAN1_WORD113                         CAN_WORD1_REG(CAN1_BASE_PTR,13)
#define FLEXCAN1_CS14                            CAN_CS_REG(CAN1_BASE_PTR,14)
#define FLEXCAN1_ID14                            CAN_ID_REG(CAN1_BASE_PTR,14)
#define FLEXCAN1_WORD014                         CAN_WORD0_REG(CAN1_BASE_PTR,14)
#define FLEXCAN1_WORD114                         CAN_WORD1_REG(CAN1_BASE_PTR,14)
#define FLEXCAN1_CS15                            CAN_CS_REG(CAN1_BASE_PTR,15)
#define FLEXCAN1_ID15                            CAN_ID_REG(CAN1_BASE_PTR,15)
#define FLEXCAN1_WORD015                         CAN_WORD0_REG(CAN1_BASE_PTR,15)
#define FLEXCAN1_WORD115                         CAN_WORD1_REG(CAN1_BASE_PTR,15)
#define FLEXCAN1_CS16                            CAN_CS_REG(CAN1_BASE_PTR,16)
#define FLEXCAN1_ID16                            CAN_ID_REG(CAN1_BASE_PTR,16)
#define FLEXCAN1_WORD016                         CAN_WORD0_REG(CAN1_BASE_PTR,16)
#define FLEXCAN1_WORD116                         CAN_WORD1_REG(CAN1_BASE_PTR,16)
#define FLEXCAN1_CS17                            CAN_CS_REG(CAN1_BASE_PTR,17)
#define FLEXCAN1_ID17                            CAN_ID_REG(CAN1_BASE_PTR,17)
#define FLEXCAN1_WORD017                         CAN_WORD0_REG(CAN1_BASE_PTR,17)
#define FLEXCAN1_WORD117                         CAN_WORD1_REG(CAN1_BASE_PTR,17)
#define FLEXCAN1_CS18                            CAN_CS_REG(CAN1_BASE_PTR,18)
#define FLEXCAN1_ID18                            CAN_ID_REG(CAN1_BASE_PTR,18)
#define FLEXCAN1_WORD018                         CAN_WORD0_REG(CAN1_BASE_PTR,18)
#define FLEXCAN1_WORD118                         CAN_WORD1_REG(CAN1_BASE_PTR,18)
#define FLEXCAN1_CS19                            CAN_CS_REG(CAN1_BASE_PTR,19)
#define FLEXCAN1_ID19                            CAN_ID_REG(CAN1_BASE_PTR,19)
#define FLEXCAN1_WORD019                         CAN_WORD0_REG(CAN1_BASE_PTR,19)
#define FLEXCAN1_WORD119                         CAN_WORD1_REG(CAN1_BASE_PTR,19)
#define FLEXCAN1_CS20                            CAN_CS_REG(CAN1_BASE_PTR,20)
#define FLEXCAN1_ID20                            CAN_ID_REG(CAN1_BASE_PTR,20)
#define FLEXCAN1_WORD020                         CAN_WORD0_REG(CAN1_BASE_PTR,20)
#define FLEXCAN1_WORD120                         CAN_WORD1_REG(CAN1_BASE_PTR,20)
#define FLEXCAN1_CS21                            CAN_CS_REG(CAN1_BASE_PTR,21)
#define FLEXCAN1_ID21                            CAN_ID_REG(CAN1_BASE_PTR,21)
#define FLEXCAN1_WORD021                         CAN_WORD0_REG(CAN1_BASE_PTR,21)
#define FLEXCAN1_WORD121                         CAN_WORD1_REG(CAN1_BASE_PTR,21)
#define FLEXCAN1_CS22                            CAN_CS_REG(CAN1_BASE_PTR,22)
#define FLEXCAN1_ID22                            CAN_ID_REG(CAN1_BASE_PTR,22)
#define FLEXCAN1_WORD022                         CAN_WORD0_REG(CAN1_BASE_PTR,22)
#define FLEXCAN1_WORD122                         CAN_WORD1_REG(CAN1_BASE_PTR,22)
#define FLEXCAN1_CS23                            CAN_CS_REG(CAN1_BASE_PTR,23)
#define FLEXCAN1_ID23                            CAN_ID_REG(CAN1_BASE_PTR,23)
#define FLEXCAN1_WORD023                         CAN_WORD0_REG(CAN1_BASE_PTR,23)
#define FLEXCAN1_WORD123                         CAN_WORD1_REG(CAN1_BASE_PTR,23)
#define FLEXCAN1_CS24                            CAN_CS_REG(CAN1_BASE_PTR,24)
#define FLEXCAN1_ID24                            CAN_ID_REG(CAN1_BASE_PTR,24)
#define FLEXCAN1_WORD024                         CAN_WORD0_REG(CAN1_BASE_PTR,24)
#define FLEXCAN1_WORD124                         CAN_WORD1_REG(CAN1_BASE_PTR,24)
#define FLEXCAN1_CS25                            CAN_CS_REG(CAN1_BASE_PTR,25)
#define FLEXCAN1_ID25                            CAN_ID_REG(CAN1_BASE_PTR,25)
#define FLEXCAN1_WORD025                         CAN_WORD0_REG(CAN1_BASE_PTR,25)
#define FLEXCAN1_WORD125                         CAN_WORD1_REG(CAN1_BASE_PTR,25)
#define FLEXCAN1_CS26                            CAN_CS_REG(CAN1_BASE_PTR,26)
#define FLEXCAN1_ID26                            CAN_ID_REG(CAN1_BASE_PTR,26)
#define FLEXCAN1_WORD026                         CAN_WORD0_REG(CAN1_BASE_PTR,26)
#define FLEXCAN1_WORD126                         CAN_WORD1_REG(CAN1_BASE_PTR,26)
#define FLEXCAN1_CS27                            CAN_CS_REG(CAN1_BASE_PTR,27)
#define FLEXCAN1_ID27                            CAN_ID_REG(CAN1_BASE_PTR,27)
#define FLEXCAN1_WORD027                         CAN_WORD0_REG(CAN1_BASE_PTR,27)
#define FLEXCAN1_WORD127                         CAN_WORD1_REG(CAN1_BASE_PTR,27)
#define FLEXCAN1_CS28                            CAN_CS_REG(CAN1_BASE_PTR,28)
#define FLEXCAN1_ID28                            CAN_ID_REG(CAN1_BASE_PTR,28)
#define FLEXCAN1_WORD028                         CAN_WORD0_REG(CAN1_BASE_PTR,28)
#define FLEXCAN1_WORD128                         CAN_WORD1_REG(CAN1_BASE_PTR,28)
#define FLEXCAN1_CS29                            CAN_CS_REG(CAN1_BASE_PTR,29)
#define FLEXCAN1_ID29                            CAN_ID_REG(CAN1_BASE_PTR,29)
#define FLEXCAN1_WORD029                         CAN_WORD0_REG(CAN1_BASE_PTR,29)
#define FLEXCAN1_WORD129                         CAN_WORD1_REG(CAN1_BASE_PTR,29)
#define FLEXCAN1_CS30                            CAN_CS_REG(CAN1_BASE_PTR,30)
#define FLEXCAN1_ID30                            CAN_ID_REG(CAN1_BASE_PTR,30)
#define FLEXCAN1_WORD030                         CAN_WORD0_REG(CAN1_BASE_PTR,30)
#define FLEXCAN1_WORD130                         CAN_WORD1_REG(CAN1_BASE_PTR,30)
#define FLEXCAN1_CS31                            CAN_CS_REG(CAN1_BASE_PTR,31)
#define FLEXCAN1_ID31                            CAN_ID_REG(CAN1_BASE_PTR,31)
#define FLEXCAN1_WORD031                         CAN_WORD0_REG(CAN1_BASE_PTR,31)
#define FLEXCAN1_WORD131                         CAN_WORD1_REG(CAN1_BASE_PTR,31)
#define FLEXCAN1_CS32                            CAN_CS_REG(CAN1_BASE_PTR,32)
#define FLEXCAN1_ID32                            CAN_ID_REG(CAN1_BASE_PTR,32)
#define FLEXCAN1_WORD032                         CAN_WORD0_REG(CAN1_BASE_PTR,32)
#define FLEXCAN1_WORD132                         CAN_WORD1_REG(CAN1_BASE_PTR,32)
#define FLEXCAN1_CS33                            CAN_CS_REG(CAN1_BASE_PTR,33)
#define FLEXCAN1_ID33                            CAN_ID_REG(CAN1_BASE_PTR,33)
#define FLEXCAN1_WORD033                         CAN_WORD0_REG(CAN1_BASE_PTR,33)
#define FLEXCAN1_WORD133                         CAN_WORD1_REG(CAN1_BASE_PTR,33)
#define FLEXCAN1_CS34                            CAN_CS_REG(CAN1_BASE_PTR,34)
#define FLEXCAN1_ID34                            CAN_ID_REG(CAN1_BASE_PTR,34)
#define FLEXCAN1_WORD034                         CAN_WORD0_REG(CAN1_BASE_PTR,34)
#define FLEXCAN1_WORD134                         CAN_WORD1_REG(CAN1_BASE_PTR,34)
#define FLEXCAN1_CS35                            CAN_CS_REG(CAN1_BASE_PTR,35)
#define FLEXCAN1_ID35                            CAN_ID_REG(CAN1_BASE_PTR,35)
#define FLEXCAN1_WORD035                         CAN_WORD0_REG(CAN1_BASE_PTR,35)
#define FLEXCAN1_WORD135                         CAN_WORD1_REG(CAN1_BASE_PTR,35)
#define FLEXCAN1_CS36                            CAN_CS_REG(CAN1_BASE_PTR,36)
#define FLEXCAN1_ID36                            CAN_ID_REG(CAN1_BASE_PTR,36)
#define FLEXCAN1_WORD036                         CAN_WORD0_REG(CAN1_BASE_PTR,36)
#define FLEXCAN1_WORD136                         CAN_WORD1_REG(CAN1_BASE_PTR,36)
#define FLEXCAN1_CS37                            CAN_CS_REG(CAN1_BASE_PTR,37)
#define FLEXCAN1_ID37                            CAN_ID_REG(CAN1_BASE_PTR,37)
#define FLEXCAN1_WORD037                         CAN_WORD0_REG(CAN1_BASE_PTR,37)
#define FLEXCAN1_WORD137                         CAN_WORD1_REG(CAN1_BASE_PTR,37)
#define FLEXCAN1_CS38                            CAN_CS_REG(CAN1_BASE_PTR,38)
#define FLEXCAN1_ID38                            CAN_ID_REG(CAN1_BASE_PTR,38)
#define FLEXCAN1_WORD038                         CAN_WORD0_REG(CAN1_BASE_PTR,38)
#define FLEXCAN1_WORD138                         CAN_WORD1_REG(CAN1_BASE_PTR,38)
#define FLEXCAN1_CS39                            CAN_CS_REG(CAN1_BASE_PTR,39)
#define FLEXCAN1_ID39                            CAN_ID_REG(CAN1_BASE_PTR,39)
#define FLEXCAN1_WORD039                         CAN_WORD0_REG(CAN1_BASE_PTR,39)
#define FLEXCAN1_WORD139                         CAN_WORD1_REG(CAN1_BASE_PTR,39)
#define FLEXCAN1_CS40                            CAN_CS_REG(CAN1_BASE_PTR,40)
#define FLEXCAN1_ID40                            CAN_ID_REG(CAN1_BASE_PTR,40)
#define FLEXCAN1_WORD040                         CAN_WORD0_REG(CAN1_BASE_PTR,40)
#define FLEXCAN1_WORD140                         CAN_WORD1_REG(CAN1_BASE_PTR,40)
#define FLEXCAN1_CS41                            CAN_CS_REG(CAN1_BASE_PTR,41)
#define FLEXCAN1_ID41                            CAN_ID_REG(CAN1_BASE_PTR,41)
#define FLEXCAN1_WORD041                         CAN_WORD0_REG(CAN1_BASE_PTR,41)
#define FLEXCAN1_WORD141                         CAN_WORD1_REG(CAN1_BASE_PTR,41)
#define FLEXCAN1_CS42                            CAN_CS_REG(CAN1_BASE_PTR,42)
#define FLEXCAN1_ID42                            CAN_ID_REG(CAN1_BASE_PTR,42)
#define FLEXCAN1_WORD042                         CAN_WORD0_REG(CAN1_BASE_PTR,42)
#define FLEXCAN1_WORD142                         CAN_WORD1_REG(CAN1_BASE_PTR,42)
#define FLEXCAN1_CS43                            CAN_CS_REG(CAN1_BASE_PTR,43)
#define FLEXCAN1_ID43                            CAN_ID_REG(CAN1_BASE_PTR,43)
#define FLEXCAN1_WORD043                         CAN_WORD0_REG(CAN1_BASE_PTR,43)
#define FLEXCAN1_WORD143                         CAN_WORD1_REG(CAN1_BASE_PTR,43)
#define FLEXCAN1_CS44                            CAN_CS_REG(CAN1_BASE_PTR,44)
#define FLEXCAN1_ID44                            CAN_ID_REG(CAN1_BASE_PTR,44)
#define FLEXCAN1_WORD044                         CAN_WORD0_REG(CAN1_BASE_PTR,44)
#define FLEXCAN1_WORD144                         CAN_WORD1_REG(CAN1_BASE_PTR,44)
#define FLEXCAN1_CS45                            CAN_CS_REG(CAN1_BASE_PTR,45)
#define FLEXCAN1_ID45                            CAN_ID_REG(CAN1_BASE_PTR,45)
#define FLEXCAN1_WORD045                         CAN_WORD0_REG(CAN1_BASE_PTR,45)
#define FLEXCAN1_WORD145                         CAN_WORD1_REG(CAN1_BASE_PTR,45)
#define FLEXCAN1_CS46                            CAN_CS_REG(CAN1_BASE_PTR,46)
#define FLEXCAN1_ID46                            CAN_ID_REG(CAN1_BASE_PTR,46)
#define FLEXCAN1_WORD046                         CAN_WORD0_REG(CAN1_BASE_PTR,46)
#define FLEXCAN1_WORD146                         CAN_WORD1_REG(CAN1_BASE_PTR,46)
#define FLEXCAN1_CS47                            CAN_CS_REG(CAN1_BASE_PTR,47)
#define FLEXCAN1_ID47                            CAN_ID_REG(CAN1_BASE_PTR,47)
#define FLEXCAN1_WORD047                         CAN_WORD0_REG(CAN1_BASE_PTR,47)
#define FLEXCAN1_WORD147                         CAN_WORD1_REG(CAN1_BASE_PTR,47)
#define FLEXCAN1_CS48                            CAN_CS_REG(CAN1_BASE_PTR,48)
#define FLEXCAN1_ID48                            CAN_ID_REG(CAN1_BASE_PTR,48)
#define FLEXCAN1_WORD048                         CAN_WORD0_REG(CAN1_BASE_PTR,48)
#define FLEXCAN1_WORD148                         CAN_WORD1_REG(CAN1_BASE_PTR,48)
#define FLEXCAN1_CS49                            CAN_CS_REG(CAN1_BASE_PTR,49)
#define FLEXCAN1_ID49                            CAN_ID_REG(CAN1_BASE_PTR,49)
#define FLEXCAN1_WORD049                         CAN_WORD0_REG(CAN1_BASE_PTR,49)
#define FLEXCAN1_WORD149                         CAN_WORD1_REG(CAN1_BASE_PTR,49)
#define FLEXCAN1_CS50                            CAN_CS_REG(CAN1_BASE_PTR,50)
#define FLEXCAN1_ID50                            CAN_ID_REG(CAN1_BASE_PTR,50)
#define FLEXCAN1_WORD050                         CAN_WORD0_REG(CAN1_BASE_PTR,50)
#define FLEXCAN1_WORD150                         CAN_WORD1_REG(CAN1_BASE_PTR,50)
#define FLEXCAN1_CS51                            CAN_CS_REG(CAN1_BASE_PTR,51)
#define FLEXCAN1_ID51                            CAN_ID_REG(CAN1_BASE_PTR,51)
#define FLEXCAN1_WORD051                         CAN_WORD0_REG(CAN1_BASE_PTR,51)
#define FLEXCAN1_WORD151                         CAN_WORD1_REG(CAN1_BASE_PTR,51)
#define FLEXCAN1_CS52                            CAN_CS_REG(CAN1_BASE_PTR,52)
#define FLEXCAN1_ID52                            CAN_ID_REG(CAN1_BASE_PTR,52)
#define FLEXCAN1_WORD052                         CAN_WORD0_REG(CAN1_BASE_PTR,52)
#define FLEXCAN1_WORD152                         CAN_WORD1_REG(CAN1_BASE_PTR,52)
#define FLEXCAN1_CS53                            CAN_CS_REG(CAN1_BASE_PTR,53)
#define FLEXCAN1_ID53                            CAN_ID_REG(CAN1_BASE_PTR,53)
#define FLEXCAN1_WORD053                         CAN_WORD0_REG(CAN1_BASE_PTR,53)
#define FLEXCAN1_WORD153                         CAN_WORD1_REG(CAN1_BASE_PTR,53)
#define FLEXCAN1_CS54                            CAN_CS_REG(CAN1_BASE_PTR,54)
#define FLEXCAN1_ID54                            CAN_ID_REG(CAN1_BASE_PTR,54)
#define FLEXCAN1_WORD054                         CAN_WORD0_REG(CAN1_BASE_PTR,54)
#define FLEXCAN1_WORD154                         CAN_WORD1_REG(CAN1_BASE_PTR,54)
#define FLEXCAN1_CS55                            CAN_CS_REG(CAN1_BASE_PTR,55)
#define FLEXCAN1_ID55                            CAN_ID_REG(CAN1_BASE_PTR,55)
#define FLEXCAN1_WORD055                         CAN_WORD0_REG(CAN1_BASE_PTR,55)
#define FLEXCAN1_WORD155                         CAN_WORD1_REG(CAN1_BASE_PTR,55)
#define FLEXCAN1_CS56                            CAN_CS_REG(CAN1_BASE_PTR,56)
#define FLEXCAN1_ID56                            CAN_ID_REG(CAN1_BASE_PTR,56)
#define FLEXCAN1_WORD056                         CAN_WORD0_REG(CAN1_BASE_PTR,56)
#define FLEXCAN1_WORD156                         CAN_WORD1_REG(CAN1_BASE_PTR,56)
#define FLEXCAN1_CS57                            CAN_CS_REG(CAN1_BASE_PTR,57)
#define FLEXCAN1_ID57                            CAN_ID_REG(CAN1_BASE_PTR,57)
#define FLEXCAN1_WORD057                         CAN_WORD0_REG(CAN1_BASE_PTR,57)
#define FLEXCAN1_WORD157                         CAN_WORD1_REG(CAN1_BASE_PTR,57)
#define FLEXCAN1_CS58                            CAN_CS_REG(CAN1_BASE_PTR,58)
#define FLEXCAN1_ID58                            CAN_ID_REG(CAN1_BASE_PTR,58)
#define FLEXCAN1_WORD058                         CAN_WORD0_REG(CAN1_BASE_PTR,58)
#define FLEXCAN1_WORD158                         CAN_WORD1_REG(CAN1_BASE_PTR,58)
#define FLEXCAN1_CS59                            CAN_CS_REG(CAN1_BASE_PTR,59)
#define FLEXCAN1_ID59                            CAN_ID_REG(CAN1_BASE_PTR,59)
#define FLEXCAN1_WORD059                         CAN_WORD0_REG(CAN1_BASE_PTR,59)
#define FLEXCAN1_WORD159                         CAN_WORD1_REG(CAN1_BASE_PTR,59)
#define FLEXCAN1_CS60                            CAN_CS_REG(CAN1_BASE_PTR,60)
#define FLEXCAN1_ID60                            CAN_ID_REG(CAN1_BASE_PTR,60)
#define FLEXCAN1_WORD060                         CAN_WORD0_REG(CAN1_BASE_PTR,60)
#define FLEXCAN1_WORD160                         CAN_WORD1_REG(CAN1_BASE_PTR,60)
#define FLEXCAN1_CS61                            CAN_CS_REG(CAN1_BASE_PTR,61)
#define FLEXCAN1_ID61                            CAN_ID_REG(CAN1_BASE_PTR,61)
#define FLEXCAN1_WORD061                         CAN_WORD0_REG(CAN1_BASE_PTR,61)
#define FLEXCAN1_WORD161                         CAN_WORD1_REG(CAN1_BASE_PTR,61)
#define FLEXCAN1_CS62                            CAN_CS_REG(CAN1_BASE_PTR,62)
#define FLEXCAN1_ID62                            CAN_ID_REG(CAN1_BASE_PTR,62)
#define FLEXCAN1_WORD062                         CAN_WORD0_REG(CAN1_BASE_PTR,62)
#define FLEXCAN1_WORD162                         CAN_WORD1_REG(CAN1_BASE_PTR,62)
#define FLEXCAN1_CS63                            CAN_CS_REG(CAN1_BASE_PTR,63)
#define FLEXCAN1_ID63                            CAN_ID_REG(CAN1_BASE_PTR,63)
#define FLEXCAN1_WORD063                         CAN_WORD0_REG(CAN1_BASE_PTR,63)
#define FLEXCAN1_WORD163                         CAN_WORD1_REG(CAN1_BASE_PTR,63)
#define FLEXCAN1_RXIMR0                          CAN_RXIMR_REG(CAN1_BASE_PTR,0)
#define FLEXCAN1_RXIMR1                          CAN_RXIMR_REG(CAN1_BASE_PTR,1)
#define FLEXCAN1_RXIMR2                          CAN_RXIMR_REG(CAN1_BASE_PTR,2)
#define FLEXCAN1_RXIMR3                          CAN_RXIMR_REG(CAN1_BASE_PTR,3)
#define FLEXCAN1_RXIMR4                          CAN_RXIMR_REG(CAN1_BASE_PTR,4)
#define FLEXCAN1_RXIMR5                          CAN_RXIMR_REG(CAN1_BASE_PTR,5)
#define FLEXCAN1_RXIMR6                          CAN_RXIMR_REG(CAN1_BASE_PTR,6)
#define FLEXCAN1_RXIMR7                          CAN_RXIMR_REG(CAN1_BASE_PTR,7)
#define FLEXCAN1_RXIMR8                          CAN_RXIMR_REG(CAN1_BASE_PTR,8)
#define FLEXCAN1_RXIMR9                          CAN_RXIMR_REG(CAN1_BASE_PTR,9)
#define FLEXCAN1_RXIMR10                         CAN_RXIMR_REG(CAN1_BASE_PTR,10)
#define FLEXCAN1_RXIMR11                         CAN_RXIMR_REG(CAN1_BASE_PTR,11)
#define FLEXCAN1_RXIMR12                         CAN_RXIMR_REG(CAN1_BASE_PTR,12)
#define FLEXCAN1_RXIMR13                         CAN_RXIMR_REG(CAN1_BASE_PTR,13)
#define FLEXCAN1_RXIMR14                         CAN_RXIMR_REG(CAN1_BASE_PTR,14)
#define FLEXCAN1_RXIMR15                         CAN_RXIMR_REG(CAN1_BASE_PTR,15)
#define FLEXCAN1_RXIMR16                         CAN_RXIMR_REG(CAN1_BASE_PTR,16)
#define FLEXCAN1_RXIMR17                         CAN_RXIMR_REG(CAN1_BASE_PTR,17)
#define FLEXCAN1_RXIMR18                         CAN_RXIMR_REG(CAN1_BASE_PTR,18)
#define FLEXCAN1_RXIMR19                         CAN_RXIMR_REG(CAN1_BASE_PTR,19)
#define FLEXCAN1_RXIMR20                         CAN_RXIMR_REG(CAN1_BASE_PTR,20)
#define FLEXCAN1_RXIMR21                         CAN_RXIMR_REG(CAN1_BASE_PTR,21)
#define FLEXCAN1_RXIMR22                         CAN_RXIMR_REG(CAN1_BASE_PTR,22)
#define FLEXCAN1_RXIMR23                         CAN_RXIMR_REG(CAN1_BASE_PTR,23)
#define FLEXCAN1_RXIMR24                         CAN_RXIMR_REG(CAN1_BASE_PTR,24)
#define FLEXCAN1_RXIMR25                         CAN_RXIMR_REG(CAN1_BASE_PTR,25)
#define FLEXCAN1_RXIMR26                         CAN_RXIMR_REG(CAN1_BASE_PTR,26)
#define FLEXCAN1_RXIMR27                         CAN_RXIMR_REG(CAN1_BASE_PTR,27)
#define FLEXCAN1_RXIMR28                         CAN_RXIMR_REG(CAN1_BASE_PTR,28)
#define FLEXCAN1_RXIMR29                         CAN_RXIMR_REG(CAN1_BASE_PTR,29)
#define FLEXCAN1_RXIMR30                         CAN_RXIMR_REG(CAN1_BASE_PTR,30)
#define FLEXCAN1_RXIMR31                         CAN_RXIMR_REG(CAN1_BASE_PTR,31)
#define FLEXCAN1_RXIMR32                         CAN_RXIMR_REG(CAN1_BASE_PTR,32)
#define FLEXCAN1_RXIMR33                         CAN_RXIMR_REG(CAN1_BASE_PTR,33)
#define FLEXCAN1_RXIMR34                         CAN_RXIMR_REG(CAN1_BASE_PTR,34)
#define FLEXCAN1_RXIMR35                         CAN_RXIMR_REG(CAN1_BASE_PTR,35)
#define FLEXCAN1_RXIMR36                         CAN_RXIMR_REG(CAN1_BASE_PTR,36)
#define FLEXCAN1_RXIMR37                         CAN_RXIMR_REG(CAN1_BASE_PTR,37)
#define FLEXCAN1_RXIMR38                         CAN_RXIMR_REG(CAN1_BASE_PTR,38)
#define FLEXCAN1_RXIMR39                         CAN_RXIMR_REG(CAN1_BASE_PTR,39)
#define FLEXCAN1_RXIMR40                         CAN_RXIMR_REG(CAN1_BASE_PTR,40)
#define FLEXCAN1_RXIMR41                         CAN_RXIMR_REG(CAN1_BASE_PTR,41)
#define FLEXCAN1_RXIMR42                         CAN_RXIMR_REG(CAN1_BASE_PTR,42)
#define FLEXCAN1_RXIMR43                         CAN_RXIMR_REG(CAN1_BASE_PTR,43)
#define FLEXCAN1_RXIMR44                         CAN_RXIMR_REG(CAN1_BASE_PTR,44)
#define FLEXCAN1_RXIMR45                         CAN_RXIMR_REG(CAN1_BASE_PTR,45)
#define FLEXCAN1_RXIMR46                         CAN_RXIMR_REG(CAN1_BASE_PTR,46)
#define FLEXCAN1_RXIMR47                         CAN_RXIMR_REG(CAN1_BASE_PTR,47)
#define FLEXCAN1_RXIMR48                         CAN_RXIMR_REG(CAN1_BASE_PTR,48)
#define FLEXCAN1_RXIMR49                         CAN_RXIMR_REG(CAN1_BASE_PTR,49)
#define FLEXCAN1_RXIMR50                         CAN_RXIMR_REG(CAN1_BASE_PTR,50)
#define FLEXCAN1_RXIMR51                         CAN_RXIMR_REG(CAN1_BASE_PTR,51)
#define FLEXCAN1_RXIMR52                         CAN_RXIMR_REG(CAN1_BASE_PTR,52)
#define FLEXCAN1_RXIMR53                         CAN_RXIMR_REG(CAN1_BASE_PTR,53)
#define FLEXCAN1_RXIMR54                         CAN_RXIMR_REG(CAN1_BASE_PTR,54)
#define FLEXCAN1_RXIMR55                         CAN_RXIMR_REG(CAN1_BASE_PTR,55)
#define FLEXCAN1_RXIMR56                         CAN_RXIMR_REG(CAN1_BASE_PTR,56)
#define FLEXCAN1_RXIMR57                         CAN_RXIMR_REG(CAN1_BASE_PTR,57)
#define FLEXCAN1_RXIMR58                         CAN_RXIMR_REG(CAN1_BASE_PTR,58)
#define FLEXCAN1_RXIMR59                         CAN_RXIMR_REG(CAN1_BASE_PTR,59)
#define FLEXCAN1_RXIMR60                         CAN_RXIMR_REG(CAN1_BASE_PTR,60)
#define FLEXCAN1_RXIMR61                         CAN_RXIMR_REG(CAN1_BASE_PTR,61)
#define FLEXCAN1_RXIMR62                         CAN_RXIMR_REG(CAN1_BASE_PTR,62)
#define FLEXCAN1_RXIMR63                         CAN_RXIMR_REG(CAN1_BASE_PTR,63)
#define FLEXCAN1_GFWR                            CAN_GFWR_REG(CAN1_BASE_PTR)
/* CAN2 */
#define FLEXCAN2_MCR                             CAN_MCR_REG(CAN2_BASE_PTR)
#define FLEXCAN2_CTRL1                           CAN_CTRL1_REG(CAN2_BASE_PTR)
#define FLEXCAN2_TIMER                           CAN_TIMER_REG(CAN2_BASE_PTR)
#define FLEXCAN2_RXMGMASK                        CAN_RXMGMASK_REG(CAN2_BASE_PTR)
#define FLEXCAN2_RX14MASK                        CAN_RX14MASK_REG(CAN2_BASE_PTR)
#define FLEXCAN2_RX15MASK                        CAN_RX15MASK_REG(CAN2_BASE_PTR)
#define FLEXCAN2_ECR                             CAN_ECR_REG(CAN2_BASE_PTR)
#define FLEXCAN2_ESR1                            CAN_ESR1_REG(CAN2_BASE_PTR)
#define FLEXCAN2_IMASK2                          CAN_IMASK2_REG(CAN2_BASE_PTR)
#define FLEXCAN2_IMASK1                          CAN_IMASK1_REG(CAN2_BASE_PTR)
#define FLEXCAN2_IFLAG2                          CAN_IFLAG2_REG(CAN2_BASE_PTR)
#define FLEXCAN2_IFLAG1                          CAN_IFLAG1_REG(CAN2_BASE_PTR)
#define FLEXCAN2_CTRL2                           CAN_CTRL2_REG(CAN2_BASE_PTR)
#define FLEXCAN2_ESR2                            CAN_ESR2_REG(CAN2_BASE_PTR)
#define FLEXCAN2_CRCR                            CAN_CRCR_REG(CAN2_BASE_PTR)
#define FLEXCAN2_RXFGMASK                        CAN_RXFGMASK_REG(CAN2_BASE_PTR)
#define FLEXCAN2_RXFIR                           CAN_RXFIR_REG(CAN2_BASE_PTR)
#define FLEXCAN2_CS0                             CAN_CS_REG(CAN2_BASE_PTR,0)
#define FLEXCAN2_ID0                             CAN_ID_REG(CAN2_BASE_PTR,0)
#define FLEXCAN2_WORD00                          CAN_WORD0_REG(CAN2_BASE_PTR,0)
#define FLEXCAN2_WORD10                          CAN_WORD1_REG(CAN2_BASE_PTR,0)
#define FLEXCAN2_CS1                             CAN_CS_REG(CAN2_BASE_PTR,1)
#define FLEXCAN2_ID1                             CAN_ID_REG(CAN2_BASE_PTR,1)
#define FLEXCAN2_WORD01                          CAN_WORD0_REG(CAN2_BASE_PTR,1)
#define FLEXCAN2_WORD11                          CAN_WORD1_REG(CAN2_BASE_PTR,1)
#define FLEXCAN2_CS2                             CAN_CS_REG(CAN2_BASE_PTR,2)
#define FLEXCAN2_ID2                             CAN_ID_REG(CAN2_BASE_PTR,2)
#define FLEXCAN2_WORD02                          CAN_WORD0_REG(CAN2_BASE_PTR,2)
#define FLEXCAN2_WORD12                          CAN_WORD1_REG(CAN2_BASE_PTR,2)
#define FLEXCAN2_CS3                             CAN_CS_REG(CAN2_BASE_PTR,3)
#define FLEXCAN2_ID3                             CAN_ID_REG(CAN2_BASE_PTR,3)
#define FLEXCAN2_WORD03                          CAN_WORD0_REG(CAN2_BASE_PTR,3)
#define FLEXCAN2_WORD13                          CAN_WORD1_REG(CAN2_BASE_PTR,3)
#define FLEXCAN2_CS4                             CAN_CS_REG(CAN2_BASE_PTR,4)
#define FLEXCAN2_ID4                             CAN_ID_REG(CAN2_BASE_PTR,4)
#define FLEXCAN2_WORD04                          CAN_WORD0_REG(CAN2_BASE_PTR,4)
#define FLEXCAN2_WORD14                          CAN_WORD1_REG(CAN2_BASE_PTR,4)
#define FLEXCAN2_CS5                             CAN_CS_REG(CAN2_BASE_PTR,5)
#define FLEXCAN2_ID5                             CAN_ID_REG(CAN2_BASE_PTR,5)
#define FLEXCAN2_WORD05                          CAN_WORD0_REG(CAN2_BASE_PTR,5)
#define FLEXCAN2_WORD15                          CAN_WORD1_REG(CAN2_BASE_PTR,5)
#define FLEXCAN2_CS6                             CAN_CS_REG(CAN2_BASE_PTR,6)
#define FLEXCAN2_ID6                             CAN_ID_REG(CAN2_BASE_PTR,6)
#define FLEXCAN2_WORD06                          CAN_WORD0_REG(CAN2_BASE_PTR,6)
#define FLEXCAN2_WORD16                          CAN_WORD1_REG(CAN2_BASE_PTR,6)
#define FLEXCAN2_CS7                             CAN_CS_REG(CAN2_BASE_PTR,7)
#define FLEXCAN2_ID7                             CAN_ID_REG(CAN2_BASE_PTR,7)
#define FLEXCAN2_WORD07                          CAN_WORD0_REG(CAN2_BASE_PTR,7)
#define FLEXCAN2_WORD17                          CAN_WORD1_REG(CAN2_BASE_PTR,7)
#define FLEXCAN2_CS8                             CAN_CS_REG(CAN2_BASE_PTR,8)
#define FLEXCAN2_ID8                             CAN_ID_REG(CAN2_BASE_PTR,8)
#define FLEXCAN2_WORD08                          CAN_WORD0_REG(CAN2_BASE_PTR,8)
#define FLEXCAN2_WORD18                          CAN_WORD1_REG(CAN2_BASE_PTR,8)
#define FLEXCAN2_CS9                             CAN_CS_REG(CAN2_BASE_PTR,9)
#define FLEXCAN2_ID9                             CAN_ID_REG(CAN2_BASE_PTR,9)
#define FLEXCAN2_WORD09                          CAN_WORD0_REG(CAN2_BASE_PTR,9)
#define FLEXCAN2_WORD19                          CAN_WORD1_REG(CAN2_BASE_PTR,9)
#define FLEXCAN2_CS10                            CAN_CS_REG(CAN2_BASE_PTR,10)
#define FLEXCAN2_ID10                            CAN_ID_REG(CAN2_BASE_PTR,10)
#define FLEXCAN2_WORD010                         CAN_WORD0_REG(CAN2_BASE_PTR,10)
#define FLEXCAN2_WORD110                         CAN_WORD1_REG(CAN2_BASE_PTR,10)
#define FLEXCAN2_CS11                            CAN_CS_REG(CAN2_BASE_PTR,11)
#define FLEXCAN2_ID11                            CAN_ID_REG(CAN2_BASE_PTR,11)
#define FLEXCAN2_WORD011                         CAN_WORD0_REG(CAN2_BASE_PTR,11)
#define FLEXCAN2_WORD111                         CAN_WORD1_REG(CAN2_BASE_PTR,11)
#define FLEXCAN2_CS12                            CAN_CS_REG(CAN2_BASE_PTR,12)
#define FLEXCAN2_ID12                            CAN_ID_REG(CAN2_BASE_PTR,12)
#define FLEXCAN2_WORD012                         CAN_WORD0_REG(CAN2_BASE_PTR,12)
#define FLEXCAN2_WORD112                         CAN_WORD1_REG(CAN2_BASE_PTR,12)
#define FLEXCAN2_CS13                            CAN_CS_REG(CAN2_BASE_PTR,13)
#define FLEXCAN2_ID13                            CAN_ID_REG(CAN2_BASE_PTR,13)
#define FLEXCAN2_WORD013                         CAN_WORD0_REG(CAN2_BASE_PTR,13)
#define FLEXCAN2_WORD113                         CAN_WORD1_REG(CAN2_BASE_PTR,13)
#define FLEXCAN2_CS14                            CAN_CS_REG(CAN2_BASE_PTR,14)
#define FLEXCAN2_ID14                            CAN_ID_REG(CAN2_BASE_PTR,14)
#define FLEXCAN2_WORD014                         CAN_WORD0_REG(CAN2_BASE_PTR,14)
#define FLEXCAN2_WORD114                         CAN_WORD1_REG(CAN2_BASE_PTR,14)
#define FLEXCAN2_CS15                            CAN_CS_REG(CAN2_BASE_PTR,15)
#define FLEXCAN2_ID15                            CAN_ID_REG(CAN2_BASE_PTR,15)
#define FLEXCAN2_WORD015                         CAN_WORD0_REG(CAN2_BASE_PTR,15)
#define FLEXCAN2_WORD115                         CAN_WORD1_REG(CAN2_BASE_PTR,15)
#define FLEXCAN2_CS16                            CAN_CS_REG(CAN2_BASE_PTR,16)
#define FLEXCAN2_ID16                            CAN_ID_REG(CAN2_BASE_PTR,16)
#define FLEXCAN2_WORD016                         CAN_WORD0_REG(CAN2_BASE_PTR,16)
#define FLEXCAN2_WORD116                         CAN_WORD1_REG(CAN2_BASE_PTR,16)
#define FLEXCAN2_CS17                            CAN_CS_REG(CAN2_BASE_PTR,17)
#define FLEXCAN2_ID17                            CAN_ID_REG(CAN2_BASE_PTR,17)
#define FLEXCAN2_WORD017                         CAN_WORD0_REG(CAN2_BASE_PTR,17)
#define FLEXCAN2_WORD117                         CAN_WORD1_REG(CAN2_BASE_PTR,17)
#define FLEXCAN2_CS18                            CAN_CS_REG(CAN2_BASE_PTR,18)
#define FLEXCAN2_ID18                            CAN_ID_REG(CAN2_BASE_PTR,18)
#define FLEXCAN2_WORD018                         CAN_WORD0_REG(CAN2_BASE_PTR,18)
#define FLEXCAN2_WORD118                         CAN_WORD1_REG(CAN2_BASE_PTR,18)
#define FLEXCAN2_CS19                            CAN_CS_REG(CAN2_BASE_PTR,19)
#define FLEXCAN2_ID19                            CAN_ID_REG(CAN2_BASE_PTR,19)
#define FLEXCAN2_WORD019                         CAN_WORD0_REG(CAN2_BASE_PTR,19)
#define FLEXCAN2_WORD119                         CAN_WORD1_REG(CAN2_BASE_PTR,19)
#define FLEXCAN2_CS20                            CAN_CS_REG(CAN2_BASE_PTR,20)
#define FLEXCAN2_ID20                            CAN_ID_REG(CAN2_BASE_PTR,20)
#define FLEXCAN2_WORD020                         CAN_WORD0_REG(CAN2_BASE_PTR,20)
#define FLEXCAN2_WORD120                         CAN_WORD1_REG(CAN2_BASE_PTR,20)
#define FLEXCAN2_CS21                            CAN_CS_REG(CAN2_BASE_PTR,21)
#define FLEXCAN2_ID21                            CAN_ID_REG(CAN2_BASE_PTR,21)
#define FLEXCAN2_WORD021                         CAN_WORD0_REG(CAN2_BASE_PTR,21)
#define FLEXCAN2_WORD121                         CAN_WORD1_REG(CAN2_BASE_PTR,21)
#define FLEXCAN2_CS22                            CAN_CS_REG(CAN2_BASE_PTR,22)
#define FLEXCAN2_ID22                            CAN_ID_REG(CAN2_BASE_PTR,22)
#define FLEXCAN2_WORD022                         CAN_WORD0_REG(CAN2_BASE_PTR,22)
#define FLEXCAN2_WORD122                         CAN_WORD1_REG(CAN2_BASE_PTR,22)
#define FLEXCAN2_CS23                            CAN_CS_REG(CAN2_BASE_PTR,23)
#define FLEXCAN2_ID23                            CAN_ID_REG(CAN2_BASE_PTR,23)
#define FLEXCAN2_WORD023                         CAN_WORD0_REG(CAN2_BASE_PTR,23)
#define FLEXCAN2_WORD123                         CAN_WORD1_REG(CAN2_BASE_PTR,23)
#define FLEXCAN2_CS24                            CAN_CS_REG(CAN2_BASE_PTR,24)
#define FLEXCAN2_ID24                            CAN_ID_REG(CAN2_BASE_PTR,24)
#define FLEXCAN2_WORD024                         CAN_WORD0_REG(CAN2_BASE_PTR,24)
#define FLEXCAN2_WORD124                         CAN_WORD1_REG(CAN2_BASE_PTR,24)
#define FLEXCAN2_CS25                            CAN_CS_REG(CAN2_BASE_PTR,25)
#define FLEXCAN2_ID25                            CAN_ID_REG(CAN2_BASE_PTR,25)
#define FLEXCAN2_WORD025                         CAN_WORD0_REG(CAN2_BASE_PTR,25)
#define FLEXCAN2_WORD125                         CAN_WORD1_REG(CAN2_BASE_PTR,25)
#define FLEXCAN2_CS26                            CAN_CS_REG(CAN2_BASE_PTR,26)
#define FLEXCAN2_ID26                            CAN_ID_REG(CAN2_BASE_PTR,26)
#define FLEXCAN2_WORD026                         CAN_WORD0_REG(CAN2_BASE_PTR,26)
#define FLEXCAN2_WORD126                         CAN_WORD1_REG(CAN2_BASE_PTR,26)
#define FLEXCAN2_CS27                            CAN_CS_REG(CAN2_BASE_PTR,27)
#define FLEXCAN2_ID27                            CAN_ID_REG(CAN2_BASE_PTR,27)
#define FLEXCAN2_WORD027                         CAN_WORD0_REG(CAN2_BASE_PTR,27)
#define FLEXCAN2_WORD127                         CAN_WORD1_REG(CAN2_BASE_PTR,27)
#define FLEXCAN2_CS28                            CAN_CS_REG(CAN2_BASE_PTR,28)
#define FLEXCAN2_ID28                            CAN_ID_REG(CAN2_BASE_PTR,28)
#define FLEXCAN2_WORD028                         CAN_WORD0_REG(CAN2_BASE_PTR,28)
#define FLEXCAN2_WORD128                         CAN_WORD1_REG(CAN2_BASE_PTR,28)
#define FLEXCAN2_CS29                            CAN_CS_REG(CAN2_BASE_PTR,29)
#define FLEXCAN2_ID29                            CAN_ID_REG(CAN2_BASE_PTR,29)
#define FLEXCAN2_WORD029                         CAN_WORD0_REG(CAN2_BASE_PTR,29)
#define FLEXCAN2_WORD129                         CAN_WORD1_REG(CAN2_BASE_PTR,29)
#define FLEXCAN2_CS30                            CAN_CS_REG(CAN2_BASE_PTR,30)
#define FLEXCAN2_ID30                            CAN_ID_REG(CAN2_BASE_PTR,30)
#define FLEXCAN2_WORD030                         CAN_WORD0_REG(CAN2_BASE_PTR,30)
#define FLEXCAN2_WORD130                         CAN_WORD1_REG(CAN2_BASE_PTR,30)
#define FLEXCAN2_CS31                            CAN_CS_REG(CAN2_BASE_PTR,31)
#define FLEXCAN2_ID31                            CAN_ID_REG(CAN2_BASE_PTR,31)
#define FLEXCAN2_WORD031                         CAN_WORD0_REG(CAN2_BASE_PTR,31)
#define FLEXCAN2_WORD131                         CAN_WORD1_REG(CAN2_BASE_PTR,31)
#define FLEXCAN2_CS32                            CAN_CS_REG(CAN2_BASE_PTR,32)
#define FLEXCAN2_ID32                            CAN_ID_REG(CAN2_BASE_PTR,32)
#define FLEXCAN2_WORD032                         CAN_WORD0_REG(CAN2_BASE_PTR,32)
#define FLEXCAN2_WORD132                         CAN_WORD1_REG(CAN2_BASE_PTR,32)
#define FLEXCAN2_CS33                            CAN_CS_REG(CAN2_BASE_PTR,33)
#define FLEXCAN2_ID33                            CAN_ID_REG(CAN2_BASE_PTR,33)
#define FLEXCAN2_WORD033                         CAN_WORD0_REG(CAN2_BASE_PTR,33)
#define FLEXCAN2_WORD133                         CAN_WORD1_REG(CAN2_BASE_PTR,33)
#define FLEXCAN2_CS34                            CAN_CS_REG(CAN2_BASE_PTR,34)
#define FLEXCAN2_ID34                            CAN_ID_REG(CAN2_BASE_PTR,34)
#define FLEXCAN2_WORD034                         CAN_WORD0_REG(CAN2_BASE_PTR,34)
#define FLEXCAN2_WORD134                         CAN_WORD1_REG(CAN2_BASE_PTR,34)
#define FLEXCAN2_CS35                            CAN_CS_REG(CAN2_BASE_PTR,35)
#define FLEXCAN2_ID35                            CAN_ID_REG(CAN2_BASE_PTR,35)
#define FLEXCAN2_WORD035                         CAN_WORD0_REG(CAN2_BASE_PTR,35)
#define FLEXCAN2_WORD135                         CAN_WORD1_REG(CAN2_BASE_PTR,35)
#define FLEXCAN2_CS36                            CAN_CS_REG(CAN2_BASE_PTR,36)
#define FLEXCAN2_ID36                            CAN_ID_REG(CAN2_BASE_PTR,36)
#define FLEXCAN2_WORD036                         CAN_WORD0_REG(CAN2_BASE_PTR,36)
#define FLEXCAN2_WORD136                         CAN_WORD1_REG(CAN2_BASE_PTR,36)
#define FLEXCAN2_CS37                            CAN_CS_REG(CAN2_BASE_PTR,37)
#define FLEXCAN2_ID37                            CAN_ID_REG(CAN2_BASE_PTR,37)
#define FLEXCAN2_WORD037                         CAN_WORD0_REG(CAN2_BASE_PTR,37)
#define FLEXCAN2_WORD137                         CAN_WORD1_REG(CAN2_BASE_PTR,37)
#define FLEXCAN2_CS38                            CAN_CS_REG(CAN2_BASE_PTR,38)
#define FLEXCAN2_ID38                            CAN_ID_REG(CAN2_BASE_PTR,38)
#define FLEXCAN2_WORD038                         CAN_WORD0_REG(CAN2_BASE_PTR,38)
#define FLEXCAN2_WORD138                         CAN_WORD1_REG(CAN2_BASE_PTR,38)
#define FLEXCAN2_CS39                            CAN_CS_REG(CAN2_BASE_PTR,39)
#define FLEXCAN2_ID39                            CAN_ID_REG(CAN2_BASE_PTR,39)
#define FLEXCAN2_WORD039                         CAN_WORD0_REG(CAN2_BASE_PTR,39)
#define FLEXCAN2_WORD139                         CAN_WORD1_REG(CAN2_BASE_PTR,39)
#define FLEXCAN2_CS40                            CAN_CS_REG(CAN2_BASE_PTR,40)
#define FLEXCAN2_ID40                            CAN_ID_REG(CAN2_BASE_PTR,40)
#define FLEXCAN2_WORD040                         CAN_WORD0_REG(CAN2_BASE_PTR,40)
#define FLEXCAN2_WORD140                         CAN_WORD1_REG(CAN2_BASE_PTR,40)
#define FLEXCAN2_CS41                            CAN_CS_REG(CAN2_BASE_PTR,41)
#define FLEXCAN2_ID41                            CAN_ID_REG(CAN2_BASE_PTR,41)
#define FLEXCAN2_WORD041                         CAN_WORD0_REG(CAN2_BASE_PTR,41)
#define FLEXCAN2_WORD141                         CAN_WORD1_REG(CAN2_BASE_PTR,41)
#define FLEXCAN2_CS42                            CAN_CS_REG(CAN2_BASE_PTR,42)
#define FLEXCAN2_ID42                            CAN_ID_REG(CAN2_BASE_PTR,42)
#define FLEXCAN2_WORD042                         CAN_WORD0_REG(CAN2_BASE_PTR,42)
#define FLEXCAN2_WORD142                         CAN_WORD1_REG(CAN2_BASE_PTR,42)
#define FLEXCAN2_CS43                            CAN_CS_REG(CAN2_BASE_PTR,43)
#define FLEXCAN2_ID43                            CAN_ID_REG(CAN2_BASE_PTR,43)
#define FLEXCAN2_WORD043                         CAN_WORD0_REG(CAN2_BASE_PTR,43)
#define FLEXCAN2_WORD143                         CAN_WORD1_REG(CAN2_BASE_PTR,43)
#define FLEXCAN2_CS44                            CAN_CS_REG(CAN2_BASE_PTR,44)
#define FLEXCAN2_ID44                            CAN_ID_REG(CAN2_BASE_PTR,44)
#define FLEXCAN2_WORD044                         CAN_WORD0_REG(CAN2_BASE_PTR,44)
#define FLEXCAN2_WORD144                         CAN_WORD1_REG(CAN2_BASE_PTR,44)
#define FLEXCAN2_CS45                            CAN_CS_REG(CAN2_BASE_PTR,45)
#define FLEXCAN2_ID45                            CAN_ID_REG(CAN2_BASE_PTR,45)
#define FLEXCAN2_WORD045                         CAN_WORD0_REG(CAN2_BASE_PTR,45)
#define FLEXCAN2_WORD145                         CAN_WORD1_REG(CAN2_BASE_PTR,45)
#define FLEXCAN2_CS46                            CAN_CS_REG(CAN2_BASE_PTR,46)
#define FLEXCAN2_ID46                            CAN_ID_REG(CAN2_BASE_PTR,46)
#define FLEXCAN2_WORD046                         CAN_WORD0_REG(CAN2_BASE_PTR,46)
#define FLEXCAN2_WORD146                         CAN_WORD1_REG(CAN2_BASE_PTR,46)
#define FLEXCAN2_CS47                            CAN_CS_REG(CAN2_BASE_PTR,47)
#define FLEXCAN2_ID47                            CAN_ID_REG(CAN2_BASE_PTR,47)
#define FLEXCAN2_WORD047                         CAN_WORD0_REG(CAN2_BASE_PTR,47)
#define FLEXCAN2_WORD147                         CAN_WORD1_REG(CAN2_BASE_PTR,47)
#define FLEXCAN2_CS48                            CAN_CS_REG(CAN2_BASE_PTR,48)
#define FLEXCAN2_ID48                            CAN_ID_REG(CAN2_BASE_PTR,48)
#define FLEXCAN2_WORD048                         CAN_WORD0_REG(CAN2_BASE_PTR,48)
#define FLEXCAN2_WORD148                         CAN_WORD1_REG(CAN2_BASE_PTR,48)
#define FLEXCAN2_CS49                            CAN_CS_REG(CAN2_BASE_PTR,49)
#define FLEXCAN2_ID49                            CAN_ID_REG(CAN2_BASE_PTR,49)
#define FLEXCAN2_WORD049                         CAN_WORD0_REG(CAN2_BASE_PTR,49)
#define FLEXCAN2_WORD149                         CAN_WORD1_REG(CAN2_BASE_PTR,49)
#define FLEXCAN2_CS50                            CAN_CS_REG(CAN2_BASE_PTR,50)
#define FLEXCAN2_ID50                            CAN_ID_REG(CAN2_BASE_PTR,50)
#define FLEXCAN2_WORD050                         CAN_WORD0_REG(CAN2_BASE_PTR,50)
#define FLEXCAN2_WORD150                         CAN_WORD1_REG(CAN2_BASE_PTR,50)
#define FLEXCAN2_CS51                            CAN_CS_REG(CAN2_BASE_PTR,51)
#define FLEXCAN2_ID51                            CAN_ID_REG(CAN2_BASE_PTR,51)
#define FLEXCAN2_WORD051                         CAN_WORD0_REG(CAN2_BASE_PTR,51)
#define FLEXCAN2_WORD151                         CAN_WORD1_REG(CAN2_BASE_PTR,51)
#define FLEXCAN2_CS52                            CAN_CS_REG(CAN2_BASE_PTR,52)
#define FLEXCAN2_ID52                            CAN_ID_REG(CAN2_BASE_PTR,52)
#define FLEXCAN2_WORD052                         CAN_WORD0_REG(CAN2_BASE_PTR,52)
#define FLEXCAN2_WORD152                         CAN_WORD1_REG(CAN2_BASE_PTR,52)
#define FLEXCAN2_CS53                            CAN_CS_REG(CAN2_BASE_PTR,53)
#define FLEXCAN2_ID53                            CAN_ID_REG(CAN2_BASE_PTR,53)
#define FLEXCAN2_WORD053                         CAN_WORD0_REG(CAN2_BASE_PTR,53)
#define FLEXCAN2_WORD153                         CAN_WORD1_REG(CAN2_BASE_PTR,53)
#define FLEXCAN2_CS54                            CAN_CS_REG(CAN2_BASE_PTR,54)
#define FLEXCAN2_ID54                            CAN_ID_REG(CAN2_BASE_PTR,54)
#define FLEXCAN2_WORD054                         CAN_WORD0_REG(CAN2_BASE_PTR,54)
#define FLEXCAN2_WORD154                         CAN_WORD1_REG(CAN2_BASE_PTR,54)
#define FLEXCAN2_CS55                            CAN_CS_REG(CAN2_BASE_PTR,55)
#define FLEXCAN2_ID55                            CAN_ID_REG(CAN2_BASE_PTR,55)
#define FLEXCAN2_WORD055                         CAN_WORD0_REG(CAN2_BASE_PTR,55)
#define FLEXCAN2_WORD155                         CAN_WORD1_REG(CAN2_BASE_PTR,55)
#define FLEXCAN2_CS56                            CAN_CS_REG(CAN2_BASE_PTR,56)
#define FLEXCAN2_ID56                            CAN_ID_REG(CAN2_BASE_PTR,56)
#define FLEXCAN2_WORD056                         CAN_WORD0_REG(CAN2_BASE_PTR,56)
#define FLEXCAN2_WORD156                         CAN_WORD1_REG(CAN2_BASE_PTR,56)
#define FLEXCAN2_CS57                            CAN_CS_REG(CAN2_BASE_PTR,57)
#define FLEXCAN2_ID57                            CAN_ID_REG(CAN2_BASE_PTR,57)
#define FLEXCAN2_WORD057                         CAN_WORD0_REG(CAN2_BASE_PTR,57)
#define FLEXCAN2_WORD157                         CAN_WORD1_REG(CAN2_BASE_PTR,57)
#define FLEXCAN2_CS58                            CAN_CS_REG(CAN2_BASE_PTR,58)
#define FLEXCAN2_ID58                            CAN_ID_REG(CAN2_BASE_PTR,58)
#define FLEXCAN2_WORD058                         CAN_WORD0_REG(CAN2_BASE_PTR,58)
#define FLEXCAN2_WORD158                         CAN_WORD1_REG(CAN2_BASE_PTR,58)
#define FLEXCAN2_CS59                            CAN_CS_REG(CAN2_BASE_PTR,59)
#define FLEXCAN2_ID59                            CAN_ID_REG(CAN2_BASE_PTR,59)
#define FLEXCAN2_WORD059                         CAN_WORD0_REG(CAN2_BASE_PTR,59)
#define FLEXCAN2_WORD159                         CAN_WORD1_REG(CAN2_BASE_PTR,59)
#define FLEXCAN2_CS60                            CAN_CS_REG(CAN2_BASE_PTR,60)
#define FLEXCAN2_ID60                            CAN_ID_REG(CAN2_BASE_PTR,60)
#define FLEXCAN2_WORD060                         CAN_WORD0_REG(CAN2_BASE_PTR,60)
#define FLEXCAN2_WORD160                         CAN_WORD1_REG(CAN2_BASE_PTR,60)
#define FLEXCAN2_CS61                            CAN_CS_REG(CAN2_BASE_PTR,61)
#define FLEXCAN2_ID61                            CAN_ID_REG(CAN2_BASE_PTR,61)
#define FLEXCAN2_WORD061                         CAN_WORD0_REG(CAN2_BASE_PTR,61)
#define FLEXCAN2_WORD161                         CAN_WORD1_REG(CAN2_BASE_PTR,61)
#define FLEXCAN2_CS62                            CAN_CS_REG(CAN2_BASE_PTR,62)
#define FLEXCAN2_ID62                            CAN_ID_REG(CAN2_BASE_PTR,62)
#define FLEXCAN2_WORD062                         CAN_WORD0_REG(CAN2_BASE_PTR,62)
#define FLEXCAN2_WORD162                         CAN_WORD1_REG(CAN2_BASE_PTR,62)
#define FLEXCAN2_CS63                            CAN_CS_REG(CAN2_BASE_PTR,63)
#define FLEXCAN2_ID63                            CAN_ID_REG(CAN2_BASE_PTR,63)
#define FLEXCAN2_WORD063                         CAN_WORD0_REG(CAN2_BASE_PTR,63)
#define FLEXCAN2_WORD163                         CAN_WORD1_REG(CAN2_BASE_PTR,63)
#define FLEXCAN2_RXIMR0                          CAN_RXIMR_REG(CAN2_BASE_PTR,0)
#define FLEXCAN2_RXIMR1                          CAN_RXIMR_REG(CAN2_BASE_PTR,1)
#define FLEXCAN2_RXIMR2                          CAN_RXIMR_REG(CAN2_BASE_PTR,2)
#define FLEXCAN2_RXIMR3                          CAN_RXIMR_REG(CAN2_BASE_PTR,3)
#define FLEXCAN2_RXIMR4                          CAN_RXIMR_REG(CAN2_BASE_PTR,4)
#define FLEXCAN2_RXIMR5                          CAN_RXIMR_REG(CAN2_BASE_PTR,5)
#define FLEXCAN2_RXIMR6                          CAN_RXIMR_REG(CAN2_BASE_PTR,6)
#define FLEXCAN2_RXIMR7                          CAN_RXIMR_REG(CAN2_BASE_PTR,7)
#define FLEXCAN2_RXIMR8                          CAN_RXIMR_REG(CAN2_BASE_PTR,8)
#define FLEXCAN2_RXIMR9                          CAN_RXIMR_REG(CAN2_BASE_PTR,9)
#define FLEXCAN2_RXIMR10                         CAN_RXIMR_REG(CAN2_BASE_PTR,10)
#define FLEXCAN2_RXIMR11                         CAN_RXIMR_REG(CAN2_BASE_PTR,11)
#define FLEXCAN2_RXIMR12                         CAN_RXIMR_REG(CAN2_BASE_PTR,12)
#define FLEXCAN2_RXIMR13                         CAN_RXIMR_REG(CAN2_BASE_PTR,13)
#define FLEXCAN2_RXIMR14                         CAN_RXIMR_REG(CAN2_BASE_PTR,14)
#define FLEXCAN2_RXIMR15                         CAN_RXIMR_REG(CAN2_BASE_PTR,15)
#define FLEXCAN2_RXIMR16                         CAN_RXIMR_REG(CAN2_BASE_PTR,16)
#define FLEXCAN2_RXIMR17                         CAN_RXIMR_REG(CAN2_BASE_PTR,17)
#define FLEXCAN2_RXIMR18                         CAN_RXIMR_REG(CAN2_BASE_PTR,18)
#define FLEXCAN2_RXIMR19                         CAN_RXIMR_REG(CAN2_BASE_PTR,19)
#define FLEXCAN2_RXIMR20                         CAN_RXIMR_REG(CAN2_BASE_PTR,20)
#define FLEXCAN2_RXIMR21                         CAN_RXIMR_REG(CAN2_BASE_PTR,21)
#define FLEXCAN2_RXIMR22                         CAN_RXIMR_REG(CAN2_BASE_PTR,22)
#define FLEXCAN2_RXIMR23                         CAN_RXIMR_REG(CAN2_BASE_PTR,23)
#define FLEXCAN2_RXIMR24                         CAN_RXIMR_REG(CAN2_BASE_PTR,24)
#define FLEXCAN2_RXIMR25                         CAN_RXIMR_REG(CAN2_BASE_PTR,25)
#define FLEXCAN2_RXIMR26                         CAN_RXIMR_REG(CAN2_BASE_PTR,26)
#define FLEXCAN2_RXIMR27                         CAN_RXIMR_REG(CAN2_BASE_PTR,27)
#define FLEXCAN2_RXIMR28                         CAN_RXIMR_REG(CAN2_BASE_PTR,28)
#define FLEXCAN2_RXIMR29                         CAN_RXIMR_REG(CAN2_BASE_PTR,29)
#define FLEXCAN2_RXIMR30                         CAN_RXIMR_REG(CAN2_BASE_PTR,30)
#define FLEXCAN2_RXIMR31                         CAN_RXIMR_REG(CAN2_BASE_PTR,31)
#define FLEXCAN2_RXIMR32                         CAN_RXIMR_REG(CAN2_BASE_PTR,32)
#define FLEXCAN2_RXIMR33                         CAN_RXIMR_REG(CAN2_BASE_PTR,33)
#define FLEXCAN2_RXIMR34                         CAN_RXIMR_REG(CAN2_BASE_PTR,34)
#define FLEXCAN2_RXIMR35                         CAN_RXIMR_REG(CAN2_BASE_PTR,35)
#define FLEXCAN2_RXIMR36                         CAN_RXIMR_REG(CAN2_BASE_PTR,36)
#define FLEXCAN2_RXIMR37                         CAN_RXIMR_REG(CAN2_BASE_PTR,37)
#define FLEXCAN2_RXIMR38                         CAN_RXIMR_REG(CAN2_BASE_PTR,38)
#define FLEXCAN2_RXIMR39                         CAN_RXIMR_REG(CAN2_BASE_PTR,39)
#define FLEXCAN2_RXIMR40                         CAN_RXIMR_REG(CAN2_BASE_PTR,40)
#define FLEXCAN2_RXIMR41                         CAN_RXIMR_REG(CAN2_BASE_PTR,41)
#define FLEXCAN2_RXIMR42                         CAN_RXIMR_REG(CAN2_BASE_PTR,42)
#define FLEXCAN2_RXIMR43                         CAN_RXIMR_REG(CAN2_BASE_PTR,43)
#define FLEXCAN2_RXIMR44                         CAN_RXIMR_REG(CAN2_BASE_PTR,44)
#define FLEXCAN2_RXIMR45                         CAN_RXIMR_REG(CAN2_BASE_PTR,45)
#define FLEXCAN2_RXIMR46                         CAN_RXIMR_REG(CAN2_BASE_PTR,46)
#define FLEXCAN2_RXIMR47                         CAN_RXIMR_REG(CAN2_BASE_PTR,47)
#define FLEXCAN2_RXIMR48                         CAN_RXIMR_REG(CAN2_BASE_PTR,48)
#define FLEXCAN2_RXIMR49                         CAN_RXIMR_REG(CAN2_BASE_PTR,49)
#define FLEXCAN2_RXIMR50                         CAN_RXIMR_REG(CAN2_BASE_PTR,50)
#define FLEXCAN2_RXIMR51                         CAN_RXIMR_REG(CAN2_BASE_PTR,51)
#define FLEXCAN2_RXIMR52                         CAN_RXIMR_REG(CAN2_BASE_PTR,52)
#define FLEXCAN2_RXIMR53                         CAN_RXIMR_REG(CAN2_BASE_PTR,53)
#define FLEXCAN2_RXIMR54                         CAN_RXIMR_REG(CAN2_BASE_PTR,54)
#define FLEXCAN2_RXIMR55                         CAN_RXIMR_REG(CAN2_BASE_PTR,55)
#define FLEXCAN2_RXIMR56                         CAN_RXIMR_REG(CAN2_BASE_PTR,56)
#define FLEXCAN2_RXIMR57                         CAN_RXIMR_REG(CAN2_BASE_PTR,57)
#define FLEXCAN2_RXIMR58                         CAN_RXIMR_REG(CAN2_BASE_PTR,58)
#define FLEXCAN2_RXIMR59                         CAN_RXIMR_REG(CAN2_BASE_PTR,59)
#define FLEXCAN2_RXIMR60                         CAN_RXIMR_REG(CAN2_BASE_PTR,60)
#define FLEXCAN2_RXIMR61                         CAN_RXIMR_REG(CAN2_BASE_PTR,61)
#define FLEXCAN2_RXIMR62                         CAN_RXIMR_REG(CAN2_BASE_PTR,62)
#define FLEXCAN2_RXIMR63                         CAN_RXIMR_REG(CAN2_BASE_PTR,63)
#define FLEXCAN2_GFWR                            CAN_GFWR_REG(CAN2_BASE_PTR)

/* CAN - Register array accessors */
#define CAN1_CS(index)                           CAN_CS_REG(CAN1_BASE_PTR,index)
#define CAN2_CS(index)                           CAN_CS_REG(CAN2_BASE_PTR,index)
#define CAN1_ID(index)                           CAN_ID_REG(CAN1_BASE_PTR,index)
#define CAN2_ID(index)                           CAN_ID_REG(CAN2_BASE_PTR,index)
#define CAN1_WORD0(index)                        CAN_WORD0_REG(CAN1_BASE_PTR,index)
#define CAN2_WORD0(index)                        CAN_WORD0_REG(CAN2_BASE_PTR,index)
#define CAN1_WORD1(index)                        CAN_WORD1_REG(CAN1_BASE_PTR,index)
#define CAN2_WORD1(index)                        CAN_WORD1_REG(CAN2_BASE_PTR,index)
#define CAN1_RXIMR(index)                        CAN_RXIMR_REG(CAN1_BASE_PTR,index)
#define CAN2_RXIMR(index)                        CAN_RXIMR_REG(CAN2_BASE_PTR,index)

/*!
 * @}
 */ /* end of group CAN_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group CAN_Peripheral */


/* ----------------------------------------------------------------------------
   -- CCM
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_Peripheral CCM
 * @{
 */

/** CCM - Peripheral register structure */
typedef struct CCM_MemMap {
  uint32_t CCR;                                    /**< CCM Control Register, offset: 0x0 */
  uint8_t RESERVED_0[4];
  uint32_t CSR;                                    /**< CCM Status Register, offset: 0x8 */
  uint32_t CCSR;                                   /**< CCM Clock Switcher Register, offset: 0xC */
  uint32_t CACRR;                                  /**< CCM Arm Clock Root Register, offset: 0x10 */
  uint32_t CBCDR;                                  /**< CCM Bus Clock Divider Register, offset: 0x14 */
  uint32_t CBCMR;                                  /**< CCM Bus Clock Multiplexer Register, offset: 0x18 */
  uint32_t CSCMR1;                                 /**< CCM Serial Clock Multiplexer Register 1, offset: 0x1C */
  uint32_t CSCMR2;                                 /**< CCM Serial Clock Multiplexer Register 2, offset: 0x20 */
  uint32_t CSCDR1;                                 /**< CCM Serial Clock Divider Register 1, offset: 0x24 */
  uint32_t CS1CDR;                                 /**< CCM Clock Divider Register, offset: 0x28 */
  uint32_t CS2CDR;                                 /**< CCM Clock Divider Register, offset: 0x2C */
  uint32_t CDCDR;                                  /**< CCM D1 Clock Divider Register, offset: 0x30 */
  uint8_t RESERVED_1[4];
  uint32_t CSCDR2;                                 /**< CCM Serial Clock Divider Register 2, offset: 0x38 */
  uint32_t CSCDR3;                                 /**< CCM Serial Clock Divider Register 3, offset: 0x3C */
  uint8_t RESERVED_2[8];
  uint32_t CDHIPR;                                 /**< CCM Divider Handshake In-Process Register, offset: 0x48 */
  uint8_t RESERVED_3[8];
  uint32_t CLPCR;                                  /**< CCM Low Power Control Register, offset: 0x54 */
  uint32_t CISR;                                   /**< CCM Interrupt Status Register, offset: 0x58 */
  uint32_t CIMR;                                   /**< CCM Interrupt Mask Register, offset: 0x5C */
  uint32_t CCOSR;                                  /**< CCM Clock Output Source Register, offset: 0x60 */
  uint32_t CGPR;                                   /**< CCM General Purpose Register, offset: 0x64 */
  uint32_t CCGR0;                                  /**< CCM Clock Gating Register 0, offset: 0x68 */
  uint32_t CCGR1;                                  /**< CCM Clock Gating Register 1, offset: 0x6C */
  uint32_t CCGR2;                                  /**< CCM Clock Gating Register 2, offset: 0x70 */
  uint32_t CCGR3;                                  /**< CCM Clock Gating Register 3, offset: 0x74 */
  uint32_t CCGR4;                                  /**< CCM Clock Gating Register 4, offset: 0x78 */
  uint32_t CCGR5;                                  /**< CCM Clock Gating Register 5, offset: 0x7C */
  uint32_t CCGR6;                                  /**< CCM Clock Gating Register 6, offset: 0x80 */
  uint8_t RESERVED_4[4];
  uint32_t CMEOR;                                  /**< CCM Module Enable Overide Register, offset: 0x88 */
} volatile *CCM_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- CCM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_Register_Accessor_Macros CCM - Register accessor macros
 * @{
 */


/* CCM - Register accessors */
#define CCM_CCR_REG(base)                        ((base)->CCR)
#define CCM_CSR_REG(base)                        ((base)->CSR)
#define CCM_CCSR_REG(base)                       ((base)->CCSR)
#define CCM_CACRR_REG(base)                      ((base)->CACRR)
#define CCM_CBCDR_REG(base)                      ((base)->CBCDR)
#define CCM_CBCMR_REG(base)                      ((base)->CBCMR)
#define CCM_CSCMR1_REG(base)                     ((base)->CSCMR1)
#define CCM_CSCMR2_REG(base)                     ((base)->CSCMR2)
#define CCM_CSCDR1_REG(base)                     ((base)->CSCDR1)
#define CCM_CS1CDR_REG(base)                     ((base)->CS1CDR)
#define CCM_CS2CDR_REG(base)                     ((base)->CS2CDR)
#define CCM_CDCDR_REG(base)                      ((base)->CDCDR)
#define CCM_CSCDR2_REG(base)                     ((base)->CSCDR2)
#define CCM_CSCDR3_REG(base)                     ((base)->CSCDR3)
#define CCM_CDHIPR_REG(base)                     ((base)->CDHIPR)
#define CCM_CLPCR_REG(base)                      ((base)->CLPCR)
#define CCM_CISR_REG(base)                       ((base)->CISR)
#define CCM_CIMR_REG(base)                       ((base)->CIMR)
#define CCM_CCOSR_REG(base)                      ((base)->CCOSR)
#define CCM_CGPR_REG(base)                       ((base)->CGPR)
#define CCM_CCGR0_REG(base)                      ((base)->CCGR0)
#define CCM_CCGR1_REG(base)                      ((base)->CCGR1)
#define CCM_CCGR2_REG(base)                      ((base)->CCGR2)
#define CCM_CCGR3_REG(base)                      ((base)->CCGR3)
#define CCM_CCGR4_REG(base)                      ((base)->CCGR4)
#define CCM_CCGR5_REG(base)                      ((base)->CCGR5)
#define CCM_CCGR6_REG(base)                      ((base)->CCGR6)
#define CCM_CMEOR_REG(base)                      ((base)->CMEOR)

/*!
 * @}
 */ /* end of group CCM_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- CCM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_Register_Masks CCM Register Masks
 * @{
 */

/*! @name CCR - CCM Control Register */
#define CCM_CCR_OSCNT_MASK                       (0xFFU)
#define CCM_CCR_OSCNT_SHIFT                      (0U)
#define CCM_CCR_OSCNT(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCR_OSCNT_SHIFT)) & CCM_CCR_OSCNT_MASK)
#define CCM_CCR_COSC_EN_MASK                     (0x1000U)
#define CCM_CCR_COSC_EN_SHIFT                    (12U)
#define CCM_CCR_REG_BYPASS_COUNT_MASK            (0x7E00000U)
#define CCM_CCR_REG_BYPASS_COUNT_SHIFT           (21U)
#define CCM_CCR_REG_BYPASS_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << CCM_CCR_REG_BYPASS_COUNT_SHIFT)) & CCM_CCR_REG_BYPASS_COUNT_MASK)
#define CCM_CCR_RBC_EN_MASK                      (0x8000000U)
#define CCM_CCR_RBC_EN_SHIFT                     (27U)

/*! @name CSR - CCM Status Register */
#define CCM_CSR_REF_EN_B_MASK                    (0x1U)
#define CCM_CSR_REF_EN_B_SHIFT                   (0U)
#define CCM_CSR_CAMP2_READY_MASK                 (0x8U)
#define CCM_CSR_CAMP2_READY_SHIFT                (3U)
#define CCM_CSR_COSC_READY_MASK                  (0x20U)
#define CCM_CSR_COSC_READY_SHIFT                 (5U)

/*! @name CCSR - CCM Clock Switcher Register */
#define CCM_CCSR_PLL3_SW_CLK_SEL_MASK            (0x1U)
#define CCM_CCSR_PLL3_SW_CLK_SEL_SHIFT           (0U)

/*! @name CACRR - CCM Arm Clock Root Register */
#define CCM_CACRR_ARM_PODF_MASK                  (0x7U)
#define CCM_CACRR_ARM_PODF_SHIFT                 (0U)
#define CCM_CACRR_ARM_PODF(x)                    (((uint32_t)(((uint32_t)(x)) << CCM_CACRR_ARM_PODF_SHIFT)) & CCM_CACRR_ARM_PODF_MASK)

/*! @name CBCDR - CCM Bus Clock Divider Register */
#define CCM_CBCDR_SEMC_CLK_SEL_MASK              (0x40U)
#define CCM_CBCDR_SEMC_CLK_SEL_SHIFT             (6U)
#define CCM_CBCDR_SEMC_ALT_CLK_SEL_MASK          (0x80U)
#define CCM_CBCDR_SEMC_ALT_CLK_SEL_SHIFT         (7U)
#define CCM_CBCDR_IPG_PODF_MASK                  (0x300U)
#define CCM_CBCDR_IPG_PODF_SHIFT                 (8U)
#define CCM_CBCDR_IPG_PODF(x)                    (((uint32_t)(((uint32_t)(x)) << CCM_CBCDR_IPG_PODF_SHIFT)) & CCM_CBCDR_IPG_PODF_MASK)
#define CCM_CBCDR_AHB_PODF_MASK                  (0x1C00U)
#define CCM_CBCDR_AHB_PODF_SHIFT                 (10U)
#define CCM_CBCDR_AHB_PODF(x)                    (((uint32_t)(((uint32_t)(x)) << CCM_CBCDR_AHB_PODF_SHIFT)) & CCM_CBCDR_AHB_PODF_MASK)
#define CCM_CBCDR_SEMC_PODF_MASK                 (0x70000U)
#define CCM_CBCDR_SEMC_PODF_SHIFT                (16U)
#define CCM_CBCDR_SEMC_PODF(x)                   (((uint32_t)(((uint32_t)(x)) << CCM_CBCDR_SEMC_PODF_SHIFT)) & CCM_CBCDR_SEMC_PODF_MASK)
#define CCM_CBCDR_PERIPH_CLK_SEL_MASK            (0x2000000U)
#define CCM_CBCDR_PERIPH_CLK_SEL_SHIFT           (25U)
#define CCM_CBCDR_PERIPH_CLK2_PODF_MASK          (0x38000000U)
#define CCM_CBCDR_PERIPH_CLK2_PODF_SHIFT         (27U)
#define CCM_CBCDR_PERIPH_CLK2_PODF(x)            (((uint32_t)(((uint32_t)(x)) << CCM_CBCDR_PERIPH_CLK2_PODF_SHIFT)) & CCM_CBCDR_PERIPH_CLK2_PODF_MASK)

/*! @name CBCMR - CCM Bus Clock Multiplexer Register */
#define CCM_CBCMR_LPSPI_CLK_SEL_MASK             (0x30U)
#define CCM_CBCMR_LPSPI_CLK_SEL_SHIFT            (4U)
#define CCM_CBCMR_LPSPI_CLK_SEL(x)               (((uint32_t)(((uint32_t)(x)) << CCM_CBCMR_LPSPI_CLK_SEL_SHIFT)) & CCM_CBCMR_LPSPI_CLK_SEL_MASK)
#define CCM_CBCMR_PERIPH_CLK2_SEL_MASK           (0x3000U)
#define CCM_CBCMR_PERIPH_CLK2_SEL_SHIFT          (12U)
#define CCM_CBCMR_PERIPH_CLK2_SEL(x)             (((uint32_t)(((uint32_t)(x)) << CCM_CBCMR_PERIPH_CLK2_SEL_SHIFT)) & CCM_CBCMR_PERIPH_CLK2_SEL_MASK)
#define CCM_CBCMR_TRACE_CLK_SEL_MASK             (0xC000U)
#define CCM_CBCMR_TRACE_CLK_SEL_SHIFT            (14U)
#define CCM_CBCMR_TRACE_CLK_SEL(x)               (((uint32_t)(((uint32_t)(x)) << CCM_CBCMR_TRACE_CLK_SEL_SHIFT)) & CCM_CBCMR_TRACE_CLK_SEL_MASK)
#define CCM_CBCMR_PRE_PERIPH_CLK_SEL_MASK        (0xC0000U)
#define CCM_CBCMR_PRE_PERIPH_CLK_SEL_SHIFT       (18U)
#define CCM_CBCMR_PRE_PERIPH_CLK_SEL(x)          (((uint32_t)(((uint32_t)(x)) << CCM_CBCMR_PRE_PERIPH_CLK_SEL_SHIFT)) & CCM_CBCMR_PRE_PERIPH_CLK_SEL_MASK)
#define CCM_CBCMR_LPSPI_PODF_MASK                (0x1C000000U)
#define CCM_CBCMR_LPSPI_PODF_SHIFT               (26U)
#define CCM_CBCMR_LPSPI_PODF(x)                  (((uint32_t)(((uint32_t)(x)) << CCM_CBCMR_LPSPI_PODF_SHIFT)) & CCM_CBCMR_LPSPI_PODF_MASK)

/*! @name CSCMR1 - CCM Serial Clock Multiplexer Register 1 */
#define CCM_CSCMR1_PERCLK_PODF_MASK              (0x3FU)
#define CCM_CSCMR1_PERCLK_PODF_SHIFT             (0U)
#define CCM_CSCMR1_PERCLK_PODF(x)                (((uint32_t)(((uint32_t)(x)) << CCM_CSCMR1_PERCLK_PODF_SHIFT)) & CCM_CSCMR1_PERCLK_PODF_MASK)
#define CCM_CSCMR1_PERCLK_CLK_SEL_MASK           (0x40U)
#define CCM_CSCMR1_PERCLK_CLK_SEL_SHIFT          (6U)
#define CCM_CSCMR1_SAI1_CLK_SEL_MASK             (0xC00U)
#define CCM_CSCMR1_SAI1_CLK_SEL_SHIFT            (10U)
#define CCM_CSCMR1_SAI1_CLK_SEL(x)               (((uint32_t)(((uint32_t)(x)) << CCM_CSCMR1_SAI1_CLK_SEL_SHIFT)) & CCM_CSCMR1_SAI1_CLK_SEL_MASK)
#define CCM_CSCMR1_SAI2_CLK_SEL_MASK             (0x3000U)
#define CCM_CSCMR1_SAI2_CLK_SEL_SHIFT            (12U)
#define CCM_CSCMR1_SAI2_CLK_SEL(x)               (((uint32_t)(((uint32_t)(x)) << CCM_CSCMR1_SAI2_CLK_SEL_SHIFT)) & CCM_CSCMR1_SAI2_CLK_SEL_MASK)
#define CCM_CSCMR1_SAI3_CLK_SEL_MASK             (0xC000U)
#define CCM_CSCMR1_SAI3_CLK_SEL_SHIFT            (14U)
#define CCM_CSCMR1_SAI3_CLK_SEL(x)               (((uint32_t)(((uint32_t)(x)) << CCM_CSCMR1_SAI3_CLK_SEL_SHIFT)) & CCM_CSCMR1_SAI3_CLK_SEL_MASK)
#define CCM_CSCMR1_USDHC1_CLK_SEL_MASK           (0x10000U)
#define CCM_CSCMR1_USDHC1_CLK_SEL_SHIFT          (16U)
#define CCM_CSCMR1_USDHC2_CLK_SEL_MASK           (0x20000U)
#define CCM_CSCMR1_USDHC2_CLK_SEL_SHIFT          (17U)
#define CCM_CSCMR1_FLEXSPI_PODF_MASK             (0x3800000U)
#define CCM_CSCMR1_FLEXSPI_PODF_SHIFT            (23U)
#define CCM_CSCMR1_FLEXSPI_PODF(x)               (((uint32_t)(((uint32_t)(x)) << CCM_CSCMR1_FLEXSPI_PODF_SHIFT)) & CCM_CSCMR1_FLEXSPI_PODF_MASK)
#define CCM_CSCMR1_FLEXSPI_CLK_SEL_MASK          (0x60000000U)
#define CCM_CSCMR1_FLEXSPI_CLK_SEL_SHIFT         (29U)
#define CCM_CSCMR1_FLEXSPI_CLK_SEL(x)            (((uint32_t)(((uint32_t)(x)) << CCM_CSCMR1_FLEXSPI_CLK_SEL_SHIFT)) & CCM_CSCMR1_FLEXSPI_CLK_SEL_MASK)

/*! @name CSCMR2 - CCM Serial Clock Multiplexer Register 2 */
#define CCM_CSCMR2_CAN_CLK_PODF_MASK             (0xFCU)
#define CCM_CSCMR2_CAN_CLK_PODF_SHIFT            (2U)
#define CCM_CSCMR2_CAN_CLK_PODF(x)               (((uint32_t)(((uint32_t)(x)) << CCM_CSCMR2_CAN_CLK_PODF_SHIFT)) & CCM_CSCMR2_CAN_CLK_PODF_MASK)
#define CCM_CSCMR2_CAN_CLK_SEL_MASK              (0x300U)
#define CCM_CSCMR2_CAN_CLK_SEL_SHIFT             (8U)
#define CCM_CSCMR2_CAN_CLK_SEL(x)                (((uint32_t)(((uint32_t)(x)) << CCM_CSCMR2_CAN_CLK_SEL_SHIFT)) & CCM_CSCMR2_CAN_CLK_SEL_MASK)
#define CCM_CSCMR2_FLEXIO1_CLK_SEL_MASK          (0x180000U)
#define CCM_CSCMR2_FLEXIO1_CLK_SEL_SHIFT         (19U)
#define CCM_CSCMR2_FLEXIO1_CLK_SEL(x)            (((uint32_t)(((uint32_t)(x)) << CCM_CSCMR2_FLEXIO1_CLK_SEL_SHIFT)) & CCM_CSCMR2_FLEXIO1_CLK_SEL_MASK)

/*! @name CSCDR1 - CCM Serial Clock Divider Register 1 */
#define CCM_CSCDR1_UART_CLK_PODF_MASK            (0x3FU)
#define CCM_CSCDR1_UART_CLK_PODF_SHIFT           (0U)
#define CCM_CSCDR1_UART_CLK_PODF(x)              (((uint32_t)(((uint32_t)(x)) << CCM_CSCDR1_UART_CLK_PODF_SHIFT)) & CCM_CSCDR1_UART_CLK_PODF_MASK)
#define CCM_CSCDR1_UART_CLK_SEL_MASK             (0x40U)
#define CCM_CSCDR1_UART_CLK_SEL_SHIFT            (6U)
#define CCM_CSCDR1_USDHC1_PODF_MASK              (0x3800U)
#define CCM_CSCDR1_USDHC1_PODF_SHIFT             (11U)
#define CCM_CSCDR1_USDHC1_PODF(x)                (((uint32_t)(((uint32_t)(x)) << CCM_CSCDR1_USDHC1_PODF_SHIFT)) & CCM_CSCDR1_USDHC1_PODF_MASK)
#define CCM_CSCDR1_USDHC2_PODF_MASK              (0x70000U)
#define CCM_CSCDR1_USDHC2_PODF_SHIFT             (16U)
#define CCM_CSCDR1_USDHC2_PODF(x)                (((uint32_t)(((uint32_t)(x)) << CCM_CSCDR1_USDHC2_PODF_SHIFT)) & CCM_CSCDR1_USDHC2_PODF_MASK)
#define CCM_CSCDR1_TRACE_PODF_MASK               (0xE000000U)
#define CCM_CSCDR1_TRACE_PODF_SHIFT              (25U)
#define CCM_CSCDR1_TRACE_PODF(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CSCDR1_TRACE_PODF_SHIFT)) & CCM_CSCDR1_TRACE_PODF_MASK)

/*! @name CS1CDR - CCM Clock Divider Register */
#define CCM_CS1CDR_SAI1_CLK_PODF_MASK            (0x3FU)
#define CCM_CS1CDR_SAI1_CLK_PODF_SHIFT           (0U)
#define CCM_CS1CDR_SAI1_CLK_PODF(x)              (((uint32_t)(((uint32_t)(x)) << CCM_CS1CDR_SAI1_CLK_PODF_SHIFT)) & CCM_CS1CDR_SAI1_CLK_PODF_MASK)
#define CCM_CS1CDR_SAI1_CLK_PRED_MASK            (0x1C0U)
#define CCM_CS1CDR_SAI1_CLK_PRED_SHIFT           (6U)
#define CCM_CS1CDR_SAI1_CLK_PRED(x)              (((uint32_t)(((uint32_t)(x)) << CCM_CS1CDR_SAI1_CLK_PRED_SHIFT)) & CCM_CS1CDR_SAI1_CLK_PRED_MASK)
#define CCM_CS1CDR_FLEXIO1_CLK_PRED_MASK         (0xE00U)
#define CCM_CS1CDR_FLEXIO1_CLK_PRED_SHIFT        (9U)
#define CCM_CS1CDR_FLEXIO1_CLK_PRED(x)           (((uint32_t)(((uint32_t)(x)) << CCM_CS1CDR_FLEXIO1_CLK_PRED_SHIFT)) & CCM_CS1CDR_FLEXIO1_CLK_PRED_MASK)
#define CCM_CS1CDR_SAI3_CLK_PODF_MASK            (0x3F0000U)
#define CCM_CS1CDR_SAI3_CLK_PODF_SHIFT           (16U)
#define CCM_CS1CDR_SAI3_CLK_PODF(x)              (((uint32_t)(((uint32_t)(x)) << CCM_CS1CDR_SAI3_CLK_PODF_SHIFT)) & CCM_CS1CDR_SAI3_CLK_PODF_MASK)
#define CCM_CS1CDR_SAI3_CLK_PRED_MASK            (0x1C00000U)
#define CCM_CS1CDR_SAI3_CLK_PRED_SHIFT           (22U)
#define CCM_CS1CDR_SAI3_CLK_PRED(x)              (((uint32_t)(((uint32_t)(x)) << CCM_CS1CDR_SAI3_CLK_PRED_SHIFT)) & CCM_CS1CDR_SAI3_CLK_PRED_MASK)
#define CCM_CS1CDR_FLEXIO1_CLK_PODF_MASK         (0xE000000U)
#define CCM_CS1CDR_FLEXIO1_CLK_PODF_SHIFT        (25U)
#define CCM_CS1CDR_FLEXIO1_CLK_PODF(x)           (((uint32_t)(((uint32_t)(x)) << CCM_CS1CDR_FLEXIO1_CLK_PODF_SHIFT)) & CCM_CS1CDR_FLEXIO1_CLK_PODF_MASK)

/*! @name CS2CDR - CCM Clock Divider Register */
#define CCM_CS2CDR_SAI2_CLK_PODF_MASK            (0x3FU)
#define CCM_CS2CDR_SAI2_CLK_PODF_SHIFT           (0U)
#define CCM_CS2CDR_SAI2_CLK_PODF(x)              (((uint32_t)(((uint32_t)(x)) << CCM_CS2CDR_SAI2_CLK_PODF_SHIFT)) & CCM_CS2CDR_SAI2_CLK_PODF_MASK)
#define CCM_CS2CDR_SAI2_CLK_PRED_MASK            (0x1C0U)
#define CCM_CS2CDR_SAI2_CLK_PRED_SHIFT           (6U)
#define CCM_CS2CDR_SAI2_CLK_PRED(x)              (((uint32_t)(((uint32_t)(x)) << CCM_CS2CDR_SAI2_CLK_PRED_SHIFT)) & CCM_CS2CDR_SAI2_CLK_PRED_MASK)

/*! @name CDCDR - CCM D1 Clock Divider Register */
#define CCM_CDCDR_SPDIF0_CLK_SEL_MASK            (0x300000U)
#define CCM_CDCDR_SPDIF0_CLK_SEL_SHIFT           (20U)
#define CCM_CDCDR_SPDIF0_CLK_SEL(x)              (((uint32_t)(((uint32_t)(x)) << CCM_CDCDR_SPDIF0_CLK_SEL_SHIFT)) & CCM_CDCDR_SPDIF0_CLK_SEL_MASK)
#define CCM_CDCDR_SPDIF0_CLK_PODF_MASK           (0x1C00000U)
#define CCM_CDCDR_SPDIF0_CLK_PODF_SHIFT          (22U)
#define CCM_CDCDR_SPDIF0_CLK_PODF(x)             (((uint32_t)(((uint32_t)(x)) << CCM_CDCDR_SPDIF0_CLK_PODF_SHIFT)) & CCM_CDCDR_SPDIF0_CLK_PODF_MASK)
#define CCM_CDCDR_SPDIF0_CLK_PRED_MASK           (0xE000000U)
#define CCM_CDCDR_SPDIF0_CLK_PRED_SHIFT          (25U)
#define CCM_CDCDR_SPDIF0_CLK_PRED(x)             (((uint32_t)(((uint32_t)(x)) << CCM_CDCDR_SPDIF0_CLK_PRED_SHIFT)) & CCM_CDCDR_SPDIF0_CLK_PRED_MASK)

/*! @name CSCDR2 - CCM Serial Clock Divider Register 2 */
#define CCM_CSCDR2_LPI2C_CLK_SEL_MASK            (0x40000U)
#define CCM_CSCDR2_LPI2C_CLK_SEL_SHIFT           (18U)
#define CCM_CSCDR2_LPI2C_CLK_PODF_MASK           (0x1F80000U)
#define CCM_CSCDR2_LPI2C_CLK_PODF_SHIFT          (19U)
#define CCM_CSCDR2_LPI2C_CLK_PODF(x)             (((uint32_t)(((uint32_t)(x)) << CCM_CSCDR2_LPI2C_CLK_PODF_SHIFT)) & CCM_CSCDR2_LPI2C_CLK_PODF_MASK)

/*! @name CDHIPR - CCM Divider Handshake In-Process Register */
#define CCM_CDHIPR_SEMC_PODF_BUSY_MASK           (0x1U)
#define CCM_CDHIPR_SEMC_PODF_BUSY_SHIFT          (0U)
#define CCM_CDHIPR_AHB_PODF_BUSY_MASK            (0x2U)
#define CCM_CDHIPR_AHB_PODF_BUSY_SHIFT           (1U)
#define CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY_MASK     (0x8U)
#define CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY_SHIFT    (3U)
#define CCM_CDHIPR_PERIPH_CLK_SEL_BUSY_MASK      (0x20U)
#define CCM_CDHIPR_PERIPH_CLK_SEL_BUSY_SHIFT     (5U)
#define CCM_CDHIPR_ARM_PODF_BUSY_MASK            (0x10000U)
#define CCM_CDHIPR_ARM_PODF_BUSY_SHIFT           (16U)

/*! @name CLPCR - CCM Low Power Control Register */
#define CCM_CLPCR_LPM_MASK                       (0x3U)
#define CCM_CLPCR_LPM_SHIFT                      (0U)
#define CCM_CLPCR_LPM(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CLPCR_LPM_SHIFT)) & CCM_CLPCR_LPM_MASK)
#define CCM_CLPCR_ARM_CLK_DIS_ON_LPM_MASK        (0x20U)
#define CCM_CLPCR_ARM_CLK_DIS_ON_LPM_SHIFT       (5U)
#define CCM_CLPCR_SBYOS_MASK                     (0x40U)
#define CCM_CLPCR_SBYOS_SHIFT                    (6U)
#define CCM_CLPCR_DIS_REF_OSC_MASK               (0x80U)
#define CCM_CLPCR_DIS_REF_OSC_SHIFT              (7U)
#define CCM_CLPCR_VSTBY_MASK                     (0x100U)
#define CCM_CLPCR_VSTBY_SHIFT                    (8U)
#define CCM_CLPCR_STBY_COUNT_MASK                (0x600U)
#define CCM_CLPCR_STBY_COUNT_SHIFT               (9U)
#define CCM_CLPCR_STBY_COUNT(x)                  (((uint32_t)(((uint32_t)(x)) << CCM_CLPCR_STBY_COUNT_SHIFT)) & CCM_CLPCR_STBY_COUNT_MASK)
#define CCM_CLPCR_COSC_PWRDOWN_MASK              (0x800U)
#define CCM_CLPCR_COSC_PWRDOWN_SHIFT             (11U)
#define CCM_CLPCR_BYPASS_LPM_HS1_MASK            (0x80000U)
#define CCM_CLPCR_BYPASS_LPM_HS1_SHIFT           (19U)
#define CCM_CLPCR_BYPASS_LPM_HS0_MASK            (0x200000U)
#define CCM_CLPCR_BYPASS_LPM_HS0_SHIFT           (21U)
#define CCM_CLPCR_MASK_CORE0_WFI_MASK            (0x400000U)
#define CCM_CLPCR_MASK_CORE0_WFI_SHIFT           (22U)
#define CCM_CLPCR_MASK_SCU_IDLE_MASK             (0x4000000U)
#define CCM_CLPCR_MASK_SCU_IDLE_SHIFT            (26U)
#define CCM_CLPCR_MASK_L2CC_IDLE_MASK            (0x8000000U)
#define CCM_CLPCR_MASK_L2CC_IDLE_SHIFT           (27U)

/*! @name CISR - CCM Interrupt Status Register */
#define CCM_CISR_LRF_PLL_MASK                    (0x1U)
#define CCM_CISR_LRF_PLL_SHIFT                   (0U)
#define CCM_CISR_COSC_READY_MASK                 (0x40U)
#define CCM_CISR_COSC_READY_SHIFT                (6U)
#define CCM_CISR_SEMC_PODF_LOADED_MASK           (0x20000U)
#define CCM_CISR_SEMC_PODF_LOADED_SHIFT          (17U)
#define CCM_CISR_PERIPH2_CLK_SEL_LOADED_MASK     (0x80000U)
#define CCM_CISR_PERIPH2_CLK_SEL_LOADED_SHIFT    (19U)
#define CCM_CISR_AHB_PODF_LOADED_MASK            (0x100000U)
#define CCM_CISR_AHB_PODF_LOADED_SHIFT           (20U)
#define CCM_CISR_PERIPH_CLK_SEL_LOADED_MASK      (0x400000U)
#define CCM_CISR_PERIPH_CLK_SEL_LOADED_SHIFT     (22U)
#define CCM_CISR_ARM_PODF_LOADED_MASK            (0x4000000U)
#define CCM_CISR_ARM_PODF_LOADED_SHIFT           (26U)

/*! @name CIMR - CCM Interrupt Mask Register */
#define CCM_CIMR_MASK_LRF_PLL_MASK               (0x1U)
#define CCM_CIMR_MASK_LRF_PLL_SHIFT              (0U)
#define CCM_CIMR_MASK_COSC_READY_MASK            (0x40U)
#define CCM_CIMR_MASK_COSC_READY_SHIFT           (6U)
#define CCM_CIMR_MASK_SEMC_PODF_LOADED_MASK      (0x20000U)
#define CCM_CIMR_MASK_SEMC_PODF_LOADED_SHIFT     (17U)
#define CCM_CIMR_MASK_PERIPH2_CLK_SEL_LOADED_MASK (0x80000U)
#define CCM_CIMR_MASK_PERIPH2_CLK_SEL_LOADED_SHIFT (19U)
#define CCM_CIMR_MASK_AHB_PODF_LOADED_MASK       (0x100000U)
#define CCM_CIMR_MASK_AHB_PODF_LOADED_SHIFT      (20U)
#define CCM_CIMR_MASK_PERIPH_CLK_SEL_LOADED_MASK (0x400000U)
#define CCM_CIMR_MASK_PERIPH_CLK_SEL_LOADED_SHIFT (22U)
#define CCM_CIMR_ARM_PODF_LOADED_MASK            (0x4000000U)
#define CCM_CIMR_ARM_PODF_LOADED_SHIFT           (26U)

/*! @name CCOSR - CCM Clock Output Source Register */
#define CCM_CCOSR_CLKO1_SEL_MASK                 (0xFU)
#define CCM_CCOSR_CLKO1_SEL_SHIFT                (0U)
#define CCM_CCOSR_CLKO1_SEL(x)                   (((uint32_t)(((uint32_t)(x)) << CCM_CCOSR_CLKO1_SEL_SHIFT)) & CCM_CCOSR_CLKO1_SEL_MASK)
#define CCM_CCOSR_CLKO1_DIV_MASK                 (0x70U)
#define CCM_CCOSR_CLKO1_DIV_SHIFT                (4U)
#define CCM_CCOSR_CLKO1_DIV(x)                   (((uint32_t)(((uint32_t)(x)) << CCM_CCOSR_CLKO1_DIV_SHIFT)) & CCM_CCOSR_CLKO1_DIV_MASK)
#define CCM_CCOSR_CLKO1_EN_MASK                  (0x80U)
#define CCM_CCOSR_CLKO1_EN_SHIFT                 (7U)
#define CCM_CCOSR_CLK_OUT_SEL_MASK               (0x100U)
#define CCM_CCOSR_CLK_OUT_SEL_SHIFT              (8U)
#define CCM_CCOSR_CLKO2_SEL_MASK                 (0x1F0000U)
#define CCM_CCOSR_CLKO2_SEL_SHIFT                (16U)
#define CCM_CCOSR_CLKO2_SEL(x)                   (((uint32_t)(((uint32_t)(x)) << CCM_CCOSR_CLKO2_SEL_SHIFT)) & CCM_CCOSR_CLKO2_SEL_MASK)
#define CCM_CCOSR_CLKO2_DIV_MASK                 (0xE00000U)
#define CCM_CCOSR_CLKO2_DIV_SHIFT                (21U)
#define CCM_CCOSR_CLKO2_DIV(x)                   (((uint32_t)(((uint32_t)(x)) << CCM_CCOSR_CLKO2_DIV_SHIFT)) & CCM_CCOSR_CLKO2_DIV_MASK)
#define CCM_CCOSR_CLKO2_EN_MASK                  (0x1000000U)
#define CCM_CCOSR_CLKO2_EN_SHIFT                 (24U)

/*! @name CGPR - CCM General Purpose Register */
#define CCM_CGPR_PMIC_DELAY_SCALER_MASK          (0x1U)
#define CCM_CGPR_PMIC_DELAY_SCALER_SHIFT         (0U)
#define CCM_CGPR_EFUSE_PROG_SUPPLY_GATE_MASK     (0x10U)
#define CCM_CGPR_EFUSE_PROG_SUPPLY_GATE_SHIFT    (4U)
#define CCM_CGPR_SYS_MEM_DS_CTRL_MASK            (0xC000U)
#define CCM_CGPR_SYS_MEM_DS_CTRL_SHIFT           (14U)
#define CCM_CGPR_SYS_MEM_DS_CTRL(x)              (((uint32_t)(((uint32_t)(x)) << CCM_CGPR_SYS_MEM_DS_CTRL_SHIFT)) & CCM_CGPR_SYS_MEM_DS_CTRL_MASK)
#define CCM_CGPR_FPL_MASK                        (0x10000U)
#define CCM_CGPR_FPL_SHIFT                       (16U)
#define CCM_CGPR_INT_MEM_CLK_LPM_MASK            (0x20000U)
#define CCM_CGPR_INT_MEM_CLK_LPM_SHIFT           (17U)

/*! @name CCGR0 - CCM Clock Gating Register 0 */
#define CCM_CCGR0_CG0_MASK                       (0x3U)
#define CCM_CCGR0_CG0_SHIFT                      (0U)
#define CCM_CCGR0_CG0(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR0_CG0_SHIFT)) & CCM_CCGR0_CG0_MASK)
#define CCM_CCGR0_CG1_MASK                       (0xCU)
#define CCM_CCGR0_CG1_SHIFT                      (2U)
#define CCM_CCGR0_CG1(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR0_CG1_SHIFT)) & CCM_CCGR0_CG1_MASK)
#define CCM_CCGR0_CG2_MASK                       (0x30U)
#define CCM_CCGR0_CG2_SHIFT                      (4U)
#define CCM_CCGR0_CG2(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR0_CG2_SHIFT)) & CCM_CCGR0_CG2_MASK)
#define CCM_CCGR0_CG3_MASK                       (0xC0U)
#define CCM_CCGR0_CG3_SHIFT                      (6U)
#define CCM_CCGR0_CG3(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR0_CG3_SHIFT)) & CCM_CCGR0_CG3_MASK)
#define CCM_CCGR0_CG4_MASK                       (0x300U)
#define CCM_CCGR0_CG4_SHIFT                      (8U)
#define CCM_CCGR0_CG4(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR0_CG4_SHIFT)) & CCM_CCGR0_CG4_MASK)
#define CCM_CCGR0_CG5_MASK                       (0xC00U)
#define CCM_CCGR0_CG5_SHIFT                      (10U)
#define CCM_CCGR0_CG5(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR0_CG5_SHIFT)) & CCM_CCGR0_CG5_MASK)
#define CCM_CCGR0_CG6_MASK                       (0x3000U)
#define CCM_CCGR0_CG6_SHIFT                      (12U)
#define CCM_CCGR0_CG6(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR0_CG6_SHIFT)) & CCM_CCGR0_CG6_MASK)
#define CCM_CCGR0_CG7_MASK                       (0xC000U)
#define CCM_CCGR0_CG7_SHIFT                      (14U)
#define CCM_CCGR0_CG7(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR0_CG7_SHIFT)) & CCM_CCGR0_CG7_MASK)
#define CCM_CCGR0_CG8_MASK                       (0x30000U)
#define CCM_CCGR0_CG8_SHIFT                      (16U)
#define CCM_CCGR0_CG8(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR0_CG8_SHIFT)) & CCM_CCGR0_CG8_MASK)
#define CCM_CCGR0_CG9_MASK                       (0xC0000U)
#define CCM_CCGR0_CG9_SHIFT                      (18U)
#define CCM_CCGR0_CG9(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR0_CG9_SHIFT)) & CCM_CCGR0_CG9_MASK)
#define CCM_CCGR0_CG10_MASK                      (0x300000U)
#define CCM_CCGR0_CG10_SHIFT                     (20U)
#define CCM_CCGR0_CG10(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR0_CG10_SHIFT)) & CCM_CCGR0_CG10_MASK)
#define CCM_CCGR0_CG11_MASK                      (0xC00000U)
#define CCM_CCGR0_CG11_SHIFT                     (22U)
#define CCM_CCGR0_CG11(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR0_CG11_SHIFT)) & CCM_CCGR0_CG11_MASK)
#define CCM_CCGR0_CG12_MASK                      (0x3000000U)
#define CCM_CCGR0_CG12_SHIFT                     (24U)
#define CCM_CCGR0_CG12(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR0_CG12_SHIFT)) & CCM_CCGR0_CG12_MASK)
#define CCM_CCGR0_CG13_MASK                      (0xC000000U)
#define CCM_CCGR0_CG13_SHIFT                     (26U)
#define CCM_CCGR0_CG13(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR0_CG13_SHIFT)) & CCM_CCGR0_CG13_MASK)
#define CCM_CCGR0_CG14_MASK                      (0x30000000U)
#define CCM_CCGR0_CG14_SHIFT                     (28U)
#define CCM_CCGR0_CG14(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR0_CG14_SHIFT)) & CCM_CCGR0_CG14_MASK)
#define CCM_CCGR0_CG15_MASK                      (0xC0000000U)
#define CCM_CCGR0_CG15_SHIFT                     (30U)
#define CCM_CCGR0_CG15(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR0_CG15_SHIFT)) & CCM_CCGR0_CG15_MASK)

/*! @name CCGR1 - CCM Clock Gating Register 1 */
#define CCM_CCGR1_CG0_MASK                       (0x3U)
#define CCM_CCGR1_CG0_SHIFT                      (0U)
#define CCM_CCGR1_CG0(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR1_CG0_SHIFT)) & CCM_CCGR1_CG0_MASK)
#define CCM_CCGR1_CG1_MASK                       (0xCU)
#define CCM_CCGR1_CG1_SHIFT                      (2U)
#define CCM_CCGR1_CG1(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR1_CG1_SHIFT)) & CCM_CCGR1_CG1_MASK)
#define CCM_CCGR1_CG2_MASK                       (0x30U)
#define CCM_CCGR1_CG2_SHIFT                      (4U)
#define CCM_CCGR1_CG2(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR1_CG2_SHIFT)) & CCM_CCGR1_CG2_MASK)
#define CCM_CCGR1_CG3_MASK                       (0xC0U)
#define CCM_CCGR1_CG3_SHIFT                      (6U)
#define CCM_CCGR1_CG3(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR1_CG3_SHIFT)) & CCM_CCGR1_CG3_MASK)
#define CCM_CCGR1_CG4_MASK                       (0x300U)
#define CCM_CCGR1_CG4_SHIFT                      (8U)
#define CCM_CCGR1_CG4(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR1_CG4_SHIFT)) & CCM_CCGR1_CG4_MASK)
#define CCM_CCGR1_CG5_MASK                       (0xC00U)
#define CCM_CCGR1_CG5_SHIFT                      (10U)
#define CCM_CCGR1_CG5(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR1_CG5_SHIFT)) & CCM_CCGR1_CG5_MASK)
#define CCM_CCGR1_CG6_MASK                       (0x3000U)
#define CCM_CCGR1_CG6_SHIFT                      (12U)
#define CCM_CCGR1_CG6(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR1_CG6_SHIFT)) & CCM_CCGR1_CG6_MASK)
#define CCM_CCGR1_CG7_MASK                       (0xC000U)
#define CCM_CCGR1_CG7_SHIFT                      (14U)
#define CCM_CCGR1_CG7(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR1_CG7_SHIFT)) & CCM_CCGR1_CG7_MASK)
#define CCM_CCGR1_CG8_MASK                       (0x30000U)
#define CCM_CCGR1_CG8_SHIFT                      (16U)
#define CCM_CCGR1_CG8(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR1_CG8_SHIFT)) & CCM_CCGR1_CG8_MASK)
#define CCM_CCGR1_CG9_MASK                       (0xC0000U)
#define CCM_CCGR1_CG9_SHIFT                      (18U)
#define CCM_CCGR1_CG9(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR1_CG9_SHIFT)) & CCM_CCGR1_CG9_MASK)
#define CCM_CCGR1_CG10_MASK                      (0x300000U)
#define CCM_CCGR1_CG10_SHIFT                     (20U)
#define CCM_CCGR1_CG10(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR1_CG10_SHIFT)) & CCM_CCGR1_CG10_MASK)
#define CCM_CCGR1_CG11_MASK                      (0xC00000U)
#define CCM_CCGR1_CG11_SHIFT                     (22U)
#define CCM_CCGR1_CG11(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR1_CG11_SHIFT)) & CCM_CCGR1_CG11_MASK)
#define CCM_CCGR1_CG12_MASK                      (0x3000000U)
#define CCM_CCGR1_CG12_SHIFT                     (24U)
#define CCM_CCGR1_CG12(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR1_CG12_SHIFT)) & CCM_CCGR1_CG12_MASK)
#define CCM_CCGR1_CG13_MASK                      (0xC000000U)
#define CCM_CCGR1_CG13_SHIFT                     (26U)
#define CCM_CCGR1_CG13(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR1_CG13_SHIFT)) & CCM_CCGR1_CG13_MASK)
#define CCM_CCGR1_CG14_MASK                      (0x30000000U)
#define CCM_CCGR1_CG14_SHIFT                     (28U)
#define CCM_CCGR1_CG14(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR1_CG14_SHIFT)) & CCM_CCGR1_CG14_MASK)
#define CCM_CCGR1_CG15_MASK                      (0xC0000000U)
#define CCM_CCGR1_CG15_SHIFT                     (30U)
#define CCM_CCGR1_CG15(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR1_CG15_SHIFT)) & CCM_CCGR1_CG15_MASK)

/*! @name CCGR2 - CCM Clock Gating Register 2 */
#define CCM_CCGR2_CG0_MASK                       (0x3U)
#define CCM_CCGR2_CG0_SHIFT                      (0U)
#define CCM_CCGR2_CG0(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR2_CG0_SHIFT)) & CCM_CCGR2_CG0_MASK)
#define CCM_CCGR2_CG1_MASK                       (0xCU)
#define CCM_CCGR2_CG1_SHIFT                      (2U)
#define CCM_CCGR2_CG1(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR2_CG1_SHIFT)) & CCM_CCGR2_CG1_MASK)
#define CCM_CCGR2_CG2_MASK                       (0x30U)
#define CCM_CCGR2_CG2_SHIFT                      (4U)
#define CCM_CCGR2_CG2(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR2_CG2_SHIFT)) & CCM_CCGR2_CG2_MASK)
#define CCM_CCGR2_CG3_MASK                       (0xC0U)
#define CCM_CCGR2_CG3_SHIFT                      (6U)
#define CCM_CCGR2_CG3(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR2_CG3_SHIFT)) & CCM_CCGR2_CG3_MASK)
#define CCM_CCGR2_CG4_MASK                       (0x300U)
#define CCM_CCGR2_CG4_SHIFT                      (8U)
#define CCM_CCGR2_CG4(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR2_CG4_SHIFT)) & CCM_CCGR2_CG4_MASK)
#define CCM_CCGR2_CG5_MASK                       (0xC00U)
#define CCM_CCGR2_CG5_SHIFT                      (10U)
#define CCM_CCGR2_CG5(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR2_CG5_SHIFT)) & CCM_CCGR2_CG5_MASK)
#define CCM_CCGR2_CG6_MASK                       (0x3000U)
#define CCM_CCGR2_CG6_SHIFT                      (12U)
#define CCM_CCGR2_CG6(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR2_CG6_SHIFT)) & CCM_CCGR2_CG6_MASK)
#define CCM_CCGR2_CG7_MASK                       (0xC000U)
#define CCM_CCGR2_CG7_SHIFT                      (14U)
#define CCM_CCGR2_CG7(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR2_CG7_SHIFT)) & CCM_CCGR2_CG7_MASK)
#define CCM_CCGR2_CG8_MASK                       (0x30000U)
#define CCM_CCGR2_CG8_SHIFT                      (16U)
#define CCM_CCGR2_CG8(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR2_CG8_SHIFT)) & CCM_CCGR2_CG8_MASK)
#define CCM_CCGR2_CG9_MASK                       (0xC0000U)
#define CCM_CCGR2_CG9_SHIFT                      (18U)
#define CCM_CCGR2_CG9(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR2_CG9_SHIFT)) & CCM_CCGR2_CG9_MASK)
#define CCM_CCGR2_CG10_MASK                      (0x300000U)
#define CCM_CCGR2_CG10_SHIFT                     (20U)
#define CCM_CCGR2_CG10(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR2_CG10_SHIFT)) & CCM_CCGR2_CG10_MASK)
#define CCM_CCGR2_CG11_MASK                      (0xC00000U)
#define CCM_CCGR2_CG11_SHIFT                     (22U)
#define CCM_CCGR2_CG11(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR2_CG11_SHIFT)) & CCM_CCGR2_CG11_MASK)
#define CCM_CCGR2_CG12_MASK                      (0x3000000U)
#define CCM_CCGR2_CG12_SHIFT                     (24U)
#define CCM_CCGR2_CG12(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR2_CG12_SHIFT)) & CCM_CCGR2_CG12_MASK)
#define CCM_CCGR2_CG13_MASK                      (0xC000000U)
#define CCM_CCGR2_CG13_SHIFT                     (26U)
#define CCM_CCGR2_CG13(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR2_CG13_SHIFT)) & CCM_CCGR2_CG13_MASK)
#define CCM_CCGR2_CG14_MASK                      (0x30000000U)
#define CCM_CCGR2_CG14_SHIFT                     (28U)
#define CCM_CCGR2_CG14(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR2_CG14_SHIFT)) & CCM_CCGR2_CG14_MASK)
#define CCM_CCGR2_CG15_MASK                      (0xC0000000U)
#define CCM_CCGR2_CG15_SHIFT                     (30U)
#define CCM_CCGR2_CG15(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR2_CG15_SHIFT)) & CCM_CCGR2_CG15_MASK)

/*! @name CCGR3 - CCM Clock Gating Register 3 */
#define CCM_CCGR3_CG0_MASK                       (0x3U)
#define CCM_CCGR3_CG0_SHIFT                      (0U)
#define CCM_CCGR3_CG0(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR3_CG0_SHIFT)) & CCM_CCGR3_CG0_MASK)
#define CCM_CCGR3_CG1_MASK                       (0xCU)
#define CCM_CCGR3_CG1_SHIFT                      (2U)
#define CCM_CCGR3_CG1(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR3_CG1_SHIFT)) & CCM_CCGR3_CG1_MASK)
#define CCM_CCGR3_CG2_MASK                       (0x30U)
#define CCM_CCGR3_CG2_SHIFT                      (4U)
#define CCM_CCGR3_CG2(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR3_CG2_SHIFT)) & CCM_CCGR3_CG2_MASK)
#define CCM_CCGR3_CG3_MASK                       (0xC0U)
#define CCM_CCGR3_CG3_SHIFT                      (6U)
#define CCM_CCGR3_CG3(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR3_CG3_SHIFT)) & CCM_CCGR3_CG3_MASK)
#define CCM_CCGR3_CG4_MASK                       (0x300U)
#define CCM_CCGR3_CG4_SHIFT                      (8U)
#define CCM_CCGR3_CG4(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR3_CG4_SHIFT)) & CCM_CCGR3_CG4_MASK)
#define CCM_CCGR3_CG5_MASK                       (0xC00U)
#define CCM_CCGR3_CG5_SHIFT                      (10U)
#define CCM_CCGR3_CG5(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR3_CG5_SHIFT)) & CCM_CCGR3_CG5_MASK)
#define CCM_CCGR3_CG6_MASK                       (0x3000U)
#define CCM_CCGR3_CG6_SHIFT                      (12U)
#define CCM_CCGR3_CG6(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR3_CG6_SHIFT)) & CCM_CCGR3_CG6_MASK)
#define CCM_CCGR3_CG7_MASK                       (0xC000U)
#define CCM_CCGR3_CG7_SHIFT                      (14U)
#define CCM_CCGR3_CG7(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR3_CG7_SHIFT)) & CCM_CCGR3_CG7_MASK)
#define CCM_CCGR3_CG8_MASK                       (0x30000U)
#define CCM_CCGR3_CG8_SHIFT                      (16U)
#define CCM_CCGR3_CG8(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR3_CG8_SHIFT)) & CCM_CCGR3_CG8_MASK)
#define CCM_CCGR3_CG9_MASK                       (0xC0000U)
#define CCM_CCGR3_CG9_SHIFT                      (18U)
#define CCM_CCGR3_CG9(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR3_CG9_SHIFT)) & CCM_CCGR3_CG9_MASK)
#define CCM_CCGR3_CG10_MASK                      (0x300000U)
#define CCM_CCGR3_CG10_SHIFT                     (20U)
#define CCM_CCGR3_CG10(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR3_CG10_SHIFT)) & CCM_CCGR3_CG10_MASK)
#define CCM_CCGR3_CG11_MASK                      (0xC00000U)
#define CCM_CCGR3_CG11_SHIFT                     (22U)
#define CCM_CCGR3_CG11(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR3_CG11_SHIFT)) & CCM_CCGR3_CG11_MASK)
#define CCM_CCGR3_CG12_MASK                      (0x3000000U)
#define CCM_CCGR3_CG12_SHIFT                     (24U)
#define CCM_CCGR3_CG12(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR3_CG12_SHIFT)) & CCM_CCGR3_CG12_MASK)
#define CCM_CCGR3_CG13_MASK                      (0xC000000U)
#define CCM_CCGR3_CG13_SHIFT                     (26U)
#define CCM_CCGR3_CG13(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR3_CG13_SHIFT)) & CCM_CCGR3_CG13_MASK)
#define CCM_CCGR3_CG14_MASK                      (0x30000000U)
#define CCM_CCGR3_CG14_SHIFT                     (28U)
#define CCM_CCGR3_CG14(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR3_CG14_SHIFT)) & CCM_CCGR3_CG14_MASK)
#define CCM_CCGR3_CG15_MASK                      (0xC0000000U)
#define CCM_CCGR3_CG15_SHIFT                     (30U)
#define CCM_CCGR3_CG15(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR3_CG15_SHIFT)) & CCM_CCGR3_CG15_MASK)

/*! @name CCGR4 - CCM Clock Gating Register 4 */
#define CCM_CCGR4_CG0_MASK                       (0x3U)
#define CCM_CCGR4_CG0_SHIFT                      (0U)
#define CCM_CCGR4_CG0(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR4_CG0_SHIFT)) & CCM_CCGR4_CG0_MASK)
#define CCM_CCGR4_CG1_MASK                       (0xCU)
#define CCM_CCGR4_CG1_SHIFT                      (2U)
#define CCM_CCGR4_CG1(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR4_CG1_SHIFT)) & CCM_CCGR4_CG1_MASK)
#define CCM_CCGR4_CG2_MASK                       (0x30U)
#define CCM_CCGR4_CG2_SHIFT                      (4U)
#define CCM_CCGR4_CG2(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR4_CG2_SHIFT)) & CCM_CCGR4_CG2_MASK)
#define CCM_CCGR4_CG3_MASK                       (0xC0U)
#define CCM_CCGR4_CG3_SHIFT                      (6U)
#define CCM_CCGR4_CG3(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR4_CG3_SHIFT)) & CCM_CCGR4_CG3_MASK)
#define CCM_CCGR4_CG4_MASK                       (0x300U)
#define CCM_CCGR4_CG4_SHIFT                      (8U)
#define CCM_CCGR4_CG4(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR4_CG4_SHIFT)) & CCM_CCGR4_CG4_MASK)
#define CCM_CCGR4_CG5_MASK                       (0xC00U)
#define CCM_CCGR4_CG5_SHIFT                      (10U)
#define CCM_CCGR4_CG5(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR4_CG5_SHIFT)) & CCM_CCGR4_CG5_MASK)
#define CCM_CCGR4_CG6_MASK                       (0x3000U)
#define CCM_CCGR4_CG6_SHIFT                      (12U)
#define CCM_CCGR4_CG6(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR4_CG6_SHIFT)) & CCM_CCGR4_CG6_MASK)
#define CCM_CCGR4_CG7_MASK                       (0xC000U)
#define CCM_CCGR4_CG7_SHIFT                      (14U)
#define CCM_CCGR4_CG7(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR4_CG7_SHIFT)) & CCM_CCGR4_CG7_MASK)
#define CCM_CCGR4_CG8_MASK                       (0x30000U)
#define CCM_CCGR4_CG8_SHIFT                      (16U)
#define CCM_CCGR4_CG8(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR4_CG8_SHIFT)) & CCM_CCGR4_CG8_MASK)
#define CCM_CCGR4_CG9_MASK                       (0xC0000U)
#define CCM_CCGR4_CG9_SHIFT                      (18U)
#define CCM_CCGR4_CG9(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR4_CG9_SHIFT)) & CCM_CCGR4_CG9_MASK)
#define CCM_CCGR4_CG10_MASK                      (0x300000U)
#define CCM_CCGR4_CG10_SHIFT                     (20U)
#define CCM_CCGR4_CG10(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR4_CG10_SHIFT)) & CCM_CCGR4_CG10_MASK)
#define CCM_CCGR4_CG11_MASK                      (0xC00000U)
#define CCM_CCGR4_CG11_SHIFT                     (22U)
#define CCM_CCGR4_CG11(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR4_CG11_SHIFT)) & CCM_CCGR4_CG11_MASK)
#define CCM_CCGR4_CG12_MASK                      (0x3000000U)
#define CCM_CCGR4_CG12_SHIFT                     (24U)
#define CCM_CCGR4_CG12(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR4_CG12_SHIFT)) & CCM_CCGR4_CG12_MASK)
#define CCM_CCGR4_CG13_MASK                      (0xC000000U)
#define CCM_CCGR4_CG13_SHIFT                     (26U)
#define CCM_CCGR4_CG13(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR4_CG13_SHIFT)) & CCM_CCGR4_CG13_MASK)
#define CCM_CCGR4_CG14_MASK                      (0x30000000U)
#define CCM_CCGR4_CG14_SHIFT                     (28U)
#define CCM_CCGR4_CG14(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR4_CG14_SHIFT)) & CCM_CCGR4_CG14_MASK)
#define CCM_CCGR4_CG15_MASK                      (0xC0000000U)
#define CCM_CCGR4_CG15_SHIFT                     (30U)
#define CCM_CCGR4_CG15(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR4_CG15_SHIFT)) & CCM_CCGR4_CG15_MASK)

/*! @name CCGR5 - CCM Clock Gating Register 5 */
#define CCM_CCGR5_CG0_MASK                       (0x3U)
#define CCM_CCGR5_CG0_SHIFT                      (0U)
#define CCM_CCGR5_CG0(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR5_CG0_SHIFT)) & CCM_CCGR5_CG0_MASK)
#define CCM_CCGR5_CG1_MASK                       (0xCU)
#define CCM_CCGR5_CG1_SHIFT                      (2U)
#define CCM_CCGR5_CG1(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR5_CG1_SHIFT)) & CCM_CCGR5_CG1_MASK)
#define CCM_CCGR5_CG2_MASK                       (0x30U)
#define CCM_CCGR5_CG2_SHIFT                      (4U)
#define CCM_CCGR5_CG2(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR5_CG2_SHIFT)) & CCM_CCGR5_CG2_MASK)
#define CCM_CCGR5_CG3_MASK                       (0xC0U)
#define CCM_CCGR5_CG3_SHIFT                      (6U)
#define CCM_CCGR5_CG3(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR5_CG3_SHIFT)) & CCM_CCGR5_CG3_MASK)
#define CCM_CCGR5_CG4_MASK                       (0x300U)
#define CCM_CCGR5_CG4_SHIFT                      (8U)
#define CCM_CCGR5_CG4(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR5_CG4_SHIFT)) & CCM_CCGR5_CG4_MASK)
#define CCM_CCGR5_CG5_MASK                       (0xC00U)
#define CCM_CCGR5_CG5_SHIFT                      (10U)
#define CCM_CCGR5_CG5(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR5_CG5_SHIFT)) & CCM_CCGR5_CG5_MASK)
#define CCM_CCGR5_CG6_MASK                       (0x3000U)
#define CCM_CCGR5_CG6_SHIFT                      (12U)
#define CCM_CCGR5_CG6(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR5_CG6_SHIFT)) & CCM_CCGR5_CG6_MASK)
#define CCM_CCGR5_CG7_MASK                       (0xC000U)
#define CCM_CCGR5_CG7_SHIFT                      (14U)
#define CCM_CCGR5_CG7(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR5_CG7_SHIFT)) & CCM_CCGR5_CG7_MASK)
#define CCM_CCGR5_CG8_MASK                       (0x30000U)
#define CCM_CCGR5_CG8_SHIFT                      (16U)
#define CCM_CCGR5_CG8(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR5_CG8_SHIFT)) & CCM_CCGR5_CG8_MASK)
#define CCM_CCGR5_CG9_MASK                       (0xC0000U)
#define CCM_CCGR5_CG9_SHIFT                      (18U)
#define CCM_CCGR5_CG9(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR5_CG9_SHIFT)) & CCM_CCGR5_CG9_MASK)
#define CCM_CCGR5_CG10_MASK                      (0x300000U)
#define CCM_CCGR5_CG10_SHIFT                     (20U)
#define CCM_CCGR5_CG10(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR5_CG10_SHIFT)) & CCM_CCGR5_CG10_MASK)
#define CCM_CCGR5_CG11_MASK                      (0xC00000U)
#define CCM_CCGR5_CG11_SHIFT                     (22U)
#define CCM_CCGR5_CG11(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR5_CG11_SHIFT)) & CCM_CCGR5_CG11_MASK)
#define CCM_CCGR5_CG12_MASK                      (0x3000000U)
#define CCM_CCGR5_CG12_SHIFT                     (24U)
#define CCM_CCGR5_CG12(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR5_CG12_SHIFT)) & CCM_CCGR5_CG12_MASK)
#define CCM_CCGR5_CG13_MASK                      (0xC000000U)
#define CCM_CCGR5_CG13_SHIFT                     (26U)
#define CCM_CCGR5_CG13(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR5_CG13_SHIFT)) & CCM_CCGR5_CG13_MASK)
#define CCM_CCGR5_CG14_MASK                      (0x30000000U)
#define CCM_CCGR5_CG14_SHIFT                     (28U)
#define CCM_CCGR5_CG14(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR5_CG14_SHIFT)) & CCM_CCGR5_CG14_MASK)
#define CCM_CCGR5_CG15_MASK                      (0xC0000000U)
#define CCM_CCGR5_CG15_SHIFT                     (30U)
#define CCM_CCGR5_CG15(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR5_CG15_SHIFT)) & CCM_CCGR5_CG15_MASK)

/*! @name CCGR6 - CCM Clock Gating Register 6 */
#define CCM_CCGR6_CG0_MASK                       (0x3U)
#define CCM_CCGR6_CG0_SHIFT                      (0U)
#define CCM_CCGR6_CG0(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR6_CG0_SHIFT)) & CCM_CCGR6_CG0_MASK)
#define CCM_CCGR6_CG1_MASK                       (0xCU)
#define CCM_CCGR6_CG1_SHIFT                      (2U)
#define CCM_CCGR6_CG1(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR6_CG1_SHIFT)) & CCM_CCGR6_CG1_MASK)
#define CCM_CCGR6_CG2_MASK                       (0x30U)
#define CCM_CCGR6_CG2_SHIFT                      (4U)
#define CCM_CCGR6_CG2(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR6_CG2_SHIFT)) & CCM_CCGR6_CG2_MASK)
#define CCM_CCGR6_CG3_MASK                       (0xC0U)
#define CCM_CCGR6_CG3_SHIFT                      (6U)
#define CCM_CCGR6_CG3(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR6_CG3_SHIFT)) & CCM_CCGR6_CG3_MASK)
#define CCM_CCGR6_CG4_MASK                       (0x300U)
#define CCM_CCGR6_CG4_SHIFT                      (8U)
#define CCM_CCGR6_CG4(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR6_CG4_SHIFT)) & CCM_CCGR6_CG4_MASK)
#define CCM_CCGR6_CG5_MASK                       (0xC00U)
#define CCM_CCGR6_CG5_SHIFT                      (10U)
#define CCM_CCGR6_CG5(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR6_CG5_SHIFT)) & CCM_CCGR6_CG5_MASK)
#define CCM_CCGR6_CG6_MASK                       (0x3000U)
#define CCM_CCGR6_CG6_SHIFT                      (12U)
#define CCM_CCGR6_CG6(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR6_CG6_SHIFT)) & CCM_CCGR6_CG6_MASK)
#define CCM_CCGR6_CG7_MASK                       (0xC000U)
#define CCM_CCGR6_CG7_SHIFT                      (14U)
#define CCM_CCGR6_CG7(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR6_CG7_SHIFT)) & CCM_CCGR6_CG7_MASK)
#define CCM_CCGR6_CG8_MASK                       (0x30000U)
#define CCM_CCGR6_CG8_SHIFT                      (16U)
#define CCM_CCGR6_CG8(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR6_CG8_SHIFT)) & CCM_CCGR6_CG8_MASK)
#define CCM_CCGR6_CG9_MASK                       (0xC0000U)
#define CCM_CCGR6_CG9_SHIFT                      (18U)
#define CCM_CCGR6_CG9(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_CCGR6_CG9_SHIFT)) & CCM_CCGR6_CG9_MASK)
#define CCM_CCGR6_CG10_MASK                      (0x300000U)
#define CCM_CCGR6_CG10_SHIFT                     (20U)
#define CCM_CCGR6_CG10(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR6_CG10_SHIFT)) & CCM_CCGR6_CG10_MASK)
#define CCM_CCGR6_CG11_MASK                      (0xC00000U)
#define CCM_CCGR6_CG11_SHIFT                     (22U)
#define CCM_CCGR6_CG11(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR6_CG11_SHIFT)) & CCM_CCGR6_CG11_MASK)
#define CCM_CCGR6_CG12_MASK                      (0x3000000U)
#define CCM_CCGR6_CG12_SHIFT                     (24U)
#define CCM_CCGR6_CG12(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR6_CG12_SHIFT)) & CCM_CCGR6_CG12_MASK)
#define CCM_CCGR6_CG13_MASK                      (0xC000000U)
#define CCM_CCGR6_CG13_SHIFT                     (26U)
#define CCM_CCGR6_CG13(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR6_CG13_SHIFT)) & CCM_CCGR6_CG13_MASK)
#define CCM_CCGR6_CG14_MASK                      (0x30000000U)
#define CCM_CCGR6_CG14_SHIFT                     (28U)
#define CCM_CCGR6_CG14(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR6_CG14_SHIFT)) & CCM_CCGR6_CG14_MASK)
#define CCM_CCGR6_CG15_MASK                      (0xC0000000U)
#define CCM_CCGR6_CG15_SHIFT                     (30U)
#define CCM_CCGR6_CG15(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_CCGR6_CG15_SHIFT)) & CCM_CCGR6_CG15_MASK)

/*! @name CMEOR - CCM Module Enable Overide Register */
#define CCM_CMEOR_MOD_EN_OV_GPT_MASK             (0x20U)
#define CCM_CMEOR_MOD_EN_OV_GPT_SHIFT            (5U)
#define CCM_CMEOR_MOD_EN_OV_PIT_MASK             (0x40U)
#define CCM_CMEOR_MOD_EN_OV_PIT_SHIFT            (6U)
#define CCM_CMEOR_MOD_EN_USDHC_MASK              (0x80U)
#define CCM_CMEOR_MOD_EN_USDHC_SHIFT             (7U)
#define CCM_CMEOR_MOD_EN_OV_TRNG_MASK            (0x200U)
#define CCM_CMEOR_MOD_EN_OV_TRNG_SHIFT           (9U)
#define CCM_CMEOR_MOD_EN_OV_CAN2_CPI_MASK        (0x10000000U)
#define CCM_CMEOR_MOD_EN_OV_CAN2_CPI_SHIFT       (28U)
#define CCM_CMEOR_MOD_EN_OV_CAN1_CPI_MASK        (0x40000000U)
#define CCM_CMEOR_MOD_EN_OV_CAN1_CPI_SHIFT       (30U)


/*!
 * @}
 */ /* end of group CCM_Register_Masks */


/* CCM - Peripheral instance base addresses */
/** Peripheral CCM base pointer */
#define CCM_BASE_PTR                             ((CCM_MemMapPtr)0x400FC000u)
/** Array initializer of CCM peripheral base pointers */
#define CCM_BASE_PTRS                            { CCM_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- CCM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_Register_Accessor_Macros CCM - Register accessor macros
 * @{
 */


/* CCM - Register instance definitions */
/* CCM */
#define CCM_CCR                                  CCM_CCR_REG(CCM_BASE_PTR)
#define CCM_CSR                                  CCM_CSR_REG(CCM_BASE_PTR)
#define CCM_CCSR                                 CCM_CCSR_REG(CCM_BASE_PTR)
#define CCM_CACRR                                CCM_CACRR_REG(CCM_BASE_PTR)
#define CCM_CBCDR                                CCM_CBCDR_REG(CCM_BASE_PTR)
#define CCM_CBCMR                                CCM_CBCMR_REG(CCM_BASE_PTR)
#define CCM_CSCMR1                               CCM_CSCMR1_REG(CCM_BASE_PTR)
#define CCM_CSCMR2                               CCM_CSCMR2_REG(CCM_BASE_PTR)
#define CCM_CSCDR1                               CCM_CSCDR1_REG(CCM_BASE_PTR)
#define CCM_CS1CDR                               CCM_CS1CDR_REG(CCM_BASE_PTR)
#define CCM_CS2CDR                               CCM_CS2CDR_REG(CCM_BASE_PTR)
#define CCM_CDCDR                                CCM_CDCDR_REG(CCM_BASE_PTR)
#define CCM_CSCDR2                               CCM_CSCDR2_REG(CCM_BASE_PTR)
#define CCM_CSCDR3                               CCM_CSCDR3_REG(CCM_BASE_PTR)
#define CCM_CDHIPR                               CCM_CDHIPR_REG(CCM_BASE_PTR)
#define CCM_CLPCR                                CCM_CLPCR_REG(CCM_BASE_PTR)
#define CCM_CISR                                 CCM_CISR_REG(CCM_BASE_PTR)
#define CCM_CIMR                                 CCM_CIMR_REG(CCM_BASE_PTR)
#define CCM_CCOSR                                CCM_CCOSR_REG(CCM_BASE_PTR)
#define CCM_CGPR                                 CCM_CGPR_REG(CCM_BASE_PTR)
#define CCM_CCGR0                                CCM_CCGR0_REG(CCM_BASE_PTR)
#define CCM_CCGR1                                CCM_CCGR1_REG(CCM_BASE_PTR)
#define CCM_CCGR2                                CCM_CCGR2_REG(CCM_BASE_PTR)
#define CCM_CCGR3                                CCM_CCGR3_REG(CCM_BASE_PTR)
#define CCM_CCGR4                                CCM_CCGR4_REG(CCM_BASE_PTR)
#define CCM_CCGR5                                CCM_CCGR5_REG(CCM_BASE_PTR)
#define CCM_CCGR6                                CCM_CCGR6_REG(CCM_BASE_PTR)
#define CCM_CMEOR                                CCM_CMEOR_REG(CCM_BASE_PTR)

/*!
 * @}
 */ /* end of group CCM_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group CCM_Peripheral */


/* ----------------------------------------------------------------------------
   -- CCM_ANALOG
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_ANALOG_Peripheral CCM_ANALOG
 * @{
 */

/** CCM_ANALOG - Peripheral register structure */
typedef struct CCM_ANALOG_MemMap {
  uint32_t PLL_ARM;                                /**< Analog ARM PLL control Register, offset: 0x0 */
  uint32_t PLL_ARM_SET;                            /**< Analog ARM PLL control Register, offset: 0x4 */
  uint32_t PLL_ARM_CLR;                            /**< Analog ARM PLL control Register, offset: 0x8 */
  uint32_t PLL_ARM_TOG;                            /**< Analog ARM PLL control Register, offset: 0xC */
  uint32_t PLL_USB1;                               /**< Analog USB1 480MHz PLL Control Register, offset: 0x10 */
  uint32_t PLL_USB1_SET;                           /**< Analog USB1 480MHz PLL Control Register, offset: 0x14 */
  uint32_t PLL_USB1_CLR;                           /**< Analog USB1 480MHz PLL Control Register, offset: 0x18 */
  uint32_t PLL_USB1_TOG;                           /**< Analog USB1 480MHz PLL Control Register, offset: 0x1C */
  uint32_t PLL_USB2;                               /**< Analog USB2 480MHz PLL Control Register, offset: 0x20 */
  uint32_t PLL_USB2_SET;                           /**< Analog USB2 480MHz PLL Control Register, offset: 0x24 */
  uint32_t PLL_USB2_CLR;                           /**< Analog USB2 480MHz PLL Control Register, offset: 0x28 */
  uint32_t PLL_USB2_TOG;                           /**< Analog USB2 480MHz PLL Control Register, offset: 0x2C */
  uint32_t PLL_SYS;                                /**< Analog System PLL Control Register, offset: 0x30 */
  uint32_t PLL_SYS_SET;                            /**< Analog System PLL Control Register, offset: 0x34 */
  uint32_t PLL_SYS_CLR;                            /**< Analog System PLL Control Register, offset: 0x38 */
  uint32_t PLL_SYS_TOG;                            /**< Analog System PLL Control Register, offset: 0x3C */
  uint32_t PLL_SYS_SS;                             /**< 528MHz System PLL Spread Spectrum Register, offset: 0x40 */
  uint8_t RESERVED_0[12];
  uint32_t PLL_SYS_NUM;                            /**< Numerator of 528MHz System PLL Fractional Loop Divider Register, offset: 0x50 */
  uint8_t RESERVED_1[12];
  uint32_t PLL_SYS_DENOM;                          /**< Denominator of 528MHz System PLL Fractional Loop Divider Register, offset: 0x60 */
  uint8_t RESERVED_2[12];
  uint32_t PLL_AUDIO;                              /**< Analog Audio PLL control Register, offset: 0x70 */
  uint32_t PLL_AUDIO_SET;                          /**< Analog Audio PLL control Register, offset: 0x74 */
  uint32_t PLL_AUDIO_CLR;                          /**< Analog Audio PLL control Register, offset: 0x78 */
  uint32_t PLL_AUDIO_TOG;                          /**< Analog Audio PLL control Register, offset: 0x7C */
  uint32_t PLL_AUDIO_NUM;                          /**< Numerator of Audio PLL Fractional Loop Divider Register, offset: 0x80 */
  uint8_t RESERVED_3[12];
  uint32_t PLL_AUDIO_DENOM;                        /**< Denominator of Audio PLL Fractional Loop Divider Register, offset: 0x90 */
  uint8_t RESERVED_4[12];
  uint32_t PLL_VIDEO;                              /**< Analog Video PLL control Register, offset: 0xA0 */
  uint32_t PLL_VIDEO_SET;                          /**< Analog Video PLL control Register, offset: 0xA4 */
  uint32_t PLL_VIDEO_CLR;                          /**< Analog Video PLL control Register, offset: 0xA8 */
  uint32_t PLL_VIDEO_TOG;                          /**< Analog Video PLL control Register, offset: 0xAC */
  uint32_t PLL_VIDEO_NUM;                          /**< Numerator of Video PLL Fractional Loop Divider Register, offset: 0xB0 */
  uint8_t RESERVED_5[12];
  uint32_t PLL_VIDEO_DENOM;                        /**< Denominator of Video PLL Fractional Loop Divider Register, offset: 0xC0 */
  uint8_t RESERVED_6[28];
  uint32_t PLL_ENET;                               /**< Analog ENET PLL Control Register, offset: 0xE0 */
  uint32_t PLL_ENET_SET;                           /**< Analog ENET PLL Control Register, offset: 0xE4 */
  uint32_t PLL_ENET_CLR;                           /**< Analog ENET PLL Control Register, offset: 0xE8 */
  uint32_t PLL_ENET_TOG;                           /**< Analog ENET PLL Control Register, offset: 0xEC */
  uint32_t PFD_480;                                /**< 480MHz Clock (PLL3) Phase Fractional Divider Control Register, offset: 0xF0 */
  uint32_t PFD_480_SET;                            /**< 480MHz Clock (PLL3) Phase Fractional Divider Control Register, offset: 0xF4 */
  uint32_t PFD_480_CLR;                            /**< 480MHz Clock (PLL3) Phase Fractional Divider Control Register, offset: 0xF8 */
  uint32_t PFD_480_TOG;                            /**< 480MHz Clock (PLL3) Phase Fractional Divider Control Register, offset: 0xFC */
  uint32_t PFD_528;                                /**< 528MHz Clock (PLL2) Phase Fractional Divider Control Register, offset: 0x100 */
  uint32_t PFD_528_SET;                            /**< 528MHz Clock (PLL2) Phase Fractional Divider Control Register, offset: 0x104 */
  uint32_t PFD_528_CLR;                            /**< 528MHz Clock (PLL2) Phase Fractional Divider Control Register, offset: 0x108 */
  uint32_t PFD_528_TOG;                            /**< 528MHz Clock (PLL2) Phase Fractional Divider Control Register, offset: 0x10C */
  uint8_t RESERVED_7[64];
  uint32_t MISC0;                                  /**< Miscellaneous Register 0, offset: 0x150 */
  uint32_t MISC0_SET;                              /**< Miscellaneous Register 0, offset: 0x154 */
  uint32_t MISC0_CLR;                              /**< Miscellaneous Register 0, offset: 0x158 */
  uint32_t MISC0_TOG;                              /**< Miscellaneous Register 0, offset: 0x15C */
  uint32_t MISC1;                                  /**< Miscellaneous Register 1, offset: 0x160 */
  uint32_t MISC1_SET;                              /**< Miscellaneous Register 1, offset: 0x164 */
  uint32_t MISC1_CLR;                              /**< Miscellaneous Register 1, offset: 0x168 */
  uint32_t MISC1_TOG;                              /**< Miscellaneous Register 1, offset: 0x16C */
  uint32_t MISC2;                                  /**< Miscellaneous Register 2, offset: 0x170 */
  uint32_t MISC2_SET;                              /**< Miscellaneous Register 2, offset: 0x174 */
  uint32_t MISC2_CLR;                              /**< Miscellaneous Register 2, offset: 0x178 */
  uint32_t MISC2_TOG;                              /**< Miscellaneous Register 2, offset: 0x17C */
} volatile *CCM_ANALOG_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- CCM_ANALOG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_ANALOG_Register_Accessor_Macros CCM_ANALOG - Register accessor macros
 * @{
 */


/* CCM_ANALOG - Register accessors */
#define CCM_ANALOG_PLL_ARM_REG(base)             ((base)->PLL_ARM)
#define CCM_ANALOG_PLL_ARM_SET_REG(base)         ((base)->PLL_ARM_SET)
#define CCM_ANALOG_PLL_ARM_CLR_REG(base)         ((base)->PLL_ARM_CLR)
#define CCM_ANALOG_PLL_ARM_TOG_REG(base)         ((base)->PLL_ARM_TOG)
#define CCM_ANALOG_PLL_USB1_REG(base)            ((base)->PLL_USB1)
#define CCM_ANALOG_PLL_USB1_SET_REG(base)        ((base)->PLL_USB1_SET)
#define CCM_ANALOG_PLL_USB1_CLR_REG(base)        ((base)->PLL_USB1_CLR)
#define CCM_ANALOG_PLL_USB1_TOG_REG(base)        ((base)->PLL_USB1_TOG)
#define CCM_ANALOG_PLL_USB2_REG(base)            ((base)->PLL_USB2)
#define CCM_ANALOG_PLL_USB2_SET_REG(base)        ((base)->PLL_USB2_SET)
#define CCM_ANALOG_PLL_USB2_CLR_REG(base)        ((base)->PLL_USB2_CLR)
#define CCM_ANALOG_PLL_USB2_TOG_REG(base)        ((base)->PLL_USB2_TOG)
#define CCM_ANALOG_PLL_SYS_REG(base)             ((base)->PLL_SYS)
#define CCM_ANALOG_PLL_SYS_SET_REG(base)         ((base)->PLL_SYS_SET)
#define CCM_ANALOG_PLL_SYS_CLR_REG(base)         ((base)->PLL_SYS_CLR)
#define CCM_ANALOG_PLL_SYS_TOG_REG(base)         ((base)->PLL_SYS_TOG)
#define CCM_ANALOG_PLL_SYS_SS_REG(base)          ((base)->PLL_SYS_SS)
#define CCM_ANALOG_PLL_SYS_NUM_REG(base)         ((base)->PLL_SYS_NUM)
#define CCM_ANALOG_PLL_SYS_DENOM_REG(base)       ((base)->PLL_SYS_DENOM)
#define CCM_ANALOG_PLL_AUDIO_REG(base)           ((base)->PLL_AUDIO)
#define CCM_ANALOG_PLL_AUDIO_SET_REG(base)       ((base)->PLL_AUDIO_SET)
#define CCM_ANALOG_PLL_AUDIO_CLR_REG(base)       ((base)->PLL_AUDIO_CLR)
#define CCM_ANALOG_PLL_AUDIO_TOG_REG(base)       ((base)->PLL_AUDIO_TOG)
#define CCM_ANALOG_PLL_AUDIO_NUM_REG(base)       ((base)->PLL_AUDIO_NUM)
#define CCM_ANALOG_PLL_AUDIO_DENOM_REG(base)     ((base)->PLL_AUDIO_DENOM)
#define CCM_ANALOG_PLL_VIDEO_REG(base)           ((base)->PLL_VIDEO)
#define CCM_ANALOG_PLL_VIDEO_SET_REG(base)       ((base)->PLL_VIDEO_SET)
#define CCM_ANALOG_PLL_VIDEO_CLR_REG(base)       ((base)->PLL_VIDEO_CLR)
#define CCM_ANALOG_PLL_VIDEO_TOG_REG(base)       ((base)->PLL_VIDEO_TOG)
#define CCM_ANALOG_PLL_VIDEO_NUM_REG(base)       ((base)->PLL_VIDEO_NUM)
#define CCM_ANALOG_PLL_VIDEO_DENOM_REG(base)     ((base)->PLL_VIDEO_DENOM)
#define CCM_ANALOG_PLL_ENET_REG(base)            ((base)->PLL_ENET)
#define CCM_ANALOG_PLL_ENET_SET_REG(base)        ((base)->PLL_ENET_SET)
#define CCM_ANALOG_PLL_ENET_CLR_REG(base)        ((base)->PLL_ENET_CLR)
#define CCM_ANALOG_PLL_ENET_TOG_REG(base)        ((base)->PLL_ENET_TOG)
#define CCM_ANALOG_PFD_480_REG(base)             ((base)->PFD_480)
#define CCM_ANALOG_PFD_480_SET_REG(base)         ((base)->PFD_480_SET)
#define CCM_ANALOG_PFD_480_CLR_REG(base)         ((base)->PFD_480_CLR)
#define CCM_ANALOG_PFD_480_TOG_REG(base)         ((base)->PFD_480_TOG)
#define CCM_ANALOG_PFD_528_REG(base)             ((base)->PFD_528)
#define CCM_ANALOG_PFD_528_SET_REG(base)         ((base)->PFD_528_SET)
#define CCM_ANALOG_PFD_528_CLR_REG(base)         ((base)->PFD_528_CLR)
#define CCM_ANALOG_PFD_528_TOG_REG(base)         ((base)->PFD_528_TOG)
#define CCM_ANALOG_MISC0_REG(base)               ((base)->MISC0)
#define CCM_ANALOG_MISC0_SET_REG(base)           ((base)->MISC0_SET)
#define CCM_ANALOG_MISC0_CLR_REG(base)           ((base)->MISC0_CLR)
#define CCM_ANALOG_MISC0_TOG_REG(base)           ((base)->MISC0_TOG)
#define CCM_ANALOG_MISC1_REG(base)               ((base)->MISC1)
#define CCM_ANALOG_MISC1_SET_REG(base)           ((base)->MISC1_SET)
#define CCM_ANALOG_MISC1_CLR_REG(base)           ((base)->MISC1_CLR)
#define CCM_ANALOG_MISC1_TOG_REG(base)           ((base)->MISC1_TOG)
#define CCM_ANALOG_MISC2_REG(base)               ((base)->MISC2)
#define CCM_ANALOG_MISC2_SET_REG(base)           ((base)->MISC2_SET)
#define CCM_ANALOG_MISC2_CLR_REG(base)           ((base)->MISC2_CLR)
#define CCM_ANALOG_MISC2_TOG_REG(base)           ((base)->MISC2_TOG)

/*!
 * @}
 */ /* end of group CCM_ANALOG_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- CCM_ANALOG Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_ANALOG_Register_Masks CCM_ANALOG Register Masks
 * @{
 */

/*! @name PLL_ARM - Analog ARM PLL control Register */
#define CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK       (0x7FU)
#define CCM_ANALOG_PLL_ARM_DIV_SELECT_SHIFT      (0U)
#define CCM_ANALOG_PLL_ARM_DIV_SELECT(x)         (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ARM_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_ARM_POWERDOWN_MASK        (0x1000U)
#define CCM_ANALOG_PLL_ARM_POWERDOWN_SHIFT       (12U)
#define CCM_ANALOG_PLL_ARM_ENABLE_MASK           (0x2000U)
#define CCM_ANALOG_PLL_ARM_ENABLE_SHIFT          (13U)
#define CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_MASK   (0xC000U)
#define CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_SHIFT  (14U)
#define CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_ARM_BYPASS_MASK           (0x10000U)
#define CCM_ANALOG_PLL_ARM_BYPASS_SHIFT          (16U)
#define CCM_ANALOG_PLL_ARM_PLL_SEL_MASK          (0x80000U)
#define CCM_ANALOG_PLL_ARM_PLL_SEL_SHIFT         (19U)
#define CCM_ANALOG_PLL_ARM_LOCK_MASK             (0x80000000U)
#define CCM_ANALOG_PLL_ARM_LOCK_SHIFT            (31U)

/*! @name PLL_ARM_SET - Analog ARM PLL control Register */
#define CCM_ANALOG_PLL_ARM_SET_DIV_SELECT_MASK   (0x7FU)
#define CCM_ANALOG_PLL_ARM_SET_DIV_SELECT_SHIFT  (0U)
#define CCM_ANALOG_PLL_ARM_SET_DIV_SELECT(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ARM_SET_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_ARM_SET_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_ARM_SET_POWERDOWN_MASK    (0x1000U)
#define CCM_ANALOG_PLL_ARM_SET_POWERDOWN_SHIFT   (12U)
#define CCM_ANALOG_PLL_ARM_SET_ENABLE_MASK       (0x2000U)
#define CCM_ANALOG_PLL_ARM_SET_ENABLE_SHIFT      (13U)
#define CCM_ANALOG_PLL_ARM_SET_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_ARM_SET_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_ARM_SET_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ARM_SET_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_ARM_SET_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_ARM_SET_BYPASS_MASK       (0x10000U)
#define CCM_ANALOG_PLL_ARM_SET_BYPASS_SHIFT      (16U)
#define CCM_ANALOG_PLL_ARM_SET_PLL_SEL_MASK      (0x80000U)
#define CCM_ANALOG_PLL_ARM_SET_PLL_SEL_SHIFT     (19U)
#define CCM_ANALOG_PLL_ARM_SET_LOCK_MASK         (0x80000000U)
#define CCM_ANALOG_PLL_ARM_SET_LOCK_SHIFT        (31U)

/*! @name PLL_ARM_CLR - Analog ARM PLL control Register */
#define CCM_ANALOG_PLL_ARM_CLR_DIV_SELECT_MASK   (0x7FU)
#define CCM_ANALOG_PLL_ARM_CLR_DIV_SELECT_SHIFT  (0U)
#define CCM_ANALOG_PLL_ARM_CLR_DIV_SELECT(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ARM_CLR_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_ARM_CLR_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_ARM_CLR_POWERDOWN_MASK    (0x1000U)
#define CCM_ANALOG_PLL_ARM_CLR_POWERDOWN_SHIFT   (12U)
#define CCM_ANALOG_PLL_ARM_CLR_ENABLE_MASK       (0x2000U)
#define CCM_ANALOG_PLL_ARM_CLR_ENABLE_SHIFT      (13U)
#define CCM_ANALOG_PLL_ARM_CLR_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_ARM_CLR_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_ARM_CLR_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ARM_CLR_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_ARM_CLR_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_ARM_CLR_BYPASS_MASK       (0x10000U)
#define CCM_ANALOG_PLL_ARM_CLR_BYPASS_SHIFT      (16U)
#define CCM_ANALOG_PLL_ARM_CLR_PLL_SEL_MASK      (0x80000U)
#define CCM_ANALOG_PLL_ARM_CLR_PLL_SEL_SHIFT     (19U)
#define CCM_ANALOG_PLL_ARM_CLR_LOCK_MASK         (0x80000000U)
#define CCM_ANALOG_PLL_ARM_CLR_LOCK_SHIFT        (31U)

/*! @name PLL_ARM_TOG - Analog ARM PLL control Register */
#define CCM_ANALOG_PLL_ARM_TOG_DIV_SELECT_MASK   (0x7FU)
#define CCM_ANALOG_PLL_ARM_TOG_DIV_SELECT_SHIFT  (0U)
#define CCM_ANALOG_PLL_ARM_TOG_DIV_SELECT(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ARM_TOG_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_ARM_TOG_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_ARM_TOG_POWERDOWN_MASK    (0x1000U)
#define CCM_ANALOG_PLL_ARM_TOG_POWERDOWN_SHIFT   (12U)
#define CCM_ANALOG_PLL_ARM_TOG_ENABLE_MASK       (0x2000U)
#define CCM_ANALOG_PLL_ARM_TOG_ENABLE_SHIFT      (13U)
#define CCM_ANALOG_PLL_ARM_TOG_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_ARM_TOG_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_ARM_TOG_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ARM_TOG_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_ARM_TOG_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_ARM_TOG_BYPASS_MASK       (0x10000U)
#define CCM_ANALOG_PLL_ARM_TOG_BYPASS_SHIFT      (16U)
#define CCM_ANALOG_PLL_ARM_TOG_PLL_SEL_MASK      (0x80000U)
#define CCM_ANALOG_PLL_ARM_TOG_PLL_SEL_SHIFT     (19U)
#define CCM_ANALOG_PLL_ARM_TOG_LOCK_MASK         (0x80000000U)
#define CCM_ANALOG_PLL_ARM_TOG_LOCK_SHIFT        (31U)

/*! @name PLL_USB1 - Analog USB1 480MHz PLL Control Register */
#define CCM_ANALOG_PLL_USB1_DIV_SELECT_MASK      (0x3U)
#define CCM_ANALOG_PLL_USB1_DIV_SELECT_SHIFT     (0U)
#define CCM_ANALOG_PLL_USB1_DIV_SELECT(x)        (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_USB1_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_USB1_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_USB1_EN_USB_CLKS_MASK     (0x40U)
#define CCM_ANALOG_PLL_USB1_EN_USB_CLKS_SHIFT    (6U)
#define CCM_ANALOG_PLL_USB1_POWER_MASK           (0x1000U)
#define CCM_ANALOG_PLL_USB1_POWER_SHIFT          (12U)
#define CCM_ANALOG_PLL_USB1_ENABLE_MASK          (0x2000U)
#define CCM_ANALOG_PLL_USB1_ENABLE_SHIFT         (13U)
#define CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_MASK  (0xC000U)
#define CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_USB1_BYPASS_MASK          (0x10000U)
#define CCM_ANALOG_PLL_USB1_BYPASS_SHIFT         (16U)
#define CCM_ANALOG_PLL_USB1_LOCK_MASK            (0x80000000U)
#define CCM_ANALOG_PLL_USB1_LOCK_SHIFT           (31U)

/*! @name PLL_USB1_SET - Analog USB1 480MHz PLL Control Register */
#define CCM_ANALOG_PLL_USB1_SET_DIV_SELECT_MASK  (0x3U)
#define CCM_ANALOG_PLL_USB1_SET_DIV_SELECT_SHIFT (0U)
#define CCM_ANALOG_PLL_USB1_SET_DIV_SELECT(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_USB1_SET_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_USB1_SET_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_USB1_SET_EN_USB_CLKS_MASK (0x40U)
#define CCM_ANALOG_PLL_USB1_SET_EN_USB_CLKS_SHIFT (6U)
#define CCM_ANALOG_PLL_USB1_SET_POWER_MASK       (0x1000U)
#define CCM_ANALOG_PLL_USB1_SET_POWER_SHIFT      (12U)
#define CCM_ANALOG_PLL_USB1_SET_ENABLE_MASK      (0x2000U)
#define CCM_ANALOG_PLL_USB1_SET_ENABLE_SHIFT     (13U)
#define CCM_ANALOG_PLL_USB1_SET_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_USB1_SET_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_USB1_SET_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_USB1_SET_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_USB1_SET_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_USB1_SET_BYPASS_MASK      (0x10000U)
#define CCM_ANALOG_PLL_USB1_SET_BYPASS_SHIFT     (16U)
#define CCM_ANALOG_PLL_USB1_SET_LOCK_MASK        (0x80000000U)
#define CCM_ANALOG_PLL_USB1_SET_LOCK_SHIFT       (31U)

/*! @name PLL_USB1_CLR - Analog USB1 480MHz PLL Control Register */
#define CCM_ANALOG_PLL_USB1_CLR_DIV_SELECT_MASK  (0x3U)
#define CCM_ANALOG_PLL_USB1_CLR_DIV_SELECT_SHIFT (0U)
#define CCM_ANALOG_PLL_USB1_CLR_DIV_SELECT(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_USB1_CLR_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_USB1_CLR_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_USB1_CLR_EN_USB_CLKS_MASK (0x40U)
#define CCM_ANALOG_PLL_USB1_CLR_EN_USB_CLKS_SHIFT (6U)
#define CCM_ANALOG_PLL_USB1_CLR_POWER_MASK       (0x1000U)
#define CCM_ANALOG_PLL_USB1_CLR_POWER_SHIFT      (12U)
#define CCM_ANALOG_PLL_USB1_CLR_ENABLE_MASK      (0x2000U)
#define CCM_ANALOG_PLL_USB1_CLR_ENABLE_SHIFT     (13U)
#define CCM_ANALOG_PLL_USB1_CLR_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_USB1_CLR_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_USB1_CLR_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_USB1_CLR_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_USB1_CLR_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_USB1_CLR_BYPASS_MASK      (0x10000U)
#define CCM_ANALOG_PLL_USB1_CLR_BYPASS_SHIFT     (16U)
#define CCM_ANALOG_PLL_USB1_CLR_LOCK_MASK        (0x80000000U)
#define CCM_ANALOG_PLL_USB1_CLR_LOCK_SHIFT       (31U)

/*! @name PLL_USB1_TOG - Analog USB1 480MHz PLL Control Register */
#define CCM_ANALOG_PLL_USB1_TOG_DIV_SELECT_MASK  (0x3U)
#define CCM_ANALOG_PLL_USB1_TOG_DIV_SELECT_SHIFT (0U)
#define CCM_ANALOG_PLL_USB1_TOG_DIV_SELECT(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_USB1_TOG_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_USB1_TOG_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_USB1_TOG_EN_USB_CLKS_MASK (0x40U)
#define CCM_ANALOG_PLL_USB1_TOG_EN_USB_CLKS_SHIFT (6U)
#define CCM_ANALOG_PLL_USB1_TOG_POWER_MASK       (0x1000U)
#define CCM_ANALOG_PLL_USB1_TOG_POWER_SHIFT      (12U)
#define CCM_ANALOG_PLL_USB1_TOG_ENABLE_MASK      (0x2000U)
#define CCM_ANALOG_PLL_USB1_TOG_ENABLE_SHIFT     (13U)
#define CCM_ANALOG_PLL_USB1_TOG_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_USB1_TOG_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_USB1_TOG_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_USB1_TOG_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_USB1_TOG_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_USB1_TOG_BYPASS_MASK      (0x10000U)
#define CCM_ANALOG_PLL_USB1_TOG_BYPASS_SHIFT     (16U)
#define CCM_ANALOG_PLL_USB1_TOG_LOCK_MASK        (0x80000000U)
#define CCM_ANALOG_PLL_USB1_TOG_LOCK_SHIFT       (31U)

/*! @name PLL_USB2 - Analog USB2 480MHz PLL Control Register */
#define CCM_ANALOG_PLL_USB2_DIV_SELECT_MASK      (0x3U)
#define CCM_ANALOG_PLL_USB2_DIV_SELECT_SHIFT     (0U)
#define CCM_ANALOG_PLL_USB2_DIV_SELECT(x)        (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_USB2_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_USB2_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_USB2_EN_USB_CLKS_MASK     (0x40U)
#define CCM_ANALOG_PLL_USB2_EN_USB_CLKS_SHIFT    (6U)
#define CCM_ANALOG_PLL_USB2_POWER_MASK           (0x1000U)
#define CCM_ANALOG_PLL_USB2_POWER_SHIFT          (12U)
#define CCM_ANALOG_PLL_USB2_ENABLE_MASK          (0x2000U)
#define CCM_ANALOG_PLL_USB2_ENABLE_SHIFT         (13U)
#define CCM_ANALOG_PLL_USB2_BYPASS_CLK_SRC_MASK  (0xC000U)
#define CCM_ANALOG_PLL_USB2_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_USB2_BYPASS_CLK_SRC(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_USB2_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_USB2_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_USB2_BYPASS_MASK          (0x10000U)
#define CCM_ANALOG_PLL_USB2_BYPASS_SHIFT         (16U)
#define CCM_ANALOG_PLL_USB2_LOCK_MASK            (0x80000000U)
#define CCM_ANALOG_PLL_USB2_LOCK_SHIFT           (31U)

/*! @name PLL_USB2_SET - Analog USB2 480MHz PLL Control Register */
#define CCM_ANALOG_PLL_USB2_SET_DIV_SELECT_MASK  (0x3U)
#define CCM_ANALOG_PLL_USB2_SET_DIV_SELECT_SHIFT (0U)
#define CCM_ANALOG_PLL_USB2_SET_DIV_SELECT(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_USB2_SET_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_USB2_SET_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_USB2_SET_EN_USB_CLKS_MASK (0x40U)
#define CCM_ANALOG_PLL_USB2_SET_EN_USB_CLKS_SHIFT (6U)
#define CCM_ANALOG_PLL_USB2_SET_POWER_MASK       (0x1000U)
#define CCM_ANALOG_PLL_USB2_SET_POWER_SHIFT      (12U)
#define CCM_ANALOG_PLL_USB2_SET_ENABLE_MASK      (0x2000U)
#define CCM_ANALOG_PLL_USB2_SET_ENABLE_SHIFT     (13U)
#define CCM_ANALOG_PLL_USB2_SET_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_USB2_SET_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_USB2_SET_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_USB2_SET_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_USB2_SET_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_USB2_SET_BYPASS_MASK      (0x10000U)
#define CCM_ANALOG_PLL_USB2_SET_BYPASS_SHIFT     (16U)
#define CCM_ANALOG_PLL_USB2_SET_LOCK_MASK        (0x80000000U)
#define CCM_ANALOG_PLL_USB2_SET_LOCK_SHIFT       (31U)

/*! @name PLL_USB2_CLR - Analog USB2 480MHz PLL Control Register */
#define CCM_ANALOG_PLL_USB2_CLR_DIV_SELECT_MASK  (0x3U)
#define CCM_ANALOG_PLL_USB2_CLR_DIV_SELECT_SHIFT (0U)
#define CCM_ANALOG_PLL_USB2_CLR_DIV_SELECT(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_USB2_CLR_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_USB2_CLR_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_USB2_CLR_EN_USB_CLKS_MASK (0x40U)
#define CCM_ANALOG_PLL_USB2_CLR_EN_USB_CLKS_SHIFT (6U)
#define CCM_ANALOG_PLL_USB2_CLR_POWER_MASK       (0x1000U)
#define CCM_ANALOG_PLL_USB2_CLR_POWER_SHIFT      (12U)
#define CCM_ANALOG_PLL_USB2_CLR_ENABLE_MASK      (0x2000U)
#define CCM_ANALOG_PLL_USB2_CLR_ENABLE_SHIFT     (13U)
#define CCM_ANALOG_PLL_USB2_CLR_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_USB2_CLR_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_USB2_CLR_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_USB2_CLR_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_USB2_CLR_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_USB2_CLR_BYPASS_MASK      (0x10000U)
#define CCM_ANALOG_PLL_USB2_CLR_BYPASS_SHIFT     (16U)
#define CCM_ANALOG_PLL_USB2_CLR_LOCK_MASK        (0x80000000U)
#define CCM_ANALOG_PLL_USB2_CLR_LOCK_SHIFT       (31U)

/*! @name PLL_USB2_TOG - Analog USB2 480MHz PLL Control Register */
#define CCM_ANALOG_PLL_USB2_TOG_DIV_SELECT_MASK  (0x3U)
#define CCM_ANALOG_PLL_USB2_TOG_DIV_SELECT_SHIFT (0U)
#define CCM_ANALOG_PLL_USB2_TOG_DIV_SELECT(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_USB2_TOG_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_USB2_TOG_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_USB2_TOG_EN_USB_CLKS_MASK (0x40U)
#define CCM_ANALOG_PLL_USB2_TOG_EN_USB_CLKS_SHIFT (6U)
#define CCM_ANALOG_PLL_USB2_TOG_POWER_MASK       (0x1000U)
#define CCM_ANALOG_PLL_USB2_TOG_POWER_SHIFT      (12U)
#define CCM_ANALOG_PLL_USB2_TOG_ENABLE_MASK      (0x2000U)
#define CCM_ANALOG_PLL_USB2_TOG_ENABLE_SHIFT     (13U)
#define CCM_ANALOG_PLL_USB2_TOG_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_USB2_TOG_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_USB2_TOG_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_USB2_TOG_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_USB2_TOG_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_USB2_TOG_BYPASS_MASK      (0x10000U)
#define CCM_ANALOG_PLL_USB2_TOG_BYPASS_SHIFT     (16U)
#define CCM_ANALOG_PLL_USB2_TOG_LOCK_MASK        (0x80000000U)
#define CCM_ANALOG_PLL_USB2_TOG_LOCK_SHIFT       (31U)

/*! @name PLL_SYS - Analog System PLL Control Register */
#define CCM_ANALOG_PLL_SYS_DIV_SELECT_MASK       (0x1U)
#define CCM_ANALOG_PLL_SYS_DIV_SELECT_SHIFT      (0U)
#define CCM_ANALOG_PLL_SYS_POWERDOWN_MASK        (0x1000U)
#define CCM_ANALOG_PLL_SYS_POWERDOWN_SHIFT       (12U)
#define CCM_ANALOG_PLL_SYS_ENABLE_MASK           (0x2000U)
#define CCM_ANALOG_PLL_SYS_ENABLE_SHIFT          (13U)
#define CCM_ANALOG_PLL_SYS_BYPASS_CLK_SRC_MASK   (0xC000U)
#define CCM_ANALOG_PLL_SYS_BYPASS_CLK_SRC_SHIFT  (14U)
#define CCM_ANALOG_PLL_SYS_BYPASS_CLK_SRC(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_SYS_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_SYS_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_SYS_BYPASS_MASK           (0x10000U)
#define CCM_ANALOG_PLL_SYS_BYPASS_SHIFT          (16U)
#define CCM_ANALOG_PLL_SYS_PFD_OFFSET_EN_MASK    (0x40000U)
#define CCM_ANALOG_PLL_SYS_PFD_OFFSET_EN_SHIFT   (18U)
#define CCM_ANALOG_PLL_SYS_LOCK_MASK             (0x80000000U)
#define CCM_ANALOG_PLL_SYS_LOCK_SHIFT            (31U)

/*! @name PLL_SYS_SET - Analog System PLL Control Register */
#define CCM_ANALOG_PLL_SYS_SET_DIV_SELECT_MASK   (0x1U)
#define CCM_ANALOG_PLL_SYS_SET_DIV_SELECT_SHIFT  (0U)
#define CCM_ANALOG_PLL_SYS_SET_POWERDOWN_MASK    (0x1000U)
#define CCM_ANALOG_PLL_SYS_SET_POWERDOWN_SHIFT   (12U)
#define CCM_ANALOG_PLL_SYS_SET_ENABLE_MASK       (0x2000U)
#define CCM_ANALOG_PLL_SYS_SET_ENABLE_SHIFT      (13U)
#define CCM_ANALOG_PLL_SYS_SET_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_SYS_SET_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_SYS_SET_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_SYS_SET_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_SYS_SET_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_SYS_SET_BYPASS_MASK       (0x10000U)
#define CCM_ANALOG_PLL_SYS_SET_BYPASS_SHIFT      (16U)
#define CCM_ANALOG_PLL_SYS_SET_PFD_OFFSET_EN_MASK (0x40000U)
#define CCM_ANALOG_PLL_SYS_SET_PFD_OFFSET_EN_SHIFT (18U)
#define CCM_ANALOG_PLL_SYS_SET_LOCK_MASK         (0x80000000U)
#define CCM_ANALOG_PLL_SYS_SET_LOCK_SHIFT        (31U)

/*! @name PLL_SYS_CLR - Analog System PLL Control Register */
#define CCM_ANALOG_PLL_SYS_CLR_DIV_SELECT_MASK   (0x1U)
#define CCM_ANALOG_PLL_SYS_CLR_DIV_SELECT_SHIFT  (0U)
#define CCM_ANALOG_PLL_SYS_CLR_POWERDOWN_MASK    (0x1000U)
#define CCM_ANALOG_PLL_SYS_CLR_POWERDOWN_SHIFT   (12U)
#define CCM_ANALOG_PLL_SYS_CLR_ENABLE_MASK       (0x2000U)
#define CCM_ANALOG_PLL_SYS_CLR_ENABLE_SHIFT      (13U)
#define CCM_ANALOG_PLL_SYS_CLR_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_SYS_CLR_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_SYS_CLR_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_SYS_CLR_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_SYS_CLR_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_SYS_CLR_BYPASS_MASK       (0x10000U)
#define CCM_ANALOG_PLL_SYS_CLR_BYPASS_SHIFT      (16U)
#define CCM_ANALOG_PLL_SYS_CLR_PFD_OFFSET_EN_MASK (0x40000U)
#define CCM_ANALOG_PLL_SYS_CLR_PFD_OFFSET_EN_SHIFT (18U)
#define CCM_ANALOG_PLL_SYS_CLR_LOCK_MASK         (0x80000000U)
#define CCM_ANALOG_PLL_SYS_CLR_LOCK_SHIFT        (31U)

/*! @name PLL_SYS_TOG - Analog System PLL Control Register */
#define CCM_ANALOG_PLL_SYS_TOG_DIV_SELECT_MASK   (0x1U)
#define CCM_ANALOG_PLL_SYS_TOG_DIV_SELECT_SHIFT  (0U)
#define CCM_ANALOG_PLL_SYS_TOG_POWERDOWN_MASK    (0x1000U)
#define CCM_ANALOG_PLL_SYS_TOG_POWERDOWN_SHIFT   (12U)
#define CCM_ANALOG_PLL_SYS_TOG_ENABLE_MASK       (0x2000U)
#define CCM_ANALOG_PLL_SYS_TOG_ENABLE_SHIFT      (13U)
#define CCM_ANALOG_PLL_SYS_TOG_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_SYS_TOG_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_SYS_TOG_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_SYS_TOG_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_SYS_TOG_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_SYS_TOG_BYPASS_MASK       (0x10000U)
#define CCM_ANALOG_PLL_SYS_TOG_BYPASS_SHIFT      (16U)
#define CCM_ANALOG_PLL_SYS_TOG_PFD_OFFSET_EN_MASK (0x40000U)
#define CCM_ANALOG_PLL_SYS_TOG_PFD_OFFSET_EN_SHIFT (18U)
#define CCM_ANALOG_PLL_SYS_TOG_LOCK_MASK         (0x80000000U)
#define CCM_ANALOG_PLL_SYS_TOG_LOCK_SHIFT        (31U)

/*! @name PLL_SYS_SS - 528MHz System PLL Spread Spectrum Register */
#define CCM_ANALOG_PLL_SYS_SS_STEP_MASK          (0x7FFFU)
#define CCM_ANALOG_PLL_SYS_SS_STEP_SHIFT         (0U)
#define CCM_ANALOG_PLL_SYS_SS_STEP(x)            (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_SYS_SS_STEP_SHIFT)) & CCM_ANALOG_PLL_SYS_SS_STEP_MASK)
#define CCM_ANALOG_PLL_SYS_SS_ENABLE_MASK        (0x8000U)
#define CCM_ANALOG_PLL_SYS_SS_ENABLE_SHIFT       (15U)
#define CCM_ANALOG_PLL_SYS_SS_STOP_MASK          (0xFFFF0000U)
#define CCM_ANALOG_PLL_SYS_SS_STOP_SHIFT         (16U)
#define CCM_ANALOG_PLL_SYS_SS_STOP(x)            (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_SYS_SS_STOP_SHIFT)) & CCM_ANALOG_PLL_SYS_SS_STOP_MASK)

/*! @name PLL_SYS_NUM - Numerator of 528MHz System PLL Fractional Loop Divider Register */
#define CCM_ANALOG_PLL_SYS_NUM_A_MASK            (0x3FFFFFFFU)
#define CCM_ANALOG_PLL_SYS_NUM_A_SHIFT           (0U)
#define CCM_ANALOG_PLL_SYS_NUM_A(x)              (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_SYS_NUM_A_SHIFT)) & CCM_ANALOG_PLL_SYS_NUM_A_MASK)

/*! @name PLL_SYS_DENOM - Denominator of 528MHz System PLL Fractional Loop Divider Register */
#define CCM_ANALOG_PLL_SYS_DENOM_B_MASK          (0x3FFFFFFFU)
#define CCM_ANALOG_PLL_SYS_DENOM_B_SHIFT         (0U)
#define CCM_ANALOG_PLL_SYS_DENOM_B(x)            (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_SYS_DENOM_B_SHIFT)) & CCM_ANALOG_PLL_SYS_DENOM_B_MASK)

/*! @name PLL_AUDIO - Analog Audio PLL control Register */
#define CCM_ANALOG_PLL_AUDIO_DIV_SELECT_MASK     (0x7FU)
#define CCM_ANALOG_PLL_AUDIO_DIV_SELECT_SHIFT    (0U)
#define CCM_ANALOG_PLL_AUDIO_DIV_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_AUDIO_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_AUDIO_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_AUDIO_POWERDOWN_MASK      (0x1000U)
#define CCM_ANALOG_PLL_AUDIO_POWERDOWN_SHIFT     (12U)
#define CCM_ANALOG_PLL_AUDIO_ENABLE_MASK         (0x2000U)
#define CCM_ANALOG_PLL_AUDIO_ENABLE_SHIFT        (13U)
#define CCM_ANALOG_PLL_AUDIO_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_AUDIO_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_AUDIO_BYPASS_CLK_SRC(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_AUDIO_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_AUDIO_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_AUDIO_BYPASS_MASK         (0x10000U)
#define CCM_ANALOG_PLL_AUDIO_BYPASS_SHIFT        (16U)
#define CCM_ANALOG_PLL_AUDIO_PFD_OFFSET_EN_MASK  (0x40000U)
#define CCM_ANALOG_PLL_AUDIO_PFD_OFFSET_EN_SHIFT (18U)
#define CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT_MASK (0x180000U)
#define CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT_SHIFT (19U)
#define CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_AUDIO_LOCK_MASK           (0x80000000U)
#define CCM_ANALOG_PLL_AUDIO_LOCK_SHIFT          (31U)

/*! @name PLL_AUDIO_SET - Analog Audio PLL control Register */
#define CCM_ANALOG_PLL_AUDIO_SET_DIV_SELECT_MASK (0x7FU)
#define CCM_ANALOG_PLL_AUDIO_SET_DIV_SELECT_SHIFT (0U)
#define CCM_ANALOG_PLL_AUDIO_SET_DIV_SELECT(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_AUDIO_SET_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_AUDIO_SET_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_AUDIO_SET_POWERDOWN_MASK  (0x1000U)
#define CCM_ANALOG_PLL_AUDIO_SET_POWERDOWN_SHIFT (12U)
#define CCM_ANALOG_PLL_AUDIO_SET_ENABLE_MASK     (0x2000U)
#define CCM_ANALOG_PLL_AUDIO_SET_ENABLE_SHIFT    (13U)
#define CCM_ANALOG_PLL_AUDIO_SET_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_AUDIO_SET_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_AUDIO_SET_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_AUDIO_SET_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_AUDIO_SET_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_AUDIO_SET_BYPASS_MASK     (0x10000U)
#define CCM_ANALOG_PLL_AUDIO_SET_BYPASS_SHIFT    (16U)
#define CCM_ANALOG_PLL_AUDIO_SET_PFD_OFFSET_EN_MASK (0x40000U)
#define CCM_ANALOG_PLL_AUDIO_SET_PFD_OFFSET_EN_SHIFT (18U)
#define CCM_ANALOG_PLL_AUDIO_SET_POST_DIV_SELECT_MASK (0x180000U)
#define CCM_ANALOG_PLL_AUDIO_SET_POST_DIV_SELECT_SHIFT (19U)
#define CCM_ANALOG_PLL_AUDIO_SET_POST_DIV_SELECT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_AUDIO_SET_POST_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_AUDIO_SET_POST_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_AUDIO_SET_LOCK_MASK       (0x80000000U)
#define CCM_ANALOG_PLL_AUDIO_SET_LOCK_SHIFT      (31U)

/*! @name PLL_AUDIO_CLR - Analog Audio PLL control Register */
#define CCM_ANALOG_PLL_AUDIO_CLR_DIV_SELECT_MASK (0x7FU)
#define CCM_ANALOG_PLL_AUDIO_CLR_DIV_SELECT_SHIFT (0U)
#define CCM_ANALOG_PLL_AUDIO_CLR_DIV_SELECT(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_AUDIO_CLR_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_AUDIO_CLR_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_AUDIO_CLR_POWERDOWN_MASK  (0x1000U)
#define CCM_ANALOG_PLL_AUDIO_CLR_POWERDOWN_SHIFT (12U)
#define CCM_ANALOG_PLL_AUDIO_CLR_ENABLE_MASK     (0x2000U)
#define CCM_ANALOG_PLL_AUDIO_CLR_ENABLE_SHIFT    (13U)
#define CCM_ANALOG_PLL_AUDIO_CLR_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_AUDIO_CLR_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_AUDIO_CLR_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_AUDIO_CLR_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_AUDIO_CLR_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_AUDIO_CLR_BYPASS_MASK     (0x10000U)
#define CCM_ANALOG_PLL_AUDIO_CLR_BYPASS_SHIFT    (16U)
#define CCM_ANALOG_PLL_AUDIO_CLR_PFD_OFFSET_EN_MASK (0x40000U)
#define CCM_ANALOG_PLL_AUDIO_CLR_PFD_OFFSET_EN_SHIFT (18U)
#define CCM_ANALOG_PLL_AUDIO_CLR_POST_DIV_SELECT_MASK (0x180000U)
#define CCM_ANALOG_PLL_AUDIO_CLR_POST_DIV_SELECT_SHIFT (19U)
#define CCM_ANALOG_PLL_AUDIO_CLR_POST_DIV_SELECT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_AUDIO_CLR_POST_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_AUDIO_CLR_POST_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_AUDIO_CLR_LOCK_MASK       (0x80000000U)
#define CCM_ANALOG_PLL_AUDIO_CLR_LOCK_SHIFT      (31U)

/*! @name PLL_AUDIO_TOG - Analog Audio PLL control Register */
#define CCM_ANALOG_PLL_AUDIO_TOG_DIV_SELECT_MASK (0x7FU)
#define CCM_ANALOG_PLL_AUDIO_TOG_DIV_SELECT_SHIFT (0U)
#define CCM_ANALOG_PLL_AUDIO_TOG_DIV_SELECT(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_AUDIO_TOG_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_AUDIO_TOG_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_AUDIO_TOG_POWERDOWN_MASK  (0x1000U)
#define CCM_ANALOG_PLL_AUDIO_TOG_POWERDOWN_SHIFT (12U)
#define CCM_ANALOG_PLL_AUDIO_TOG_ENABLE_MASK     (0x2000U)
#define CCM_ANALOG_PLL_AUDIO_TOG_ENABLE_SHIFT    (13U)
#define CCM_ANALOG_PLL_AUDIO_TOG_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_AUDIO_TOG_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_AUDIO_TOG_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_AUDIO_TOG_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_AUDIO_TOG_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_AUDIO_TOG_BYPASS_MASK     (0x10000U)
#define CCM_ANALOG_PLL_AUDIO_TOG_BYPASS_SHIFT    (16U)
#define CCM_ANALOG_PLL_AUDIO_TOG_PFD_OFFSET_EN_MASK (0x40000U)
#define CCM_ANALOG_PLL_AUDIO_TOG_PFD_OFFSET_EN_SHIFT (18U)
#define CCM_ANALOG_PLL_AUDIO_TOG_POST_DIV_SELECT_MASK (0x180000U)
#define CCM_ANALOG_PLL_AUDIO_TOG_POST_DIV_SELECT_SHIFT (19U)
#define CCM_ANALOG_PLL_AUDIO_TOG_POST_DIV_SELECT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_AUDIO_TOG_POST_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_AUDIO_TOG_POST_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_AUDIO_TOG_LOCK_MASK       (0x80000000U)
#define CCM_ANALOG_PLL_AUDIO_TOG_LOCK_SHIFT      (31U)

/*! @name PLL_AUDIO_NUM - Numerator of Audio PLL Fractional Loop Divider Register */
#define CCM_ANALOG_PLL_AUDIO_NUM_A_MASK          (0x3FFFFFFFU)
#define CCM_ANALOG_PLL_AUDIO_NUM_A_SHIFT         (0U)
#define CCM_ANALOG_PLL_AUDIO_NUM_A(x)            (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_AUDIO_NUM_A_SHIFT)) & CCM_ANALOG_PLL_AUDIO_NUM_A_MASK)

/*! @name PLL_AUDIO_DENOM - Denominator of Audio PLL Fractional Loop Divider Register */
#define CCM_ANALOG_PLL_AUDIO_DENOM_B_MASK        (0x3FFFFFFFU)
#define CCM_ANALOG_PLL_AUDIO_DENOM_B_SHIFT       (0U)
#define CCM_ANALOG_PLL_AUDIO_DENOM_B(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_AUDIO_DENOM_B_SHIFT)) & CCM_ANALOG_PLL_AUDIO_DENOM_B_MASK)

/*! @name PLL_VIDEO - Analog Video PLL control Register */
#define CCM_ANALOG_PLL_VIDEO_DIV_SELECT_MASK     (0x7FU)
#define CCM_ANALOG_PLL_VIDEO_DIV_SELECT_SHIFT    (0U)
#define CCM_ANALOG_PLL_VIDEO_DIV_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_VIDEO_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_VIDEO_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_VIDEO_POWERDOWN_MASK      (0x1000U)
#define CCM_ANALOG_PLL_VIDEO_POWERDOWN_SHIFT     (12U)
#define CCM_ANALOG_PLL_VIDEO_ENABLE_MASK         (0x2000U)
#define CCM_ANALOG_PLL_VIDEO_ENABLE_SHIFT        (13U)
#define CCM_ANALOG_PLL_VIDEO_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_VIDEO_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_VIDEO_BYPASS_CLK_SRC(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_VIDEO_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_VIDEO_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_VIDEO_BYPASS_MASK         (0x10000U)
#define CCM_ANALOG_PLL_VIDEO_BYPASS_SHIFT        (16U)
#define CCM_ANALOG_PLL_VIDEO_PFD_OFFSET_EN_MASK  (0x40000U)
#define CCM_ANALOG_PLL_VIDEO_PFD_OFFSET_EN_SHIFT (18U)
#define CCM_ANALOG_PLL_VIDEO_POST_DIV_SELECT_MASK (0x180000U)
#define CCM_ANALOG_PLL_VIDEO_POST_DIV_SELECT_SHIFT (19U)
#define CCM_ANALOG_PLL_VIDEO_POST_DIV_SELECT(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_VIDEO_POST_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_VIDEO_POST_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_VIDEO_LOCK_MASK           (0x80000000U)
#define CCM_ANALOG_PLL_VIDEO_LOCK_SHIFT          (31U)

/*! @name PLL_VIDEO_SET - Analog Video PLL control Register */
#define CCM_ANALOG_PLL_VIDEO_SET_DIV_SELECT_MASK (0x7FU)
#define CCM_ANALOG_PLL_VIDEO_SET_DIV_SELECT_SHIFT (0U)
#define CCM_ANALOG_PLL_VIDEO_SET_DIV_SELECT(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_VIDEO_SET_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_VIDEO_SET_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_VIDEO_SET_POWERDOWN_MASK  (0x1000U)
#define CCM_ANALOG_PLL_VIDEO_SET_POWERDOWN_SHIFT (12U)
#define CCM_ANALOG_PLL_VIDEO_SET_ENABLE_MASK     (0x2000U)
#define CCM_ANALOG_PLL_VIDEO_SET_ENABLE_SHIFT    (13U)
#define CCM_ANALOG_PLL_VIDEO_SET_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_VIDEO_SET_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_VIDEO_SET_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_VIDEO_SET_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_VIDEO_SET_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_VIDEO_SET_BYPASS_MASK     (0x10000U)
#define CCM_ANALOG_PLL_VIDEO_SET_BYPASS_SHIFT    (16U)
#define CCM_ANALOG_PLL_VIDEO_SET_PFD_OFFSET_EN_MASK (0x40000U)
#define CCM_ANALOG_PLL_VIDEO_SET_PFD_OFFSET_EN_SHIFT (18U)
#define CCM_ANALOG_PLL_VIDEO_SET_POST_DIV_SELECT_MASK (0x180000U)
#define CCM_ANALOG_PLL_VIDEO_SET_POST_DIV_SELECT_SHIFT (19U)
#define CCM_ANALOG_PLL_VIDEO_SET_POST_DIV_SELECT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_VIDEO_SET_POST_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_VIDEO_SET_POST_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_VIDEO_SET_LOCK_MASK       (0x80000000U)
#define CCM_ANALOG_PLL_VIDEO_SET_LOCK_SHIFT      (31U)

/*! @name PLL_VIDEO_CLR - Analog Video PLL control Register */
#define CCM_ANALOG_PLL_VIDEO_CLR_DIV_SELECT_MASK (0x7FU)
#define CCM_ANALOG_PLL_VIDEO_CLR_DIV_SELECT_SHIFT (0U)
#define CCM_ANALOG_PLL_VIDEO_CLR_DIV_SELECT(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_VIDEO_CLR_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_VIDEO_CLR_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_VIDEO_CLR_POWERDOWN_MASK  (0x1000U)
#define CCM_ANALOG_PLL_VIDEO_CLR_POWERDOWN_SHIFT (12U)
#define CCM_ANALOG_PLL_VIDEO_CLR_ENABLE_MASK     (0x2000U)
#define CCM_ANALOG_PLL_VIDEO_CLR_ENABLE_SHIFT    (13U)
#define CCM_ANALOG_PLL_VIDEO_CLR_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_VIDEO_CLR_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_VIDEO_CLR_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_VIDEO_CLR_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_VIDEO_CLR_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_VIDEO_CLR_BYPASS_MASK     (0x10000U)
#define CCM_ANALOG_PLL_VIDEO_CLR_BYPASS_SHIFT    (16U)
#define CCM_ANALOG_PLL_VIDEO_CLR_PFD_OFFSET_EN_MASK (0x40000U)
#define CCM_ANALOG_PLL_VIDEO_CLR_PFD_OFFSET_EN_SHIFT (18U)
#define CCM_ANALOG_PLL_VIDEO_CLR_POST_DIV_SELECT_MASK (0x180000U)
#define CCM_ANALOG_PLL_VIDEO_CLR_POST_DIV_SELECT_SHIFT (19U)
#define CCM_ANALOG_PLL_VIDEO_CLR_POST_DIV_SELECT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_VIDEO_CLR_POST_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_VIDEO_CLR_POST_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_VIDEO_CLR_LOCK_MASK       (0x80000000U)
#define CCM_ANALOG_PLL_VIDEO_CLR_LOCK_SHIFT      (31U)

/*! @name PLL_VIDEO_TOG - Analog Video PLL control Register */
#define CCM_ANALOG_PLL_VIDEO_TOG_DIV_SELECT_MASK (0x7FU)
#define CCM_ANALOG_PLL_VIDEO_TOG_DIV_SELECT_SHIFT (0U)
#define CCM_ANALOG_PLL_VIDEO_TOG_DIV_SELECT(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_VIDEO_TOG_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_VIDEO_TOG_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_VIDEO_TOG_POWERDOWN_MASK  (0x1000U)
#define CCM_ANALOG_PLL_VIDEO_TOG_POWERDOWN_SHIFT (12U)
#define CCM_ANALOG_PLL_VIDEO_TOG_ENABLE_MASK     (0x2000U)
#define CCM_ANALOG_PLL_VIDEO_TOG_ENABLE_SHIFT    (13U)
#define CCM_ANALOG_PLL_VIDEO_TOG_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_VIDEO_TOG_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_VIDEO_TOG_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_VIDEO_TOG_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_VIDEO_TOG_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_VIDEO_TOG_BYPASS_MASK     (0x10000U)
#define CCM_ANALOG_PLL_VIDEO_TOG_BYPASS_SHIFT    (16U)
#define CCM_ANALOG_PLL_VIDEO_TOG_PFD_OFFSET_EN_MASK (0x40000U)
#define CCM_ANALOG_PLL_VIDEO_TOG_PFD_OFFSET_EN_SHIFT (18U)
#define CCM_ANALOG_PLL_VIDEO_TOG_POST_DIV_SELECT_MASK (0x180000U)
#define CCM_ANALOG_PLL_VIDEO_TOG_POST_DIV_SELECT_SHIFT (19U)
#define CCM_ANALOG_PLL_VIDEO_TOG_POST_DIV_SELECT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_VIDEO_TOG_POST_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_VIDEO_TOG_POST_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_VIDEO_TOG_LOCK_MASK       (0x80000000U)
#define CCM_ANALOG_PLL_VIDEO_TOG_LOCK_SHIFT      (31U)

/*! @name PLL_VIDEO_NUM - Numerator of Video PLL Fractional Loop Divider Register */
#define CCM_ANALOG_PLL_VIDEO_NUM_A_MASK          (0x3FFFFFFFU)
#define CCM_ANALOG_PLL_VIDEO_NUM_A_SHIFT         (0U)
#define CCM_ANALOG_PLL_VIDEO_NUM_A(x)            (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_VIDEO_NUM_A_SHIFT)) & CCM_ANALOG_PLL_VIDEO_NUM_A_MASK)

/*! @name PLL_VIDEO_DENOM - Denominator of Video PLL Fractional Loop Divider Register */
#define CCM_ANALOG_PLL_VIDEO_DENOM_B_MASK        (0x3FFFFFFFU)
#define CCM_ANALOG_PLL_VIDEO_DENOM_B_SHIFT       (0U)
#define CCM_ANALOG_PLL_VIDEO_DENOM_B(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_VIDEO_DENOM_B_SHIFT)) & CCM_ANALOG_PLL_VIDEO_DENOM_B_MASK)

/*! @name PLL_ENET - Analog ENET PLL Control Register */
#define CCM_ANALOG_PLL_ENET_ENET0_DIV_SELECT_MASK (0x3U)
#define CCM_ANALOG_PLL_ENET_ENET0_DIV_SELECT_SHIFT (0U)
#define CCM_ANALOG_PLL_ENET_ENET0_DIV_SELECT(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ENET_ENET0_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_ENET_ENET0_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_ENET_ENET1_DIV_SELECT_MASK (0xCU)
#define CCM_ANALOG_PLL_ENET_ENET1_DIV_SELECT_SHIFT (2U)
#define CCM_ANALOG_PLL_ENET_ENET1_DIV_SELECT(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ENET_ENET1_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_ENET_ENET1_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_ENET_POWERDOWN_MASK       (0x1000U)
#define CCM_ANALOG_PLL_ENET_POWERDOWN_SHIFT      (12U)
#define CCM_ANALOG_PLL_ENET_ENET1_125M_EN_MASK   (0x2000U)
#define CCM_ANALOG_PLL_ENET_ENET1_125M_EN_SHIFT  (13U)
#define CCM_ANALOG_PLL_ENET_BYPASS_CLK_SRC_MASK  (0xC000U)
#define CCM_ANALOG_PLL_ENET_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_ENET_BYPASS_CLK_SRC(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ENET_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_ENET_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_ENET_BYPASS_MASK          (0x10000U)
#define CCM_ANALOG_PLL_ENET_BYPASS_SHIFT         (16U)
#define CCM_ANALOG_PLL_ENET_PFD_OFFSET_EN_MASK   (0x40000U)
#define CCM_ANALOG_PLL_ENET_PFD_OFFSET_EN_SHIFT  (18U)
#define CCM_ANALOG_PLL_ENET_ENABLE_125M_MASK     (0x80000U)
#define CCM_ANALOG_PLL_ENET_ENABLE_125M_SHIFT    (19U)
#define CCM_ANALOG_PLL_ENET_ENET2_125M_EN_MASK   (0x100000U)
#define CCM_ANALOG_PLL_ENET_ENET2_125M_EN_SHIFT  (20U)
#define CCM_ANALOG_PLL_ENET_ENET_25M_REF_EN_MASK (0x200000U)
#define CCM_ANALOG_PLL_ENET_ENET_25M_REF_EN_SHIFT (21U)
#define CCM_ANALOG_PLL_ENET_LOCK_MASK            (0x80000000U)
#define CCM_ANALOG_PLL_ENET_LOCK_SHIFT           (31U)

/*! @name PLL_ENET_SET - Analog ENET PLL Control Register */
#define CCM_ANALOG_PLL_ENET_SET_ENET0_DIV_SELECT_MASK (0x3U)
#define CCM_ANALOG_PLL_ENET_SET_ENET0_DIV_SELECT_SHIFT (0U)
#define CCM_ANALOG_PLL_ENET_SET_ENET0_DIV_SELECT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ENET_SET_ENET0_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_ENET_SET_ENET0_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_ENET_SET_ENET1_DIV_SELECT_MASK (0xCU)
#define CCM_ANALOG_PLL_ENET_SET_ENET1_DIV_SELECT_SHIFT (2U)
#define CCM_ANALOG_PLL_ENET_SET_ENET1_DIV_SELECT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ENET_SET_ENET1_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_ENET_SET_ENET1_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_ENET_SET_POWERDOWN_MASK   (0x1000U)
#define CCM_ANALOG_PLL_ENET_SET_POWERDOWN_SHIFT  (12U)
#define CCM_ANALOG_PLL_ENET_SET_ENET1_125M_EN_MASK (0x2000U)
#define CCM_ANALOG_PLL_ENET_SET_ENET1_125M_EN_SHIFT (13U)
#define CCM_ANALOG_PLL_ENET_SET_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_ENET_SET_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_ENET_SET_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ENET_SET_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_ENET_SET_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_ENET_SET_BYPASS_MASK      (0x10000U)
#define CCM_ANALOG_PLL_ENET_SET_BYPASS_SHIFT     (16U)
#define CCM_ANALOG_PLL_ENET_SET_PFD_OFFSET_EN_MASK (0x40000U)
#define CCM_ANALOG_PLL_ENET_SET_PFD_OFFSET_EN_SHIFT (18U)
#define CCM_ANALOG_PLL_ENET_SET_ENABLE_125M_MASK (0x80000U)
#define CCM_ANALOG_PLL_ENET_SET_ENABLE_125M_SHIFT (19U)
#define CCM_ANALOG_PLL_ENET_SET_ENET2_125M_EN_MASK (0x100000U)
#define CCM_ANALOG_PLL_ENET_SET_ENET2_125M_EN_SHIFT (20U)
#define CCM_ANALOG_PLL_ENET_SET_ENET_25M_REF_EN_MASK (0x200000U)
#define CCM_ANALOG_PLL_ENET_SET_ENET_25M_REF_EN_SHIFT (21U)
#define CCM_ANALOG_PLL_ENET_SET_LOCK_MASK        (0x80000000U)
#define CCM_ANALOG_PLL_ENET_SET_LOCK_SHIFT       (31U)

/*! @name PLL_ENET_CLR - Analog ENET PLL Control Register */
#define CCM_ANALOG_PLL_ENET_CLR_ENET0_DIV_SELECT_MASK (0x3U)
#define CCM_ANALOG_PLL_ENET_CLR_ENET0_DIV_SELECT_SHIFT (0U)
#define CCM_ANALOG_PLL_ENET_CLR_ENET0_DIV_SELECT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ENET_CLR_ENET0_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_ENET_CLR_ENET0_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_ENET_CLR_ENET1_DIV_SELECT_MASK (0xCU)
#define CCM_ANALOG_PLL_ENET_CLR_ENET1_DIV_SELECT_SHIFT (2U)
#define CCM_ANALOG_PLL_ENET_CLR_ENET1_DIV_SELECT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ENET_CLR_ENET1_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_ENET_CLR_ENET1_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_ENET_CLR_POWERDOWN_MASK   (0x1000U)
#define CCM_ANALOG_PLL_ENET_CLR_POWERDOWN_SHIFT  (12U)
#define CCM_ANALOG_PLL_ENET_CLR_ENET1_125M_EN_MASK (0x2000U)
#define CCM_ANALOG_PLL_ENET_CLR_ENET1_125M_EN_SHIFT (13U)
#define CCM_ANALOG_PLL_ENET_CLR_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_ENET_CLR_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_ENET_CLR_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ENET_CLR_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_ENET_CLR_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_ENET_CLR_BYPASS_MASK      (0x10000U)
#define CCM_ANALOG_PLL_ENET_CLR_BYPASS_SHIFT     (16U)
#define CCM_ANALOG_PLL_ENET_CLR_PFD_OFFSET_EN_MASK (0x40000U)
#define CCM_ANALOG_PLL_ENET_CLR_PFD_OFFSET_EN_SHIFT (18U)
#define CCM_ANALOG_PLL_ENET_CLR_ENABLE_125M_MASK (0x80000U)
#define CCM_ANALOG_PLL_ENET_CLR_ENABLE_125M_SHIFT (19U)
#define CCM_ANALOG_PLL_ENET_CLR_ENET2_125M_EN_MASK (0x100000U)
#define CCM_ANALOG_PLL_ENET_CLR_ENET2_125M_EN_SHIFT (20U)
#define CCM_ANALOG_PLL_ENET_CLR_ENET_25M_REF_EN_MASK (0x200000U)
#define CCM_ANALOG_PLL_ENET_CLR_ENET_25M_REF_EN_SHIFT (21U)
#define CCM_ANALOG_PLL_ENET_CLR_LOCK_MASK        (0x80000000U)
#define CCM_ANALOG_PLL_ENET_CLR_LOCK_SHIFT       (31U)

/*! @name PLL_ENET_TOG - Analog ENET PLL Control Register */
#define CCM_ANALOG_PLL_ENET_TOG_ENET0_DIV_SELECT_MASK (0x3U)
#define CCM_ANALOG_PLL_ENET_TOG_ENET0_DIV_SELECT_SHIFT (0U)
#define CCM_ANALOG_PLL_ENET_TOG_ENET0_DIV_SELECT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ENET_TOG_ENET0_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_ENET_TOG_ENET0_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_ENET_TOG_ENET1_DIV_SELECT_MASK (0xCU)
#define CCM_ANALOG_PLL_ENET_TOG_ENET1_DIV_SELECT_SHIFT (2U)
#define CCM_ANALOG_PLL_ENET_TOG_ENET1_DIV_SELECT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ENET_TOG_ENET1_DIV_SELECT_SHIFT)) & CCM_ANALOG_PLL_ENET_TOG_ENET1_DIV_SELECT_MASK)
#define CCM_ANALOG_PLL_ENET_TOG_POWERDOWN_MASK   (0x1000U)
#define CCM_ANALOG_PLL_ENET_TOG_POWERDOWN_SHIFT  (12U)
#define CCM_ANALOG_PLL_ENET_TOG_ENET1_125M_EN_MASK (0x2000U)
#define CCM_ANALOG_PLL_ENET_TOG_ENET1_125M_EN_SHIFT (13U)
#define CCM_ANALOG_PLL_ENET_TOG_BYPASS_CLK_SRC_MASK (0xC000U)
#define CCM_ANALOG_PLL_ENET_TOG_BYPASS_CLK_SRC_SHIFT (14U)
#define CCM_ANALOG_PLL_ENET_TOG_BYPASS_CLK_SRC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLL_ENET_TOG_BYPASS_CLK_SRC_SHIFT)) & CCM_ANALOG_PLL_ENET_TOG_BYPASS_CLK_SRC_MASK)
#define CCM_ANALOG_PLL_ENET_TOG_BYPASS_MASK      (0x10000U)
#define CCM_ANALOG_PLL_ENET_TOG_BYPASS_SHIFT     (16U)
#define CCM_ANALOG_PLL_ENET_TOG_PFD_OFFSET_EN_MASK (0x40000U)
#define CCM_ANALOG_PLL_ENET_TOG_PFD_OFFSET_EN_SHIFT (18U)
#define CCM_ANALOG_PLL_ENET_TOG_ENABLE_125M_MASK (0x80000U)
#define CCM_ANALOG_PLL_ENET_TOG_ENABLE_125M_SHIFT (19U)
#define CCM_ANALOG_PLL_ENET_TOG_ENET2_125M_EN_MASK (0x100000U)
#define CCM_ANALOG_PLL_ENET_TOG_ENET2_125M_EN_SHIFT (20U)
#define CCM_ANALOG_PLL_ENET_TOG_ENET_25M_REF_EN_MASK (0x200000U)
#define CCM_ANALOG_PLL_ENET_TOG_ENET_25M_REF_EN_SHIFT (21U)
#define CCM_ANALOG_PLL_ENET_TOG_LOCK_MASK        (0x80000000U)
#define CCM_ANALOG_PLL_ENET_TOG_LOCK_SHIFT       (31U)

/*! @name PFD_480 - 480MHz Clock (PLL3) Phase Fractional Divider Control Register */
#define CCM_ANALOG_PFD_480_PFD0_FRAC_MASK        (0x3FU)
#define CCM_ANALOG_PFD_480_PFD0_FRAC_SHIFT       (0U)
#define CCM_ANALOG_PFD_480_PFD0_FRAC(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_480_PFD0_FRAC_SHIFT)) & CCM_ANALOG_PFD_480_PFD0_FRAC_MASK)
#define CCM_ANALOG_PFD_480_PFD0_STABLE_MASK      (0x40U)
#define CCM_ANALOG_PFD_480_PFD0_STABLE_SHIFT     (6U)
#define CCM_ANALOG_PFD_480_PFD0_CLKGATE_MASK     (0x80U)
#define CCM_ANALOG_PFD_480_PFD0_CLKGATE_SHIFT    (7U)
#define CCM_ANALOG_PFD_480_PFD1_FRAC_MASK        (0x3F00U)
#define CCM_ANALOG_PFD_480_PFD1_FRAC_SHIFT       (8U)
#define CCM_ANALOG_PFD_480_PFD1_FRAC(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_480_PFD1_FRAC_SHIFT)) & CCM_ANALOG_PFD_480_PFD1_FRAC_MASK)
#define CCM_ANALOG_PFD_480_PFD1_STABLE_MASK      (0x4000U)
#define CCM_ANALOG_PFD_480_PFD1_STABLE_SHIFT     (14U)
#define CCM_ANALOG_PFD_480_PFD1_CLKGATE_MASK     (0x8000U)
#define CCM_ANALOG_PFD_480_PFD1_CLKGATE_SHIFT    (15U)
#define CCM_ANALOG_PFD_480_PFD2_FRAC_MASK        (0x3F0000U)
#define CCM_ANALOG_PFD_480_PFD2_FRAC_SHIFT       (16U)
#define CCM_ANALOG_PFD_480_PFD2_FRAC(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_480_PFD2_FRAC_SHIFT)) & CCM_ANALOG_PFD_480_PFD2_FRAC_MASK)
#define CCM_ANALOG_PFD_480_PFD2_STABLE_MASK      (0x400000U)
#define CCM_ANALOG_PFD_480_PFD2_STABLE_SHIFT     (22U)
#define CCM_ANALOG_PFD_480_PFD2_CLKGATE_MASK     (0x800000U)
#define CCM_ANALOG_PFD_480_PFD2_CLKGATE_SHIFT    (23U)
#define CCM_ANALOG_PFD_480_PFD3_FRAC_MASK        (0x3F000000U)
#define CCM_ANALOG_PFD_480_PFD3_FRAC_SHIFT       (24U)
#define CCM_ANALOG_PFD_480_PFD3_FRAC(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_480_PFD3_FRAC_SHIFT)) & CCM_ANALOG_PFD_480_PFD3_FRAC_MASK)
#define CCM_ANALOG_PFD_480_PFD3_STABLE_MASK      (0x40000000U)
#define CCM_ANALOG_PFD_480_PFD3_STABLE_SHIFT     (30U)
#define CCM_ANALOG_PFD_480_PFD3_CLKGATE_MASK     (0x80000000U)
#define CCM_ANALOG_PFD_480_PFD3_CLKGATE_SHIFT    (31U)

/*! @name PFD_480_SET - 480MHz Clock (PLL3) Phase Fractional Divider Control Register */
#define CCM_ANALOG_PFD_480_SET_PFD0_FRAC_MASK    (0x3FU)
#define CCM_ANALOG_PFD_480_SET_PFD0_FRAC_SHIFT   (0U)
#define CCM_ANALOG_PFD_480_SET_PFD0_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_480_SET_PFD0_FRAC_SHIFT)) & CCM_ANALOG_PFD_480_SET_PFD0_FRAC_MASK)
#define CCM_ANALOG_PFD_480_SET_PFD0_STABLE_MASK  (0x40U)
#define CCM_ANALOG_PFD_480_SET_PFD0_STABLE_SHIFT (6U)
#define CCM_ANALOG_PFD_480_SET_PFD0_CLKGATE_MASK (0x80U)
#define CCM_ANALOG_PFD_480_SET_PFD0_CLKGATE_SHIFT (7U)
#define CCM_ANALOG_PFD_480_SET_PFD1_FRAC_MASK    (0x3F00U)
#define CCM_ANALOG_PFD_480_SET_PFD1_FRAC_SHIFT   (8U)
#define CCM_ANALOG_PFD_480_SET_PFD1_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_480_SET_PFD1_FRAC_SHIFT)) & CCM_ANALOG_PFD_480_SET_PFD1_FRAC_MASK)
#define CCM_ANALOG_PFD_480_SET_PFD1_STABLE_MASK  (0x4000U)
#define CCM_ANALOG_PFD_480_SET_PFD1_STABLE_SHIFT (14U)
#define CCM_ANALOG_PFD_480_SET_PFD1_CLKGATE_MASK (0x8000U)
#define CCM_ANALOG_PFD_480_SET_PFD1_CLKGATE_SHIFT (15U)
#define CCM_ANALOG_PFD_480_SET_PFD2_FRAC_MASK    (0x3F0000U)
#define CCM_ANALOG_PFD_480_SET_PFD2_FRAC_SHIFT   (16U)
#define CCM_ANALOG_PFD_480_SET_PFD2_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_480_SET_PFD2_FRAC_SHIFT)) & CCM_ANALOG_PFD_480_SET_PFD2_FRAC_MASK)
#define CCM_ANALOG_PFD_480_SET_PFD2_STABLE_MASK  (0x400000U)
#define CCM_ANALOG_PFD_480_SET_PFD2_STABLE_SHIFT (22U)
#define CCM_ANALOG_PFD_480_SET_PFD2_CLKGATE_MASK (0x800000U)
#define CCM_ANALOG_PFD_480_SET_PFD2_CLKGATE_SHIFT (23U)
#define CCM_ANALOG_PFD_480_SET_PFD3_FRAC_MASK    (0x3F000000U)
#define CCM_ANALOG_PFD_480_SET_PFD3_FRAC_SHIFT   (24U)
#define CCM_ANALOG_PFD_480_SET_PFD3_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_480_SET_PFD3_FRAC_SHIFT)) & CCM_ANALOG_PFD_480_SET_PFD3_FRAC_MASK)
#define CCM_ANALOG_PFD_480_SET_PFD3_STABLE_MASK  (0x40000000U)
#define CCM_ANALOG_PFD_480_SET_PFD3_STABLE_SHIFT (30U)
#define CCM_ANALOG_PFD_480_SET_PFD3_CLKGATE_MASK (0x80000000U)
#define CCM_ANALOG_PFD_480_SET_PFD3_CLKGATE_SHIFT (31U)

/*! @name PFD_480_CLR - 480MHz Clock (PLL3) Phase Fractional Divider Control Register */
#define CCM_ANALOG_PFD_480_CLR_PFD0_FRAC_MASK    (0x3FU)
#define CCM_ANALOG_PFD_480_CLR_PFD0_FRAC_SHIFT   (0U)
#define CCM_ANALOG_PFD_480_CLR_PFD0_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_480_CLR_PFD0_FRAC_SHIFT)) & CCM_ANALOG_PFD_480_CLR_PFD0_FRAC_MASK)
#define CCM_ANALOG_PFD_480_CLR_PFD0_STABLE_MASK  (0x40U)
#define CCM_ANALOG_PFD_480_CLR_PFD0_STABLE_SHIFT (6U)
#define CCM_ANALOG_PFD_480_CLR_PFD0_CLKGATE_MASK (0x80U)
#define CCM_ANALOG_PFD_480_CLR_PFD0_CLKGATE_SHIFT (7U)
#define CCM_ANALOG_PFD_480_CLR_PFD1_FRAC_MASK    (0x3F00U)
#define CCM_ANALOG_PFD_480_CLR_PFD1_FRAC_SHIFT   (8U)
#define CCM_ANALOG_PFD_480_CLR_PFD1_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_480_CLR_PFD1_FRAC_SHIFT)) & CCM_ANALOG_PFD_480_CLR_PFD1_FRAC_MASK)
#define CCM_ANALOG_PFD_480_CLR_PFD1_STABLE_MASK  (0x4000U)
#define CCM_ANALOG_PFD_480_CLR_PFD1_STABLE_SHIFT (14U)
#define CCM_ANALOG_PFD_480_CLR_PFD1_CLKGATE_MASK (0x8000U)
#define CCM_ANALOG_PFD_480_CLR_PFD1_CLKGATE_SHIFT (15U)
#define CCM_ANALOG_PFD_480_CLR_PFD2_FRAC_MASK    (0x3F0000U)
#define CCM_ANALOG_PFD_480_CLR_PFD2_FRAC_SHIFT   (16U)
#define CCM_ANALOG_PFD_480_CLR_PFD2_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_480_CLR_PFD2_FRAC_SHIFT)) & CCM_ANALOG_PFD_480_CLR_PFD2_FRAC_MASK)
#define CCM_ANALOG_PFD_480_CLR_PFD2_STABLE_MASK  (0x400000U)
#define CCM_ANALOG_PFD_480_CLR_PFD2_STABLE_SHIFT (22U)
#define CCM_ANALOG_PFD_480_CLR_PFD2_CLKGATE_MASK (0x800000U)
#define CCM_ANALOG_PFD_480_CLR_PFD2_CLKGATE_SHIFT (23U)
#define CCM_ANALOG_PFD_480_CLR_PFD3_FRAC_MASK    (0x3F000000U)
#define CCM_ANALOG_PFD_480_CLR_PFD3_FRAC_SHIFT   (24U)
#define CCM_ANALOG_PFD_480_CLR_PFD3_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_480_CLR_PFD3_FRAC_SHIFT)) & CCM_ANALOG_PFD_480_CLR_PFD3_FRAC_MASK)
#define CCM_ANALOG_PFD_480_CLR_PFD3_STABLE_MASK  (0x40000000U)
#define CCM_ANALOG_PFD_480_CLR_PFD3_STABLE_SHIFT (30U)
#define CCM_ANALOG_PFD_480_CLR_PFD3_CLKGATE_MASK (0x80000000U)
#define CCM_ANALOG_PFD_480_CLR_PFD3_CLKGATE_SHIFT (31U)

/*! @name PFD_480_TOG - 480MHz Clock (PLL3) Phase Fractional Divider Control Register */
#define CCM_ANALOG_PFD_480_TOG_PFD0_FRAC_MASK    (0x3FU)
#define CCM_ANALOG_PFD_480_TOG_PFD0_FRAC_SHIFT   (0U)
#define CCM_ANALOG_PFD_480_TOG_PFD0_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_480_TOG_PFD0_FRAC_SHIFT)) & CCM_ANALOG_PFD_480_TOG_PFD0_FRAC_MASK)
#define CCM_ANALOG_PFD_480_TOG_PFD0_STABLE_MASK  (0x40U)
#define CCM_ANALOG_PFD_480_TOG_PFD0_STABLE_SHIFT (6U)
#define CCM_ANALOG_PFD_480_TOG_PFD0_CLKGATE_MASK (0x80U)
#define CCM_ANALOG_PFD_480_TOG_PFD0_CLKGATE_SHIFT (7U)
#define CCM_ANALOG_PFD_480_TOG_PFD1_FRAC_MASK    (0x3F00U)
#define CCM_ANALOG_PFD_480_TOG_PFD1_FRAC_SHIFT   (8U)
#define CCM_ANALOG_PFD_480_TOG_PFD1_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_480_TOG_PFD1_FRAC_SHIFT)) & CCM_ANALOG_PFD_480_TOG_PFD1_FRAC_MASK)
#define CCM_ANALOG_PFD_480_TOG_PFD1_STABLE_MASK  (0x4000U)
#define CCM_ANALOG_PFD_480_TOG_PFD1_STABLE_SHIFT (14U)
#define CCM_ANALOG_PFD_480_TOG_PFD1_CLKGATE_MASK (0x8000U)
#define CCM_ANALOG_PFD_480_TOG_PFD1_CLKGATE_SHIFT (15U)
#define CCM_ANALOG_PFD_480_TOG_PFD2_FRAC_MASK    (0x3F0000U)
#define CCM_ANALOG_PFD_480_TOG_PFD2_FRAC_SHIFT   (16U)
#define CCM_ANALOG_PFD_480_TOG_PFD2_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_480_TOG_PFD2_FRAC_SHIFT)) & CCM_ANALOG_PFD_480_TOG_PFD2_FRAC_MASK)
#define CCM_ANALOG_PFD_480_TOG_PFD2_STABLE_MASK  (0x400000U)
#define CCM_ANALOG_PFD_480_TOG_PFD2_STABLE_SHIFT (22U)
#define CCM_ANALOG_PFD_480_TOG_PFD2_CLKGATE_MASK (0x800000U)
#define CCM_ANALOG_PFD_480_TOG_PFD2_CLKGATE_SHIFT (23U)
#define CCM_ANALOG_PFD_480_TOG_PFD3_FRAC_MASK    (0x3F000000U)
#define CCM_ANALOG_PFD_480_TOG_PFD3_FRAC_SHIFT   (24U)
#define CCM_ANALOG_PFD_480_TOG_PFD3_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_480_TOG_PFD3_FRAC_SHIFT)) & CCM_ANALOG_PFD_480_TOG_PFD3_FRAC_MASK)
#define CCM_ANALOG_PFD_480_TOG_PFD3_STABLE_MASK  (0x40000000U)
#define CCM_ANALOG_PFD_480_TOG_PFD3_STABLE_SHIFT (30U)
#define CCM_ANALOG_PFD_480_TOG_PFD3_CLKGATE_MASK (0x80000000U)
#define CCM_ANALOG_PFD_480_TOG_PFD3_CLKGATE_SHIFT (31U)

/*! @name PFD_528 - 528MHz Clock (PLL2) Phase Fractional Divider Control Register */
#define CCM_ANALOG_PFD_528_PFD0_FRAC_MASK        (0x3FU)
#define CCM_ANALOG_PFD_528_PFD0_FRAC_SHIFT       (0U)
#define CCM_ANALOG_PFD_528_PFD0_FRAC(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_528_PFD0_FRAC_SHIFT)) & CCM_ANALOG_PFD_528_PFD0_FRAC_MASK)
#define CCM_ANALOG_PFD_528_PFD0_STABLE_MASK      (0x40U)
#define CCM_ANALOG_PFD_528_PFD0_STABLE_SHIFT     (6U)
#define CCM_ANALOG_PFD_528_PFD0_CLKGATE_MASK     (0x80U)
#define CCM_ANALOG_PFD_528_PFD0_CLKGATE_SHIFT    (7U)
#define CCM_ANALOG_PFD_528_PFD1_FRAC_MASK        (0x3F00U)
#define CCM_ANALOG_PFD_528_PFD1_FRAC_SHIFT       (8U)
#define CCM_ANALOG_PFD_528_PFD1_FRAC(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_528_PFD1_FRAC_SHIFT)) & CCM_ANALOG_PFD_528_PFD1_FRAC_MASK)
#define CCM_ANALOG_PFD_528_PFD1_STABLE_MASK      (0x4000U)
#define CCM_ANALOG_PFD_528_PFD1_STABLE_SHIFT     (14U)
#define CCM_ANALOG_PFD_528_PFD1_CLKGATE_MASK     (0x8000U)
#define CCM_ANALOG_PFD_528_PFD1_CLKGATE_SHIFT    (15U)
#define CCM_ANALOG_PFD_528_PFD2_FRAC_MASK        (0x3F0000U)
#define CCM_ANALOG_PFD_528_PFD2_FRAC_SHIFT       (16U)
#define CCM_ANALOG_PFD_528_PFD2_FRAC(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_528_PFD2_FRAC_SHIFT)) & CCM_ANALOG_PFD_528_PFD2_FRAC_MASK)
#define CCM_ANALOG_PFD_528_PFD2_STABLE_MASK      (0x400000U)
#define CCM_ANALOG_PFD_528_PFD2_STABLE_SHIFT     (22U)
#define CCM_ANALOG_PFD_528_PFD2_CLKGATE_MASK     (0x800000U)
#define CCM_ANALOG_PFD_528_PFD2_CLKGATE_SHIFT    (23U)
#define CCM_ANALOG_PFD_528_PFD3_FRAC_MASK        (0x3F000000U)
#define CCM_ANALOG_PFD_528_PFD3_FRAC_SHIFT       (24U)
#define CCM_ANALOG_PFD_528_PFD3_FRAC(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_528_PFD3_FRAC_SHIFT)) & CCM_ANALOG_PFD_528_PFD3_FRAC_MASK)
#define CCM_ANALOG_PFD_528_PFD3_STABLE_MASK      (0x40000000U)
#define CCM_ANALOG_PFD_528_PFD3_STABLE_SHIFT     (30U)
#define CCM_ANALOG_PFD_528_PFD3_CLKGATE_MASK     (0x80000000U)
#define CCM_ANALOG_PFD_528_PFD3_CLKGATE_SHIFT    (31U)

/*! @name PFD_528_SET - 528MHz Clock (PLL2) Phase Fractional Divider Control Register */
#define CCM_ANALOG_PFD_528_SET_PFD0_FRAC_MASK    (0x3FU)
#define CCM_ANALOG_PFD_528_SET_PFD0_FRAC_SHIFT   (0U)
#define CCM_ANALOG_PFD_528_SET_PFD0_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_528_SET_PFD0_FRAC_SHIFT)) & CCM_ANALOG_PFD_528_SET_PFD0_FRAC_MASK)
#define CCM_ANALOG_PFD_528_SET_PFD0_STABLE_MASK  (0x40U)
#define CCM_ANALOG_PFD_528_SET_PFD0_STABLE_SHIFT (6U)
#define CCM_ANALOG_PFD_528_SET_PFD0_CLKGATE_MASK (0x80U)
#define CCM_ANALOG_PFD_528_SET_PFD0_CLKGATE_SHIFT (7U)
#define CCM_ANALOG_PFD_528_SET_PFD1_FRAC_MASK    (0x3F00U)
#define CCM_ANALOG_PFD_528_SET_PFD1_FRAC_SHIFT   (8U)
#define CCM_ANALOG_PFD_528_SET_PFD1_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_528_SET_PFD1_FRAC_SHIFT)) & CCM_ANALOG_PFD_528_SET_PFD1_FRAC_MASK)
#define CCM_ANALOG_PFD_528_SET_PFD1_STABLE_MASK  (0x4000U)
#define CCM_ANALOG_PFD_528_SET_PFD1_STABLE_SHIFT (14U)
#define CCM_ANALOG_PFD_528_SET_PFD1_CLKGATE_MASK (0x8000U)
#define CCM_ANALOG_PFD_528_SET_PFD1_CLKGATE_SHIFT (15U)
#define CCM_ANALOG_PFD_528_SET_PFD2_FRAC_MASK    (0x3F0000U)
#define CCM_ANALOG_PFD_528_SET_PFD2_FRAC_SHIFT   (16U)
#define CCM_ANALOG_PFD_528_SET_PFD2_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_528_SET_PFD2_FRAC_SHIFT)) & CCM_ANALOG_PFD_528_SET_PFD2_FRAC_MASK)
#define CCM_ANALOG_PFD_528_SET_PFD2_STABLE_MASK  (0x400000U)
#define CCM_ANALOG_PFD_528_SET_PFD2_STABLE_SHIFT (22U)
#define CCM_ANALOG_PFD_528_SET_PFD2_CLKGATE_MASK (0x800000U)
#define CCM_ANALOG_PFD_528_SET_PFD2_CLKGATE_SHIFT (23U)
#define CCM_ANALOG_PFD_528_SET_PFD3_FRAC_MASK    (0x3F000000U)
#define CCM_ANALOG_PFD_528_SET_PFD3_FRAC_SHIFT   (24U)
#define CCM_ANALOG_PFD_528_SET_PFD3_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_528_SET_PFD3_FRAC_SHIFT)) & CCM_ANALOG_PFD_528_SET_PFD3_FRAC_MASK)
#define CCM_ANALOG_PFD_528_SET_PFD3_STABLE_MASK  (0x40000000U)
#define CCM_ANALOG_PFD_528_SET_PFD3_STABLE_SHIFT (30U)
#define CCM_ANALOG_PFD_528_SET_PFD3_CLKGATE_MASK (0x80000000U)
#define CCM_ANALOG_PFD_528_SET_PFD3_CLKGATE_SHIFT (31U)

/*! @name PFD_528_CLR - 528MHz Clock (PLL2) Phase Fractional Divider Control Register */
#define CCM_ANALOG_PFD_528_CLR_PFD0_FRAC_MASK    (0x3FU)
#define CCM_ANALOG_PFD_528_CLR_PFD0_FRAC_SHIFT   (0U)
#define CCM_ANALOG_PFD_528_CLR_PFD0_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_528_CLR_PFD0_FRAC_SHIFT)) & CCM_ANALOG_PFD_528_CLR_PFD0_FRAC_MASK)
#define CCM_ANALOG_PFD_528_CLR_PFD0_STABLE_MASK  (0x40U)
#define CCM_ANALOG_PFD_528_CLR_PFD0_STABLE_SHIFT (6U)
#define CCM_ANALOG_PFD_528_CLR_PFD0_CLKGATE_MASK (0x80U)
#define CCM_ANALOG_PFD_528_CLR_PFD0_CLKGATE_SHIFT (7U)
#define CCM_ANALOG_PFD_528_CLR_PFD1_FRAC_MASK    (0x3F00U)
#define CCM_ANALOG_PFD_528_CLR_PFD1_FRAC_SHIFT   (8U)
#define CCM_ANALOG_PFD_528_CLR_PFD1_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_528_CLR_PFD1_FRAC_SHIFT)) & CCM_ANALOG_PFD_528_CLR_PFD1_FRAC_MASK)
#define CCM_ANALOG_PFD_528_CLR_PFD1_STABLE_MASK  (0x4000U)
#define CCM_ANALOG_PFD_528_CLR_PFD1_STABLE_SHIFT (14U)
#define CCM_ANALOG_PFD_528_CLR_PFD1_CLKGATE_MASK (0x8000U)
#define CCM_ANALOG_PFD_528_CLR_PFD1_CLKGATE_SHIFT (15U)
#define CCM_ANALOG_PFD_528_CLR_PFD2_FRAC_MASK    (0x3F0000U)
#define CCM_ANALOG_PFD_528_CLR_PFD2_FRAC_SHIFT   (16U)
#define CCM_ANALOG_PFD_528_CLR_PFD2_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_528_CLR_PFD2_FRAC_SHIFT)) & CCM_ANALOG_PFD_528_CLR_PFD2_FRAC_MASK)
#define CCM_ANALOG_PFD_528_CLR_PFD2_STABLE_MASK  (0x400000U)
#define CCM_ANALOG_PFD_528_CLR_PFD2_STABLE_SHIFT (22U)
#define CCM_ANALOG_PFD_528_CLR_PFD2_CLKGATE_MASK (0x800000U)
#define CCM_ANALOG_PFD_528_CLR_PFD2_CLKGATE_SHIFT (23U)
#define CCM_ANALOG_PFD_528_CLR_PFD3_FRAC_MASK    (0x3F000000U)
#define CCM_ANALOG_PFD_528_CLR_PFD3_FRAC_SHIFT   (24U)
#define CCM_ANALOG_PFD_528_CLR_PFD3_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_528_CLR_PFD3_FRAC_SHIFT)) & CCM_ANALOG_PFD_528_CLR_PFD3_FRAC_MASK)
#define CCM_ANALOG_PFD_528_CLR_PFD3_STABLE_MASK  (0x40000000U)
#define CCM_ANALOG_PFD_528_CLR_PFD3_STABLE_SHIFT (30U)
#define CCM_ANALOG_PFD_528_CLR_PFD3_CLKGATE_MASK (0x80000000U)
#define CCM_ANALOG_PFD_528_CLR_PFD3_CLKGATE_SHIFT (31U)

/*! @name PFD_528_TOG - 528MHz Clock (PLL2) Phase Fractional Divider Control Register */
#define CCM_ANALOG_PFD_528_TOG_PFD0_FRAC_MASK    (0x3FU)
#define CCM_ANALOG_PFD_528_TOG_PFD0_FRAC_SHIFT   (0U)
#define CCM_ANALOG_PFD_528_TOG_PFD0_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_528_TOG_PFD0_FRAC_SHIFT)) & CCM_ANALOG_PFD_528_TOG_PFD0_FRAC_MASK)
#define CCM_ANALOG_PFD_528_TOG_PFD0_STABLE_MASK  (0x40U)
#define CCM_ANALOG_PFD_528_TOG_PFD0_STABLE_SHIFT (6U)
#define CCM_ANALOG_PFD_528_TOG_PFD0_CLKGATE_MASK (0x80U)
#define CCM_ANALOG_PFD_528_TOG_PFD0_CLKGATE_SHIFT (7U)
#define CCM_ANALOG_PFD_528_TOG_PFD1_FRAC_MASK    (0x3F00U)
#define CCM_ANALOG_PFD_528_TOG_PFD1_FRAC_SHIFT   (8U)
#define CCM_ANALOG_PFD_528_TOG_PFD1_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_528_TOG_PFD1_FRAC_SHIFT)) & CCM_ANALOG_PFD_528_TOG_PFD1_FRAC_MASK)
#define CCM_ANALOG_PFD_528_TOG_PFD1_STABLE_MASK  (0x4000U)
#define CCM_ANALOG_PFD_528_TOG_PFD1_STABLE_SHIFT (14U)
#define CCM_ANALOG_PFD_528_TOG_PFD1_CLKGATE_MASK (0x8000U)
#define CCM_ANALOG_PFD_528_TOG_PFD1_CLKGATE_SHIFT (15U)
#define CCM_ANALOG_PFD_528_TOG_PFD2_FRAC_MASK    (0x3F0000U)
#define CCM_ANALOG_PFD_528_TOG_PFD2_FRAC_SHIFT   (16U)
#define CCM_ANALOG_PFD_528_TOG_PFD2_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_528_TOG_PFD2_FRAC_SHIFT)) & CCM_ANALOG_PFD_528_TOG_PFD2_FRAC_MASK)
#define CCM_ANALOG_PFD_528_TOG_PFD2_STABLE_MASK  (0x400000U)
#define CCM_ANALOG_PFD_528_TOG_PFD2_STABLE_SHIFT (22U)
#define CCM_ANALOG_PFD_528_TOG_PFD2_CLKGATE_MASK (0x800000U)
#define CCM_ANALOG_PFD_528_TOG_PFD2_CLKGATE_SHIFT (23U)
#define CCM_ANALOG_PFD_528_TOG_PFD3_FRAC_MASK    (0x3F000000U)
#define CCM_ANALOG_PFD_528_TOG_PFD3_FRAC_SHIFT   (24U)
#define CCM_ANALOG_PFD_528_TOG_PFD3_FRAC(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PFD_528_TOG_PFD3_FRAC_SHIFT)) & CCM_ANALOG_PFD_528_TOG_PFD3_FRAC_MASK)
#define CCM_ANALOG_PFD_528_TOG_PFD3_STABLE_MASK  (0x40000000U)
#define CCM_ANALOG_PFD_528_TOG_PFD3_STABLE_SHIFT (30U)
#define CCM_ANALOG_PFD_528_TOG_PFD3_CLKGATE_MASK (0x80000000U)
#define CCM_ANALOG_PFD_528_TOG_PFD3_CLKGATE_SHIFT (31U)

/*! @name MISC0 - Miscellaneous Register 0 */
#define CCM_ANALOG_MISC0_REFTOP_PWD_MASK         (0x1U)
#define CCM_ANALOG_MISC0_REFTOP_PWD_SHIFT        (0U)
#define CCM_ANALOG_MISC0_REFTOP_SELFBIASOFF_MASK (0x8U)
#define CCM_ANALOG_MISC0_REFTOP_SELFBIASOFF_SHIFT (3U)
#define CCM_ANALOG_MISC0_REFTOP_VBGADJ_MASK      (0x70U)
#define CCM_ANALOG_MISC0_REFTOP_VBGADJ_SHIFT     (4U)
#define CCM_ANALOG_MISC0_REFTOP_VBGADJ(x)        (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC0_REFTOP_VBGADJ_SHIFT)) & CCM_ANALOG_MISC0_REFTOP_VBGADJ_MASK)
#define CCM_ANALOG_MISC0_REFTOP_VBGUP_MASK       (0x80U)
#define CCM_ANALOG_MISC0_REFTOP_VBGUP_SHIFT      (7U)
#define CCM_ANALOG_MISC0_STOP_MODE_CONFIG_MASK   (0xC00U)
#define CCM_ANALOG_MISC0_STOP_MODE_CONFIG_SHIFT  (10U)
#define CCM_ANALOG_MISC0_STOP_MODE_CONFIG(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC0_STOP_MODE_CONFIG_SHIFT)) & CCM_ANALOG_MISC0_STOP_MODE_CONFIG_MASK)
#define CCM_ANALOG_MISC0_DISCON_HIGH_SNVS_MASK   (0x1000U)
#define CCM_ANALOG_MISC0_DISCON_HIGH_SNVS_SHIFT  (12U)
#define CCM_ANALOG_MISC0_OSC_I_MASK              (0x6000U)
#define CCM_ANALOG_MISC0_OSC_I_SHIFT             (13U)
#define CCM_ANALOG_MISC0_OSC_I(x)                (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC0_OSC_I_SHIFT)) & CCM_ANALOG_MISC0_OSC_I_MASK)
#define CCM_ANALOG_MISC0_OSC_XTALOK_MASK         (0x8000U)
#define CCM_ANALOG_MISC0_OSC_XTALOK_SHIFT        (15U)
#define CCM_ANALOG_MISC0_OSC_XTALOK_EN_MASK      (0x10000U)
#define CCM_ANALOG_MISC0_OSC_XTALOK_EN_SHIFT     (16U)
#define CCM_ANALOG_MISC0_CLKGATE_CTRL_MASK       (0x2000000U)
#define CCM_ANALOG_MISC0_CLKGATE_CTRL_SHIFT      (25U)
#define CCM_ANALOG_MISC0_CLKGATE_DELAY_MASK      (0x1C000000U)
#define CCM_ANALOG_MISC0_CLKGATE_DELAY_SHIFT     (26U)
#define CCM_ANALOG_MISC0_CLKGATE_DELAY(x)        (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC0_CLKGATE_DELAY_SHIFT)) & CCM_ANALOG_MISC0_CLKGATE_DELAY_MASK)
#define CCM_ANALOG_MISC0_RTC_XTAL_SOURCE_MASK    (0x20000000U)
#define CCM_ANALOG_MISC0_RTC_XTAL_SOURCE_SHIFT   (29U)
#define CCM_ANALOG_MISC0_XTAL_24M_PWD_MASK       (0x40000000U)
#define CCM_ANALOG_MISC0_XTAL_24M_PWD_SHIFT      (30U)
#define CCM_ANALOG_MISC0_VID_PLL_PREDIV_MASK     (0x80000000U)
#define CCM_ANALOG_MISC0_VID_PLL_PREDIV_SHIFT    (31U)

/*! @name MISC0_SET - Miscellaneous Register 0 */
#define CCM_ANALOG_MISC0_SET_REFTOP_PWD_MASK     (0x1U)
#define CCM_ANALOG_MISC0_SET_REFTOP_PWD_SHIFT    (0U)
#define CCM_ANALOG_MISC0_SET_REFTOP_SELFBIASOFF_MASK (0x8U)
#define CCM_ANALOG_MISC0_SET_REFTOP_SELFBIASOFF_SHIFT (3U)
#define CCM_ANALOG_MISC0_SET_REFTOP_VBGADJ_MASK  (0x70U)
#define CCM_ANALOG_MISC0_SET_REFTOP_VBGADJ_SHIFT (4U)
#define CCM_ANALOG_MISC0_SET_REFTOP_VBGADJ(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC0_SET_REFTOP_VBGADJ_SHIFT)) & CCM_ANALOG_MISC0_SET_REFTOP_VBGADJ_MASK)
#define CCM_ANALOG_MISC0_SET_REFTOP_VBGUP_MASK   (0x80U)
#define CCM_ANALOG_MISC0_SET_REFTOP_VBGUP_SHIFT  (7U)
#define CCM_ANALOG_MISC0_SET_STOP_MODE_CONFIG_MASK (0xC00U)
#define CCM_ANALOG_MISC0_SET_STOP_MODE_CONFIG_SHIFT (10U)
#define CCM_ANALOG_MISC0_SET_STOP_MODE_CONFIG(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC0_SET_STOP_MODE_CONFIG_SHIFT)) & CCM_ANALOG_MISC0_SET_STOP_MODE_CONFIG_MASK)
#define CCM_ANALOG_MISC0_SET_DISCON_HIGH_SNVS_MASK (0x1000U)
#define CCM_ANALOG_MISC0_SET_DISCON_HIGH_SNVS_SHIFT (12U)
#define CCM_ANALOG_MISC0_SET_OSC_I_MASK          (0x6000U)
#define CCM_ANALOG_MISC0_SET_OSC_I_SHIFT         (13U)
#define CCM_ANALOG_MISC0_SET_OSC_I(x)            (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC0_SET_OSC_I_SHIFT)) & CCM_ANALOG_MISC0_SET_OSC_I_MASK)
#define CCM_ANALOG_MISC0_SET_OSC_XTALOK_MASK     (0x8000U)
#define CCM_ANALOG_MISC0_SET_OSC_XTALOK_SHIFT    (15U)
#define CCM_ANALOG_MISC0_SET_OSC_XTALOK_EN_MASK  (0x10000U)
#define CCM_ANALOG_MISC0_SET_OSC_XTALOK_EN_SHIFT (16U)
#define CCM_ANALOG_MISC0_SET_CLKGATE_CTRL_MASK   (0x2000000U)
#define CCM_ANALOG_MISC0_SET_CLKGATE_CTRL_SHIFT  (25U)
#define CCM_ANALOG_MISC0_SET_CLKGATE_DELAY_MASK  (0x1C000000U)
#define CCM_ANALOG_MISC0_SET_CLKGATE_DELAY_SHIFT (26U)
#define CCM_ANALOG_MISC0_SET_CLKGATE_DELAY(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC0_SET_CLKGATE_DELAY_SHIFT)) & CCM_ANALOG_MISC0_SET_CLKGATE_DELAY_MASK)
#define CCM_ANALOG_MISC0_SET_RTC_XTAL_SOURCE_MASK (0x20000000U)
#define CCM_ANALOG_MISC0_SET_RTC_XTAL_SOURCE_SHIFT (29U)
#define CCM_ANALOG_MISC0_SET_XTAL_24M_PWD_MASK   (0x40000000U)
#define CCM_ANALOG_MISC0_SET_XTAL_24M_PWD_SHIFT  (30U)
#define CCM_ANALOG_MISC0_SET_VID_PLL_PREDIV_MASK (0x80000000U)
#define CCM_ANALOG_MISC0_SET_VID_PLL_PREDIV_SHIFT (31U)

/*! @name MISC0_CLR - Miscellaneous Register 0 */
#define CCM_ANALOG_MISC0_CLR_REFTOP_PWD_MASK     (0x1U)
#define CCM_ANALOG_MISC0_CLR_REFTOP_PWD_SHIFT    (0U)
#define CCM_ANALOG_MISC0_CLR_REFTOP_SELFBIASOFF_MASK (0x8U)
#define CCM_ANALOG_MISC0_CLR_REFTOP_SELFBIASOFF_SHIFT (3U)
#define CCM_ANALOG_MISC0_CLR_REFTOP_VBGADJ_MASK  (0x70U)
#define CCM_ANALOG_MISC0_CLR_REFTOP_VBGADJ_SHIFT (4U)
#define CCM_ANALOG_MISC0_CLR_REFTOP_VBGADJ(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC0_CLR_REFTOP_VBGADJ_SHIFT)) & CCM_ANALOG_MISC0_CLR_REFTOP_VBGADJ_MASK)
#define CCM_ANALOG_MISC0_CLR_REFTOP_VBGUP_MASK   (0x80U)
#define CCM_ANALOG_MISC0_CLR_REFTOP_VBGUP_SHIFT  (7U)
#define CCM_ANALOG_MISC0_CLR_STOP_MODE_CONFIG_MASK (0xC00U)
#define CCM_ANALOG_MISC0_CLR_STOP_MODE_CONFIG_SHIFT (10U)
#define CCM_ANALOG_MISC0_CLR_STOP_MODE_CONFIG(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC0_CLR_STOP_MODE_CONFIG_SHIFT)) & CCM_ANALOG_MISC0_CLR_STOP_MODE_CONFIG_MASK)
#define CCM_ANALOG_MISC0_CLR_DISCON_HIGH_SNVS_MASK (0x1000U)
#define CCM_ANALOG_MISC0_CLR_DISCON_HIGH_SNVS_SHIFT (12U)
#define CCM_ANALOG_MISC0_CLR_OSC_I_MASK          (0x6000U)
#define CCM_ANALOG_MISC0_CLR_OSC_I_SHIFT         (13U)
#define CCM_ANALOG_MISC0_CLR_OSC_I(x)            (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC0_CLR_OSC_I_SHIFT)) & CCM_ANALOG_MISC0_CLR_OSC_I_MASK)
#define CCM_ANALOG_MISC0_CLR_OSC_XTALOK_MASK     (0x8000U)
#define CCM_ANALOG_MISC0_CLR_OSC_XTALOK_SHIFT    (15U)
#define CCM_ANALOG_MISC0_CLR_OSC_XTALOK_EN_MASK  (0x10000U)
#define CCM_ANALOG_MISC0_CLR_OSC_XTALOK_EN_SHIFT (16U)
#define CCM_ANALOG_MISC0_CLR_CLKGATE_CTRL_MASK   (0x2000000U)
#define CCM_ANALOG_MISC0_CLR_CLKGATE_CTRL_SHIFT  (25U)
#define CCM_ANALOG_MISC0_CLR_CLKGATE_DELAY_MASK  (0x1C000000U)
#define CCM_ANALOG_MISC0_CLR_CLKGATE_DELAY_SHIFT (26U)
#define CCM_ANALOG_MISC0_CLR_CLKGATE_DELAY(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC0_CLR_CLKGATE_DELAY_SHIFT)) & CCM_ANALOG_MISC0_CLR_CLKGATE_DELAY_MASK)
#define CCM_ANALOG_MISC0_CLR_RTC_XTAL_SOURCE_MASK (0x20000000U)
#define CCM_ANALOG_MISC0_CLR_RTC_XTAL_SOURCE_SHIFT (29U)
#define CCM_ANALOG_MISC0_CLR_XTAL_24M_PWD_MASK   (0x40000000U)
#define CCM_ANALOG_MISC0_CLR_XTAL_24M_PWD_SHIFT  (30U)
#define CCM_ANALOG_MISC0_CLR_VID_PLL_PREDIV_MASK (0x80000000U)
#define CCM_ANALOG_MISC0_CLR_VID_PLL_PREDIV_SHIFT (31U)

/*! @name MISC0_TOG - Miscellaneous Register 0 */
#define CCM_ANALOG_MISC0_TOG_REFTOP_PWD_MASK     (0x1U)
#define CCM_ANALOG_MISC0_TOG_REFTOP_PWD_SHIFT    (0U)
#define CCM_ANALOG_MISC0_TOG_REFTOP_SELFBIASOFF_MASK (0x8U)
#define CCM_ANALOG_MISC0_TOG_REFTOP_SELFBIASOFF_SHIFT (3U)
#define CCM_ANALOG_MISC0_TOG_REFTOP_VBGADJ_MASK  (0x70U)
#define CCM_ANALOG_MISC0_TOG_REFTOP_VBGADJ_SHIFT (4U)
#define CCM_ANALOG_MISC0_TOG_REFTOP_VBGADJ(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC0_TOG_REFTOP_VBGADJ_SHIFT)) & CCM_ANALOG_MISC0_TOG_REFTOP_VBGADJ_MASK)
#define CCM_ANALOG_MISC0_TOG_REFTOP_VBGUP_MASK   (0x80U)
#define CCM_ANALOG_MISC0_TOG_REFTOP_VBGUP_SHIFT  (7U)
#define CCM_ANALOG_MISC0_TOG_STOP_MODE_CONFIG_MASK (0xC00U)
#define CCM_ANALOG_MISC0_TOG_STOP_MODE_CONFIG_SHIFT (10U)
#define CCM_ANALOG_MISC0_TOG_STOP_MODE_CONFIG(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC0_TOG_STOP_MODE_CONFIG_SHIFT)) & CCM_ANALOG_MISC0_TOG_STOP_MODE_CONFIG_MASK)
#define CCM_ANALOG_MISC0_TOG_DISCON_HIGH_SNVS_MASK (0x1000U)
#define CCM_ANALOG_MISC0_TOG_DISCON_HIGH_SNVS_SHIFT (12U)
#define CCM_ANALOG_MISC0_TOG_OSC_I_MASK          (0x6000U)
#define CCM_ANALOG_MISC0_TOG_OSC_I_SHIFT         (13U)
#define CCM_ANALOG_MISC0_TOG_OSC_I(x)            (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC0_TOG_OSC_I_SHIFT)) & CCM_ANALOG_MISC0_TOG_OSC_I_MASK)
#define CCM_ANALOG_MISC0_TOG_OSC_XTALOK_MASK     (0x8000U)
#define CCM_ANALOG_MISC0_TOG_OSC_XTALOK_SHIFT    (15U)
#define CCM_ANALOG_MISC0_TOG_OSC_XTALOK_EN_MASK  (0x10000U)
#define CCM_ANALOG_MISC0_TOG_OSC_XTALOK_EN_SHIFT (16U)
#define CCM_ANALOG_MISC0_TOG_CLKGATE_CTRL_MASK   (0x2000000U)
#define CCM_ANALOG_MISC0_TOG_CLKGATE_CTRL_SHIFT  (25U)
#define CCM_ANALOG_MISC0_TOG_CLKGATE_DELAY_MASK  (0x1C000000U)
#define CCM_ANALOG_MISC0_TOG_CLKGATE_DELAY_SHIFT (26U)
#define CCM_ANALOG_MISC0_TOG_CLKGATE_DELAY(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC0_TOG_CLKGATE_DELAY_SHIFT)) & CCM_ANALOG_MISC0_TOG_CLKGATE_DELAY_MASK)
#define CCM_ANALOG_MISC0_TOG_RTC_XTAL_SOURCE_MASK (0x20000000U)
#define CCM_ANALOG_MISC0_TOG_RTC_XTAL_SOURCE_SHIFT (29U)
#define CCM_ANALOG_MISC0_TOG_XTAL_24M_PWD_MASK   (0x40000000U)
#define CCM_ANALOG_MISC0_TOG_XTAL_24M_PWD_SHIFT  (30U)
#define CCM_ANALOG_MISC0_TOG_VID_PLL_PREDIV_MASK (0x80000000U)
#define CCM_ANALOG_MISC0_TOG_VID_PLL_PREDIV_SHIFT (31U)

/*! @name MISC1 - Miscellaneous Register 1 */
#define CCM_ANALOG_MISC1_LVDS1_CLK_SEL_MASK      (0x1FU)
#define CCM_ANALOG_MISC1_LVDS1_CLK_SEL_SHIFT     (0U)
#define CCM_ANALOG_MISC1_LVDS1_CLK_SEL(x)        (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC1_LVDS1_CLK_SEL_SHIFT)) & CCM_ANALOG_MISC1_LVDS1_CLK_SEL_MASK)
#define CCM_ANALOG_MISC1_LVDSCLK1_OBEN_MASK      (0x400U)
#define CCM_ANALOG_MISC1_LVDSCLK1_OBEN_SHIFT     (10U)
#define CCM_ANALOG_MISC1_LVDSCLK1_IBEN_MASK      (0x1000U)
#define CCM_ANALOG_MISC1_LVDSCLK1_IBEN_SHIFT     (12U)
#define CCM_ANALOG_MISC1_PFD_480_AUTOGATE_EN_MASK (0x10000U)
#define CCM_ANALOG_MISC1_PFD_480_AUTOGATE_EN_SHIFT (16U)
#define CCM_ANALOG_MISC1_PFD_528_AUTOGATE_EN_MASK (0x20000U)
#define CCM_ANALOG_MISC1_PFD_528_AUTOGATE_EN_SHIFT (17U)
#define CCM_ANALOG_MISC1_IRQ_TEMPPANIC_MASK      (0x8000000U)
#define CCM_ANALOG_MISC1_IRQ_TEMPPANIC_SHIFT     (27U)
#define CCM_ANALOG_MISC1_IRQ_TEMPLOW_MASK        (0x10000000U)
#define CCM_ANALOG_MISC1_IRQ_TEMPLOW_SHIFT       (28U)
#define CCM_ANALOG_MISC1_IRQ_TEMPHIGH_MASK       (0x20000000U)
#define CCM_ANALOG_MISC1_IRQ_TEMPHIGH_SHIFT      (29U)
#define CCM_ANALOG_MISC1_IRQ_ANA_BO_MASK         (0x40000000U)
#define CCM_ANALOG_MISC1_IRQ_ANA_BO_SHIFT        (30U)
#define CCM_ANALOG_MISC1_IRQ_DIG_BO_MASK         (0x80000000U)
#define CCM_ANALOG_MISC1_IRQ_DIG_BO_SHIFT        (31U)

/*! @name MISC1_SET - Miscellaneous Register 1 */
#define CCM_ANALOG_MISC1_SET_LVDS1_CLK_SEL_MASK  (0x1FU)
#define CCM_ANALOG_MISC1_SET_LVDS1_CLK_SEL_SHIFT (0U)
#define CCM_ANALOG_MISC1_SET_LVDS1_CLK_SEL(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC1_SET_LVDS1_CLK_SEL_SHIFT)) & CCM_ANALOG_MISC1_SET_LVDS1_CLK_SEL_MASK)
#define CCM_ANALOG_MISC1_SET_LVDSCLK1_OBEN_MASK  (0x400U)
#define CCM_ANALOG_MISC1_SET_LVDSCLK1_OBEN_SHIFT (10U)
#define CCM_ANALOG_MISC1_SET_LVDSCLK1_IBEN_MASK  (0x1000U)
#define CCM_ANALOG_MISC1_SET_LVDSCLK1_IBEN_SHIFT (12U)
#define CCM_ANALOG_MISC1_SET_PFD_480_AUTOGATE_EN_MASK (0x10000U)
#define CCM_ANALOG_MISC1_SET_PFD_480_AUTOGATE_EN_SHIFT (16U)
#define CCM_ANALOG_MISC1_SET_PFD_528_AUTOGATE_EN_MASK (0x20000U)
#define CCM_ANALOG_MISC1_SET_PFD_528_AUTOGATE_EN_SHIFT (17U)
#define CCM_ANALOG_MISC1_SET_IRQ_TEMPPANIC_MASK  (0x8000000U)
#define CCM_ANALOG_MISC1_SET_IRQ_TEMPPANIC_SHIFT (27U)
#define CCM_ANALOG_MISC1_SET_IRQ_TEMPLOW_MASK    (0x10000000U)
#define CCM_ANALOG_MISC1_SET_IRQ_TEMPLOW_SHIFT   (28U)
#define CCM_ANALOG_MISC1_SET_IRQ_TEMPHIGH_MASK   (0x20000000U)
#define CCM_ANALOG_MISC1_SET_IRQ_TEMPHIGH_SHIFT  (29U)
#define CCM_ANALOG_MISC1_SET_IRQ_ANA_BO_MASK     (0x40000000U)
#define CCM_ANALOG_MISC1_SET_IRQ_ANA_BO_SHIFT    (30U)
#define CCM_ANALOG_MISC1_SET_IRQ_DIG_BO_MASK     (0x80000000U)
#define CCM_ANALOG_MISC1_SET_IRQ_DIG_BO_SHIFT    (31U)

/*! @name MISC1_CLR - Miscellaneous Register 1 */
#define CCM_ANALOG_MISC1_CLR_LVDS1_CLK_SEL_MASK  (0x1FU)
#define CCM_ANALOG_MISC1_CLR_LVDS1_CLK_SEL_SHIFT (0U)
#define CCM_ANALOG_MISC1_CLR_LVDS1_CLK_SEL(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC1_CLR_LVDS1_CLK_SEL_SHIFT)) & CCM_ANALOG_MISC1_CLR_LVDS1_CLK_SEL_MASK)
#define CCM_ANALOG_MISC1_CLR_LVDSCLK1_OBEN_MASK  (0x400U)
#define CCM_ANALOG_MISC1_CLR_LVDSCLK1_OBEN_SHIFT (10U)
#define CCM_ANALOG_MISC1_CLR_LVDSCLK1_IBEN_MASK  (0x1000U)
#define CCM_ANALOG_MISC1_CLR_LVDSCLK1_IBEN_SHIFT (12U)
#define CCM_ANALOG_MISC1_CLR_PFD_480_AUTOGATE_EN_MASK (0x10000U)
#define CCM_ANALOG_MISC1_CLR_PFD_480_AUTOGATE_EN_SHIFT (16U)
#define CCM_ANALOG_MISC1_CLR_PFD_528_AUTOGATE_EN_MASK (0x20000U)
#define CCM_ANALOG_MISC1_CLR_PFD_528_AUTOGATE_EN_SHIFT (17U)
#define CCM_ANALOG_MISC1_CLR_IRQ_TEMPPANIC_MASK  (0x8000000U)
#define CCM_ANALOG_MISC1_CLR_IRQ_TEMPPANIC_SHIFT (27U)
#define CCM_ANALOG_MISC1_CLR_IRQ_TEMPLOW_MASK    (0x10000000U)
#define CCM_ANALOG_MISC1_CLR_IRQ_TEMPLOW_SHIFT   (28U)
#define CCM_ANALOG_MISC1_CLR_IRQ_TEMPHIGH_MASK   (0x20000000U)
#define CCM_ANALOG_MISC1_CLR_IRQ_TEMPHIGH_SHIFT  (29U)
#define CCM_ANALOG_MISC1_CLR_IRQ_ANA_BO_MASK     (0x40000000U)
#define CCM_ANALOG_MISC1_CLR_IRQ_ANA_BO_SHIFT    (30U)
#define CCM_ANALOG_MISC1_CLR_IRQ_DIG_BO_MASK     (0x80000000U)
#define CCM_ANALOG_MISC1_CLR_IRQ_DIG_BO_SHIFT    (31U)

/*! @name MISC1_TOG - Miscellaneous Register 1 */
#define CCM_ANALOG_MISC1_TOG_LVDS1_CLK_SEL_MASK  (0x1FU)
#define CCM_ANALOG_MISC1_TOG_LVDS1_CLK_SEL_SHIFT (0U)
#define CCM_ANALOG_MISC1_TOG_LVDS1_CLK_SEL(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC1_TOG_LVDS1_CLK_SEL_SHIFT)) & CCM_ANALOG_MISC1_TOG_LVDS1_CLK_SEL_MASK)
#define CCM_ANALOG_MISC1_TOG_LVDSCLK1_OBEN_MASK  (0x400U)
#define CCM_ANALOG_MISC1_TOG_LVDSCLK1_OBEN_SHIFT (10U)
#define CCM_ANALOG_MISC1_TOG_LVDSCLK1_IBEN_MASK  (0x1000U)
#define CCM_ANALOG_MISC1_TOG_LVDSCLK1_IBEN_SHIFT (12U)
#define CCM_ANALOG_MISC1_TOG_PFD_480_AUTOGATE_EN_MASK (0x10000U)
#define CCM_ANALOG_MISC1_TOG_PFD_480_AUTOGATE_EN_SHIFT (16U)
#define CCM_ANALOG_MISC1_TOG_PFD_528_AUTOGATE_EN_MASK (0x20000U)
#define CCM_ANALOG_MISC1_TOG_PFD_528_AUTOGATE_EN_SHIFT (17U)
#define CCM_ANALOG_MISC1_TOG_IRQ_TEMPPANIC_MASK  (0x8000000U)
#define CCM_ANALOG_MISC1_TOG_IRQ_TEMPPANIC_SHIFT (27U)
#define CCM_ANALOG_MISC1_TOG_IRQ_TEMPLOW_MASK    (0x10000000U)
#define CCM_ANALOG_MISC1_TOG_IRQ_TEMPLOW_SHIFT   (28U)
#define CCM_ANALOG_MISC1_TOG_IRQ_TEMPHIGH_MASK   (0x20000000U)
#define CCM_ANALOG_MISC1_TOG_IRQ_TEMPHIGH_SHIFT  (29U)
#define CCM_ANALOG_MISC1_TOG_IRQ_ANA_BO_MASK     (0x40000000U)
#define CCM_ANALOG_MISC1_TOG_IRQ_ANA_BO_SHIFT    (30U)
#define CCM_ANALOG_MISC1_TOG_IRQ_DIG_BO_MASK     (0x80000000U)
#define CCM_ANALOG_MISC1_TOG_IRQ_DIG_BO_SHIFT    (31U)

/*! @name MISC2 - Miscellaneous Register 2 */
#define CCM_ANALOG_MISC2_REG0_BO_OFFSET_MASK     (0x7U)
#define CCM_ANALOG_MISC2_REG0_BO_OFFSET_SHIFT    (0U)
#define CCM_ANALOG_MISC2_REG0_BO_OFFSET(x)       (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_REG0_BO_OFFSET_SHIFT)) & CCM_ANALOG_MISC2_REG0_BO_OFFSET_MASK)
#define CCM_ANALOG_MISC2_REG0_BO_STATUS_MASK     (0x8U)
#define CCM_ANALOG_MISC2_REG0_BO_STATUS_SHIFT    (3U)
#define CCM_ANALOG_MISC2_REG0_ENABLE_BO_MASK     (0x20U)
#define CCM_ANALOG_MISC2_REG0_ENABLE_BO_SHIFT    (5U)
#define CCM_ANALOG_MISC2_REG0_OK_MASK            (0x40U)
#define CCM_ANALOG_MISC2_REG0_OK_SHIFT           (6U)
#define CCM_ANALOG_MISC2_PLL3_disable_MASK       (0x80U)
#define CCM_ANALOG_MISC2_PLL3_disable_SHIFT      (7U)
#define CCM_ANALOG_MISC2_REG1_BO_OFFSET_MASK     (0x700U)
#define CCM_ANALOG_MISC2_REG1_BO_OFFSET_SHIFT    (8U)
#define CCM_ANALOG_MISC2_REG1_BO_OFFSET(x)       (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_REG1_BO_OFFSET_SHIFT)) & CCM_ANALOG_MISC2_REG1_BO_OFFSET_MASK)
#define CCM_ANALOG_MISC2_REG1_BO_STATUS_MASK     (0x800U)
#define CCM_ANALOG_MISC2_REG1_BO_STATUS_SHIFT    (11U)
#define CCM_ANALOG_MISC2_REG1_ENABLE_BO_MASK     (0x2000U)
#define CCM_ANALOG_MISC2_REG1_ENABLE_BO_SHIFT    (13U)
#define CCM_ANALOG_MISC2_REG1_OK_MASK            (0x4000U)
#define CCM_ANALOG_MISC2_REG1_OK_SHIFT           (14U)
#define CCM_ANALOG_MISC2_AUDIO_DIV_LSB_MASK      (0x8000U)
#define CCM_ANALOG_MISC2_AUDIO_DIV_LSB_SHIFT     (15U)
#define CCM_ANALOG_MISC2_REG2_BO_OFFSET_MASK     (0x70000U)
#define CCM_ANALOG_MISC2_REG2_BO_OFFSET_SHIFT    (16U)
#define CCM_ANALOG_MISC2_REG2_BO_OFFSET(x)       (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_REG2_BO_OFFSET_SHIFT)) & CCM_ANALOG_MISC2_REG2_BO_OFFSET_MASK)
#define CCM_ANALOG_MISC2_REG2_BO_STATUS_MASK     (0x80000U)
#define CCM_ANALOG_MISC2_REG2_BO_STATUS_SHIFT    (19U)
#define CCM_ANALOG_MISC2_REG2_ENABLE_BO_MASK     (0x200000U)
#define CCM_ANALOG_MISC2_REG2_ENABLE_BO_SHIFT    (21U)
#define CCM_ANALOG_MISC2_REG2_OK_MASK            (0x400000U)
#define CCM_ANALOG_MISC2_REG2_OK_SHIFT           (22U)
#define CCM_ANALOG_MISC2_AUDIO_DIV_MSB_MASK      (0x800000U)
#define CCM_ANALOG_MISC2_AUDIO_DIV_MSB_SHIFT     (23U)
#define CCM_ANALOG_MISC2_REG0_STEP_TIME_MASK     (0x3000000U)
#define CCM_ANALOG_MISC2_REG0_STEP_TIME_SHIFT    (24U)
#define CCM_ANALOG_MISC2_REG0_STEP_TIME(x)       (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_REG0_STEP_TIME_SHIFT)) & CCM_ANALOG_MISC2_REG0_STEP_TIME_MASK)
#define CCM_ANALOG_MISC2_REG1_STEP_TIME_MASK     (0xC000000U)
#define CCM_ANALOG_MISC2_REG1_STEP_TIME_SHIFT    (26U)
#define CCM_ANALOG_MISC2_REG1_STEP_TIME(x)       (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_REG1_STEP_TIME_SHIFT)) & CCM_ANALOG_MISC2_REG1_STEP_TIME_MASK)
#define CCM_ANALOG_MISC2_REG2_STEP_TIME_MASK     (0x30000000U)
#define CCM_ANALOG_MISC2_REG2_STEP_TIME_SHIFT    (28U)
#define CCM_ANALOG_MISC2_REG2_STEP_TIME(x)       (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_REG2_STEP_TIME_SHIFT)) & CCM_ANALOG_MISC2_REG2_STEP_TIME_MASK)
#define CCM_ANALOG_MISC2_VIDEO_DIV_MASK          (0xC0000000U)
#define CCM_ANALOG_MISC2_VIDEO_DIV_SHIFT         (30U)
#define CCM_ANALOG_MISC2_VIDEO_DIV(x)            (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_VIDEO_DIV_SHIFT)) & CCM_ANALOG_MISC2_VIDEO_DIV_MASK)

/*! @name MISC2_SET - Miscellaneous Register 2 */
#define CCM_ANALOG_MISC2_SET_REG0_BO_OFFSET_MASK (0x7U)
#define CCM_ANALOG_MISC2_SET_REG0_BO_OFFSET_SHIFT (0U)
#define CCM_ANALOG_MISC2_SET_REG0_BO_OFFSET(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_SET_REG0_BO_OFFSET_SHIFT)) & CCM_ANALOG_MISC2_SET_REG0_BO_OFFSET_MASK)
#define CCM_ANALOG_MISC2_SET_REG0_BO_STATUS_MASK (0x8U)
#define CCM_ANALOG_MISC2_SET_REG0_BO_STATUS_SHIFT (3U)
#define CCM_ANALOG_MISC2_SET_REG0_ENABLE_BO_MASK (0x20U)
#define CCM_ANALOG_MISC2_SET_REG0_ENABLE_BO_SHIFT (5U)
#define CCM_ANALOG_MISC2_SET_REG0_OK_MASK        (0x40U)
#define CCM_ANALOG_MISC2_SET_REG0_OK_SHIFT       (6U)
#define CCM_ANALOG_MISC2_SET_PLL3_disable_MASK   (0x80U)
#define CCM_ANALOG_MISC2_SET_PLL3_disable_SHIFT  (7U)
#define CCM_ANALOG_MISC2_SET_REG1_BO_OFFSET_MASK (0x700U)
#define CCM_ANALOG_MISC2_SET_REG1_BO_OFFSET_SHIFT (8U)
#define CCM_ANALOG_MISC2_SET_REG1_BO_OFFSET(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_SET_REG1_BO_OFFSET_SHIFT)) & CCM_ANALOG_MISC2_SET_REG1_BO_OFFSET_MASK)
#define CCM_ANALOG_MISC2_SET_REG1_BO_STATUS_MASK (0x800U)
#define CCM_ANALOG_MISC2_SET_REG1_BO_STATUS_SHIFT (11U)
#define CCM_ANALOG_MISC2_SET_REG1_ENABLE_BO_MASK (0x2000U)
#define CCM_ANALOG_MISC2_SET_REG1_ENABLE_BO_SHIFT (13U)
#define CCM_ANALOG_MISC2_SET_REG1_OK_MASK        (0x4000U)
#define CCM_ANALOG_MISC2_SET_REG1_OK_SHIFT       (14U)
#define CCM_ANALOG_MISC2_SET_AUDIO_DIV_LSB_MASK  (0x8000U)
#define CCM_ANALOG_MISC2_SET_AUDIO_DIV_LSB_SHIFT (15U)
#define CCM_ANALOG_MISC2_SET_REG2_BO_OFFSET_MASK (0x70000U)
#define CCM_ANALOG_MISC2_SET_REG2_BO_OFFSET_SHIFT (16U)
#define CCM_ANALOG_MISC2_SET_REG2_BO_OFFSET(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_SET_REG2_BO_OFFSET_SHIFT)) & CCM_ANALOG_MISC2_SET_REG2_BO_OFFSET_MASK)
#define CCM_ANALOG_MISC2_SET_REG2_BO_STATUS_MASK (0x80000U)
#define CCM_ANALOG_MISC2_SET_REG2_BO_STATUS_SHIFT (19U)
#define CCM_ANALOG_MISC2_SET_REG2_ENABLE_BO_MASK (0x200000U)
#define CCM_ANALOG_MISC2_SET_REG2_ENABLE_BO_SHIFT (21U)
#define CCM_ANALOG_MISC2_SET_REG2_OK_MASK        (0x400000U)
#define CCM_ANALOG_MISC2_SET_REG2_OK_SHIFT       (22U)
#define CCM_ANALOG_MISC2_SET_AUDIO_DIV_MSB_MASK  (0x800000U)
#define CCM_ANALOG_MISC2_SET_AUDIO_DIV_MSB_SHIFT (23U)
#define CCM_ANALOG_MISC2_SET_REG0_STEP_TIME_MASK (0x3000000U)
#define CCM_ANALOG_MISC2_SET_REG0_STEP_TIME_SHIFT (24U)
#define CCM_ANALOG_MISC2_SET_REG0_STEP_TIME(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_SET_REG0_STEP_TIME_SHIFT)) & CCM_ANALOG_MISC2_SET_REG0_STEP_TIME_MASK)
#define CCM_ANALOG_MISC2_SET_REG1_STEP_TIME_MASK (0xC000000U)
#define CCM_ANALOG_MISC2_SET_REG1_STEP_TIME_SHIFT (26U)
#define CCM_ANALOG_MISC2_SET_REG1_STEP_TIME(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_SET_REG1_STEP_TIME_SHIFT)) & CCM_ANALOG_MISC2_SET_REG1_STEP_TIME_MASK)
#define CCM_ANALOG_MISC2_SET_REG2_STEP_TIME_MASK (0x30000000U)
#define CCM_ANALOG_MISC2_SET_REG2_STEP_TIME_SHIFT (28U)
#define CCM_ANALOG_MISC2_SET_REG2_STEP_TIME(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_SET_REG2_STEP_TIME_SHIFT)) & CCM_ANALOG_MISC2_SET_REG2_STEP_TIME_MASK)
#define CCM_ANALOG_MISC2_SET_VIDEO_DIV_MASK      (0xC0000000U)
#define CCM_ANALOG_MISC2_SET_VIDEO_DIV_SHIFT     (30U)
#define CCM_ANALOG_MISC2_SET_VIDEO_DIV(x)        (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_SET_VIDEO_DIV_SHIFT)) & CCM_ANALOG_MISC2_SET_VIDEO_DIV_MASK)

/*! @name MISC2_CLR - Miscellaneous Register 2 */
#define CCM_ANALOG_MISC2_CLR_REG0_BO_OFFSET_MASK (0x7U)
#define CCM_ANALOG_MISC2_CLR_REG0_BO_OFFSET_SHIFT (0U)
#define CCM_ANALOG_MISC2_CLR_REG0_BO_OFFSET(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_CLR_REG0_BO_OFFSET_SHIFT)) & CCM_ANALOG_MISC2_CLR_REG0_BO_OFFSET_MASK)
#define CCM_ANALOG_MISC2_CLR_REG0_BO_STATUS_MASK (0x8U)
#define CCM_ANALOG_MISC2_CLR_REG0_BO_STATUS_SHIFT (3U)
#define CCM_ANALOG_MISC2_CLR_REG0_ENABLE_BO_MASK (0x20U)
#define CCM_ANALOG_MISC2_CLR_REG0_ENABLE_BO_SHIFT (5U)
#define CCM_ANALOG_MISC2_CLR_REG0_OK_MASK        (0x40U)
#define CCM_ANALOG_MISC2_CLR_REG0_OK_SHIFT       (6U)
#define CCM_ANALOG_MISC2_CLR_PLL3_disable_MASK   (0x80U)
#define CCM_ANALOG_MISC2_CLR_PLL3_disable_SHIFT  (7U)
#define CCM_ANALOG_MISC2_CLR_REG1_BO_OFFSET_MASK (0x700U)
#define CCM_ANALOG_MISC2_CLR_REG1_BO_OFFSET_SHIFT (8U)
#define CCM_ANALOG_MISC2_CLR_REG1_BO_OFFSET(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_CLR_REG1_BO_OFFSET_SHIFT)) & CCM_ANALOG_MISC2_CLR_REG1_BO_OFFSET_MASK)
#define CCM_ANALOG_MISC2_CLR_REG1_BO_STATUS_MASK (0x800U)
#define CCM_ANALOG_MISC2_CLR_REG1_BO_STATUS_SHIFT (11U)
#define CCM_ANALOG_MISC2_CLR_REG1_ENABLE_BO_MASK (0x2000U)
#define CCM_ANALOG_MISC2_CLR_REG1_ENABLE_BO_SHIFT (13U)
#define CCM_ANALOG_MISC2_CLR_REG1_OK_MASK        (0x4000U)
#define CCM_ANALOG_MISC2_CLR_REG1_OK_SHIFT       (14U)
#define CCM_ANALOG_MISC2_CLR_AUDIO_DIV_LSB_MASK  (0x8000U)
#define CCM_ANALOG_MISC2_CLR_AUDIO_DIV_LSB_SHIFT (15U)
#define CCM_ANALOG_MISC2_CLR_REG2_BO_OFFSET_MASK (0x70000U)
#define CCM_ANALOG_MISC2_CLR_REG2_BO_OFFSET_SHIFT (16U)
#define CCM_ANALOG_MISC2_CLR_REG2_BO_OFFSET(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_CLR_REG2_BO_OFFSET_SHIFT)) & CCM_ANALOG_MISC2_CLR_REG2_BO_OFFSET_MASK)
#define CCM_ANALOG_MISC2_CLR_REG2_BO_STATUS_MASK (0x80000U)
#define CCM_ANALOG_MISC2_CLR_REG2_BO_STATUS_SHIFT (19U)
#define CCM_ANALOG_MISC2_CLR_REG2_ENABLE_BO_MASK (0x200000U)
#define CCM_ANALOG_MISC2_CLR_REG2_ENABLE_BO_SHIFT (21U)
#define CCM_ANALOG_MISC2_CLR_REG2_OK_MASK        (0x400000U)
#define CCM_ANALOG_MISC2_CLR_REG2_OK_SHIFT       (22U)
#define CCM_ANALOG_MISC2_CLR_AUDIO_DIV_MSB_MASK  (0x800000U)
#define CCM_ANALOG_MISC2_CLR_AUDIO_DIV_MSB_SHIFT (23U)
#define CCM_ANALOG_MISC2_CLR_REG0_STEP_TIME_MASK (0x3000000U)
#define CCM_ANALOG_MISC2_CLR_REG0_STEP_TIME_SHIFT (24U)
#define CCM_ANALOG_MISC2_CLR_REG0_STEP_TIME(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_CLR_REG0_STEP_TIME_SHIFT)) & CCM_ANALOG_MISC2_CLR_REG0_STEP_TIME_MASK)
#define CCM_ANALOG_MISC2_CLR_REG1_STEP_TIME_MASK (0xC000000U)
#define CCM_ANALOG_MISC2_CLR_REG1_STEP_TIME_SHIFT (26U)
#define CCM_ANALOG_MISC2_CLR_REG1_STEP_TIME(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_CLR_REG1_STEP_TIME_SHIFT)) & CCM_ANALOG_MISC2_CLR_REG1_STEP_TIME_MASK)
#define CCM_ANALOG_MISC2_CLR_REG2_STEP_TIME_MASK (0x30000000U)
#define CCM_ANALOG_MISC2_CLR_REG2_STEP_TIME_SHIFT (28U)
#define CCM_ANALOG_MISC2_CLR_REG2_STEP_TIME(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_CLR_REG2_STEP_TIME_SHIFT)) & CCM_ANALOG_MISC2_CLR_REG2_STEP_TIME_MASK)
#define CCM_ANALOG_MISC2_CLR_VIDEO_DIV_MASK      (0xC0000000U)
#define CCM_ANALOG_MISC2_CLR_VIDEO_DIV_SHIFT     (30U)
#define CCM_ANALOG_MISC2_CLR_VIDEO_DIV(x)        (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_CLR_VIDEO_DIV_SHIFT)) & CCM_ANALOG_MISC2_CLR_VIDEO_DIV_MASK)

/*! @name MISC2_TOG - Miscellaneous Register 2 */
#define CCM_ANALOG_MISC2_TOG_REG0_BO_OFFSET_MASK (0x7U)
#define CCM_ANALOG_MISC2_TOG_REG0_BO_OFFSET_SHIFT (0U)
#define CCM_ANALOG_MISC2_TOG_REG0_BO_OFFSET(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_TOG_REG0_BO_OFFSET_SHIFT)) & CCM_ANALOG_MISC2_TOG_REG0_BO_OFFSET_MASK)
#define CCM_ANALOG_MISC2_TOG_REG0_BO_STATUS_MASK (0x8U)
#define CCM_ANALOG_MISC2_TOG_REG0_BO_STATUS_SHIFT (3U)
#define CCM_ANALOG_MISC2_TOG_REG0_ENABLE_BO_MASK (0x20U)
#define CCM_ANALOG_MISC2_TOG_REG0_ENABLE_BO_SHIFT (5U)
#define CCM_ANALOG_MISC2_TOG_REG0_OK_MASK        (0x40U)
#define CCM_ANALOG_MISC2_TOG_REG0_OK_SHIFT       (6U)
#define CCM_ANALOG_MISC2_TOG_PLL3_disable_MASK   (0x80U)
#define CCM_ANALOG_MISC2_TOG_PLL3_disable_SHIFT  (7U)
#define CCM_ANALOG_MISC2_TOG_REG1_BO_OFFSET_MASK (0x700U)
#define CCM_ANALOG_MISC2_TOG_REG1_BO_OFFSET_SHIFT (8U)
#define CCM_ANALOG_MISC2_TOG_REG1_BO_OFFSET(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_TOG_REG1_BO_OFFSET_SHIFT)) & CCM_ANALOG_MISC2_TOG_REG1_BO_OFFSET_MASK)
#define CCM_ANALOG_MISC2_TOG_REG1_BO_STATUS_MASK (0x800U)
#define CCM_ANALOG_MISC2_TOG_REG1_BO_STATUS_SHIFT (11U)
#define CCM_ANALOG_MISC2_TOG_REG1_ENABLE_BO_MASK (0x2000U)
#define CCM_ANALOG_MISC2_TOG_REG1_ENABLE_BO_SHIFT (13U)
#define CCM_ANALOG_MISC2_TOG_REG1_OK_MASK        (0x4000U)
#define CCM_ANALOG_MISC2_TOG_REG1_OK_SHIFT       (14U)
#define CCM_ANALOG_MISC2_TOG_AUDIO_DIV_LSB_MASK  (0x8000U)
#define CCM_ANALOG_MISC2_TOG_AUDIO_DIV_LSB_SHIFT (15U)
#define CCM_ANALOG_MISC2_TOG_REG2_BO_OFFSET_MASK (0x70000U)
#define CCM_ANALOG_MISC2_TOG_REG2_BO_OFFSET_SHIFT (16U)
#define CCM_ANALOG_MISC2_TOG_REG2_BO_OFFSET(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_TOG_REG2_BO_OFFSET_SHIFT)) & CCM_ANALOG_MISC2_TOG_REG2_BO_OFFSET_MASK)
#define CCM_ANALOG_MISC2_TOG_REG2_BO_STATUS_MASK (0x80000U)
#define CCM_ANALOG_MISC2_TOG_REG2_BO_STATUS_SHIFT (19U)
#define CCM_ANALOG_MISC2_TOG_REG2_ENABLE_BO_MASK (0x200000U)
#define CCM_ANALOG_MISC2_TOG_REG2_ENABLE_BO_SHIFT (21U)
#define CCM_ANALOG_MISC2_TOG_REG2_OK_MASK        (0x400000U)
#define CCM_ANALOG_MISC2_TOG_REG2_OK_SHIFT       (22U)
#define CCM_ANALOG_MISC2_TOG_AUDIO_DIV_MSB_MASK  (0x800000U)
#define CCM_ANALOG_MISC2_TOG_AUDIO_DIV_MSB_SHIFT (23U)
#define CCM_ANALOG_MISC2_TOG_REG0_STEP_TIME_MASK (0x3000000U)
#define CCM_ANALOG_MISC2_TOG_REG0_STEP_TIME_SHIFT (24U)
#define CCM_ANALOG_MISC2_TOG_REG0_STEP_TIME(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_TOG_REG0_STEP_TIME_SHIFT)) & CCM_ANALOG_MISC2_TOG_REG0_STEP_TIME_MASK)
#define CCM_ANALOG_MISC2_TOG_REG1_STEP_TIME_MASK (0xC000000U)
#define CCM_ANALOG_MISC2_TOG_REG1_STEP_TIME_SHIFT (26U)
#define CCM_ANALOG_MISC2_TOG_REG1_STEP_TIME(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_TOG_REG1_STEP_TIME_SHIFT)) & CCM_ANALOG_MISC2_TOG_REG1_STEP_TIME_MASK)
#define CCM_ANALOG_MISC2_TOG_REG2_STEP_TIME_MASK (0x30000000U)
#define CCM_ANALOG_MISC2_TOG_REG2_STEP_TIME_SHIFT (28U)
#define CCM_ANALOG_MISC2_TOG_REG2_STEP_TIME(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_TOG_REG2_STEP_TIME_SHIFT)) & CCM_ANALOG_MISC2_TOG_REG2_STEP_TIME_MASK)
#define CCM_ANALOG_MISC2_TOG_VIDEO_DIV_MASK      (0xC0000000U)
#define CCM_ANALOG_MISC2_TOG_VIDEO_DIV_SHIFT     (30U)
#define CCM_ANALOG_MISC2_TOG_VIDEO_DIV(x)        (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_MISC2_TOG_VIDEO_DIV_SHIFT)) & CCM_ANALOG_MISC2_TOG_VIDEO_DIV_MASK)


/*!
 * @}
 */ /* end of group CCM_ANALOG_Register_Masks */


/* CCM_ANALOG - Peripheral instance base addresses */
/** Peripheral CCM_ANALOG base pointer */
#define CCM_ANALOG_BASE_PTR                      ((CCM_ANALOG_MemMapPtr)0x400D8000u)
/** Array initializer of CCM_ANALOG peripheral base pointers */
#define CCM_ANALOG_BASE_PTRS                     { CCM_ANALOG_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- CCM_ANALOG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_ANALOG_Register_Accessor_Macros CCM_ANALOG - Register accessor macros
 * @{
 */


/* CCM_ANALOG - Register instance definitions */
/* CCM_ANALOG */
#define CCM_ANALOG_PLL_ARM                       CCM_ANALOG_PLL_ARM_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_ARM_SET                   CCM_ANALOG_PLL_ARM_SET_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_ARM_CLR                   CCM_ANALOG_PLL_ARM_CLR_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_ARM_TOG                   CCM_ANALOG_PLL_ARM_TOG_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_USB1                      CCM_ANALOG_PLL_USB1_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_USB1_SET                  CCM_ANALOG_PLL_USB1_SET_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_USB1_CLR                  CCM_ANALOG_PLL_USB1_CLR_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_USB1_TOG                  CCM_ANALOG_PLL_USB1_TOG_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_USB2                      CCM_ANALOG_PLL_USB2_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_USB2_SET                  CCM_ANALOG_PLL_USB2_SET_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_USB2_CLR                  CCM_ANALOG_PLL_USB2_CLR_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_USB2_TOG                  CCM_ANALOG_PLL_USB2_TOG_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_SYS                       CCM_ANALOG_PLL_SYS_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_SYS_SET                   CCM_ANALOG_PLL_SYS_SET_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_SYS_CLR                   CCM_ANALOG_PLL_SYS_CLR_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_SYS_TOG                   CCM_ANALOG_PLL_SYS_TOG_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_SYS_SS                    CCM_ANALOG_PLL_SYS_SS_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_SYS_NUM                   CCM_ANALOG_PLL_SYS_NUM_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_SYS_DENOM                 CCM_ANALOG_PLL_SYS_DENOM_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_AUDIO                     CCM_ANALOG_PLL_AUDIO_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_AUDIO_SET                 CCM_ANALOG_PLL_AUDIO_SET_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_AUDIO_CLR                 CCM_ANALOG_PLL_AUDIO_CLR_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_AUDIO_TOG                 CCM_ANALOG_PLL_AUDIO_TOG_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_AUDIO_NUM                 CCM_ANALOG_PLL_AUDIO_NUM_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_AUDIO_DENOM               CCM_ANALOG_PLL_AUDIO_DENOM_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_VIDEO                     CCM_ANALOG_PLL_VIDEO_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_VIDEO_SET                 CCM_ANALOG_PLL_VIDEO_SET_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_VIDEO_CLR                 CCM_ANALOG_PLL_VIDEO_CLR_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_VIDEO_TOG                 CCM_ANALOG_PLL_VIDEO_TOG_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_VIDEO_NUM                 CCM_ANALOG_PLL_VIDEO_NUM_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_VIDEO_DENOM               CCM_ANALOG_PLL_VIDEO_DENOM_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_ENET                      CCM_ANALOG_PLL_ENET_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_ENET_SET                  CCM_ANALOG_PLL_ENET_SET_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_ENET_CLR                  CCM_ANALOG_PLL_ENET_CLR_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLL_ENET_TOG                  CCM_ANALOG_PLL_ENET_TOG_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PFD_480                       CCM_ANALOG_PFD_480_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PFD_480_SET                   CCM_ANALOG_PFD_480_SET_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PFD_480_CLR                   CCM_ANALOG_PFD_480_CLR_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PFD_480_TOG                   CCM_ANALOG_PFD_480_TOG_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PFD_528                       CCM_ANALOG_PFD_528_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PFD_528_SET                   CCM_ANALOG_PFD_528_SET_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PFD_528_CLR                   CCM_ANALOG_PFD_528_CLR_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PFD_528_TOG                   CCM_ANALOG_PFD_528_TOG_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_MISC0                         CCM_ANALOG_MISC0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_MISC0_SET                     CCM_ANALOG_MISC0_SET_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_MISC0_CLR                     CCM_ANALOG_MISC0_CLR_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_MISC0_TOG                     CCM_ANALOG_MISC0_TOG_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_MISC1                         CCM_ANALOG_MISC1_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_MISC1_SET                     CCM_ANALOG_MISC1_SET_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_MISC1_CLR                     CCM_ANALOG_MISC1_CLR_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_MISC1_TOG                     CCM_ANALOG_MISC1_TOG_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_MISC2                         CCM_ANALOG_MISC2_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_MISC2_SET                     CCM_ANALOG_MISC2_SET_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_MISC2_CLR                     CCM_ANALOG_MISC2_CLR_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_MISC2_TOG                     CCM_ANALOG_MISC2_TOG_REG(CCM_ANALOG_BASE_PTR)

/*!
 * @}
 */ /* end of group CCM_ANALOG_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group CCM_ANALOG_Peripheral */


/* ----------------------------------------------------------------------------
   -- CMP
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CMP_Peripheral CMP
 * @{
 */

/** CMP - Peripheral register structure */
typedef struct CMP_MemMap {
  uint8_t CR0;                                     /**< CMP Control Register 0, offset: 0x0 */
  uint8_t CR1;                                     /**< CMP Control Register 1, offset: 0x1 */
  uint8_t FPR;                                     /**< CMP Filter Period Register, offset: 0x2 */
  uint8_t SCR;                                     /**< CMP Status and Control Register, offset: 0x3 */
  uint8_t DACCR;                                   /**< DAC Control Register, offset: 0x4 */
  uint8_t MUXCR;                                   /**< MUX Control Register, offset: 0x5 */
} volatile *CMP_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- CMP - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CMP_Register_Accessor_Macros CMP - Register accessor macros
 * @{
 */


/* CMP - Register accessors */
#define CMP_CR0_REG(base)                        ((base)->CR0)
#define CMP_CR1_REG(base)                        ((base)->CR1)
#define CMP_FPR_REG(base)                        ((base)->FPR)
#define CMP_SCR_REG(base)                        ((base)->SCR)
#define CMP_DACCR_REG(base)                      ((base)->DACCR)
#define CMP_MUXCR_REG(base)                      ((base)->MUXCR)

/*!
 * @}
 */ /* end of group CMP_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- CMP Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CMP_Register_Masks CMP Register Masks
 * @{
 */

/*! @name CR0 - CMP Control Register 0 */
#define CMP_CR0_HYSTCTR_MASK                     (0x3U)
#define CMP_CR0_HYSTCTR_SHIFT                    (0U)
#define CMP_CR0_HYSTCTR(x)                       (((uint8_t)(((uint8_t)(x)) << CMP_CR0_HYSTCTR_SHIFT)) & CMP_CR0_HYSTCTR_MASK)
#define CMP_CR0_FILTER_CNT_MASK                  (0x70U)
#define CMP_CR0_FILTER_CNT_SHIFT                 (4U)
#define CMP_CR0_FILTER_CNT(x)                    (((uint8_t)(((uint8_t)(x)) << CMP_CR0_FILTER_CNT_SHIFT)) & CMP_CR0_FILTER_CNT_MASK)

/*! @name CR1 - CMP Control Register 1 */
#define CMP_CR1_EN_MASK                          (0x1U)
#define CMP_CR1_EN_SHIFT                         (0U)
#define CMP_CR1_OPE_MASK                         (0x2U)
#define CMP_CR1_OPE_SHIFT                        (1U)
#define CMP_CR1_COS_MASK                         (0x4U)
#define CMP_CR1_COS_SHIFT                        (2U)
#define CMP_CR1_INV_MASK                         (0x8U)
#define CMP_CR1_INV_SHIFT                        (3U)
#define CMP_CR1_PMODE_MASK                       (0x10U)
#define CMP_CR1_PMODE_SHIFT                      (4U)
#define CMP_CR1_WE_MASK                          (0x40U)
#define CMP_CR1_WE_SHIFT                         (6U)
#define CMP_CR1_SE_MASK                          (0x80U)
#define CMP_CR1_SE_SHIFT                         (7U)

/*! @name FPR - CMP Filter Period Register */
#define CMP_FPR_FILT_PER_MASK                    (0xFFU)
#define CMP_FPR_FILT_PER_SHIFT                   (0U)
#define CMP_FPR_FILT_PER(x)                      (((uint8_t)(((uint8_t)(x)) << CMP_FPR_FILT_PER_SHIFT)) & CMP_FPR_FILT_PER_MASK)

/*! @name SCR - CMP Status and Control Register */
#define CMP_SCR_COUT_MASK                        (0x1U)
#define CMP_SCR_COUT_SHIFT                       (0U)
#define CMP_SCR_CFF_MASK                         (0x2U)
#define CMP_SCR_CFF_SHIFT                        (1U)
#define CMP_SCR_CFR_MASK                         (0x4U)
#define CMP_SCR_CFR_SHIFT                        (2U)
#define CMP_SCR_IEF_MASK                         (0x8U)
#define CMP_SCR_IEF_SHIFT                        (3U)
#define CMP_SCR_IER_MASK                         (0x10U)
#define CMP_SCR_IER_SHIFT                        (4U)
#define CMP_SCR_DMAEN_MASK                       (0x40U)
#define CMP_SCR_DMAEN_SHIFT                      (6U)

/*! @name DACCR - DAC Control Register */
#define CMP_DACCR_VOSEL_MASK                     (0x3FU)
#define CMP_DACCR_VOSEL_SHIFT                    (0U)
#define CMP_DACCR_VOSEL(x)                       (((uint8_t)(((uint8_t)(x)) << CMP_DACCR_VOSEL_SHIFT)) & CMP_DACCR_VOSEL_MASK)
#define CMP_DACCR_VRSEL_MASK                     (0x40U)
#define CMP_DACCR_VRSEL_SHIFT                    (6U)
#define CMP_DACCR_DACEN_MASK                     (0x80U)
#define CMP_DACCR_DACEN_SHIFT                    (7U)

/*! @name MUXCR - MUX Control Register */
#define CMP_MUXCR_MSEL_MASK                      (0x7U)
#define CMP_MUXCR_MSEL_SHIFT                     (0U)
#define CMP_MUXCR_MSEL(x)                        (((uint8_t)(((uint8_t)(x)) << CMP_MUXCR_MSEL_SHIFT)) & CMP_MUXCR_MSEL_MASK)
#define CMP_MUXCR_PSEL_MASK                      (0x38U)
#define CMP_MUXCR_PSEL_SHIFT                     (3U)
#define CMP_MUXCR_PSEL(x)                        (((uint8_t)(((uint8_t)(x)) << CMP_MUXCR_PSEL_SHIFT)) & CMP_MUXCR_PSEL_MASK)


/*!
 * @}
 */ /* end of group CMP_Register_Masks */


/* CMP - Peripheral instance base addresses */
/** Peripheral CMP1 base pointer */
#define CMP1_BASE_PTR                            ((CMP_MemMapPtr)0x40094000u)
/** Peripheral CMP2 base pointer */
#define CMP2_BASE_PTR                            ((CMP_MemMapPtr)0x40094008u)
/** Peripheral CMP3 base pointer */
#define CMP3_BASE_PTR                            ((CMP_MemMapPtr)0x40094010u)
/** Peripheral CMP4 base pointer */
#define CMP4_BASE_PTR                            ((CMP_MemMapPtr)0x40094018u)
/** Array initializer of CMP peripheral base pointers */
#define CMP_BASE_PTRS                            { CMP1_BASE_PTR, CMP2_BASE_PTR, CMP3_BASE_PTR, CMP4_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- CMP - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CMP_Register_Accessor_Macros CMP - Register accessor macros
 * @{
 */


/* CMP - Register instance definitions */
/* CMP1 */
#define CMP1_CR0                                 CMP_CR0_REG(CMP1_BASE_PTR)
#define CMP1_CR1                                 CMP_CR1_REG(CMP1_BASE_PTR)
#define CMP1_FPR                                 CMP_FPR_REG(CMP1_BASE_PTR)
#define CMP1_SCR                                 CMP_SCR_REG(CMP1_BASE_PTR)
#define CMP1_DACCR                               CMP_DACCR_REG(CMP1_BASE_PTR)
#define CMP1_MUXCR                               CMP_MUXCR_REG(CMP1_BASE_PTR)
/* CMP2 */
#define CMP2_CR0                                 CMP_CR0_REG(CMP2_BASE_PTR)
#define CMP2_CR1                                 CMP_CR1_REG(CMP2_BASE_PTR)
#define CMP2_FPR                                 CMP_FPR_REG(CMP2_BASE_PTR)
#define CMP2_SCR                                 CMP_SCR_REG(CMP2_BASE_PTR)
#define CMP2_DACCR                               CMP_DACCR_REG(CMP2_BASE_PTR)
#define CMP2_MUXCR                               CMP_MUXCR_REG(CMP2_BASE_PTR)
/* CMP3 */
#define CMP3_CR0                                 CMP_CR0_REG(CMP3_BASE_PTR)
#define CMP3_CR1                                 CMP_CR1_REG(CMP3_BASE_PTR)
#define CMP3_FPR                                 CMP_FPR_REG(CMP3_BASE_PTR)
#define CMP3_SCR                                 CMP_SCR_REG(CMP3_BASE_PTR)
#define CMP3_DACCR                               CMP_DACCR_REG(CMP3_BASE_PTR)
#define CMP3_MUXCR                               CMP_MUXCR_REG(CMP3_BASE_PTR)
/* CMP4 */
#define CMP4_CR0                                 CMP_CR0_REG(CMP4_BASE_PTR)
#define CMP4_CR1                                 CMP_CR1_REG(CMP4_BASE_PTR)
#define CMP4_FPR                                 CMP_FPR_REG(CMP4_BASE_PTR)
#define CMP4_SCR                                 CMP_SCR_REG(CMP4_BASE_PTR)
#define CMP4_DACCR                               CMP_DACCR_REG(CMP4_BASE_PTR)
#define CMP4_MUXCR                               CMP_MUXCR_REG(CMP4_BASE_PTR)

/*!
 * @}
 */ /* end of group CMP_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group CMP_Peripheral */


/* ----------------------------------------------------------------------------
   -- DCDC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DCDC_Peripheral DCDC
 * @{
 */

/** DCDC - Peripheral register structure */
typedef struct DCDC_MemMap {
  uint32_t REG0;                                   /**< DCDC Register 0, offset: 0x0 */
  uint32_t REG1;                                   /**< DCDC Register 1, offset: 0x4 */
  uint32_t REG2;                                   /**< DCDC Register 2, offset: 0x8 */
  uint32_t REG3;                                   /**< DCDC Register 3, offset: 0xC */
} volatile *DCDC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DCDC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DCDC_Register_Accessor_Macros DCDC - Register accessor macros
 * @{
 */


/* DCDC - Register accessors */
#define DCDC_REG0_REG(base)                      ((base)->REG0)
#define DCDC_REG1_REG(base)                      ((base)->REG1)
#define DCDC_REG2_REG(base)                      ((base)->REG2)
#define DCDC_REG3_REG(base)                      ((base)->REG3)

/*!
 * @}
 */ /* end of group DCDC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DCDC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DCDC_Register_Masks DCDC Register Masks
 * @{
 */

/*! @name REG0 - DCDC Register 0 */
#define DCDC_REG0_PWD_ZCD_MASK                   (0x1U)
#define DCDC_REG0_PWD_ZCD_SHIFT                  (0U)
#define DCDC_REG0_DISABLE_AUTO_CLK_SWITCH_MASK   (0x2U)
#define DCDC_REG0_DISABLE_AUTO_CLK_SWITCH_SHIFT  (1U)
#define DCDC_REG0_SEL_CLK_MASK                   (0x4U)
#define DCDC_REG0_SEL_CLK_SHIFT                  (2U)
#define DCDC_REG0_PWD_OSC_INT_MASK               (0x8U)
#define DCDC_REG0_PWD_OSC_INT_SHIFT              (3U)
#define DCDC_REG0_PWD_CUR_SNS_CMP_MASK           (0x10U)
#define DCDC_REG0_PWD_CUR_SNS_CMP_SHIFT          (4U)
#define DCDC_REG0_CUR_SNS_THRSH_MASK             (0xE0U)
#define DCDC_REG0_CUR_SNS_THRSH_SHIFT            (5U)
#define DCDC_REG0_CUR_SNS_THRSH(x)               (((uint32_t)(((uint32_t)(x)) << DCDC_REG0_CUR_SNS_THRSH_SHIFT)) & DCDC_REG0_CUR_SNS_THRSH_MASK)
#define DCDC_REG0_PWD_OVERCUR_DET_MASK           (0x100U)
#define DCDC_REG0_PWD_OVERCUR_DET_SHIFT          (8U)
#define DCDC_REG0_OVERCUR_TRIG_ADJ_MASK          (0x600U)
#define DCDC_REG0_OVERCUR_TRIG_ADJ_SHIFT         (9U)
#define DCDC_REG0_OVERCUR_TRIG_ADJ(x)            (((uint32_t)(((uint32_t)(x)) << DCDC_REG0_OVERCUR_TRIG_ADJ_SHIFT)) & DCDC_REG0_OVERCUR_TRIG_ADJ_MASK)
#define DCDC_REG0_PWD_CMP_BATT_DET_MASK          (0x800U)
#define DCDC_REG0_PWD_CMP_BATT_DET_SHIFT         (11U)
#define DCDC_REG0_ADJ_POSLIMIT_BUCK_MASK         (0xF000U)
#define DCDC_REG0_ADJ_POSLIMIT_BUCK_SHIFT        (12U)
#define DCDC_REG0_ADJ_POSLIMIT_BUCK(x)           (((uint32_t)(((uint32_t)(x)) << DCDC_REG0_ADJ_POSLIMIT_BUCK_SHIFT)) & DCDC_REG0_ADJ_POSLIMIT_BUCK_MASK)
#define DCDC_REG0_EN_LP_OVERLOAD_SNS_MASK        (0x10000U)
#define DCDC_REG0_EN_LP_OVERLOAD_SNS_SHIFT       (16U)
#define DCDC_REG0_PWD_HIGH_VOLT_DET_MASK         (0x20000U)
#define DCDC_REG0_PWD_HIGH_VOLT_DET_SHIFT        (17U)
#define DCDC_REG0_LP_OVERLOAD_THRSH_MASK         (0xC0000U)
#define DCDC_REG0_LP_OVERLOAD_THRSH_SHIFT        (18U)
#define DCDC_REG0_LP_OVERLOAD_THRSH(x)           (((uint32_t)(((uint32_t)(x)) << DCDC_REG0_LP_OVERLOAD_THRSH_SHIFT)) & DCDC_REG0_LP_OVERLOAD_THRSH_MASK)
#define DCDC_REG0_LP_OVERLOAD_FREQ_SEL_MASK      (0x100000U)
#define DCDC_REG0_LP_OVERLOAD_FREQ_SEL_SHIFT     (20U)
#define DCDC_REG0_LP_HIGH_HYS_MASK               (0x200000U)
#define DCDC_REG0_LP_HIGH_HYS_SHIFT              (21U)
#define DCDC_REG0_PWD_CMP_OFFSET_MASK            (0x4000000U)
#define DCDC_REG0_PWD_CMP_OFFSET_SHIFT           (26U)
#define DCDC_REG0_XTALOK_DISABLE_MASK            (0x8000000U)
#define DCDC_REG0_XTALOK_DISABLE_SHIFT           (27U)
#define DCDC_REG0_CURRENT_ALERT_RESET_MASK       (0x10000000U)
#define DCDC_REG0_CURRENT_ALERT_RESET_SHIFT      (28U)
#define DCDC_REG0_XTAL_24M_OK_MASK               (0x20000000U)
#define DCDC_REG0_XTAL_24M_OK_SHIFT              (29U)
#define DCDC_REG0_STS_DC_OK_MASK                 (0x80000000U)
#define DCDC_REG0_STS_DC_OK_SHIFT                (31U)

/*! @name REG1 - DCDC Register 1 */
#define DCDC_REG1_REG_FBK_SEL_MASK               (0x180U)
#define DCDC_REG1_REG_FBK_SEL_SHIFT              (7U)
#define DCDC_REG1_REG_FBK_SEL(x)                 (((uint32_t)(((uint32_t)(x)) << DCDC_REG1_REG_FBK_SEL_SHIFT)) & DCDC_REG1_REG_FBK_SEL_MASK)
#define DCDC_REG1_REG_RLOAD_SW_MASK              (0x200U)
#define DCDC_REG1_REG_RLOAD_SW_SHIFT             (9U)
#define DCDC_REG1_LP_CMP_ISRC_SEL_MASK           (0x3000U)
#define DCDC_REG1_LP_CMP_ISRC_SEL_SHIFT          (12U)
#define DCDC_REG1_LP_CMP_ISRC_SEL(x)             (((uint32_t)(((uint32_t)(x)) << DCDC_REG1_LP_CMP_ISRC_SEL_SHIFT)) & DCDC_REG1_LP_CMP_ISRC_SEL_MASK)
#define DCDC_REG1_LOOPCTRL_HST_THRESH_MASK       (0x200000U)
#define DCDC_REG1_LOOPCTRL_HST_THRESH_SHIFT      (21U)
#define DCDC_REG1_LOOPCTRL_EN_HYST_MASK          (0x800000U)
#define DCDC_REG1_LOOPCTRL_EN_HYST_SHIFT         (23U)
#define DCDC_REG1_VBG_TRIM_MASK                  (0x1F000000U)
#define DCDC_REG1_VBG_TRIM_SHIFT                 (24U)
#define DCDC_REG1_VBG_TRIM(x)                    (((uint32_t)(((uint32_t)(x)) << DCDC_REG1_VBG_TRIM_SHIFT)) & DCDC_REG1_VBG_TRIM_MASK)

/*! @name REG2 - DCDC Register 2 */
#define DCDC_REG2_LOOPCTRL_DC_C_MASK             (0x3U)
#define DCDC_REG2_LOOPCTRL_DC_C_SHIFT            (0U)
#define DCDC_REG2_LOOPCTRL_DC_C(x)               (((uint32_t)(((uint32_t)(x)) << DCDC_REG2_LOOPCTRL_DC_C_SHIFT)) & DCDC_REG2_LOOPCTRL_DC_C_MASK)
#define DCDC_REG2_LOOPCTRL_DC_R_MASK             (0x3CU)
#define DCDC_REG2_LOOPCTRL_DC_R_SHIFT            (2U)
#define DCDC_REG2_LOOPCTRL_DC_R(x)               (((uint32_t)(((uint32_t)(x)) << DCDC_REG2_LOOPCTRL_DC_R_SHIFT)) & DCDC_REG2_LOOPCTRL_DC_R_MASK)
#define DCDC_REG2_LOOPCTRL_DC_FF_MASK            (0x1C0U)
#define DCDC_REG2_LOOPCTRL_DC_FF_SHIFT           (6U)
#define DCDC_REG2_LOOPCTRL_DC_FF(x)              (((uint32_t)(((uint32_t)(x)) << DCDC_REG2_LOOPCTRL_DC_FF_SHIFT)) & DCDC_REG2_LOOPCTRL_DC_FF_MASK)
#define DCDC_REG2_LOOPCTRL_EN_RCSCALE_MASK       (0xE00U)
#define DCDC_REG2_LOOPCTRL_EN_RCSCALE_SHIFT      (9U)
#define DCDC_REG2_LOOPCTRL_EN_RCSCALE(x)         (((uint32_t)(((uint32_t)(x)) << DCDC_REG2_LOOPCTRL_EN_RCSCALE_SHIFT)) & DCDC_REG2_LOOPCTRL_EN_RCSCALE_MASK)
#define DCDC_REG2_LOOPCTRL_RCSCALE_THRSH_MASK    (0x1000U)
#define DCDC_REG2_LOOPCTRL_RCSCALE_THRSH_SHIFT   (12U)
#define DCDC_REG2_LOOPCTRL_HYST_SIGN_MASK        (0x2000U)
#define DCDC_REG2_LOOPCTRL_HYST_SIGN_SHIFT       (13U)
#define DCDC_REG2_DISABLE_PULSE_SKIP_MASK        (0x8000000U)
#define DCDC_REG2_DISABLE_PULSE_SKIP_SHIFT       (27U)
#define DCDC_REG2_DCM_SET_CTRL_MASK              (0x10000000U)
#define DCDC_REG2_DCM_SET_CTRL_SHIFT             (28U)

/*! @name REG3 - DCDC Register 3 */
#define DCDC_REG3_TRG_MASK                       (0x1FU)
#define DCDC_REG3_TRG_SHIFT                      (0U)
#define DCDC_REG3_TRG(x)                         (((uint32_t)(((uint32_t)(x)) << DCDC_REG3_TRG_SHIFT)) & DCDC_REG3_TRG_MASK)
#define DCDC_REG3_TARGET_LP_MASK                 (0x700U)
#define DCDC_REG3_TARGET_LP_SHIFT                (8U)
#define DCDC_REG3_TARGET_LP(x)                   (((uint32_t)(((uint32_t)(x)) << DCDC_REG3_TARGET_LP_SHIFT)) & DCDC_REG3_TARGET_LP_MASK)
#define DCDC_REG3_MINPWR_DC_HALFCLK_MASK         (0x1000000U)
#define DCDC_REG3_MINPWR_DC_HALFCLK_SHIFT        (24U)
#define DCDC_REG3_MISC_DELAY_TIMING_MASK         (0x8000000U)
#define DCDC_REG3_MISC_DELAY_TIMING_SHIFT        (27U)
#define DCDC_REG3_MISC_DISABLEFET_LOGIC_MASK     (0x10000000U)
#define DCDC_REG3_MISC_DISABLEFET_LOGIC_SHIFT    (28U)
#define DCDC_REG3_DISABLE_STEP_MASK              (0x40000000U)
#define DCDC_REG3_DISABLE_STEP_SHIFT             (30U)


/*!
 * @}
 */ /* end of group DCDC_Register_Masks */


/* DCDC - Peripheral instance base addresses */
/** Peripheral DCDC base pointer */
#define DCDC_BASE_PTR                            ((DCDC_MemMapPtr)0x40080000u)
/** Array initializer of DCDC peripheral base pointers */
#define DCDC_BASE_PTRS                           { DCDC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- DCDC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DCDC_Register_Accessor_Macros DCDC - Register accessor macros
 * @{
 */


/* DCDC - Register instance definitions */
/* DCDC */
#define DCDC_REG0                                DCDC_REG0_REG(DCDC_BASE_PTR)
#define DCDC_REG1                                DCDC_REG1_REG(DCDC_BASE_PTR)
#define DCDC_REG2                                DCDC_REG2_REG(DCDC_BASE_PTR)
#define DCDC_REG3                                DCDC_REG3_REG(DCDC_BASE_PTR)

/*!
 * @}
 */ /* end of group DCDC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DCDC_Peripheral */


/* ----------------------------------------------------------------------------
   -- DCP
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DCP_Peripheral DCP
 * @{
 */

/** DCP - Peripheral register structure */
typedef struct DCP_MemMap {
  uint32_t CTRL;                                   /**< DCP control register 0, offset: 0x0 */
  uint8_t RESERVED_0[12];
  uint32_t STAT;                                   /**< DCP status register, offset: 0x10 */
  uint8_t RESERVED_1[12];
  uint32_t CHANNELCTRL;                            /**< DCP channel control register, offset: 0x20 */
  uint8_t RESERVED_2[12];
  uint32_t CAPABILITY0;                            /**< DCP capability 0 register, offset: 0x30 */
  uint8_t RESERVED_3[12];
  uint32_t CAPABILITY1;                            /**< DCP capability 1 register, offset: 0x40 */
  uint8_t RESERVED_4[12];
  uint32_t CONTEXT;                                /**< DCP context buffer pointer, offset: 0x50 */
  uint8_t RESERVED_5[12];
  uint32_t KEY;                                    /**< DCP key index, offset: 0x60 */
  uint8_t RESERVED_6[12];
  uint32_t KEYDATA;                                /**< DCP key data, offset: 0x70 */
  uint8_t RESERVED_7[12];
  uint32_t PACKET0;                                /**< DCP work packet 0 status register, offset: 0x80 */
  uint8_t RESERVED_8[12];
  uint32_t PACKET1;                                /**< DCP work packet 1 status register, offset: 0x90 */
  uint8_t RESERVED_9[12];
  uint32_t PACKET2;                                /**< DCP work packet 2 status register, offset: 0xA0 */
  uint8_t RESERVED_10[12];
  uint32_t PACKET3;                                /**< DCP work packet 3 status register, offset: 0xB0 */
  uint8_t RESERVED_11[12];
  uint32_t PACKET4;                                /**< DCP work packet 4 status register, offset: 0xC0 */
  uint8_t RESERVED_12[12];
  uint32_t PACKET5;                                /**< DCP work packet 5 status register, offset: 0xD0 */
  uint8_t RESERVED_13[12];
  uint32_t PACKET6;                                /**< DCP work packet 6 status register, offset: 0xE0 */
  uint8_t RESERVED_14[28];
  uint32_t CH0CMDPTR;                              /**< DCP channel 0 command pointer address register, offset: 0x100 */
  uint8_t RESERVED_15[12];
  uint32_t CH0SEMA;                                /**< DCP channel 0 semaphore register, offset: 0x110 */
  uint8_t RESERVED_16[12];
  uint32_t CH0STAT;                                /**< DCP channel 0 status register, offset: 0x120 */
  uint8_t RESERVED_17[12];
  uint32_t CH0OPTS;                                /**< DCP channel 0 options register, offset: 0x130 */
  uint8_t RESERVED_18[12];
  uint32_t CH1CMDPTR;                              /**< DCP channel 1 command pointer address register, offset: 0x140 */
  uint8_t RESERVED_19[12];
  uint32_t CH1SEMA;                                /**< DCP channel 1 semaphore register, offset: 0x150 */
  uint8_t RESERVED_20[12];
  uint32_t CH1STAT;                                /**< DCP channel 1 status register, offset: 0x160 */
  uint8_t RESERVED_21[12];
  uint32_t CH1OPTS;                                /**< DCP channel 1 options register, offset: 0x170 */
  uint8_t RESERVED_22[12];
  uint32_t CH2CMDPTR;                              /**< DCP channel 2 command pointer address register, offset: 0x180 */
  uint8_t RESERVED_23[12];
  uint32_t CH2SEMA;                                /**< DCP channel 2 semaphore register, offset: 0x190 */
  uint8_t RESERVED_24[12];
  uint32_t CH2STAT;                                /**< DCP channel 2 status register, offset: 0x1A0 */
  uint8_t RESERVED_25[12];
  uint32_t CH2OPTS;                                /**< DCP channel 2 options register, offset: 0x1B0 */
  uint8_t RESERVED_26[12];
  uint32_t CH3CMDPTR;                              /**< DCP channel 3 command pointer address register, offset: 0x1C0 */
  uint8_t RESERVED_27[12];
  uint32_t CH3SEMA;                                /**< DCP channel 3 semaphore register, offset: 0x1D0 */
  uint8_t RESERVED_28[12];
  uint32_t CH3STAT;                                /**< DCP channel 3 status register, offset: 0x1E0 */
  uint8_t RESERVED_29[12];
  uint32_t CH3OPTS;                                /**< DCP channel 3 options register, offset: 0x1F0 */
  uint8_t RESERVED_30[524];
  uint32_t DBGSELECT;                              /**< DCP debug select register, offset: 0x400 */
  uint8_t RESERVED_31[12];
  uint32_t DBGDATA;                                /**< DCP debug data register, offset: 0x410 */
  uint8_t RESERVED_32[12];
  uint32_t PAGETABLE;                              /**< DCP page table register, offset: 0x420 */
  uint8_t RESERVED_33[12];
  uint32_t VERSION;                                /**< DCP version register, offset: 0x430 */
} volatile *DCP_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DCP - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DCP_Register_Accessor_Macros DCP - Register accessor macros
 * @{
 */


/* DCP - Register accessors */
#define DCP_CTRL_REG(base)                       ((base)->CTRL)
#define DCP_STAT_REG(base)                       ((base)->STAT)
#define DCP_CHANNELCTRL_REG(base)                ((base)->CHANNELCTRL)
#define DCP_CAPABILITY0_REG(base)                ((base)->CAPABILITY0)
#define DCP_CAPABILITY1_REG(base)                ((base)->CAPABILITY1)
#define DCP_CONTEXT_REG(base)                    ((base)->CONTEXT)
#define DCP_KEY_REG(base)                        ((base)->KEY)
#define DCP_KEYDATA_REG(base)                    ((base)->KEYDATA)
#define DCP_PACKET0_REG(base)                    ((base)->PACKET0)
#define DCP_PACKET1_REG(base)                    ((base)->PACKET1)
#define DCP_PACKET2_REG(base)                    ((base)->PACKET2)
#define DCP_PACKET3_REG(base)                    ((base)->PACKET3)
#define DCP_PACKET4_REG(base)                    ((base)->PACKET4)
#define DCP_PACKET5_REG(base)                    ((base)->PACKET5)
#define DCP_PACKET6_REG(base)                    ((base)->PACKET6)
#define DCP_CH0CMDPTR_REG(base)                  ((base)->CH0CMDPTR)
#define DCP_CH0SEMA_REG(base)                    ((base)->CH0SEMA)
#define DCP_CH0STAT_REG(base)                    ((base)->CH0STAT)
#define DCP_CH0OPTS_REG(base)                    ((base)->CH0OPTS)
#define DCP_CH1CMDPTR_REG(base)                  ((base)->CH1CMDPTR)
#define DCP_CH1SEMA_REG(base)                    ((base)->CH1SEMA)
#define DCP_CH1STAT_REG(base)                    ((base)->CH1STAT)
#define DCP_CH1OPTS_REG(base)                    ((base)->CH1OPTS)
#define DCP_CH2CMDPTR_REG(base)                  ((base)->CH2CMDPTR)
#define DCP_CH2SEMA_REG(base)                    ((base)->CH2SEMA)
#define DCP_CH2STAT_REG(base)                    ((base)->CH2STAT)
#define DCP_CH2OPTS_REG(base)                    ((base)->CH2OPTS)
#define DCP_CH3CMDPTR_REG(base)                  ((base)->CH3CMDPTR)
#define DCP_CH3SEMA_REG(base)                    ((base)->CH3SEMA)
#define DCP_CH3STAT_REG(base)                    ((base)->CH3STAT)
#define DCP_CH3OPTS_REG(base)                    ((base)->CH3OPTS)
#define DCP_DBGSELECT_REG(base)                  ((base)->DBGSELECT)
#define DCP_DBGDATA_REG(base)                    ((base)->DBGDATA)
#define DCP_PAGETABLE_REG(base)                  ((base)->PAGETABLE)
#define DCP_VERSION_REG(base)                    ((base)->VERSION)

/*!
 * @}
 */ /* end of group DCP_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DCP Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DCP_Register_Masks DCP Register Masks
 * @{
 */

/*! @name CTRL - DCP control register 0 */
#define DCP_CTRL_CHANNEL_INTERRUPT_ENABLE_MASK   (0xFFU)
#define DCP_CTRL_CHANNEL_INTERRUPT_ENABLE_SHIFT  (0U)
#define DCP_CTRL_CHANNEL_INTERRUPT_ENABLE(x)     (((uint32_t)(((uint32_t)(x)) << DCP_CTRL_CHANNEL_INTERRUPT_ENABLE_SHIFT)) & DCP_CTRL_CHANNEL_INTERRUPT_ENABLE_MASK)
#define DCP_CTRL_RSVD_CSC_INTERRUPT_ENABLE_MASK  (0x100U)
#define DCP_CTRL_RSVD_CSC_INTERRUPT_ENABLE_SHIFT (8U)
#define DCP_CTRL_ENABLE_CONTEXT_SWITCHING_MASK   (0x200000U)
#define DCP_CTRL_ENABLE_CONTEXT_SWITCHING_SHIFT  (21U)
#define DCP_CTRL_ENABLE_CONTEXT_CACHING_MASK     (0x400000U)
#define DCP_CTRL_ENABLE_CONTEXT_CACHING_SHIFT    (22U)
#define DCP_CTRL_GATHER_RESIDUAL_WRITES_MASK     (0x800000U)
#define DCP_CTRL_GATHER_RESIDUAL_WRITES_SHIFT    (23U)
#define DCP_CTRL_PRESENT_SHA_MASK                (0x10000000U)
#define DCP_CTRL_PRESENT_SHA_SHIFT               (28U)
#define DCP_CTRL_PRESENT_CRYPTO_MASK             (0x20000000U)
#define DCP_CTRL_PRESENT_CRYPTO_SHIFT            (29U)
#define DCP_CTRL_CLKGATE_MASK                    (0x40000000U)
#define DCP_CTRL_CLKGATE_SHIFT                   (30U)
#define DCP_CTRL_SFTRST_MASK                     (0x80000000U)
#define DCP_CTRL_SFTRST_SHIFT                    (31U)

/*! @name STAT - DCP status register */
#define DCP_STAT_IRQ_MASK                        (0xFU)
#define DCP_STAT_IRQ_SHIFT                       (0U)
#define DCP_STAT_IRQ(x)                          (((uint32_t)(((uint32_t)(x)) << DCP_STAT_IRQ_SHIFT)) & DCP_STAT_IRQ_MASK)
#define DCP_STAT_RSVD_IRQ_MASK                   (0x100U)
#define DCP_STAT_RSVD_IRQ_SHIFT                  (8U)
#define DCP_STAT_READY_CHANNELS_MASK             (0xFF0000U)
#define DCP_STAT_READY_CHANNELS_SHIFT            (16U)
#define DCP_STAT_READY_CHANNELS(x)               (((uint32_t)(((uint32_t)(x)) << DCP_STAT_READY_CHANNELS_SHIFT)) & DCP_STAT_READY_CHANNELS_MASK)
#define DCP_STAT_CUR_CHANNEL_MASK                (0xF000000U)
#define DCP_STAT_CUR_CHANNEL_SHIFT               (24U)
#define DCP_STAT_CUR_CHANNEL(x)                  (((uint32_t)(((uint32_t)(x)) << DCP_STAT_CUR_CHANNEL_SHIFT)) & DCP_STAT_CUR_CHANNEL_MASK)
#define DCP_STAT_OTP_KEY_READY_MASK              (0x10000000U)
#define DCP_STAT_OTP_KEY_READY_SHIFT             (28U)

/*! @name CHANNELCTRL - DCP channel control register */
#define DCP_CHANNELCTRL_ENABLE_CHANNEL_MASK      (0xFFU)
#define DCP_CHANNELCTRL_ENABLE_CHANNEL_SHIFT     (0U)
#define DCP_CHANNELCTRL_ENABLE_CHANNEL(x)        (((uint32_t)(((uint32_t)(x)) << DCP_CHANNELCTRL_ENABLE_CHANNEL_SHIFT)) & DCP_CHANNELCTRL_ENABLE_CHANNEL_MASK)
#define DCP_CHANNELCTRL_HIGH_PRIORITY_CHANNEL_MASK (0xFF00U)
#define DCP_CHANNELCTRL_HIGH_PRIORITY_CHANNEL_SHIFT (8U)
#define DCP_CHANNELCTRL_HIGH_PRIORITY_CHANNEL(x) (((uint32_t)(((uint32_t)(x)) << DCP_CHANNELCTRL_HIGH_PRIORITY_CHANNEL_SHIFT)) & DCP_CHANNELCTRL_HIGH_PRIORITY_CHANNEL_MASK)
#define DCP_CHANNELCTRL_CH0_IRQ_MERGED_MASK      (0x10000U)
#define DCP_CHANNELCTRL_CH0_IRQ_MERGED_SHIFT     (16U)
#define DCP_CHANNELCTRL_RSVD_MASK                (0xFFFE0000U)
#define DCP_CHANNELCTRL_RSVD_SHIFT               (17U)
#define DCP_CHANNELCTRL_RSVD(x)                  (((uint32_t)(((uint32_t)(x)) << DCP_CHANNELCTRL_RSVD_SHIFT)) & DCP_CHANNELCTRL_RSVD_MASK)

/*! @name CAPABILITY0 - DCP capability 0 register */
#define DCP_CAPABILITY0_NUM_KEYS_MASK            (0xFFU)
#define DCP_CAPABILITY0_NUM_KEYS_SHIFT           (0U)
#define DCP_CAPABILITY0_NUM_KEYS(x)              (((uint32_t)(((uint32_t)(x)) << DCP_CAPABILITY0_NUM_KEYS_SHIFT)) & DCP_CAPABILITY0_NUM_KEYS_MASK)
#define DCP_CAPABILITY0_NUM_CHANNELS_MASK        (0xF00U)
#define DCP_CAPABILITY0_NUM_CHANNELS_SHIFT       (8U)
#define DCP_CAPABILITY0_NUM_CHANNELS(x)          (((uint32_t)(((uint32_t)(x)) << DCP_CAPABILITY0_NUM_CHANNELS_SHIFT)) & DCP_CAPABILITY0_NUM_CHANNELS_MASK)
#define DCP_CAPABILITY0_RSVD_MASK                (0x1FFFF000U)
#define DCP_CAPABILITY0_RSVD_SHIFT               (12U)
#define DCP_CAPABILITY0_RSVD(x)                  (((uint32_t)(((uint32_t)(x)) << DCP_CAPABILITY0_RSVD_SHIFT)) & DCP_CAPABILITY0_RSVD_MASK)
#define DCP_CAPABILITY0_DISABLE_UNIQUE_KEY_MASK  (0x20000000U)
#define DCP_CAPABILITY0_DISABLE_UNIQUE_KEY_SHIFT (29U)
#define DCP_CAPABILITY0_DISABLE_DECRYPT_MASK     (0x80000000U)
#define DCP_CAPABILITY0_DISABLE_DECRYPT_SHIFT    (31U)

/*! @name CAPABILITY1 - DCP capability 1 register */
#define DCP_CAPABILITY1_CIPHER_ALGORITHMS_MASK   (0xFFFFU)
#define DCP_CAPABILITY1_CIPHER_ALGORITHMS_SHIFT  (0U)
#define DCP_CAPABILITY1_CIPHER_ALGORITHMS(x)     (((uint32_t)(((uint32_t)(x)) << DCP_CAPABILITY1_CIPHER_ALGORITHMS_SHIFT)) & DCP_CAPABILITY1_CIPHER_ALGORITHMS_MASK)
#define DCP_CAPABILITY1_HASH_ALGORITHMS_MASK     (0xFFFF0000U)
#define DCP_CAPABILITY1_HASH_ALGORITHMS_SHIFT    (16U)
#define DCP_CAPABILITY1_HASH_ALGORITHMS(x)       (((uint32_t)(((uint32_t)(x)) << DCP_CAPABILITY1_HASH_ALGORITHMS_SHIFT)) & DCP_CAPABILITY1_HASH_ALGORITHMS_MASK)

/*! @name CONTEXT - DCP context buffer pointer */
#define DCP_CONTEXT_ADDR_MASK                    (0xFFFFFFFFU)
#define DCP_CONTEXT_ADDR_SHIFT                   (0U)
#define DCP_CONTEXT_ADDR(x)                      (((uint32_t)(((uint32_t)(x)) << DCP_CONTEXT_ADDR_SHIFT)) & DCP_CONTEXT_ADDR_MASK)

/*! @name KEY - DCP key index */
#define DCP_KEY_SUBWORD_MASK                     (0x3U)
#define DCP_KEY_SUBWORD_SHIFT                    (0U)
#define DCP_KEY_SUBWORD(x)                       (((uint32_t)(((uint32_t)(x)) << DCP_KEY_SUBWORD_SHIFT)) & DCP_KEY_SUBWORD_MASK)
#define DCP_KEY_RSVD_SUBWORD_MASK                (0xCU)
#define DCP_KEY_RSVD_SUBWORD_SHIFT               (2U)
#define DCP_KEY_RSVD_SUBWORD(x)                  (((uint32_t)(((uint32_t)(x)) << DCP_KEY_RSVD_SUBWORD_SHIFT)) & DCP_KEY_RSVD_SUBWORD_MASK)
#define DCP_KEY_INDEX_MASK                       (0x30U)
#define DCP_KEY_INDEX_SHIFT                      (4U)
#define DCP_KEY_INDEX(x)                         (((uint32_t)(((uint32_t)(x)) << DCP_KEY_INDEX_SHIFT)) & DCP_KEY_INDEX_MASK)
#define DCP_KEY_RSVD_INDEX_MASK                  (0xC0U)
#define DCP_KEY_RSVD_INDEX_SHIFT                 (6U)
#define DCP_KEY_RSVD_INDEX(x)                    (((uint32_t)(((uint32_t)(x)) << DCP_KEY_RSVD_INDEX_SHIFT)) & DCP_KEY_RSVD_INDEX_MASK)
#define DCP_KEY_RSVD_MASK                        (0xFFFFFF00U)
#define DCP_KEY_RSVD_SHIFT                       (8U)
#define DCP_KEY_RSVD(x)                          (((uint32_t)(((uint32_t)(x)) << DCP_KEY_RSVD_SHIFT)) & DCP_KEY_RSVD_MASK)

/*! @name KEYDATA - DCP key data */
#define DCP_KEYDATA_DATA_MASK                    (0xFFFFFFFFU)
#define DCP_KEYDATA_DATA_SHIFT                   (0U)
#define DCP_KEYDATA_DATA(x)                      (((uint32_t)(((uint32_t)(x)) << DCP_KEYDATA_DATA_SHIFT)) & DCP_KEYDATA_DATA_MASK)

/*! @name PACKET0 - DCP work packet 0 status register */
#define DCP_PACKET0_ADDR_MASK                    (0xFFFFFFFFU)
#define DCP_PACKET0_ADDR_SHIFT                   (0U)
#define DCP_PACKET0_ADDR(x)                      (((uint32_t)(((uint32_t)(x)) << DCP_PACKET0_ADDR_SHIFT)) & DCP_PACKET0_ADDR_MASK)

/*! @name PACKET1 - DCP work packet 1 status register */
#define DCP_PACKET1_INTERRUPT_MASK               (0x1U)
#define DCP_PACKET1_INTERRUPT_SHIFT              (0U)
#define DCP_PACKET1_DECR_SEMAPHORE_MASK          (0x2U)
#define DCP_PACKET1_DECR_SEMAPHORE_SHIFT         (1U)
#define DCP_PACKET1_CHAIN_MASK                   (0x4U)
#define DCP_PACKET1_CHAIN_SHIFT                  (2U)
#define DCP_PACKET1_CHAIN_CONTIGUOUS_MASK        (0x8U)
#define DCP_PACKET1_CHAIN_CONTIGUOUS_SHIFT       (3U)
#define DCP_PACKET1_ENABLE_MEMCOPY_MASK          (0x10U)
#define DCP_PACKET1_ENABLE_MEMCOPY_SHIFT         (4U)
#define DCP_PACKET1_ENABLE_CIPHER_MASK           (0x20U)
#define DCP_PACKET1_ENABLE_CIPHER_SHIFT          (5U)
#define DCP_PACKET1_ENABLE_HASH_MASK             (0x40U)
#define DCP_PACKET1_ENABLE_HASH_SHIFT            (6U)
#define DCP_PACKET1_ENABLE_BLIT_MASK             (0x80U)
#define DCP_PACKET1_ENABLE_BLIT_SHIFT            (7U)
#define DCP_PACKET1_CIPHER_ENCRYPT_MASK          (0x100U)
#define DCP_PACKET1_CIPHER_ENCRYPT_SHIFT         (8U)
#define DCP_PACKET1_CIPHER_INIT_MASK             (0x200U)
#define DCP_PACKET1_CIPHER_INIT_SHIFT            (9U)
#define DCP_PACKET1_OTP_KEY_MASK                 (0x400U)
#define DCP_PACKET1_OTP_KEY_SHIFT                (10U)
#define DCP_PACKET1_PAYLOAD_KEY_MASK             (0x800U)
#define DCP_PACKET1_PAYLOAD_KEY_SHIFT            (11U)
#define DCP_PACKET1_HASH_INIT_MASK               (0x1000U)
#define DCP_PACKET1_HASH_INIT_SHIFT              (12U)
#define DCP_PACKET1_HASH_TERM_MASK               (0x2000U)
#define DCP_PACKET1_HASH_TERM_SHIFT              (13U)
#define DCP_PACKET1_CHECK_HASH_MASK              (0x4000U)
#define DCP_PACKET1_CHECK_HASH_SHIFT             (14U)
#define DCP_PACKET1_HASH_OUTPUT_MASK             (0x8000U)
#define DCP_PACKET1_HASH_OUTPUT_SHIFT            (15U)
#define DCP_PACKET1_CONSTANT_FILL_MASK           (0x10000U)
#define DCP_PACKET1_CONSTANT_FILL_SHIFT          (16U)
#define DCP_PACKET1_TEST_SEMA_IRQ_MASK           (0x20000U)
#define DCP_PACKET1_TEST_SEMA_IRQ_SHIFT          (17U)
#define DCP_PACKET1_KEY_BYTESWAP_MASK            (0x40000U)
#define DCP_PACKET1_KEY_BYTESWAP_SHIFT           (18U)
#define DCP_PACKET1_KEY_WORDSWAP_MASK            (0x80000U)
#define DCP_PACKET1_KEY_WORDSWAP_SHIFT           (19U)
#define DCP_PACKET1_INPUT_BYTESWAP_MASK          (0x100000U)
#define DCP_PACKET1_INPUT_BYTESWAP_SHIFT         (20U)
#define DCP_PACKET1_INPUT_WORDSWAP_MASK          (0x200000U)
#define DCP_PACKET1_INPUT_WORDSWAP_SHIFT         (21U)
#define DCP_PACKET1_OUTPUT_BYTESWAP_MASK         (0x400000U)
#define DCP_PACKET1_OUTPUT_BYTESWAP_SHIFT        (22U)
#define DCP_PACKET1_OUTPUT_WORDSWAP_MASK         (0x800000U)
#define DCP_PACKET1_OUTPUT_WORDSWAP_SHIFT        (23U)
#define DCP_PACKET1_TAG_MASK                     (0xFF000000U)
#define DCP_PACKET1_TAG_SHIFT                    (24U)
#define DCP_PACKET1_TAG(x)                       (((uint32_t)(((uint32_t)(x)) << DCP_PACKET1_TAG_SHIFT)) & DCP_PACKET1_TAG_MASK)

/*! @name PACKET2 - DCP work packet 2 status register */
#define DCP_PACKET2_CIPHER_SELECT_MASK           (0xFU)
#define DCP_PACKET2_CIPHER_SELECT_SHIFT          (0U)
#define DCP_PACKET2_CIPHER_SELECT(x)             (((uint32_t)(((uint32_t)(x)) << DCP_PACKET2_CIPHER_SELECT_SHIFT)) & DCP_PACKET2_CIPHER_SELECT_MASK)
#define DCP_PACKET2_CIPHER_MODE_MASK             (0xF0U)
#define DCP_PACKET2_CIPHER_MODE_SHIFT            (4U)
#define DCP_PACKET2_CIPHER_MODE(x)               (((uint32_t)(((uint32_t)(x)) << DCP_PACKET2_CIPHER_MODE_SHIFT)) & DCP_PACKET2_CIPHER_MODE_MASK)
#define DCP_PACKET2_KEY_SELECT_MASK              (0xFF00U)
#define DCP_PACKET2_KEY_SELECT_SHIFT             (8U)
#define DCP_PACKET2_KEY_SELECT(x)                (((uint32_t)(((uint32_t)(x)) << DCP_PACKET2_KEY_SELECT_SHIFT)) & DCP_PACKET2_KEY_SELECT_MASK)
#define DCP_PACKET2_HASH_SELECT_MASK             (0xF0000U)
#define DCP_PACKET2_HASH_SELECT_SHIFT            (16U)
#define DCP_PACKET2_HASH_SELECT(x)               (((uint32_t)(((uint32_t)(x)) << DCP_PACKET2_HASH_SELECT_SHIFT)) & DCP_PACKET2_HASH_SELECT_MASK)
#define DCP_PACKET2_RSVD_MASK                    (0xF00000U)
#define DCP_PACKET2_RSVD_SHIFT                   (20U)
#define DCP_PACKET2_RSVD(x)                      (((uint32_t)(((uint32_t)(x)) << DCP_PACKET2_RSVD_SHIFT)) & DCP_PACKET2_RSVD_MASK)
#define DCP_PACKET2_CIPHER_CFG_MASK              (0xFF000000U)
#define DCP_PACKET2_CIPHER_CFG_SHIFT             (24U)
#define DCP_PACKET2_CIPHER_CFG(x)                (((uint32_t)(((uint32_t)(x)) << DCP_PACKET2_CIPHER_CFG_SHIFT)) & DCP_PACKET2_CIPHER_CFG_MASK)

/*! @name PACKET3 - DCP work packet 3 status register */
#define DCP_PACKET3_ADDR_MASK                    (0xFFFFFFFFU)
#define DCP_PACKET3_ADDR_SHIFT                   (0U)
#define DCP_PACKET3_ADDR(x)                      (((uint32_t)(((uint32_t)(x)) << DCP_PACKET3_ADDR_SHIFT)) & DCP_PACKET3_ADDR_MASK)

/*! @name PACKET4 - DCP work packet 4 status register */
#define DCP_PACKET4_ADDR_MASK                    (0xFFFFFFFFU)
#define DCP_PACKET4_ADDR_SHIFT                   (0U)
#define DCP_PACKET4_ADDR(x)                      (((uint32_t)(((uint32_t)(x)) << DCP_PACKET4_ADDR_SHIFT)) & DCP_PACKET4_ADDR_MASK)

/*! @name PACKET5 - DCP work packet 5 status register */
#define DCP_PACKET5_COUNT_MASK                   (0xFFFFFFFFU)
#define DCP_PACKET5_COUNT_SHIFT                  (0U)
#define DCP_PACKET5_COUNT(x)                     (((uint32_t)(((uint32_t)(x)) << DCP_PACKET5_COUNT_SHIFT)) & DCP_PACKET5_COUNT_MASK)

/*! @name PACKET6 - DCP work packet 6 status register */
#define DCP_PACKET6_ADDR_MASK                    (0xFFFFFFFFU)
#define DCP_PACKET6_ADDR_SHIFT                   (0U)
#define DCP_PACKET6_ADDR(x)                      (((uint32_t)(((uint32_t)(x)) << DCP_PACKET6_ADDR_SHIFT)) & DCP_PACKET6_ADDR_MASK)

/*! @name CH0CMDPTR - DCP channel 0 command pointer address register */
#define DCP_CH0CMDPTR_ADDR_MASK                  (0xFFFFFFFFU)
#define DCP_CH0CMDPTR_ADDR_SHIFT                 (0U)
#define DCP_CH0CMDPTR_ADDR(x)                    (((uint32_t)(((uint32_t)(x)) << DCP_CH0CMDPTR_ADDR_SHIFT)) & DCP_CH0CMDPTR_ADDR_MASK)

/*! @name CH0SEMA - DCP channel 0 semaphore register */
#define DCP_CH0SEMA_INCREMENT_MASK               (0xFFU)
#define DCP_CH0SEMA_INCREMENT_SHIFT              (0U)
#define DCP_CH0SEMA_INCREMENT(x)                 (((uint32_t)(((uint32_t)(x)) << DCP_CH0SEMA_INCREMENT_SHIFT)) & DCP_CH0SEMA_INCREMENT_MASK)
#define DCP_CH0SEMA_VALUE_MASK                   (0xFF0000U)
#define DCP_CH0SEMA_VALUE_SHIFT                  (16U)
#define DCP_CH0SEMA_VALUE(x)                     (((uint32_t)(((uint32_t)(x)) << DCP_CH0SEMA_VALUE_SHIFT)) & DCP_CH0SEMA_VALUE_MASK)

/*! @name CH0STAT - DCP channel 0 status register */
#define DCP_CH0STAT_RSVD_COMPLETE_MASK           (0x1U)
#define DCP_CH0STAT_RSVD_COMPLETE_SHIFT          (0U)
#define DCP_CH0STAT_HASH_MISMATCH_MASK           (0x2U)
#define DCP_CH0STAT_HASH_MISMATCH_SHIFT          (1U)
#define DCP_CH0STAT_ERROR_SETUP_MASK             (0x4U)
#define DCP_CH0STAT_ERROR_SETUP_SHIFT            (2U)
#define DCP_CH0STAT_ERROR_PACKET_MASK            (0x8U)
#define DCP_CH0STAT_ERROR_PACKET_SHIFT           (3U)
#define DCP_CH0STAT_ERROR_SRC_MASK               (0x10U)
#define DCP_CH0STAT_ERROR_SRC_SHIFT              (4U)
#define DCP_CH0STAT_ERROR_DST_MASK               (0x20U)
#define DCP_CH0STAT_ERROR_DST_SHIFT              (5U)
#define DCP_CH0STAT_ERROR_PAGEFAULT_MASK         (0x40U)
#define DCP_CH0STAT_ERROR_PAGEFAULT_SHIFT        (6U)
#define DCP_CH0STAT_ERROR_CODE_MASK              (0xFF0000U)
#define DCP_CH0STAT_ERROR_CODE_SHIFT             (16U)
#define DCP_CH0STAT_ERROR_CODE(x)                (((uint32_t)(((uint32_t)(x)) << DCP_CH0STAT_ERROR_CODE_SHIFT)) & DCP_CH0STAT_ERROR_CODE_MASK)
#define DCP_CH0STAT_TAG_MASK                     (0xFF000000U)
#define DCP_CH0STAT_TAG_SHIFT                    (24U)
#define DCP_CH0STAT_TAG(x)                       (((uint32_t)(((uint32_t)(x)) << DCP_CH0STAT_TAG_SHIFT)) & DCP_CH0STAT_TAG_MASK)

/*! @name CH0OPTS - DCP channel 0 options register */
#define DCP_CH0OPTS_RECOVERY_TIMER_MASK          (0xFFFFU)
#define DCP_CH0OPTS_RECOVERY_TIMER_SHIFT         (0U)
#define DCP_CH0OPTS_RECOVERY_TIMER(x)            (((uint32_t)(((uint32_t)(x)) << DCP_CH0OPTS_RECOVERY_TIMER_SHIFT)) & DCP_CH0OPTS_RECOVERY_TIMER_MASK)
#define DCP_CH0OPTS_RSVD_MASK                    (0xFFFF0000U)
#define DCP_CH0OPTS_RSVD_SHIFT                   (16U)
#define DCP_CH0OPTS_RSVD(x)                      (((uint32_t)(((uint32_t)(x)) << DCP_CH0OPTS_RSVD_SHIFT)) & DCP_CH0OPTS_RSVD_MASK)

/*! @name CH1CMDPTR - DCP channel 1 command pointer address register */
#define DCP_CH1CMDPTR_ADDR_MASK                  (0xFFFFFFFFU)
#define DCP_CH1CMDPTR_ADDR_SHIFT                 (0U)
#define DCP_CH1CMDPTR_ADDR(x)                    (((uint32_t)(((uint32_t)(x)) << DCP_CH1CMDPTR_ADDR_SHIFT)) & DCP_CH1CMDPTR_ADDR_MASK)

/*! @name CH1SEMA - DCP channel 1 semaphore register */
#define DCP_CH1SEMA_INCREMENT_MASK               (0xFFU)
#define DCP_CH1SEMA_INCREMENT_SHIFT              (0U)
#define DCP_CH1SEMA_INCREMENT(x)                 (((uint32_t)(((uint32_t)(x)) << DCP_CH1SEMA_INCREMENT_SHIFT)) & DCP_CH1SEMA_INCREMENT_MASK)
#define DCP_CH1SEMA_VALUE_MASK                   (0xFF0000U)
#define DCP_CH1SEMA_VALUE_SHIFT                  (16U)
#define DCP_CH1SEMA_VALUE(x)                     (((uint32_t)(((uint32_t)(x)) << DCP_CH1SEMA_VALUE_SHIFT)) & DCP_CH1SEMA_VALUE_MASK)

/*! @name CH1STAT - DCP channel 1 status register */
#define DCP_CH1STAT_RSVD_COMPLETE_MASK           (0x1U)
#define DCP_CH1STAT_RSVD_COMPLETE_SHIFT          (0U)
#define DCP_CH1STAT_HASH_MISMATCH_MASK           (0x2U)
#define DCP_CH1STAT_HASH_MISMATCH_SHIFT          (1U)
#define DCP_CH1STAT_ERROR_SETUP_MASK             (0x4U)
#define DCP_CH1STAT_ERROR_SETUP_SHIFT            (2U)
#define DCP_CH1STAT_ERROR_PACKET_MASK            (0x8U)
#define DCP_CH1STAT_ERROR_PACKET_SHIFT           (3U)
#define DCP_CH1STAT_ERROR_SRC_MASK               (0x10U)
#define DCP_CH1STAT_ERROR_SRC_SHIFT              (4U)
#define DCP_CH1STAT_ERROR_DST_MASK               (0x20U)
#define DCP_CH1STAT_ERROR_DST_SHIFT              (5U)
#define DCP_CH1STAT_ERROR_PAGEFAULT_MASK         (0x40U)
#define DCP_CH1STAT_ERROR_PAGEFAULT_SHIFT        (6U)
#define DCP_CH1STAT_ERROR_CODE_MASK              (0xFF0000U)
#define DCP_CH1STAT_ERROR_CODE_SHIFT             (16U)
#define DCP_CH1STAT_ERROR_CODE(x)                (((uint32_t)(((uint32_t)(x)) << DCP_CH1STAT_ERROR_CODE_SHIFT)) & DCP_CH1STAT_ERROR_CODE_MASK)
#define DCP_CH1STAT_TAG_MASK                     (0xFF000000U)
#define DCP_CH1STAT_TAG_SHIFT                    (24U)
#define DCP_CH1STAT_TAG(x)                       (((uint32_t)(((uint32_t)(x)) << DCP_CH1STAT_TAG_SHIFT)) & DCP_CH1STAT_TAG_MASK)

/*! @name CH1OPTS - DCP channel 1 options register */
#define DCP_CH1OPTS_RECOVERY_TIMER_MASK          (0xFFFFU)
#define DCP_CH1OPTS_RECOVERY_TIMER_SHIFT         (0U)
#define DCP_CH1OPTS_RECOVERY_TIMER(x)            (((uint32_t)(((uint32_t)(x)) << DCP_CH1OPTS_RECOVERY_TIMER_SHIFT)) & DCP_CH1OPTS_RECOVERY_TIMER_MASK)
#define DCP_CH1OPTS_RSVD_MASK                    (0xFFFF0000U)
#define DCP_CH1OPTS_RSVD_SHIFT                   (16U)
#define DCP_CH1OPTS_RSVD(x)                      (((uint32_t)(((uint32_t)(x)) << DCP_CH1OPTS_RSVD_SHIFT)) & DCP_CH1OPTS_RSVD_MASK)

/*! @name CH2CMDPTR - DCP channel 2 command pointer address register */
#define DCP_CH2CMDPTR_ADDR_MASK                  (0xFFFFFFFFU)
#define DCP_CH2CMDPTR_ADDR_SHIFT                 (0U)
#define DCP_CH2CMDPTR_ADDR(x)                    (((uint32_t)(((uint32_t)(x)) << DCP_CH2CMDPTR_ADDR_SHIFT)) & DCP_CH2CMDPTR_ADDR_MASK)

/*! @name CH2SEMA - DCP channel 2 semaphore register */
#define DCP_CH2SEMA_INCREMENT_MASK               (0xFFU)
#define DCP_CH2SEMA_INCREMENT_SHIFT              (0U)
#define DCP_CH2SEMA_INCREMENT(x)                 (((uint32_t)(((uint32_t)(x)) << DCP_CH2SEMA_INCREMENT_SHIFT)) & DCP_CH2SEMA_INCREMENT_MASK)
#define DCP_CH2SEMA_VALUE_MASK                   (0xFF0000U)
#define DCP_CH2SEMA_VALUE_SHIFT                  (16U)
#define DCP_CH2SEMA_VALUE(x)                     (((uint32_t)(((uint32_t)(x)) << DCP_CH2SEMA_VALUE_SHIFT)) & DCP_CH2SEMA_VALUE_MASK)

/*! @name CH2STAT - DCP channel 2 status register */
#define DCP_CH2STAT_RSVD_COMPLETE_MASK           (0x1U)
#define DCP_CH2STAT_RSVD_COMPLETE_SHIFT          (0U)
#define DCP_CH2STAT_HASH_MISMATCH_MASK           (0x2U)
#define DCP_CH2STAT_HASH_MISMATCH_SHIFT          (1U)
#define DCP_CH2STAT_ERROR_SETUP_MASK             (0x4U)
#define DCP_CH2STAT_ERROR_SETUP_SHIFT            (2U)
#define DCP_CH2STAT_ERROR_PACKET_MASK            (0x8U)
#define DCP_CH2STAT_ERROR_PACKET_SHIFT           (3U)
#define DCP_CH2STAT_ERROR_SRC_MASK               (0x10U)
#define DCP_CH2STAT_ERROR_SRC_SHIFT              (4U)
#define DCP_CH2STAT_ERROR_DST_MASK               (0x20U)
#define DCP_CH2STAT_ERROR_DST_SHIFT              (5U)
#define DCP_CH2STAT_ERROR_PAGEFAULT_MASK         (0x40U)
#define DCP_CH2STAT_ERROR_PAGEFAULT_SHIFT        (6U)
#define DCP_CH2STAT_ERROR_CODE_MASK              (0xFF0000U)
#define DCP_CH2STAT_ERROR_CODE_SHIFT             (16U)
#define DCP_CH2STAT_ERROR_CODE(x)                (((uint32_t)(((uint32_t)(x)) << DCP_CH2STAT_ERROR_CODE_SHIFT)) & DCP_CH2STAT_ERROR_CODE_MASK)
#define DCP_CH2STAT_TAG_MASK                     (0xFF000000U)
#define DCP_CH2STAT_TAG_SHIFT                    (24U)
#define DCP_CH2STAT_TAG(x)                       (((uint32_t)(((uint32_t)(x)) << DCP_CH2STAT_TAG_SHIFT)) & DCP_CH2STAT_TAG_MASK)

/*! @name CH2OPTS - DCP channel 2 options register */
#define DCP_CH2OPTS_RECOVERY_TIMER_MASK          (0xFFFFU)
#define DCP_CH2OPTS_RECOVERY_TIMER_SHIFT         (0U)
#define DCP_CH2OPTS_RECOVERY_TIMER(x)            (((uint32_t)(((uint32_t)(x)) << DCP_CH2OPTS_RECOVERY_TIMER_SHIFT)) & DCP_CH2OPTS_RECOVERY_TIMER_MASK)
#define DCP_CH2OPTS_RSVD_MASK                    (0xFFFF0000U)
#define DCP_CH2OPTS_RSVD_SHIFT                   (16U)
#define DCP_CH2OPTS_RSVD(x)                      (((uint32_t)(((uint32_t)(x)) << DCP_CH2OPTS_RSVD_SHIFT)) & DCP_CH2OPTS_RSVD_MASK)

/*! @name CH3CMDPTR - DCP channel 3 command pointer address register */
#define DCP_CH3CMDPTR_ADDR_MASK                  (0xFFFFFFFFU)
#define DCP_CH3CMDPTR_ADDR_SHIFT                 (0U)
#define DCP_CH3CMDPTR_ADDR(x)                    (((uint32_t)(((uint32_t)(x)) << DCP_CH3CMDPTR_ADDR_SHIFT)) & DCP_CH3CMDPTR_ADDR_MASK)

/*! @name CH3SEMA - DCP channel 3 semaphore register */
#define DCP_CH3SEMA_INCREMENT_MASK               (0xFFU)
#define DCP_CH3SEMA_INCREMENT_SHIFT              (0U)
#define DCP_CH3SEMA_INCREMENT(x)                 (((uint32_t)(((uint32_t)(x)) << DCP_CH3SEMA_INCREMENT_SHIFT)) & DCP_CH3SEMA_INCREMENT_MASK)
#define DCP_CH3SEMA_VALUE_MASK                   (0xFF0000U)
#define DCP_CH3SEMA_VALUE_SHIFT                  (16U)
#define DCP_CH3SEMA_VALUE(x)                     (((uint32_t)(((uint32_t)(x)) << DCP_CH3SEMA_VALUE_SHIFT)) & DCP_CH3SEMA_VALUE_MASK)

/*! @name CH3STAT - DCP channel 3 status register */
#define DCP_CH3STAT_RSVD_COMPLETE_MASK           (0x1U)
#define DCP_CH3STAT_RSVD_COMPLETE_SHIFT          (0U)
#define DCP_CH3STAT_HASH_MISMATCH_MASK           (0x2U)
#define DCP_CH3STAT_HASH_MISMATCH_SHIFT          (1U)
#define DCP_CH3STAT_ERROR_SETUP_MASK             (0x4U)
#define DCP_CH3STAT_ERROR_SETUP_SHIFT            (2U)
#define DCP_CH3STAT_ERROR_PACKET_MASK            (0x8U)
#define DCP_CH3STAT_ERROR_PACKET_SHIFT           (3U)
#define DCP_CH3STAT_ERROR_SRC_MASK               (0x10U)
#define DCP_CH3STAT_ERROR_SRC_SHIFT              (4U)
#define DCP_CH3STAT_ERROR_DST_MASK               (0x20U)
#define DCP_CH3STAT_ERROR_DST_SHIFT              (5U)
#define DCP_CH3STAT_ERROR_PAGEFAULT_MASK         (0x40U)
#define DCP_CH3STAT_ERROR_PAGEFAULT_SHIFT        (6U)
#define DCP_CH3STAT_ERROR_CODE_MASK              (0xFF0000U)
#define DCP_CH3STAT_ERROR_CODE_SHIFT             (16U)
#define DCP_CH3STAT_ERROR_CODE(x)                (((uint32_t)(((uint32_t)(x)) << DCP_CH3STAT_ERROR_CODE_SHIFT)) & DCP_CH3STAT_ERROR_CODE_MASK)
#define DCP_CH3STAT_TAG_MASK                     (0xFF000000U)
#define DCP_CH3STAT_TAG_SHIFT                    (24U)
#define DCP_CH3STAT_TAG(x)                       (((uint32_t)(((uint32_t)(x)) << DCP_CH3STAT_TAG_SHIFT)) & DCP_CH3STAT_TAG_MASK)

/*! @name CH3OPTS - DCP channel 3 options register */
#define DCP_CH3OPTS_RECOVERY_TIMER_MASK          (0xFFFFU)
#define DCP_CH3OPTS_RECOVERY_TIMER_SHIFT         (0U)
#define DCP_CH3OPTS_RECOVERY_TIMER(x)            (((uint32_t)(((uint32_t)(x)) << DCP_CH3OPTS_RECOVERY_TIMER_SHIFT)) & DCP_CH3OPTS_RECOVERY_TIMER_MASK)
#define DCP_CH3OPTS_RSVD_MASK                    (0xFFFF0000U)
#define DCP_CH3OPTS_RSVD_SHIFT                   (16U)
#define DCP_CH3OPTS_RSVD(x)                      (((uint32_t)(((uint32_t)(x)) << DCP_CH3OPTS_RSVD_SHIFT)) & DCP_CH3OPTS_RSVD_MASK)

/*! @name DBGSELECT - DCP debug select register */
#define DCP_DBGSELECT_INDEX_MASK                 (0xFFU)
#define DCP_DBGSELECT_INDEX_SHIFT                (0U)
#define DCP_DBGSELECT_INDEX(x)                   (((uint32_t)(((uint32_t)(x)) << DCP_DBGSELECT_INDEX_SHIFT)) & DCP_DBGSELECT_INDEX_MASK)
#define DCP_DBGSELECT_RSVD_MASK                  (0xFFFFFF00U)
#define DCP_DBGSELECT_RSVD_SHIFT                 (8U)
#define DCP_DBGSELECT_RSVD(x)                    (((uint32_t)(((uint32_t)(x)) << DCP_DBGSELECT_RSVD_SHIFT)) & DCP_DBGSELECT_RSVD_MASK)

/*! @name DBGDATA - DCP debug data register */
#define DCP_DBGDATA_DATA_MASK                    (0xFFFFFFFFU)
#define DCP_DBGDATA_DATA_SHIFT                   (0U)
#define DCP_DBGDATA_DATA(x)                      (((uint32_t)(((uint32_t)(x)) << DCP_DBGDATA_DATA_SHIFT)) & DCP_DBGDATA_DATA_MASK)

/*! @name PAGETABLE - DCP page table register */
#define DCP_PAGETABLE_ENABLE_MASK                (0x1U)
#define DCP_PAGETABLE_ENABLE_SHIFT               (0U)
#define DCP_PAGETABLE_FLUSH_MASK                 (0x2U)
#define DCP_PAGETABLE_FLUSH_SHIFT                (1U)
#define DCP_PAGETABLE_BASE_MASK                  (0xFFFFFFFCU)
#define DCP_PAGETABLE_BASE_SHIFT                 (2U)
#define DCP_PAGETABLE_BASE(x)                    (((uint32_t)(((uint32_t)(x)) << DCP_PAGETABLE_BASE_SHIFT)) & DCP_PAGETABLE_BASE_MASK)

/*! @name VERSION - DCP version register */
#define DCP_VERSION_STEP_MASK                    (0xFFFFU)
#define DCP_VERSION_STEP_SHIFT                   (0U)
#define DCP_VERSION_STEP(x)                      (((uint32_t)(((uint32_t)(x)) << DCP_VERSION_STEP_SHIFT)) & DCP_VERSION_STEP_MASK)
#define DCP_VERSION_MINOR_MASK                   (0xFF0000U)
#define DCP_VERSION_MINOR_SHIFT                  (16U)
#define DCP_VERSION_MINOR(x)                     (((uint32_t)(((uint32_t)(x)) << DCP_VERSION_MINOR_SHIFT)) & DCP_VERSION_MINOR_MASK)
#define DCP_VERSION_MAJOR_MASK                   (0xFF000000U)
#define DCP_VERSION_MAJOR_SHIFT                  (24U)
#define DCP_VERSION_MAJOR(x)                     (((uint32_t)(((uint32_t)(x)) << DCP_VERSION_MAJOR_SHIFT)) & DCP_VERSION_MAJOR_MASK)


/*!
 * @}
 */ /* end of group DCP_Register_Masks */


/* DCP - Peripheral instance base addresses */
/** Peripheral DCP base pointer */
#define DCP_BASE_PTR                             ((DCP_MemMapPtr)0x402FC000u)
/** Array initializer of DCP peripheral base pointers */
#define DCP_BASE_PTRS                            { DCP_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- DCP - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DCP_Register_Accessor_Macros DCP - Register accessor macros
 * @{
 */


/* DCP - Register instance definitions */
/* DCP */
#define DCP_CTRL                                 DCP_CTRL_REG(DCP_BASE_PTR)
#define DCP_STAT                                 DCP_STAT_REG(DCP_BASE_PTR)
#define DCP_CHANNELCTRL                          DCP_CHANNELCTRL_REG(DCP_BASE_PTR)
#define DCP_CAPABILITY0                          DCP_CAPABILITY0_REG(DCP_BASE_PTR)
#define DCP_CAPABILITY1                          DCP_CAPABILITY1_REG(DCP_BASE_PTR)
#define DCP_CONTEXT                              DCP_CONTEXT_REG(DCP_BASE_PTR)
#define DCP_KEY                                  DCP_KEY_REG(DCP_BASE_PTR)
#define DCP_KEYDATA                              DCP_KEYDATA_REG(DCP_BASE_PTR)
#define DCP_PACKET0                              DCP_PACKET0_REG(DCP_BASE_PTR)
#define DCP_PACKET1                              DCP_PACKET1_REG(DCP_BASE_PTR)
#define DCP_PACKET2                              DCP_PACKET2_REG(DCP_BASE_PTR)
#define DCP_PACKET3                              DCP_PACKET3_REG(DCP_BASE_PTR)
#define DCP_PACKET4                              DCP_PACKET4_REG(DCP_BASE_PTR)
#define DCP_PACKET5                              DCP_PACKET5_REG(DCP_BASE_PTR)
#define DCP_PACKET6                              DCP_PACKET6_REG(DCP_BASE_PTR)
#define DCP_CH0CMDPTR                            DCP_CH0CMDPTR_REG(DCP_BASE_PTR)
#define DCP_CH0SEMA                              DCP_CH0SEMA_REG(DCP_BASE_PTR)
#define DCP_CH0STAT                              DCP_CH0STAT_REG(DCP_BASE_PTR)
#define DCP_CH0OPTS                              DCP_CH0OPTS_REG(DCP_BASE_PTR)
#define DCP_CH1CMDPTR                            DCP_CH1CMDPTR_REG(DCP_BASE_PTR)
#define DCP_CH1SEMA                              DCP_CH1SEMA_REG(DCP_BASE_PTR)
#define DCP_CH1STAT                              DCP_CH1STAT_REG(DCP_BASE_PTR)
#define DCP_CH1OPTS                              DCP_CH1OPTS_REG(DCP_BASE_PTR)
#define DCP_CH2CMDPTR                            DCP_CH2CMDPTR_REG(DCP_BASE_PTR)
#define DCP_CH2SEMA                              DCP_CH2SEMA_REG(DCP_BASE_PTR)
#define DCP_CH2STAT                              DCP_CH2STAT_REG(DCP_BASE_PTR)
#define DCP_CH2OPTS                              DCP_CH2OPTS_REG(DCP_BASE_PTR)
#define DCP_CH3CMDPTR                            DCP_CH3CMDPTR_REG(DCP_BASE_PTR)
#define DCP_CH3SEMA                              DCP_CH3SEMA_REG(DCP_BASE_PTR)
#define DCP_CH3STAT                              DCP_CH3STAT_REG(DCP_BASE_PTR)
#define DCP_CH3OPTS                              DCP_CH3OPTS_REG(DCP_BASE_PTR)
#define DCP_DBGSELECT                            DCP_DBGSELECT_REG(DCP_BASE_PTR)
#define DCP_DBGDATA                              DCP_DBGDATA_REG(DCP_BASE_PTR)
#define DCP_PAGETABLE                            DCP_PAGETABLE_REG(DCP_BASE_PTR)
#define DCP_VERSION                              DCP_VERSION_REG(DCP_BASE_PTR)

/*!
 * @}
 */ /* end of group DCP_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DCP_Peripheral */


/* ----------------------------------------------------------------------------
   -- DMA
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMA_Peripheral DMA
 * @{
 */

/** DMA - Peripheral register structure */
typedef struct DMA_MemMap {
  uint32_t CR;                                     /**< Control Register, offset: 0x0 */
  uint32_t ES;                                     /**< Error Status Register, offset: 0x4 */
  uint8_t RESERVED_0[4];
  uint32_t ERQ;                                    /**< Enable Request Register, offset: 0xC */
  uint8_t RESERVED_1[4];
  uint32_t EEI;                                    /**< Enable Error Interrupt Register, offset: 0x14 */
  uint8_t CEEI;                                    /**< Clear Enable Error Interrupt Register, offset: 0x18 */
  uint8_t SEEI;                                    /**< Set Enable Error Interrupt Register, offset: 0x19 */
  uint8_t CERQ;                                    /**< Clear Enable Request Register, offset: 0x1A */
  uint8_t SERQ;                                    /**< Set Enable Request Register, offset: 0x1B */
  uint8_t CDNE;                                    /**< Clear DONE Status Bit Register, offset: 0x1C */
  uint8_t SSRT;                                    /**< Set START Bit Register, offset: 0x1D */
  uint8_t CERR;                                    /**< Clear Error Register, offset: 0x1E */
  uint8_t CINT;                                    /**< Clear Interrupt Request Register, offset: 0x1F */
  uint8_t RESERVED_2[4];
  uint32_t INT;                                    /**< Interrupt Request Register, offset: 0x24 */
  uint8_t RESERVED_3[4];
  uint32_t ERR;                                    /**< Error Register, offset: 0x2C */
  uint8_t RESERVED_4[4];
  uint32_t HRS;                                    /**< Hardware Request Status Register, offset: 0x34 */
  uint8_t RESERVED_5[12];
  uint32_t EARS;                                   /**< Enable Asynchronous Request in Stop Register, offset: 0x44 */
  uint8_t RESERVED_6[184];
  uint8_t DCHPRI3;                                 /**< Channel Priority Register, offset: 0x100 */
  uint8_t DCHPRI2;                                 /**< Channel Priority Register, offset: 0x101 */
  uint8_t DCHPRI1;                                 /**< Channel Priority Register, offset: 0x102 */
  uint8_t DCHPRI0;                                 /**< Channel Priority Register, offset: 0x103 */
  uint8_t DCHPRI7;                                 /**< Channel Priority Register, offset: 0x104 */
  uint8_t DCHPRI6;                                 /**< Channel Priority Register, offset: 0x105 */
  uint8_t DCHPRI5;                                 /**< Channel Priority Register, offset: 0x106 */
  uint8_t DCHPRI4;                                 /**< Channel Priority Register, offset: 0x107 */
  uint8_t DCHPRI11;                                /**< Channel Priority Register, offset: 0x108 */
  uint8_t DCHPRI10;                                /**< Channel Priority Register, offset: 0x109 */
  uint8_t DCHPRI9;                                 /**< Channel Priority Register, offset: 0x10A */
  uint8_t DCHPRI8;                                 /**< Channel Priority Register, offset: 0x10B */
  uint8_t DCHPRI15;                                /**< Channel Priority Register, offset: 0x10C */
  uint8_t DCHPRI14;                                /**< Channel Priority Register, offset: 0x10D */
  uint8_t DCHPRI13;                                /**< Channel Priority Register, offset: 0x10E */
  uint8_t DCHPRI12;                                /**< Channel Priority Register, offset: 0x10F */
  uint8_t DCHPRI19;                                /**< Channel Priority Register, offset: 0x110 */
  uint8_t DCHPRI18;                                /**< Channel Priority Register, offset: 0x111 */
  uint8_t DCHPRI17;                                /**< Channel Priority Register, offset: 0x112 */
  uint8_t DCHPRI16;                                /**< Channel Priority Register, offset: 0x113 */
  uint8_t DCHPRI23;                                /**< Channel Priority Register, offset: 0x114 */
  uint8_t DCHPRI22;                                /**< Channel Priority Register, offset: 0x115 */
  uint8_t DCHPRI21;                                /**< Channel Priority Register, offset: 0x116 */
  uint8_t DCHPRI20;                                /**< Channel Priority Register, offset: 0x117 */
  uint8_t DCHPRI27;                                /**< Channel Priority Register, offset: 0x118 */
  uint8_t DCHPRI26;                                /**< Channel Priority Register, offset: 0x119 */
  uint8_t DCHPRI25;                                /**< Channel Priority Register, offset: 0x11A */
  uint8_t DCHPRI24;                                /**< Channel Priority Register, offset: 0x11B */
  uint8_t DCHPRI31;                                /**< Channel Priority Register, offset: 0x11C */
  uint8_t DCHPRI30;                                /**< Channel Priority Register, offset: 0x11D */
  uint8_t DCHPRI29;                                /**< Channel Priority Register, offset: 0x11E */
  uint8_t DCHPRI28;                                /**< Channel Priority Register, offset: 0x11F */
  uint8_t RESERVED_7[32];
  uint8_t DCHMID[32];                              /**< Channel n Master ID Register, array offset: 0x140, array step: 0x1 */
  uint8_t RESERVED_8[3744];
  struct {                                         /* offset: 0x1000, array step: 0x20 */
    uint32_t SADDR;                                  /**< TCD Source Address, array offset: 0x1000, array step: 0x20 */
    uint16_t SOFF;                                   /**< TCD Signed Source Address Offset, array offset: 0x1004, array step: 0x20 */
    uint16_t ATTR;                                   /**< TCD Transfer Attributes, array offset: 0x1006, array step: 0x20 */
    union {                                          /* offset: 0x1008, array step: 0x20 */
      uint32_t NBYTES_MLNO;                            /**< TCD Minor Byte Count (Minor Loop Mapping Disabled), array offset: 0x1008, array step: 0x20 */
      uint32_t NBYTES_MLOFFNO;                         /**< TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled), array offset: 0x1008, array step: 0x20 */
      uint32_t NBYTES_MLOFFYES;                        /**< TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled), array offset: 0x1008, array step: 0x20 */
    };
    uint32_t SLAST;                                  /**< TCD Last Source Address Adjustment, array offset: 0x100C, array step: 0x20 */
    uint32_t DADDR;                                  /**< TCD Destination Address, array offset: 0x1010, array step: 0x20 */
    uint16_t DOFF;                                   /**< TCD Signed Destination Address Offset, array offset: 0x1014, array step: 0x20 */
    union {                                          /* offset: 0x1016, array step: 0x20 */
      uint16_t CITER_ELINKNO;                          /**< TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled), array offset: 0x1016, array step: 0x20 */
      uint16_t CITER_ELINKYES;                         /**< TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled), array offset: 0x1016, array step: 0x20 */
    };
    uint32_t DLAST_SGA;                              /**< TCD Last Destination Address Adjustment/Scatter Gather Address, array offset: 0x1018, array step: 0x20 */
    uint16_t CSR;                                    /**< TCD Control and Status, array offset: 0x101C, array step: 0x20 */
    union {                                          /* offset: 0x101E, array step: 0x20 */
      uint16_t BITER_ELINKNO;                          /**< TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled), array offset: 0x101E, array step: 0x20 */
      uint16_t BITER_ELINKYES;                         /**< TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled), array offset: 0x101E, array step: 0x20 */
    };
  } TCD[32];
} volatile *DMA_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DMA - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMA_Register_Accessor_Macros DMA - Register accessor macros
 * @{
 */


/* DMA - Register accessors */
#define DMA_CR_REG(base)                         ((base)->CR)
#define DMA_ES_REG(base)                         ((base)->ES)
#define DMA_ERQ_REG(base)                        ((base)->ERQ)
#define DMA_EEI_REG(base)                        ((base)->EEI)
#define DMA_CEEI_REG(base)                       ((base)->CEEI)
#define DMA_SEEI_REG(base)                       ((base)->SEEI)
#define DMA_CERQ_REG(base)                       ((base)->CERQ)
#define DMA_SERQ_REG(base)                       ((base)->SERQ)
#define DMA_CDNE_REG(base)                       ((base)->CDNE)
#define DMA_SSRT_REG(base)                       ((base)->SSRT)
#define DMA_CERR_REG(base)                       ((base)->CERR)
#define DMA_CINT_REG(base)                       ((base)->CINT)
#define DMA_INT_REG(base)                        ((base)->INT)
#define DMA_ERR_REG(base)                        ((base)->ERR)
#define DMA_HRS_REG(base)                        ((base)->HRS)
#define DMA_EARS_REG(base)                       ((base)->EARS)
#define DMA_DCHPRI3_REG(base)                    ((base)->DCHPRI3)
#define DMA_DCHPRI2_REG(base)                    ((base)->DCHPRI2)
#define DMA_DCHPRI1_REG(base)                    ((base)->DCHPRI1)
#define DMA_DCHPRI0_REG(base)                    ((base)->DCHPRI0)
#define DMA_DCHPRI7_REG(base)                    ((base)->DCHPRI7)
#define DMA_DCHPRI6_REG(base)                    ((base)->DCHPRI6)
#define DMA_DCHPRI5_REG(base)                    ((base)->DCHPRI5)
#define DMA_DCHPRI4_REG(base)                    ((base)->DCHPRI4)
#define DMA_DCHPRI11_REG(base)                   ((base)->DCHPRI11)
#define DMA_DCHPRI10_REG(base)                   ((base)->DCHPRI10)
#define DMA_DCHPRI9_REG(base)                    ((base)->DCHPRI9)
#define DMA_DCHPRI8_REG(base)                    ((base)->DCHPRI8)
#define DMA_DCHPRI15_REG(base)                   ((base)->DCHPRI15)
#define DMA_DCHPRI14_REG(base)                   ((base)->DCHPRI14)
#define DMA_DCHPRI13_REG(base)                   ((base)->DCHPRI13)
#define DMA_DCHPRI12_REG(base)                   ((base)->DCHPRI12)
#define DMA_DCHPRI19_REG(base)                   ((base)->DCHPRI19)
#define DMA_DCHPRI18_REG(base)                   ((base)->DCHPRI18)
#define DMA_DCHPRI17_REG(base)                   ((base)->DCHPRI17)
#define DMA_DCHPRI16_REG(base)                   ((base)->DCHPRI16)
#define DMA_DCHPRI23_REG(base)                   ((base)->DCHPRI23)
#define DMA_DCHPRI22_REG(base)                   ((base)->DCHPRI22)
#define DMA_DCHPRI21_REG(base)                   ((base)->DCHPRI21)
#define DMA_DCHPRI20_REG(base)                   ((base)->DCHPRI20)
#define DMA_DCHPRI27_REG(base)                   ((base)->DCHPRI27)
#define DMA_DCHPRI26_REG(base)                   ((base)->DCHPRI26)
#define DMA_DCHPRI25_REG(base)                   ((base)->DCHPRI25)
#define DMA_DCHPRI24_REG(base)                   ((base)->DCHPRI24)
#define DMA_DCHPRI31_REG(base)                   ((base)->DCHPRI31)
#define DMA_DCHPRI30_REG(base)                   ((base)->DCHPRI30)
#define DMA_DCHPRI29_REG(base)                   ((base)->DCHPRI29)
#define DMA_DCHPRI28_REG(base)                   ((base)->DCHPRI28)
#define DMA_DCHMID_REG(base,index)               ((base)->DCHMID[index])
#define DMA_SADDR_REG(base,index)                ((base)->TCD[index].SADDR)
#define DMA_SOFF_REG(base,index)                 ((base)->TCD[index].SOFF)
#define DMA_ATTR_REG(base,index)                 ((base)->TCD[index].ATTR)
#define DMA_NBYTES_MLNO_REG(base,index)          ((base)->TCD[index].NBYTES_MLNO)
#define DMA_NBYTES_MLOFFNO_REG(base,index)       ((base)->TCD[index].NBYTES_MLOFFNO)
#define DMA_NBYTES_MLOFFYES_REG(base,index)      ((base)->TCD[index].NBYTES_MLOFFYES)
#define DMA_SLAST_REG(base,index)                ((base)->TCD[index].SLAST)
#define DMA_DADDR_REG(base,index)                ((base)->TCD[index].DADDR)
#define DMA_DOFF_REG(base,index)                 ((base)->TCD[index].DOFF)
#define DMA_CITER_ELINKNO_REG(base,index)        ((base)->TCD[index].CITER_ELINKNO)
#define DMA_CITER_ELINKYES_REG(base,index)       ((base)->TCD[index].CITER_ELINKYES)
#define DMA_DLAST_SGA_REG(base,index)            ((base)->TCD[index].DLAST_SGA)
#define DMA_CSR_REG(base,index)                  ((base)->TCD[index].CSR)
#define DMA_BITER_ELINKNO_REG(base,index)        ((base)->TCD[index].BITER_ELINKNO)
#define DMA_BITER_ELINKYES_REG(base,index)       ((base)->TCD[index].BITER_ELINKYES)

/*!
 * @}
 */ /* end of group DMA_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DMA Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMA_Register_Masks DMA Register Masks
 * @{
 */

/*! @name CR - Control Register */
#define DMA_CR_EDBG_MASK                         (0x2U)
#define DMA_CR_EDBG_SHIFT                        (1U)
#define DMA_CR_ERCA_MASK                         (0x4U)
#define DMA_CR_ERCA_SHIFT                        (2U)
#define DMA_CR_ERGA_MASK                         (0x8U)
#define DMA_CR_ERGA_SHIFT                        (3U)
#define DMA_CR_HOE_MASK                          (0x10U)
#define DMA_CR_HOE_SHIFT                         (4U)
#define DMA_CR_HALT_MASK                         (0x20U)
#define DMA_CR_HALT_SHIFT                        (5U)
#define DMA_CR_CLM_MASK                          (0x40U)
#define DMA_CR_CLM_SHIFT                         (6U)
#define DMA_CR_EMLM_MASK                         (0x80U)
#define DMA_CR_EMLM_SHIFT                        (7U)
#define DMA_CR_GRP0PRI_MASK                      (0x100U)
#define DMA_CR_GRP0PRI_SHIFT                     (8U)
#define DMA_CR_GRP1PRI_MASK                      (0x400U)
#define DMA_CR_GRP1PRI_SHIFT                     (10U)
#define DMA_CR_ECX_MASK                          (0x10000U)
#define DMA_CR_ECX_SHIFT                         (16U)
#define DMA_CR_CX_MASK                           (0x20000U)
#define DMA_CR_CX_SHIFT                          (17U)
#define DMA_CR_ACTIVE_MASK                       (0x80000000U)
#define DMA_CR_ACTIVE_SHIFT                      (31U)

/*! @name ES - Error Status Register */
#define DMA_ES_DBE_MASK                          (0x1U)
#define DMA_ES_DBE_SHIFT                         (0U)
#define DMA_ES_SBE_MASK                          (0x2U)
#define DMA_ES_SBE_SHIFT                         (1U)
#define DMA_ES_SGE_MASK                          (0x4U)
#define DMA_ES_SGE_SHIFT                         (2U)
#define DMA_ES_NCE_MASK                          (0x8U)
#define DMA_ES_NCE_SHIFT                         (3U)
#define DMA_ES_DOE_MASK                          (0x10U)
#define DMA_ES_DOE_SHIFT                         (4U)
#define DMA_ES_DAE_MASK                          (0x20U)
#define DMA_ES_DAE_SHIFT                         (5U)
#define DMA_ES_SOE_MASK                          (0x40U)
#define DMA_ES_SOE_SHIFT                         (6U)
#define DMA_ES_SAE_MASK                          (0x80U)
#define DMA_ES_SAE_SHIFT                         (7U)
#define DMA_ES_ERRCHN_MASK                       (0x1F00U)
#define DMA_ES_ERRCHN_SHIFT                      (8U)
#define DMA_ES_ERRCHN(x)                         (((uint32_t)(((uint32_t)(x)) << DMA_ES_ERRCHN_SHIFT)) & DMA_ES_ERRCHN_MASK)
#define DMA_ES_CPE_MASK                          (0x4000U)
#define DMA_ES_CPE_SHIFT                         (14U)
#define DMA_ES_GPE_MASK                          (0x8000U)
#define DMA_ES_GPE_SHIFT                         (15U)
#define DMA_ES_ECX_MASK                          (0x10000U)
#define DMA_ES_ECX_SHIFT                         (16U)
#define DMA_ES_VLD_MASK                          (0x80000000U)
#define DMA_ES_VLD_SHIFT                         (31U)

/*! @name ERQ - Enable Request Register */
#define DMA_ERQ_ERQ0_MASK                        (0x1U)
#define DMA_ERQ_ERQ0_SHIFT                       (0U)
#define DMA_ERQ_ERQ1_MASK                        (0x2U)
#define DMA_ERQ_ERQ1_SHIFT                       (1U)
#define DMA_ERQ_ERQ2_MASK                        (0x4U)
#define DMA_ERQ_ERQ2_SHIFT                       (2U)
#define DMA_ERQ_ERQ3_MASK                        (0x8U)
#define DMA_ERQ_ERQ3_SHIFT                       (3U)
#define DMA_ERQ_ERQ4_MASK                        (0x10U)
#define DMA_ERQ_ERQ4_SHIFT                       (4U)
#define DMA_ERQ_ERQ5_MASK                        (0x20U)
#define DMA_ERQ_ERQ5_SHIFT                       (5U)
#define DMA_ERQ_ERQ6_MASK                        (0x40U)
#define DMA_ERQ_ERQ6_SHIFT                       (6U)
#define DMA_ERQ_ERQ7_MASK                        (0x80U)
#define DMA_ERQ_ERQ7_SHIFT                       (7U)
#define DMA_ERQ_ERQ8_MASK                        (0x100U)
#define DMA_ERQ_ERQ8_SHIFT                       (8U)
#define DMA_ERQ_ERQ9_MASK                        (0x200U)
#define DMA_ERQ_ERQ9_SHIFT                       (9U)
#define DMA_ERQ_ERQ10_MASK                       (0x400U)
#define DMA_ERQ_ERQ10_SHIFT                      (10U)
#define DMA_ERQ_ERQ11_MASK                       (0x800U)
#define DMA_ERQ_ERQ11_SHIFT                      (11U)
#define DMA_ERQ_ERQ12_MASK                       (0x1000U)
#define DMA_ERQ_ERQ12_SHIFT                      (12U)
#define DMA_ERQ_ERQ13_MASK                       (0x2000U)
#define DMA_ERQ_ERQ13_SHIFT                      (13U)
#define DMA_ERQ_ERQ14_MASK                       (0x4000U)
#define DMA_ERQ_ERQ14_SHIFT                      (14U)
#define DMA_ERQ_ERQ15_MASK                       (0x8000U)
#define DMA_ERQ_ERQ15_SHIFT                      (15U)
#define DMA_ERQ_ERQ16_MASK                       (0x10000U)
#define DMA_ERQ_ERQ16_SHIFT                      (16U)
#define DMA_ERQ_ERQ17_MASK                       (0x20000U)
#define DMA_ERQ_ERQ17_SHIFT                      (17U)
#define DMA_ERQ_ERQ18_MASK                       (0x40000U)
#define DMA_ERQ_ERQ18_SHIFT                      (18U)
#define DMA_ERQ_ERQ19_MASK                       (0x80000U)
#define DMA_ERQ_ERQ19_SHIFT                      (19U)
#define DMA_ERQ_ERQ20_MASK                       (0x100000U)
#define DMA_ERQ_ERQ20_SHIFT                      (20U)
#define DMA_ERQ_ERQ21_MASK                       (0x200000U)
#define DMA_ERQ_ERQ21_SHIFT                      (21U)
#define DMA_ERQ_ERQ22_MASK                       (0x400000U)
#define DMA_ERQ_ERQ22_SHIFT                      (22U)
#define DMA_ERQ_ERQ23_MASK                       (0x800000U)
#define DMA_ERQ_ERQ23_SHIFT                      (23U)
#define DMA_ERQ_ERQ24_MASK                       (0x1000000U)
#define DMA_ERQ_ERQ24_SHIFT                      (24U)
#define DMA_ERQ_ERQ25_MASK                       (0x2000000U)
#define DMA_ERQ_ERQ25_SHIFT                      (25U)
#define DMA_ERQ_ERQ26_MASK                       (0x4000000U)
#define DMA_ERQ_ERQ26_SHIFT                      (26U)
#define DMA_ERQ_ERQ27_MASK                       (0x8000000U)
#define DMA_ERQ_ERQ27_SHIFT                      (27U)
#define DMA_ERQ_ERQ28_MASK                       (0x10000000U)
#define DMA_ERQ_ERQ28_SHIFT                      (28U)
#define DMA_ERQ_ERQ29_MASK                       (0x20000000U)
#define DMA_ERQ_ERQ29_SHIFT                      (29U)
#define DMA_ERQ_ERQ30_MASK                       (0x40000000U)
#define DMA_ERQ_ERQ30_SHIFT                      (30U)
#define DMA_ERQ_ERQ31_MASK                       (0x80000000U)
#define DMA_ERQ_ERQ31_SHIFT                      (31U)

/*! @name EEI - Enable Error Interrupt Register */
#define DMA_EEI_EEI0_MASK                        (0x1U)
#define DMA_EEI_EEI0_SHIFT                       (0U)
#define DMA_EEI_EEI1_MASK                        (0x2U)
#define DMA_EEI_EEI1_SHIFT                       (1U)
#define DMA_EEI_EEI2_MASK                        (0x4U)
#define DMA_EEI_EEI2_SHIFT                       (2U)
#define DMA_EEI_EEI3_MASK                        (0x8U)
#define DMA_EEI_EEI3_SHIFT                       (3U)
#define DMA_EEI_EEI4_MASK                        (0x10U)
#define DMA_EEI_EEI4_SHIFT                       (4U)
#define DMA_EEI_EEI5_MASK                        (0x20U)
#define DMA_EEI_EEI5_SHIFT                       (5U)
#define DMA_EEI_EEI6_MASK                        (0x40U)
#define DMA_EEI_EEI6_SHIFT                       (6U)
#define DMA_EEI_EEI7_MASK                        (0x80U)
#define DMA_EEI_EEI7_SHIFT                       (7U)
#define DMA_EEI_EEI8_MASK                        (0x100U)
#define DMA_EEI_EEI8_SHIFT                       (8U)
#define DMA_EEI_EEI9_MASK                        (0x200U)
#define DMA_EEI_EEI9_SHIFT                       (9U)
#define DMA_EEI_EEI10_MASK                       (0x400U)
#define DMA_EEI_EEI10_SHIFT                      (10U)
#define DMA_EEI_EEI11_MASK                       (0x800U)
#define DMA_EEI_EEI11_SHIFT                      (11U)
#define DMA_EEI_EEI12_MASK                       (0x1000U)
#define DMA_EEI_EEI12_SHIFT                      (12U)
#define DMA_EEI_EEI13_MASK                       (0x2000U)
#define DMA_EEI_EEI13_SHIFT                      (13U)
#define DMA_EEI_EEI14_MASK                       (0x4000U)
#define DMA_EEI_EEI14_SHIFT                      (14U)
#define DMA_EEI_EEI15_MASK                       (0x8000U)
#define DMA_EEI_EEI15_SHIFT                      (15U)
#define DMA_EEI_EEI16_MASK                       (0x10000U)
#define DMA_EEI_EEI16_SHIFT                      (16U)
#define DMA_EEI_EEI17_MASK                       (0x20000U)
#define DMA_EEI_EEI17_SHIFT                      (17U)
#define DMA_EEI_EEI18_MASK                       (0x40000U)
#define DMA_EEI_EEI18_SHIFT                      (18U)
#define DMA_EEI_EEI19_MASK                       (0x80000U)
#define DMA_EEI_EEI19_SHIFT                      (19U)
#define DMA_EEI_EEI20_MASK                       (0x100000U)
#define DMA_EEI_EEI20_SHIFT                      (20U)
#define DMA_EEI_EEI21_MASK                       (0x200000U)
#define DMA_EEI_EEI21_SHIFT                      (21U)
#define DMA_EEI_EEI22_MASK                       (0x400000U)
#define DMA_EEI_EEI22_SHIFT                      (22U)
#define DMA_EEI_EEI23_MASK                       (0x800000U)
#define DMA_EEI_EEI23_SHIFT                      (23U)
#define DMA_EEI_EEI24_MASK                       (0x1000000U)
#define DMA_EEI_EEI24_SHIFT                      (24U)
#define DMA_EEI_EEI25_MASK                       (0x2000000U)
#define DMA_EEI_EEI25_SHIFT                      (25U)
#define DMA_EEI_EEI26_MASK                       (0x4000000U)
#define DMA_EEI_EEI26_SHIFT                      (26U)
#define DMA_EEI_EEI27_MASK                       (0x8000000U)
#define DMA_EEI_EEI27_SHIFT                      (27U)
#define DMA_EEI_EEI28_MASK                       (0x10000000U)
#define DMA_EEI_EEI28_SHIFT                      (28U)
#define DMA_EEI_EEI29_MASK                       (0x20000000U)
#define DMA_EEI_EEI29_SHIFT                      (29U)
#define DMA_EEI_EEI30_MASK                       (0x40000000U)
#define DMA_EEI_EEI30_SHIFT                      (30U)
#define DMA_EEI_EEI31_MASK                       (0x80000000U)
#define DMA_EEI_EEI31_SHIFT                      (31U)

/*! @name CEEI - Clear Enable Error Interrupt Register */
#define DMA_CEEI_CEEI_MASK                       (0x1FU)
#define DMA_CEEI_CEEI_SHIFT                      (0U)
#define DMA_CEEI_CEEI(x)                         (((uint8_t)(((uint8_t)(x)) << DMA_CEEI_CEEI_SHIFT)) & DMA_CEEI_CEEI_MASK)
#define DMA_CEEI_CAEE_MASK                       (0x40U)
#define DMA_CEEI_CAEE_SHIFT                      (6U)
#define DMA_CEEI_NOP_MASK                        (0x80U)
#define DMA_CEEI_NOP_SHIFT                       (7U)

/*! @name SEEI - Set Enable Error Interrupt Register */
#define DMA_SEEI_SEEI_MASK                       (0x1FU)
#define DMA_SEEI_SEEI_SHIFT                      (0U)
#define DMA_SEEI_SEEI(x)                         (((uint8_t)(((uint8_t)(x)) << DMA_SEEI_SEEI_SHIFT)) & DMA_SEEI_SEEI_MASK)
#define DMA_SEEI_SAEE_MASK                       (0x40U)
#define DMA_SEEI_SAEE_SHIFT                      (6U)
#define DMA_SEEI_NOP_MASK                        (0x80U)
#define DMA_SEEI_NOP_SHIFT                       (7U)

/*! @name CERQ - Clear Enable Request Register */
#define DMA_CERQ_CERQ_MASK                       (0x1FU)
#define DMA_CERQ_CERQ_SHIFT                      (0U)
#define DMA_CERQ_CERQ(x)                         (((uint8_t)(((uint8_t)(x)) << DMA_CERQ_CERQ_SHIFT)) & DMA_CERQ_CERQ_MASK)
#define DMA_CERQ_CAER_MASK                       (0x40U)
#define DMA_CERQ_CAER_SHIFT                      (6U)
#define DMA_CERQ_NOP_MASK                        (0x80U)
#define DMA_CERQ_NOP_SHIFT                       (7U)

/*! @name SERQ - Set Enable Request Register */
#define DMA_SERQ_SERQ_MASK                       (0x1FU)
#define DMA_SERQ_SERQ_SHIFT                      (0U)
#define DMA_SERQ_SERQ(x)                         (((uint8_t)(((uint8_t)(x)) << DMA_SERQ_SERQ_SHIFT)) & DMA_SERQ_SERQ_MASK)
#define DMA_SERQ_SAER_MASK                       (0x40U)
#define DMA_SERQ_SAER_SHIFT                      (6U)
#define DMA_SERQ_NOP_MASK                        (0x80U)
#define DMA_SERQ_NOP_SHIFT                       (7U)

/*! @name CDNE - Clear DONE Status Bit Register */
#define DMA_CDNE_CDNE_MASK                       (0x1FU)
#define DMA_CDNE_CDNE_SHIFT                      (0U)
#define DMA_CDNE_CDNE(x)                         (((uint8_t)(((uint8_t)(x)) << DMA_CDNE_CDNE_SHIFT)) & DMA_CDNE_CDNE_MASK)
#define DMA_CDNE_CADN_MASK                       (0x40U)
#define DMA_CDNE_CADN_SHIFT                      (6U)
#define DMA_CDNE_NOP_MASK                        (0x80U)
#define DMA_CDNE_NOP_SHIFT                       (7U)

/*! @name SSRT - Set START Bit Register */
#define DMA_SSRT_SSRT_MASK                       (0x1FU)
#define DMA_SSRT_SSRT_SHIFT                      (0U)
#define DMA_SSRT_SSRT(x)                         (((uint8_t)(((uint8_t)(x)) << DMA_SSRT_SSRT_SHIFT)) & DMA_SSRT_SSRT_MASK)
#define DMA_SSRT_SAST_MASK                       (0x40U)
#define DMA_SSRT_SAST_SHIFT                      (6U)
#define DMA_SSRT_NOP_MASK                        (0x80U)
#define DMA_SSRT_NOP_SHIFT                       (7U)

/*! @name CERR - Clear Error Register */
#define DMA_CERR_CERR_MASK                       (0x1FU)
#define DMA_CERR_CERR_SHIFT                      (0U)
#define DMA_CERR_CERR(x)                         (((uint8_t)(((uint8_t)(x)) << DMA_CERR_CERR_SHIFT)) & DMA_CERR_CERR_MASK)
#define DMA_CERR_CAEI_MASK                       (0x40U)
#define DMA_CERR_CAEI_SHIFT                      (6U)
#define DMA_CERR_NOP_MASK                        (0x80U)
#define DMA_CERR_NOP_SHIFT                       (7U)

/*! @name CINT - Clear Interrupt Request Register */
#define DMA_CINT_CINT_MASK                       (0x1FU)
#define DMA_CINT_CINT_SHIFT                      (0U)
#define DMA_CINT_CINT(x)                         (((uint8_t)(((uint8_t)(x)) << DMA_CINT_CINT_SHIFT)) & DMA_CINT_CINT_MASK)
#define DMA_CINT_CAIR_MASK                       (0x40U)
#define DMA_CINT_CAIR_SHIFT                      (6U)
#define DMA_CINT_NOP_MASK                        (0x80U)
#define DMA_CINT_NOP_SHIFT                       (7U)

/*! @name INT - Interrupt Request Register */
#define DMA_INT_INT0_MASK                        (0x1U)
#define DMA_INT_INT0_SHIFT                       (0U)
#define DMA_INT_INT1_MASK                        (0x2U)
#define DMA_INT_INT1_SHIFT                       (1U)
#define DMA_INT_INT2_MASK                        (0x4U)
#define DMA_INT_INT2_SHIFT                       (2U)
#define DMA_INT_INT3_MASK                        (0x8U)
#define DMA_INT_INT3_SHIFT                       (3U)
#define DMA_INT_INT4_MASK                        (0x10U)
#define DMA_INT_INT4_SHIFT                       (4U)
#define DMA_INT_INT5_MASK                        (0x20U)
#define DMA_INT_INT5_SHIFT                       (5U)
#define DMA_INT_INT6_MASK                        (0x40U)
#define DMA_INT_INT6_SHIFT                       (6U)
#define DMA_INT_INT7_MASK                        (0x80U)
#define DMA_INT_INT7_SHIFT                       (7U)
#define DMA_INT_INT8_MASK                        (0x100U)
#define DMA_INT_INT8_SHIFT                       (8U)
#define DMA_INT_INT9_MASK                        (0x200U)
#define DMA_INT_INT9_SHIFT                       (9U)
#define DMA_INT_INT10_MASK                       (0x400U)
#define DMA_INT_INT10_SHIFT                      (10U)
#define DMA_INT_INT11_MASK                       (0x800U)
#define DMA_INT_INT11_SHIFT                      (11U)
#define DMA_INT_INT12_MASK                       (0x1000U)
#define DMA_INT_INT12_SHIFT                      (12U)
#define DMA_INT_INT13_MASK                       (0x2000U)
#define DMA_INT_INT13_SHIFT                      (13U)
#define DMA_INT_INT14_MASK                       (0x4000U)
#define DMA_INT_INT14_SHIFT                      (14U)
#define DMA_INT_INT15_MASK                       (0x8000U)
#define DMA_INT_INT15_SHIFT                      (15U)
#define DMA_INT_INT16_MASK                       (0x10000U)
#define DMA_INT_INT16_SHIFT                      (16U)
#define DMA_INT_INT17_MASK                       (0x20000U)
#define DMA_INT_INT17_SHIFT                      (17U)
#define DMA_INT_INT18_MASK                       (0x40000U)
#define DMA_INT_INT18_SHIFT                      (18U)
#define DMA_INT_INT19_MASK                       (0x80000U)
#define DMA_INT_INT19_SHIFT                      (19U)
#define DMA_INT_INT20_MASK                       (0x100000U)
#define DMA_INT_INT20_SHIFT                      (20U)
#define DMA_INT_INT21_MASK                       (0x200000U)
#define DMA_INT_INT21_SHIFT                      (21U)
#define DMA_INT_INT22_MASK                       (0x400000U)
#define DMA_INT_INT22_SHIFT                      (22U)
#define DMA_INT_INT23_MASK                       (0x800000U)
#define DMA_INT_INT23_SHIFT                      (23U)
#define DMA_INT_INT24_MASK                       (0x1000000U)
#define DMA_INT_INT24_SHIFT                      (24U)
#define DMA_INT_INT25_MASK                       (0x2000000U)
#define DMA_INT_INT25_SHIFT                      (25U)
#define DMA_INT_INT26_MASK                       (0x4000000U)
#define DMA_INT_INT26_SHIFT                      (26U)
#define DMA_INT_INT27_MASK                       (0x8000000U)
#define DMA_INT_INT27_SHIFT                      (27U)
#define DMA_INT_INT28_MASK                       (0x10000000U)
#define DMA_INT_INT28_SHIFT                      (28U)
#define DMA_INT_INT29_MASK                       (0x20000000U)
#define DMA_INT_INT29_SHIFT                      (29U)
#define DMA_INT_INT30_MASK                       (0x40000000U)
#define DMA_INT_INT30_SHIFT                      (30U)
#define DMA_INT_INT31_MASK                       (0x80000000U)
#define DMA_INT_INT31_SHIFT                      (31U)

/*! @name ERR - Error Register */
#define DMA_ERR_ERR0_MASK                        (0x1U)
#define DMA_ERR_ERR0_SHIFT                       (0U)
#define DMA_ERR_ERR1_MASK                        (0x2U)
#define DMA_ERR_ERR1_SHIFT                       (1U)
#define DMA_ERR_ERR2_MASK                        (0x4U)
#define DMA_ERR_ERR2_SHIFT                       (2U)
#define DMA_ERR_ERR3_MASK                        (0x8U)
#define DMA_ERR_ERR3_SHIFT                       (3U)
#define DMA_ERR_ERR4_MASK                        (0x10U)
#define DMA_ERR_ERR4_SHIFT                       (4U)
#define DMA_ERR_ERR5_MASK                        (0x20U)
#define DMA_ERR_ERR5_SHIFT                       (5U)
#define DMA_ERR_ERR6_MASK                        (0x40U)
#define DMA_ERR_ERR6_SHIFT                       (6U)
#define DMA_ERR_ERR7_MASK                        (0x80U)
#define DMA_ERR_ERR7_SHIFT                       (7U)
#define DMA_ERR_ERR8_MASK                        (0x100U)
#define DMA_ERR_ERR8_SHIFT                       (8U)
#define DMA_ERR_ERR9_MASK                        (0x200U)
#define DMA_ERR_ERR9_SHIFT                       (9U)
#define DMA_ERR_ERR10_MASK                       (0x400U)
#define DMA_ERR_ERR10_SHIFT                      (10U)
#define DMA_ERR_ERR11_MASK                       (0x800U)
#define DMA_ERR_ERR11_SHIFT                      (11U)
#define DMA_ERR_ERR12_MASK                       (0x1000U)
#define DMA_ERR_ERR12_SHIFT                      (12U)
#define DMA_ERR_ERR13_MASK                       (0x2000U)
#define DMA_ERR_ERR13_SHIFT                      (13U)
#define DMA_ERR_ERR14_MASK                       (0x4000U)
#define DMA_ERR_ERR14_SHIFT                      (14U)
#define DMA_ERR_ERR15_MASK                       (0x8000U)
#define DMA_ERR_ERR15_SHIFT                      (15U)
#define DMA_ERR_ERR16_MASK                       (0x10000U)
#define DMA_ERR_ERR16_SHIFT                      (16U)
#define DMA_ERR_ERR17_MASK                       (0x20000U)
#define DMA_ERR_ERR17_SHIFT                      (17U)
#define DMA_ERR_ERR18_MASK                       (0x40000U)
#define DMA_ERR_ERR18_SHIFT                      (18U)
#define DMA_ERR_ERR19_MASK                       (0x80000U)
#define DMA_ERR_ERR19_SHIFT                      (19U)
#define DMA_ERR_ERR20_MASK                       (0x100000U)
#define DMA_ERR_ERR20_SHIFT                      (20U)
#define DMA_ERR_ERR21_MASK                       (0x200000U)
#define DMA_ERR_ERR21_SHIFT                      (21U)
#define DMA_ERR_ERR22_MASK                       (0x400000U)
#define DMA_ERR_ERR22_SHIFT                      (22U)
#define DMA_ERR_ERR23_MASK                       (0x800000U)
#define DMA_ERR_ERR23_SHIFT                      (23U)
#define DMA_ERR_ERR24_MASK                       (0x1000000U)
#define DMA_ERR_ERR24_SHIFT                      (24U)
#define DMA_ERR_ERR25_MASK                       (0x2000000U)
#define DMA_ERR_ERR25_SHIFT                      (25U)
#define DMA_ERR_ERR26_MASK                       (0x4000000U)
#define DMA_ERR_ERR26_SHIFT                      (26U)
#define DMA_ERR_ERR27_MASK                       (0x8000000U)
#define DMA_ERR_ERR27_SHIFT                      (27U)
#define DMA_ERR_ERR28_MASK                       (0x10000000U)
#define DMA_ERR_ERR28_SHIFT                      (28U)
#define DMA_ERR_ERR29_MASK                       (0x20000000U)
#define DMA_ERR_ERR29_SHIFT                      (29U)
#define DMA_ERR_ERR30_MASK                       (0x40000000U)
#define DMA_ERR_ERR30_SHIFT                      (30U)
#define DMA_ERR_ERR31_MASK                       (0x80000000U)
#define DMA_ERR_ERR31_SHIFT                      (31U)

/*! @name HRS - Hardware Request Status Register */
#define DMA_HRS_HRS0_MASK                        (0x1U)
#define DMA_HRS_HRS0_SHIFT                       (0U)
#define DMA_HRS_HRS1_MASK                        (0x2U)
#define DMA_HRS_HRS1_SHIFT                       (1U)
#define DMA_HRS_HRS2_MASK                        (0x4U)
#define DMA_HRS_HRS2_SHIFT                       (2U)
#define DMA_HRS_HRS3_MASK                        (0x8U)
#define DMA_HRS_HRS3_SHIFT                       (3U)
#define DMA_HRS_HRS4_MASK                        (0x10U)
#define DMA_HRS_HRS4_SHIFT                       (4U)
#define DMA_HRS_HRS5_MASK                        (0x20U)
#define DMA_HRS_HRS5_SHIFT                       (5U)
#define DMA_HRS_HRS6_MASK                        (0x40U)
#define DMA_HRS_HRS6_SHIFT                       (6U)
#define DMA_HRS_HRS7_MASK                        (0x80U)
#define DMA_HRS_HRS7_SHIFT                       (7U)
#define DMA_HRS_HRS8_MASK                        (0x100U)
#define DMA_HRS_HRS8_SHIFT                       (8U)
#define DMA_HRS_HRS9_MASK                        (0x200U)
#define DMA_HRS_HRS9_SHIFT                       (9U)
#define DMA_HRS_HRS10_MASK                       (0x400U)
#define DMA_HRS_HRS10_SHIFT                      (10U)
#define DMA_HRS_HRS11_MASK                       (0x800U)
#define DMA_HRS_HRS11_SHIFT                      (11U)
#define DMA_HRS_HRS12_MASK                       (0x1000U)
#define DMA_HRS_HRS12_SHIFT                      (12U)
#define DMA_HRS_HRS13_MASK                       (0x2000U)
#define DMA_HRS_HRS13_SHIFT                      (13U)
#define DMA_HRS_HRS14_MASK                       (0x4000U)
#define DMA_HRS_HRS14_SHIFT                      (14U)
#define DMA_HRS_HRS15_MASK                       (0x8000U)
#define DMA_HRS_HRS15_SHIFT                      (15U)
#define DMA_HRS_HRS16_MASK                       (0x10000U)
#define DMA_HRS_HRS16_SHIFT                      (16U)
#define DMA_HRS_HRS17_MASK                       (0x20000U)
#define DMA_HRS_HRS17_SHIFT                      (17U)
#define DMA_HRS_HRS18_MASK                       (0x40000U)
#define DMA_HRS_HRS18_SHIFT                      (18U)
#define DMA_HRS_HRS19_MASK                       (0x80000U)
#define DMA_HRS_HRS19_SHIFT                      (19U)
#define DMA_HRS_HRS20_MASK                       (0x100000U)
#define DMA_HRS_HRS20_SHIFT                      (20U)
#define DMA_HRS_HRS21_MASK                       (0x200000U)
#define DMA_HRS_HRS21_SHIFT                      (21U)
#define DMA_HRS_HRS22_MASK                       (0x400000U)
#define DMA_HRS_HRS22_SHIFT                      (22U)
#define DMA_HRS_HRS23_MASK                       (0x800000U)
#define DMA_HRS_HRS23_SHIFT                      (23U)
#define DMA_HRS_HRS24_MASK                       (0x1000000U)
#define DMA_HRS_HRS24_SHIFT                      (24U)
#define DMA_HRS_HRS25_MASK                       (0x2000000U)
#define DMA_HRS_HRS25_SHIFT                      (25U)
#define DMA_HRS_HRS26_MASK                       (0x4000000U)
#define DMA_HRS_HRS26_SHIFT                      (26U)
#define DMA_HRS_HRS27_MASK                       (0x8000000U)
#define DMA_HRS_HRS27_SHIFT                      (27U)
#define DMA_HRS_HRS28_MASK                       (0x10000000U)
#define DMA_HRS_HRS28_SHIFT                      (28U)
#define DMA_HRS_HRS29_MASK                       (0x20000000U)
#define DMA_HRS_HRS29_SHIFT                      (29U)
#define DMA_HRS_HRS30_MASK                       (0x40000000U)
#define DMA_HRS_HRS30_SHIFT                      (30U)
#define DMA_HRS_HRS31_MASK                       (0x80000000U)
#define DMA_HRS_HRS31_SHIFT                      (31U)

/*! @name EARS - Enable Asynchronous Request in Stop Register */
#define DMA_EARS_EDREQ_0_MASK                    (0x1U)
#define DMA_EARS_EDREQ_0_SHIFT                   (0U)
#define DMA_EARS_EDREQ_1_MASK                    (0x2U)
#define DMA_EARS_EDREQ_1_SHIFT                   (1U)
#define DMA_EARS_EDREQ_2_MASK                    (0x4U)
#define DMA_EARS_EDREQ_2_SHIFT                   (2U)
#define DMA_EARS_EDREQ_3_MASK                    (0x8U)
#define DMA_EARS_EDREQ_3_SHIFT                   (3U)
#define DMA_EARS_EDREQ_4_MASK                    (0x10U)
#define DMA_EARS_EDREQ_4_SHIFT                   (4U)
#define DMA_EARS_EDREQ_5_MASK                    (0x20U)
#define DMA_EARS_EDREQ_5_SHIFT                   (5U)
#define DMA_EARS_EDREQ_6_MASK                    (0x40U)
#define DMA_EARS_EDREQ_6_SHIFT                   (6U)
#define DMA_EARS_EDREQ_7_MASK                    (0x80U)
#define DMA_EARS_EDREQ_7_SHIFT                   (7U)
#define DMA_EARS_EDREQ_8_MASK                    (0x100U)
#define DMA_EARS_EDREQ_8_SHIFT                   (8U)
#define DMA_EARS_EDREQ_9_MASK                    (0x200U)
#define DMA_EARS_EDREQ_9_SHIFT                   (9U)
#define DMA_EARS_EDREQ_10_MASK                   (0x400U)
#define DMA_EARS_EDREQ_10_SHIFT                  (10U)
#define DMA_EARS_EDREQ_11_MASK                   (0x800U)
#define DMA_EARS_EDREQ_11_SHIFT                  (11U)
#define DMA_EARS_EDREQ_12_MASK                   (0x1000U)
#define DMA_EARS_EDREQ_12_SHIFT                  (12U)
#define DMA_EARS_EDREQ_13_MASK                   (0x2000U)
#define DMA_EARS_EDREQ_13_SHIFT                  (13U)
#define DMA_EARS_EDREQ_14_MASK                   (0x4000U)
#define DMA_EARS_EDREQ_14_SHIFT                  (14U)
#define DMA_EARS_EDREQ_15_MASK                   (0x8000U)
#define DMA_EARS_EDREQ_15_SHIFT                  (15U)
#define DMA_EARS_EDREQ_16_MASK                   (0x10000U)
#define DMA_EARS_EDREQ_16_SHIFT                  (16U)
#define DMA_EARS_EDREQ_17_MASK                   (0x20000U)
#define DMA_EARS_EDREQ_17_SHIFT                  (17U)
#define DMA_EARS_EDREQ_18_MASK                   (0x40000U)
#define DMA_EARS_EDREQ_18_SHIFT                  (18U)
#define DMA_EARS_EDREQ_19_MASK                   (0x80000U)
#define DMA_EARS_EDREQ_19_SHIFT                  (19U)
#define DMA_EARS_EDREQ_20_MASK                   (0x100000U)
#define DMA_EARS_EDREQ_20_SHIFT                  (20U)
#define DMA_EARS_EDREQ_21_MASK                   (0x200000U)
#define DMA_EARS_EDREQ_21_SHIFT                  (21U)
#define DMA_EARS_EDREQ_22_MASK                   (0x400000U)
#define DMA_EARS_EDREQ_22_SHIFT                  (22U)
#define DMA_EARS_EDREQ_23_MASK                   (0x800000U)
#define DMA_EARS_EDREQ_23_SHIFT                  (23U)
#define DMA_EARS_EDREQ_24_MASK                   (0x1000000U)
#define DMA_EARS_EDREQ_24_SHIFT                  (24U)
#define DMA_EARS_EDREQ_25_MASK                   (0x2000000U)
#define DMA_EARS_EDREQ_25_SHIFT                  (25U)
#define DMA_EARS_EDREQ_26_MASK                   (0x4000000U)
#define DMA_EARS_EDREQ_26_SHIFT                  (26U)
#define DMA_EARS_EDREQ_27_MASK                   (0x8000000U)
#define DMA_EARS_EDREQ_27_SHIFT                  (27U)
#define DMA_EARS_EDREQ_28_MASK                   (0x10000000U)
#define DMA_EARS_EDREQ_28_SHIFT                  (28U)
#define DMA_EARS_EDREQ_29_MASK                   (0x20000000U)
#define DMA_EARS_EDREQ_29_SHIFT                  (29U)
#define DMA_EARS_EDREQ_30_MASK                   (0x40000000U)
#define DMA_EARS_EDREQ_30_SHIFT                  (30U)
#define DMA_EARS_EDREQ_31_MASK                   (0x80000000U)
#define DMA_EARS_EDREQ_31_SHIFT                  (31U)

/*! @name DCHPRI3 - Channel Priority Register */
#define DMA_DCHPRI3_CHPRI_MASK                   (0xFU)
#define DMA_DCHPRI3_CHPRI_SHIFT                  (0U)
#define DMA_DCHPRI3_CHPRI(x)                     (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI3_CHPRI_SHIFT)) & DMA_DCHPRI3_CHPRI_MASK)
#define DMA_DCHPRI3_GRPPRI_MASK                  (0x30U)
#define DMA_DCHPRI3_GRPPRI_SHIFT                 (4U)
#define DMA_DCHPRI3_GRPPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI3_GRPPRI_SHIFT)) & DMA_DCHPRI3_GRPPRI_MASK)
#define DMA_DCHPRI3_DPA_MASK                     (0x40U)
#define DMA_DCHPRI3_DPA_SHIFT                    (6U)
#define DMA_DCHPRI3_ECP_MASK                     (0x80U)
#define DMA_DCHPRI3_ECP_SHIFT                    (7U)

/*! @name DCHPRI2 - Channel Priority Register */
#define DMA_DCHPRI2_CHPRI_MASK                   (0xFU)
#define DMA_DCHPRI2_CHPRI_SHIFT                  (0U)
#define DMA_DCHPRI2_CHPRI(x)                     (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI2_CHPRI_SHIFT)) & DMA_DCHPRI2_CHPRI_MASK)
#define DMA_DCHPRI2_GRPPRI_MASK                  (0x30U)
#define DMA_DCHPRI2_GRPPRI_SHIFT                 (4U)
#define DMA_DCHPRI2_GRPPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI2_GRPPRI_SHIFT)) & DMA_DCHPRI2_GRPPRI_MASK)
#define DMA_DCHPRI2_DPA_MASK                     (0x40U)
#define DMA_DCHPRI2_DPA_SHIFT                    (6U)
#define DMA_DCHPRI2_ECP_MASK                     (0x80U)
#define DMA_DCHPRI2_ECP_SHIFT                    (7U)

/*! @name DCHPRI1 - Channel Priority Register */
#define DMA_DCHPRI1_CHPRI_MASK                   (0xFU)
#define DMA_DCHPRI1_CHPRI_SHIFT                  (0U)
#define DMA_DCHPRI1_CHPRI(x)                     (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI1_CHPRI_SHIFT)) & DMA_DCHPRI1_CHPRI_MASK)
#define DMA_DCHPRI1_GRPPRI_MASK                  (0x30U)
#define DMA_DCHPRI1_GRPPRI_SHIFT                 (4U)
#define DMA_DCHPRI1_GRPPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI1_GRPPRI_SHIFT)) & DMA_DCHPRI1_GRPPRI_MASK)
#define DMA_DCHPRI1_DPA_MASK                     (0x40U)
#define DMA_DCHPRI1_DPA_SHIFT                    (6U)
#define DMA_DCHPRI1_ECP_MASK                     (0x80U)
#define DMA_DCHPRI1_ECP_SHIFT                    (7U)

/*! @name DCHPRI0 - Channel Priority Register */
#define DMA_DCHPRI0_CHPRI_MASK                   (0xFU)
#define DMA_DCHPRI0_CHPRI_SHIFT                  (0U)
#define DMA_DCHPRI0_CHPRI(x)                     (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI0_CHPRI_SHIFT)) & DMA_DCHPRI0_CHPRI_MASK)
#define DMA_DCHPRI0_GRPPRI_MASK                  (0x30U)
#define DMA_DCHPRI0_GRPPRI_SHIFT                 (4U)
#define DMA_DCHPRI0_GRPPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI0_GRPPRI_SHIFT)) & DMA_DCHPRI0_GRPPRI_MASK)
#define DMA_DCHPRI0_DPA_MASK                     (0x40U)
#define DMA_DCHPRI0_DPA_SHIFT                    (6U)
#define DMA_DCHPRI0_ECP_MASK                     (0x80U)
#define DMA_DCHPRI0_ECP_SHIFT                    (7U)

/*! @name DCHPRI7 - Channel Priority Register */
#define DMA_DCHPRI7_CHPRI_MASK                   (0xFU)
#define DMA_DCHPRI7_CHPRI_SHIFT                  (0U)
#define DMA_DCHPRI7_CHPRI(x)                     (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI7_CHPRI_SHIFT)) & DMA_DCHPRI7_CHPRI_MASK)
#define DMA_DCHPRI7_GRPPRI_MASK                  (0x30U)
#define DMA_DCHPRI7_GRPPRI_SHIFT                 (4U)
#define DMA_DCHPRI7_GRPPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI7_GRPPRI_SHIFT)) & DMA_DCHPRI7_GRPPRI_MASK)
#define DMA_DCHPRI7_DPA_MASK                     (0x40U)
#define DMA_DCHPRI7_DPA_SHIFT                    (6U)
#define DMA_DCHPRI7_ECP_MASK                     (0x80U)
#define DMA_DCHPRI7_ECP_SHIFT                    (7U)

/*! @name DCHPRI6 - Channel Priority Register */
#define DMA_DCHPRI6_CHPRI_MASK                   (0xFU)
#define DMA_DCHPRI6_CHPRI_SHIFT                  (0U)
#define DMA_DCHPRI6_CHPRI(x)                     (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI6_CHPRI_SHIFT)) & DMA_DCHPRI6_CHPRI_MASK)
#define DMA_DCHPRI6_GRPPRI_MASK                  (0x30U)
#define DMA_DCHPRI6_GRPPRI_SHIFT                 (4U)
#define DMA_DCHPRI6_GRPPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI6_GRPPRI_SHIFT)) & DMA_DCHPRI6_GRPPRI_MASK)
#define DMA_DCHPRI6_DPA_MASK                     (0x40U)
#define DMA_DCHPRI6_DPA_SHIFT                    (6U)
#define DMA_DCHPRI6_ECP_MASK                     (0x80U)
#define DMA_DCHPRI6_ECP_SHIFT                    (7U)

/*! @name DCHPRI5 - Channel Priority Register */
#define DMA_DCHPRI5_CHPRI_MASK                   (0xFU)
#define DMA_DCHPRI5_CHPRI_SHIFT                  (0U)
#define DMA_DCHPRI5_CHPRI(x)                     (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI5_CHPRI_SHIFT)) & DMA_DCHPRI5_CHPRI_MASK)
#define DMA_DCHPRI5_GRPPRI_MASK                  (0x30U)
#define DMA_DCHPRI5_GRPPRI_SHIFT                 (4U)
#define DMA_DCHPRI5_GRPPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI5_GRPPRI_SHIFT)) & DMA_DCHPRI5_GRPPRI_MASK)
#define DMA_DCHPRI5_DPA_MASK                     (0x40U)
#define DMA_DCHPRI5_DPA_SHIFT                    (6U)
#define DMA_DCHPRI5_ECP_MASK                     (0x80U)
#define DMA_DCHPRI5_ECP_SHIFT                    (7U)

/*! @name DCHPRI4 - Channel Priority Register */
#define DMA_DCHPRI4_CHPRI_MASK                   (0xFU)
#define DMA_DCHPRI4_CHPRI_SHIFT                  (0U)
#define DMA_DCHPRI4_CHPRI(x)                     (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI4_CHPRI_SHIFT)) & DMA_DCHPRI4_CHPRI_MASK)
#define DMA_DCHPRI4_GRPPRI_MASK                  (0x30U)
#define DMA_DCHPRI4_GRPPRI_SHIFT                 (4U)
#define DMA_DCHPRI4_GRPPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI4_GRPPRI_SHIFT)) & DMA_DCHPRI4_GRPPRI_MASK)
#define DMA_DCHPRI4_DPA_MASK                     (0x40U)
#define DMA_DCHPRI4_DPA_SHIFT                    (6U)
#define DMA_DCHPRI4_ECP_MASK                     (0x80U)
#define DMA_DCHPRI4_ECP_SHIFT                    (7U)

/*! @name DCHPRI11 - Channel Priority Register */
#define DMA_DCHPRI11_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI11_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI11_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI11_CHPRI_SHIFT)) & DMA_DCHPRI11_CHPRI_MASK)
#define DMA_DCHPRI11_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI11_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI11_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI11_GRPPRI_SHIFT)) & DMA_DCHPRI11_GRPPRI_MASK)
#define DMA_DCHPRI11_DPA_MASK                    (0x40U)
#define DMA_DCHPRI11_DPA_SHIFT                   (6U)
#define DMA_DCHPRI11_ECP_MASK                    (0x80U)
#define DMA_DCHPRI11_ECP_SHIFT                   (7U)

/*! @name DCHPRI10 - Channel Priority Register */
#define DMA_DCHPRI10_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI10_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI10_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI10_CHPRI_SHIFT)) & DMA_DCHPRI10_CHPRI_MASK)
#define DMA_DCHPRI10_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI10_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI10_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI10_GRPPRI_SHIFT)) & DMA_DCHPRI10_GRPPRI_MASK)
#define DMA_DCHPRI10_DPA_MASK                    (0x40U)
#define DMA_DCHPRI10_DPA_SHIFT                   (6U)
#define DMA_DCHPRI10_ECP_MASK                    (0x80U)
#define DMA_DCHPRI10_ECP_SHIFT                   (7U)

/*! @name DCHPRI9 - Channel Priority Register */
#define DMA_DCHPRI9_CHPRI_MASK                   (0xFU)
#define DMA_DCHPRI9_CHPRI_SHIFT                  (0U)
#define DMA_DCHPRI9_CHPRI(x)                     (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI9_CHPRI_SHIFT)) & DMA_DCHPRI9_CHPRI_MASK)
#define DMA_DCHPRI9_GRPPRI_MASK                  (0x30U)
#define DMA_DCHPRI9_GRPPRI_SHIFT                 (4U)
#define DMA_DCHPRI9_GRPPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI9_GRPPRI_SHIFT)) & DMA_DCHPRI9_GRPPRI_MASK)
#define DMA_DCHPRI9_DPA_MASK                     (0x40U)
#define DMA_DCHPRI9_DPA_SHIFT                    (6U)
#define DMA_DCHPRI9_ECP_MASK                     (0x80U)
#define DMA_DCHPRI9_ECP_SHIFT                    (7U)

/*! @name DCHPRI8 - Channel Priority Register */
#define DMA_DCHPRI8_CHPRI_MASK                   (0xFU)
#define DMA_DCHPRI8_CHPRI_SHIFT                  (0U)
#define DMA_DCHPRI8_CHPRI(x)                     (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI8_CHPRI_SHIFT)) & DMA_DCHPRI8_CHPRI_MASK)
#define DMA_DCHPRI8_GRPPRI_MASK                  (0x30U)
#define DMA_DCHPRI8_GRPPRI_SHIFT                 (4U)
#define DMA_DCHPRI8_GRPPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI8_GRPPRI_SHIFT)) & DMA_DCHPRI8_GRPPRI_MASK)
#define DMA_DCHPRI8_DPA_MASK                     (0x40U)
#define DMA_DCHPRI8_DPA_SHIFT                    (6U)
#define DMA_DCHPRI8_ECP_MASK                     (0x80U)
#define DMA_DCHPRI8_ECP_SHIFT                    (7U)

/*! @name DCHPRI15 - Channel Priority Register */
#define DMA_DCHPRI15_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI15_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI15_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI15_CHPRI_SHIFT)) & DMA_DCHPRI15_CHPRI_MASK)
#define DMA_DCHPRI15_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI15_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI15_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI15_GRPPRI_SHIFT)) & DMA_DCHPRI15_GRPPRI_MASK)
#define DMA_DCHPRI15_DPA_MASK                    (0x40U)
#define DMA_DCHPRI15_DPA_SHIFT                   (6U)
#define DMA_DCHPRI15_ECP_MASK                    (0x80U)
#define DMA_DCHPRI15_ECP_SHIFT                   (7U)

/*! @name DCHPRI14 - Channel Priority Register */
#define DMA_DCHPRI14_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI14_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI14_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI14_CHPRI_SHIFT)) & DMA_DCHPRI14_CHPRI_MASK)
#define DMA_DCHPRI14_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI14_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI14_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI14_GRPPRI_SHIFT)) & DMA_DCHPRI14_GRPPRI_MASK)
#define DMA_DCHPRI14_DPA_MASK                    (0x40U)
#define DMA_DCHPRI14_DPA_SHIFT                   (6U)
#define DMA_DCHPRI14_ECP_MASK                    (0x80U)
#define DMA_DCHPRI14_ECP_SHIFT                   (7U)

/*! @name DCHPRI13 - Channel Priority Register */
#define DMA_DCHPRI13_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI13_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI13_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI13_CHPRI_SHIFT)) & DMA_DCHPRI13_CHPRI_MASK)
#define DMA_DCHPRI13_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI13_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI13_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI13_GRPPRI_SHIFT)) & DMA_DCHPRI13_GRPPRI_MASK)
#define DMA_DCHPRI13_DPA_MASK                    (0x40U)
#define DMA_DCHPRI13_DPA_SHIFT                   (6U)
#define DMA_DCHPRI13_ECP_MASK                    (0x80U)
#define DMA_DCHPRI13_ECP_SHIFT                   (7U)

/*! @name DCHPRI12 - Channel Priority Register */
#define DMA_DCHPRI12_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI12_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI12_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI12_CHPRI_SHIFT)) & DMA_DCHPRI12_CHPRI_MASK)
#define DMA_DCHPRI12_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI12_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI12_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI12_GRPPRI_SHIFT)) & DMA_DCHPRI12_GRPPRI_MASK)
#define DMA_DCHPRI12_DPA_MASK                    (0x40U)
#define DMA_DCHPRI12_DPA_SHIFT                   (6U)
#define DMA_DCHPRI12_ECP_MASK                    (0x80U)
#define DMA_DCHPRI12_ECP_SHIFT                   (7U)

/*! @name DCHPRI19 - Channel Priority Register */
#define DMA_DCHPRI19_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI19_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI19_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI19_CHPRI_SHIFT)) & DMA_DCHPRI19_CHPRI_MASK)
#define DMA_DCHPRI19_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI19_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI19_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI19_GRPPRI_SHIFT)) & DMA_DCHPRI19_GRPPRI_MASK)
#define DMA_DCHPRI19_DPA_MASK                    (0x40U)
#define DMA_DCHPRI19_DPA_SHIFT                   (6U)
#define DMA_DCHPRI19_ECP_MASK                    (0x80U)
#define DMA_DCHPRI19_ECP_SHIFT                   (7U)

/*! @name DCHPRI18 - Channel Priority Register */
#define DMA_DCHPRI18_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI18_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI18_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI18_CHPRI_SHIFT)) & DMA_DCHPRI18_CHPRI_MASK)
#define DMA_DCHPRI18_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI18_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI18_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI18_GRPPRI_SHIFT)) & DMA_DCHPRI18_GRPPRI_MASK)
#define DMA_DCHPRI18_DPA_MASK                    (0x40U)
#define DMA_DCHPRI18_DPA_SHIFT                   (6U)
#define DMA_DCHPRI18_ECP_MASK                    (0x80U)
#define DMA_DCHPRI18_ECP_SHIFT                   (7U)

/*! @name DCHPRI17 - Channel Priority Register */
#define DMA_DCHPRI17_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI17_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI17_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI17_CHPRI_SHIFT)) & DMA_DCHPRI17_CHPRI_MASK)
#define DMA_DCHPRI17_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI17_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI17_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI17_GRPPRI_SHIFT)) & DMA_DCHPRI17_GRPPRI_MASK)
#define DMA_DCHPRI17_DPA_MASK                    (0x40U)
#define DMA_DCHPRI17_DPA_SHIFT                   (6U)
#define DMA_DCHPRI17_ECP_MASK                    (0x80U)
#define DMA_DCHPRI17_ECP_SHIFT                   (7U)

/*! @name DCHPRI16 - Channel Priority Register */
#define DMA_DCHPRI16_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI16_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI16_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI16_CHPRI_SHIFT)) & DMA_DCHPRI16_CHPRI_MASK)
#define DMA_DCHPRI16_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI16_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI16_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI16_GRPPRI_SHIFT)) & DMA_DCHPRI16_GRPPRI_MASK)
#define DMA_DCHPRI16_DPA_MASK                    (0x40U)
#define DMA_DCHPRI16_DPA_SHIFT                   (6U)
#define DMA_DCHPRI16_ECP_MASK                    (0x80U)
#define DMA_DCHPRI16_ECP_SHIFT                   (7U)

/*! @name DCHPRI23 - Channel Priority Register */
#define DMA_DCHPRI23_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI23_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI23_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI23_CHPRI_SHIFT)) & DMA_DCHPRI23_CHPRI_MASK)
#define DMA_DCHPRI23_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI23_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI23_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI23_GRPPRI_SHIFT)) & DMA_DCHPRI23_GRPPRI_MASK)
#define DMA_DCHPRI23_DPA_MASK                    (0x40U)
#define DMA_DCHPRI23_DPA_SHIFT                   (6U)
#define DMA_DCHPRI23_ECP_MASK                    (0x80U)
#define DMA_DCHPRI23_ECP_SHIFT                   (7U)

/*! @name DCHPRI22 - Channel Priority Register */
#define DMA_DCHPRI22_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI22_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI22_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI22_CHPRI_SHIFT)) & DMA_DCHPRI22_CHPRI_MASK)
#define DMA_DCHPRI22_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI22_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI22_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI22_GRPPRI_SHIFT)) & DMA_DCHPRI22_GRPPRI_MASK)
#define DMA_DCHPRI22_DPA_MASK                    (0x40U)
#define DMA_DCHPRI22_DPA_SHIFT                   (6U)
#define DMA_DCHPRI22_ECP_MASK                    (0x80U)
#define DMA_DCHPRI22_ECP_SHIFT                   (7U)

/*! @name DCHPRI21 - Channel Priority Register */
#define DMA_DCHPRI21_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI21_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI21_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI21_CHPRI_SHIFT)) & DMA_DCHPRI21_CHPRI_MASK)
#define DMA_DCHPRI21_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI21_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI21_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI21_GRPPRI_SHIFT)) & DMA_DCHPRI21_GRPPRI_MASK)
#define DMA_DCHPRI21_DPA_MASK                    (0x40U)
#define DMA_DCHPRI21_DPA_SHIFT                   (6U)
#define DMA_DCHPRI21_ECP_MASK                    (0x80U)
#define DMA_DCHPRI21_ECP_SHIFT                   (7U)

/*! @name DCHPRI20 - Channel Priority Register */
#define DMA_DCHPRI20_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI20_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI20_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI20_CHPRI_SHIFT)) & DMA_DCHPRI20_CHPRI_MASK)
#define DMA_DCHPRI20_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI20_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI20_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI20_GRPPRI_SHIFT)) & DMA_DCHPRI20_GRPPRI_MASK)
#define DMA_DCHPRI20_DPA_MASK                    (0x40U)
#define DMA_DCHPRI20_DPA_SHIFT                   (6U)
#define DMA_DCHPRI20_ECP_MASK                    (0x80U)
#define DMA_DCHPRI20_ECP_SHIFT                   (7U)

/*! @name DCHPRI27 - Channel Priority Register */
#define DMA_DCHPRI27_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI27_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI27_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI27_CHPRI_SHIFT)) & DMA_DCHPRI27_CHPRI_MASK)
#define DMA_DCHPRI27_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI27_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI27_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI27_GRPPRI_SHIFT)) & DMA_DCHPRI27_GRPPRI_MASK)
#define DMA_DCHPRI27_DPA_MASK                    (0x40U)
#define DMA_DCHPRI27_DPA_SHIFT                   (6U)
#define DMA_DCHPRI27_ECP_MASK                    (0x80U)
#define DMA_DCHPRI27_ECP_SHIFT                   (7U)

/*! @name DCHPRI26 - Channel Priority Register */
#define DMA_DCHPRI26_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI26_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI26_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI26_CHPRI_SHIFT)) & DMA_DCHPRI26_CHPRI_MASK)
#define DMA_DCHPRI26_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI26_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI26_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI26_GRPPRI_SHIFT)) & DMA_DCHPRI26_GRPPRI_MASK)
#define DMA_DCHPRI26_DPA_MASK                    (0x40U)
#define DMA_DCHPRI26_DPA_SHIFT                   (6U)
#define DMA_DCHPRI26_ECP_MASK                    (0x80U)
#define DMA_DCHPRI26_ECP_SHIFT                   (7U)

/*! @name DCHPRI25 - Channel Priority Register */
#define DMA_DCHPRI25_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI25_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI25_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI25_CHPRI_SHIFT)) & DMA_DCHPRI25_CHPRI_MASK)
#define DMA_DCHPRI25_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI25_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI25_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI25_GRPPRI_SHIFT)) & DMA_DCHPRI25_GRPPRI_MASK)
#define DMA_DCHPRI25_DPA_MASK                    (0x40U)
#define DMA_DCHPRI25_DPA_SHIFT                   (6U)
#define DMA_DCHPRI25_ECP_MASK                    (0x80U)
#define DMA_DCHPRI25_ECP_SHIFT                   (7U)

/*! @name DCHPRI24 - Channel Priority Register */
#define DMA_DCHPRI24_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI24_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI24_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI24_CHPRI_SHIFT)) & DMA_DCHPRI24_CHPRI_MASK)
#define DMA_DCHPRI24_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI24_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI24_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI24_GRPPRI_SHIFT)) & DMA_DCHPRI24_GRPPRI_MASK)
#define DMA_DCHPRI24_DPA_MASK                    (0x40U)
#define DMA_DCHPRI24_DPA_SHIFT                   (6U)
#define DMA_DCHPRI24_ECP_MASK                    (0x80U)
#define DMA_DCHPRI24_ECP_SHIFT                   (7U)

/*! @name DCHPRI31 - Channel Priority Register */
#define DMA_DCHPRI31_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI31_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI31_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI31_CHPRI_SHIFT)) & DMA_DCHPRI31_CHPRI_MASK)
#define DMA_DCHPRI31_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI31_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI31_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI31_GRPPRI_SHIFT)) & DMA_DCHPRI31_GRPPRI_MASK)
#define DMA_DCHPRI31_DPA_MASK                    (0x40U)
#define DMA_DCHPRI31_DPA_SHIFT                   (6U)
#define DMA_DCHPRI31_ECP_MASK                    (0x80U)
#define DMA_DCHPRI31_ECP_SHIFT                   (7U)

/*! @name DCHPRI30 - Channel Priority Register */
#define DMA_DCHPRI30_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI30_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI30_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI30_CHPRI_SHIFT)) & DMA_DCHPRI30_CHPRI_MASK)
#define DMA_DCHPRI30_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI30_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI30_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI30_GRPPRI_SHIFT)) & DMA_DCHPRI30_GRPPRI_MASK)
#define DMA_DCHPRI30_DPA_MASK                    (0x40U)
#define DMA_DCHPRI30_DPA_SHIFT                   (6U)
#define DMA_DCHPRI30_ECP_MASK                    (0x80U)
#define DMA_DCHPRI30_ECP_SHIFT                   (7U)

/*! @name DCHPRI29 - Channel Priority Register */
#define DMA_DCHPRI29_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI29_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI29_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI29_CHPRI_SHIFT)) & DMA_DCHPRI29_CHPRI_MASK)
#define DMA_DCHPRI29_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI29_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI29_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI29_GRPPRI_SHIFT)) & DMA_DCHPRI29_GRPPRI_MASK)
#define DMA_DCHPRI29_DPA_MASK                    (0x40U)
#define DMA_DCHPRI29_DPA_SHIFT                   (6U)
#define DMA_DCHPRI29_ECP_MASK                    (0x80U)
#define DMA_DCHPRI29_ECP_SHIFT                   (7U)

/*! @name DCHPRI28 - Channel Priority Register */
#define DMA_DCHPRI28_CHPRI_MASK                  (0xFU)
#define DMA_DCHPRI28_CHPRI_SHIFT                 (0U)
#define DMA_DCHPRI28_CHPRI(x)                    (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI28_CHPRI_SHIFT)) & DMA_DCHPRI28_CHPRI_MASK)
#define DMA_DCHPRI28_GRPPRI_MASK                 (0x30U)
#define DMA_DCHPRI28_GRPPRI_SHIFT                (4U)
#define DMA_DCHPRI28_GRPPRI(x)                   (((uint8_t)(((uint8_t)(x)) << DMA_DCHPRI28_GRPPRI_SHIFT)) & DMA_DCHPRI28_GRPPRI_MASK)
#define DMA_DCHPRI28_DPA_MASK                    (0x40U)
#define DMA_DCHPRI28_DPA_SHIFT                   (6U)
#define DMA_DCHPRI28_ECP_MASK                    (0x80U)
#define DMA_DCHPRI28_ECP_SHIFT                   (7U)

/*! @name DCHMID - Channel n Master ID Register */
#define DMA_DCHMID_MID_MASK                      (0xFU)
#define DMA_DCHMID_MID_SHIFT                     (0U)
#define DMA_DCHMID_MID(x)                        (((uint8_t)(((uint8_t)(x)) << DMA_DCHMID_MID_SHIFT)) & DMA_DCHMID_MID_MASK)
#define DMA_DCHMID_PAL_MASK                      (0x40U)
#define DMA_DCHMID_PAL_SHIFT                     (6U)
#define DMA_DCHMID_EMI_MASK                      (0x80U)
#define DMA_DCHMID_EMI_SHIFT                     (7U)

/* The count of DMA_DCHMID */
#define DMA_DCHMID_COUNT                         (32U)

/*! @name SADDR - TCD Source Address */
#define DMA_SADDR_SADDR_MASK                     (0xFFFFFFFFU)
#define DMA_SADDR_SADDR_SHIFT                    (0U)
#define DMA_SADDR_SADDR(x)                       (((uint32_t)(((uint32_t)(x)) << DMA_SADDR_SADDR_SHIFT)) & DMA_SADDR_SADDR_MASK)

/* The count of DMA_SADDR */
#define DMA_SADDR_COUNT                          (32U)

/*! @name SOFF - TCD Signed Source Address Offset */
#define DMA_SOFF_SOFF_MASK                       (0xFFFFU)
#define DMA_SOFF_SOFF_SHIFT                      (0U)
#define DMA_SOFF_SOFF(x)                         (((uint16_t)(((uint16_t)(x)) << DMA_SOFF_SOFF_SHIFT)) & DMA_SOFF_SOFF_MASK)

/* The count of DMA_SOFF */
#define DMA_SOFF_COUNT                           (32U)

/*! @name ATTR - TCD Transfer Attributes */
#define DMA_ATTR_DSIZE_MASK                      (0x7U)
#define DMA_ATTR_DSIZE_SHIFT                     (0U)
#define DMA_ATTR_DSIZE(x)                        (((uint16_t)(((uint16_t)(x)) << DMA_ATTR_DSIZE_SHIFT)) & DMA_ATTR_DSIZE_MASK)
#define DMA_ATTR_DMOD_MASK                       (0xF8U)
#define DMA_ATTR_DMOD_SHIFT                      (3U)
#define DMA_ATTR_DMOD(x)                         (((uint16_t)(((uint16_t)(x)) << DMA_ATTR_DMOD_SHIFT)) & DMA_ATTR_DMOD_MASK)
#define DMA_ATTR_SSIZE_MASK                      (0x700U)
#define DMA_ATTR_SSIZE_SHIFT                     (8U)
#define DMA_ATTR_SSIZE(x)                        (((uint16_t)(((uint16_t)(x)) << DMA_ATTR_SSIZE_SHIFT)) & DMA_ATTR_SSIZE_MASK)
#define DMA_ATTR_SMOD_MASK                       (0xF800U)
#define DMA_ATTR_SMOD_SHIFT                      (11U)
#define DMA_ATTR_SMOD(x)                         (((uint16_t)(((uint16_t)(x)) << DMA_ATTR_SMOD_SHIFT)) & DMA_ATTR_SMOD_MASK)

/* The count of DMA_ATTR */
#define DMA_ATTR_COUNT                           (32U)

/*! @name NBYTES_MLNO - TCD Minor Byte Count (Minor Loop Mapping Disabled) */
#define DMA_NBYTES_MLNO_NBYTES_MASK              (0xFFFFFFFFU)
#define DMA_NBYTES_MLNO_NBYTES_SHIFT             (0U)
#define DMA_NBYTES_MLNO_NBYTES(x)                (((uint32_t)(((uint32_t)(x)) << DMA_NBYTES_MLNO_NBYTES_SHIFT)) & DMA_NBYTES_MLNO_NBYTES_MASK)

/* The count of DMA_NBYTES_MLNO */
#define DMA_NBYTES_MLNO_COUNT                    (32U)

/*! @name NBYTES_MLOFFNO - TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled) */
#define DMA_NBYTES_MLOFFNO_NBYTES_MASK           (0x3FFFFFFFU)
#define DMA_NBYTES_MLOFFNO_NBYTES_SHIFT          (0U)
#define DMA_NBYTES_MLOFFNO_NBYTES(x)             (((uint32_t)(((uint32_t)(x)) << DMA_NBYTES_MLOFFNO_NBYTES_SHIFT)) & DMA_NBYTES_MLOFFNO_NBYTES_MASK)
#define DMA_NBYTES_MLOFFNO_DMLOE_MASK            (0x40000000U)
#define DMA_NBYTES_MLOFFNO_DMLOE_SHIFT           (30U)
#define DMA_NBYTES_MLOFFNO_SMLOE_MASK            (0x80000000U)
#define DMA_NBYTES_MLOFFNO_SMLOE_SHIFT           (31U)

/* The count of DMA_NBYTES_MLOFFNO */
#define DMA_NBYTES_MLOFFNO_COUNT                 (32U)

/*! @name NBYTES_MLOFFYES - TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled) */
#define DMA_NBYTES_MLOFFYES_NBYTES_MASK          (0x3FFU)
#define DMA_NBYTES_MLOFFYES_NBYTES_SHIFT         (0U)
#define DMA_NBYTES_MLOFFYES_NBYTES(x)            (((uint32_t)(((uint32_t)(x)) << DMA_NBYTES_MLOFFYES_NBYTES_SHIFT)) & DMA_NBYTES_MLOFFYES_NBYTES_MASK)
#define DMA_NBYTES_MLOFFYES_MLOFF_MASK           (0x3FFFFC00U)
#define DMA_NBYTES_MLOFFYES_MLOFF_SHIFT          (10U)
#define DMA_NBYTES_MLOFFYES_MLOFF(x)             (((uint32_t)(((uint32_t)(x)) << DMA_NBYTES_MLOFFYES_MLOFF_SHIFT)) & DMA_NBYTES_MLOFFYES_MLOFF_MASK)
#define DMA_NBYTES_MLOFFYES_DMLOE_MASK           (0x40000000U)
#define DMA_NBYTES_MLOFFYES_DMLOE_SHIFT          (30U)
#define DMA_NBYTES_MLOFFYES_SMLOE_MASK           (0x80000000U)
#define DMA_NBYTES_MLOFFYES_SMLOE_SHIFT          (31U)

/* The count of DMA_NBYTES_MLOFFYES */
#define DMA_NBYTES_MLOFFYES_COUNT                (32U)

/*! @name SLAST - TCD Last Source Address Adjustment */
#define DMA_SLAST_SLAST_MASK                     (0xFFFFFFFFU)
#define DMA_SLAST_SLAST_SHIFT                    (0U)
#define DMA_SLAST_SLAST(x)                       (((uint32_t)(((uint32_t)(x)) << DMA_SLAST_SLAST_SHIFT)) & DMA_SLAST_SLAST_MASK)

/* The count of DMA_SLAST */
#define DMA_SLAST_COUNT                          (32U)

/*! @name DADDR - TCD Destination Address */
#define DMA_DADDR_DADDR_MASK                     (0xFFFFFFFFU)
#define DMA_DADDR_DADDR_SHIFT                    (0U)
#define DMA_DADDR_DADDR(x)                       (((uint32_t)(((uint32_t)(x)) << DMA_DADDR_DADDR_SHIFT)) & DMA_DADDR_DADDR_MASK)

/* The count of DMA_DADDR */
#define DMA_DADDR_COUNT                          (32U)

/*! @name DOFF - TCD Signed Destination Address Offset */
#define DMA_DOFF_DOFF_MASK                       (0xFFFFU)
#define DMA_DOFF_DOFF_SHIFT                      (0U)
#define DMA_DOFF_DOFF(x)                         (((uint16_t)(((uint16_t)(x)) << DMA_DOFF_DOFF_SHIFT)) & DMA_DOFF_DOFF_MASK)

/* The count of DMA_DOFF */
#define DMA_DOFF_COUNT                           (32U)

/*! @name CITER_ELINKNO - TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled) */
#define DMA_CITER_ELINKNO_CITER_MASK             (0x7FFFU)
#define DMA_CITER_ELINKNO_CITER_SHIFT            (0U)
#define DMA_CITER_ELINKNO_CITER(x)               (((uint16_t)(((uint16_t)(x)) << DMA_CITER_ELINKNO_CITER_SHIFT)) & DMA_CITER_ELINKNO_CITER_MASK)
#define DMA_CITER_ELINKNO_ELINK_MASK             (0x8000U)
#define DMA_CITER_ELINKNO_ELINK_SHIFT            (15U)

/* The count of DMA_CITER_ELINKNO */
#define DMA_CITER_ELINKNO_COUNT                  (32U)

/*! @name CITER_ELINKYES - TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled) */
#define DMA_CITER_ELINKYES_CITER_MASK            (0x1FFU)
#define DMA_CITER_ELINKYES_CITER_SHIFT           (0U)
#define DMA_CITER_ELINKYES_CITER(x)              (((uint16_t)(((uint16_t)(x)) << DMA_CITER_ELINKYES_CITER_SHIFT)) & DMA_CITER_ELINKYES_CITER_MASK)
#define DMA_CITER_ELINKYES_LINKCH_MASK           (0x3E00U)
#define DMA_CITER_ELINKYES_LINKCH_SHIFT          (9U)
#define DMA_CITER_ELINKYES_LINKCH(x)             (((uint16_t)(((uint16_t)(x)) << DMA_CITER_ELINKYES_LINKCH_SHIFT)) & DMA_CITER_ELINKYES_LINKCH_MASK)
#define DMA_CITER_ELINKYES_ELINK_MASK            (0x8000U)
#define DMA_CITER_ELINKYES_ELINK_SHIFT           (15U)

/* The count of DMA_CITER_ELINKYES */
#define DMA_CITER_ELINKYES_COUNT                 (32U)

/*! @name DLAST_SGA - TCD Last Destination Address Adjustment/Scatter Gather Address */
#define DMA_DLAST_SGA_DLASTSGA_MASK              (0xFFFFFFFFU)
#define DMA_DLAST_SGA_DLASTSGA_SHIFT             (0U)
#define DMA_DLAST_SGA_DLASTSGA(x)                (((uint32_t)(((uint32_t)(x)) << DMA_DLAST_SGA_DLASTSGA_SHIFT)) & DMA_DLAST_SGA_DLASTSGA_MASK)

/* The count of DMA_DLAST_SGA */
#define DMA_DLAST_SGA_COUNT                      (32U)

/*! @name CSR - TCD Control and Status */
#define DMA_CSR_START_MASK                       (0x1U)
#define DMA_CSR_START_SHIFT                      (0U)
#define DMA_CSR_INTMAJOR_MASK                    (0x2U)
#define DMA_CSR_INTMAJOR_SHIFT                   (1U)
#define DMA_CSR_INTHALF_MASK                     (0x4U)
#define DMA_CSR_INTHALF_SHIFT                    (2U)
#define DMA_CSR_DREQ_MASK                        (0x8U)
#define DMA_CSR_DREQ_SHIFT                       (3U)
#define DMA_CSR_ESG_MASK                         (0x10U)
#define DMA_CSR_ESG_SHIFT                        (4U)
#define DMA_CSR_MAJORELINK_MASK                  (0x20U)
#define DMA_CSR_MAJORELINK_SHIFT                 (5U)
#define DMA_CSR_ACTIVE_MASK                      (0x40U)
#define DMA_CSR_ACTIVE_SHIFT                     (6U)
#define DMA_CSR_DONE_MASK                        (0x80U)
#define DMA_CSR_DONE_SHIFT                       (7U)
#define DMA_CSR_MAJORLINKCH_MASK                 (0x1F00U)
#define DMA_CSR_MAJORLINKCH_SHIFT                (8U)
#define DMA_CSR_MAJORLINKCH(x)                   (((uint16_t)(((uint16_t)(x)) << DMA_CSR_MAJORLINKCH_SHIFT)) & DMA_CSR_MAJORLINKCH_MASK)
#define DMA_CSR_BWC_MASK                         (0xC000U)
#define DMA_CSR_BWC_SHIFT                        (14U)
#define DMA_CSR_BWC(x)                           (((uint16_t)(((uint16_t)(x)) << DMA_CSR_BWC_SHIFT)) & DMA_CSR_BWC_MASK)

/* The count of DMA_CSR */
#define DMA_CSR_COUNT                            (32U)

/*! @name BITER_ELINKNO - TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled) */
#define DMA_BITER_ELINKNO_BITER_MASK             (0x7FFFU)
#define DMA_BITER_ELINKNO_BITER_SHIFT            (0U)
#define DMA_BITER_ELINKNO_BITER(x)               (((uint16_t)(((uint16_t)(x)) << DMA_BITER_ELINKNO_BITER_SHIFT)) & DMA_BITER_ELINKNO_BITER_MASK)
#define DMA_BITER_ELINKNO_ELINK_MASK             (0x8000U)
#define DMA_BITER_ELINKNO_ELINK_SHIFT            (15U)

/* The count of DMA_BITER_ELINKNO */
#define DMA_BITER_ELINKNO_COUNT                  (32U)

/*! @name BITER_ELINKYES - TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled) */
#define DMA_BITER_ELINKYES_BITER_MASK            (0x1FFU)
#define DMA_BITER_ELINKYES_BITER_SHIFT           (0U)
#define DMA_BITER_ELINKYES_BITER(x)              (((uint16_t)(((uint16_t)(x)) << DMA_BITER_ELINKYES_BITER_SHIFT)) & DMA_BITER_ELINKYES_BITER_MASK)
#define DMA_BITER_ELINKYES_LINKCH_MASK           (0x3E00U)
#define DMA_BITER_ELINKYES_LINKCH_SHIFT          (9U)
#define DMA_BITER_ELINKYES_LINKCH(x)             (((uint16_t)(((uint16_t)(x)) << DMA_BITER_ELINKYES_LINKCH_SHIFT)) & DMA_BITER_ELINKYES_LINKCH_MASK)
#define DMA_BITER_ELINKYES_ELINK_MASK            (0x8000U)
#define DMA_BITER_ELINKYES_ELINK_SHIFT           (15U)

/* The count of DMA_BITER_ELINKYES */
#define DMA_BITER_ELINKYES_COUNT                 (32U)


/*!
 * @}
 */ /* end of group DMA_Register_Masks */


/* DMA - Peripheral instance base addresses */
/** Peripheral DMA0 base pointer */
#define DMA0_BASE_PTR                            ((DMA_MemMapPtr)0x400E8000u)
/** Array initializer of DMA peripheral base pointers */
#define DMA_BASE_PTRS                            { DMA0_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- DMA - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMA_Register_Accessor_Macros DMA - Register accessor macros
 * @{
 */


/* DMA - Register instance definitions */
/* DMA0 */
#define DMA0_CR                                  DMA_CR_REG(DMA0_BASE_PTR)
#define DMA0_ES                                  DMA_ES_REG(DMA0_BASE_PTR)
#define DMA0_ERQ                                 DMA_ERQ_REG(DMA0_BASE_PTR)
#define DMA0_EEI                                 DMA_EEI_REG(DMA0_BASE_PTR)
#define DMA0_CEEI                                DMA_CEEI_REG(DMA0_BASE_PTR)
#define DMA0_SEEI                                DMA_SEEI_REG(DMA0_BASE_PTR)
#define DMA0_CERQ                                DMA_CERQ_REG(DMA0_BASE_PTR)
#define DMA0_SERQ                                DMA_SERQ_REG(DMA0_BASE_PTR)
#define DMA0_CDNE                                DMA_CDNE_REG(DMA0_BASE_PTR)
#define DMA0_SSRT                                DMA_SSRT_REG(DMA0_BASE_PTR)
#define DMA0_CERR                                DMA_CERR_REG(DMA0_BASE_PTR)
#define DMA0_CINT                                DMA_CINT_REG(DMA0_BASE_PTR)
#define DMA0_INT                                 DMA_INT_REG(DMA0_BASE_PTR)
#define DMA0_ERR                                 DMA_ERR_REG(DMA0_BASE_PTR)
#define DMA0_HRS                                 DMA_HRS_REG(DMA0_BASE_PTR)
#define DMA0_EARS                                DMA_EARS_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI3                             DMA_DCHPRI3_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI2                             DMA_DCHPRI2_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI1                             DMA_DCHPRI1_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI0                             DMA_DCHPRI0_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI7                             DMA_DCHPRI7_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI6                             DMA_DCHPRI6_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI5                             DMA_DCHPRI5_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI4                             DMA_DCHPRI4_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI11                            DMA_DCHPRI11_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI10                            DMA_DCHPRI10_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI9                             DMA_DCHPRI9_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI8                             DMA_DCHPRI8_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI15                            DMA_DCHPRI15_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI14                            DMA_DCHPRI14_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI13                            DMA_DCHPRI13_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI12                            DMA_DCHPRI12_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI19                            DMA_DCHPRI19_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI18                            DMA_DCHPRI18_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI17                            DMA_DCHPRI17_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI16                            DMA_DCHPRI16_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI23                            DMA_DCHPRI23_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI22                            DMA_DCHPRI22_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI21                            DMA_DCHPRI21_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI20                            DMA_DCHPRI20_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI27                            DMA_DCHPRI27_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI26                            DMA_DCHPRI26_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI25                            DMA_DCHPRI25_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI24                            DMA_DCHPRI24_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI31                            DMA_DCHPRI31_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI30                            DMA_DCHPRI30_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI29                            DMA_DCHPRI29_REG(DMA0_BASE_PTR)
#define DMA0_DCHPRI28                            DMA_DCHPRI28_REG(DMA0_BASE_PTR)
#define DMA0_DCHMID0                             DMA_DCHMID_REG(DMA0_BASE_PTR,0)
#define DMA0_DCHMID1                             DMA_DCHMID_REG(DMA0_BASE_PTR,1)
#define DMA0_DCHMID2                             DMA_DCHMID_REG(DMA0_BASE_PTR,2)
#define DMA0_DCHMID3                             DMA_DCHMID_REG(DMA0_BASE_PTR,3)
#define DMA0_DCHMID4                             DMA_DCHMID_REG(DMA0_BASE_PTR,4)
#define DMA0_DCHMID5                             DMA_DCHMID_REG(DMA0_BASE_PTR,5)
#define DMA0_DCHMID6                             DMA_DCHMID_REG(DMA0_BASE_PTR,6)
#define DMA0_DCHMID7                             DMA_DCHMID_REG(DMA0_BASE_PTR,7)
#define DMA0_DCHMID8                             DMA_DCHMID_REG(DMA0_BASE_PTR,8)
#define DMA0_DCHMID9                             DMA_DCHMID_REG(DMA0_BASE_PTR,9)
#define DMA0_DCHMID10                            DMA_DCHMID_REG(DMA0_BASE_PTR,10)
#define DMA0_DCHMID11                            DMA_DCHMID_REG(DMA0_BASE_PTR,11)
#define DMA0_DCHMID12                            DMA_DCHMID_REG(DMA0_BASE_PTR,12)
#define DMA0_DCHMID13                            DMA_DCHMID_REG(DMA0_BASE_PTR,13)
#define DMA0_DCHMID14                            DMA_DCHMID_REG(DMA0_BASE_PTR,14)
#define DMA0_DCHMID15                            DMA_DCHMID_REG(DMA0_BASE_PTR,15)
#define DMA0_DCHMID16                            DMA_DCHMID_REG(DMA0_BASE_PTR,16)
#define DMA0_DCHMID17                            DMA_DCHMID_REG(DMA0_BASE_PTR,17)
#define DMA0_DCHMID18                            DMA_DCHMID_REG(DMA0_BASE_PTR,18)
#define DMA0_DCHMID19                            DMA_DCHMID_REG(DMA0_BASE_PTR,19)
#define DMA0_DCHMID20                            DMA_DCHMID_REG(DMA0_BASE_PTR,20)
#define DMA0_DCHMID21                            DMA_DCHMID_REG(DMA0_BASE_PTR,21)
#define DMA0_DCHMID22                            DMA_DCHMID_REG(DMA0_BASE_PTR,22)
#define DMA0_DCHMID23                            DMA_DCHMID_REG(DMA0_BASE_PTR,23)
#define DMA0_DCHMID24                            DMA_DCHMID_REG(DMA0_BASE_PTR,24)
#define DMA0_DCHMID25                            DMA_DCHMID_REG(DMA0_BASE_PTR,25)
#define DMA0_DCHMID26                            DMA_DCHMID_REG(DMA0_BASE_PTR,26)
#define DMA0_DCHMID27                            DMA_DCHMID_REG(DMA0_BASE_PTR,27)
#define DMA0_DCHMID28                            DMA_DCHMID_REG(DMA0_BASE_PTR,28)
#define DMA0_DCHMID29                            DMA_DCHMID_REG(DMA0_BASE_PTR,29)
#define DMA0_DCHMID30                            DMA_DCHMID_REG(DMA0_BASE_PTR,30)
#define DMA0_DCHMID31                            DMA_DCHMID_REG(DMA0_BASE_PTR,31)
#define DMA0_TCD0_SADDR                          DMA_SADDR_REG(DMA0_BASE_PTR,0)
#define DMA0_TCD0_SOFF                           DMA_SOFF_REG(DMA0_BASE_PTR,0)
#define DMA0_TCD0_ATTR                           DMA_ATTR_REG(DMA0_BASE_PTR,0)
#define DMA0_TCD0_NBYTES_MLNO                    DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,0)
#define DMA0_TCD0_NBYTES_MLOFFNO                 DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,0)
#define DMA0_TCD0_NBYTES_MLOFFYES                DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,0)
#define DMA0_TCD0_SLAST                          DMA_SLAST_REG(DMA0_BASE_PTR,0)
#define DMA0_TCD0_DADDR                          DMA_DADDR_REG(DMA0_BASE_PTR,0)
#define DMA0_TCD0_DOFF                           DMA_DOFF_REG(DMA0_BASE_PTR,0)
#define DMA0_TCD0_CITER_ELINKNO                  DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,0)
#define DMA0_TCD0_CITER_ELINKYES                 DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,0)
#define DMA0_TCD0_DLASTSGA                       DMA_DLAST_SGA_REG(DMA0_BASE_PTR,0)
#define DMA0_TCD0_CSR                            DMA_CSR_REG(DMA0_BASE_PTR,0)
#define DMA0_TCD0_BITER_ELINKNO                  DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,0)
#define DMA0_TCD0_BITER_ELINKYES                 DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,0)
#define DMA0_TCD1_SADDR                          DMA_SADDR_REG(DMA0_BASE_PTR,1)
#define DMA0_TCD1_SOFF                           DMA_SOFF_REG(DMA0_BASE_PTR,1)
#define DMA0_TCD1_ATTR                           DMA_ATTR_REG(DMA0_BASE_PTR,1)
#define DMA0_TCD1_NBYTES_MLNO                    DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,1)
#define DMA0_TCD1_NBYTES_MLOFFNO                 DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,1)
#define DMA0_TCD1_NBYTES_MLOFFYES                DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,1)
#define DMA0_TCD1_SLAST                          DMA_SLAST_REG(DMA0_BASE_PTR,1)
#define DMA0_TCD1_DADDR                          DMA_DADDR_REG(DMA0_BASE_PTR,1)
#define DMA0_TCD1_DOFF                           DMA_DOFF_REG(DMA0_BASE_PTR,1)
#define DMA0_TCD1_CITER_ELINKNO                  DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,1)
#define DMA0_TCD1_CITER_ELINKYES                 DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,1)
#define DMA0_TCD1_DLASTSGA                       DMA_DLAST_SGA_REG(DMA0_BASE_PTR,1)
#define DMA0_TCD1_CSR                            DMA_CSR_REG(DMA0_BASE_PTR,1)
#define DMA0_TCD1_BITER_ELINKNO                  DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,1)
#define DMA0_TCD1_BITER_ELINKYES                 DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,1)
#define DMA0_TCD2_SADDR                          DMA_SADDR_REG(DMA0_BASE_PTR,2)
#define DMA0_TCD2_SOFF                           DMA_SOFF_REG(DMA0_BASE_PTR,2)
#define DMA0_TCD2_ATTR                           DMA_ATTR_REG(DMA0_BASE_PTR,2)
#define DMA0_TCD2_NBYTES_MLNO                    DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,2)
#define DMA0_TCD2_NBYTES_MLOFFNO                 DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,2)
#define DMA0_TCD2_NBYTES_MLOFFYES                DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,2)
#define DMA0_TCD2_SLAST                          DMA_SLAST_REG(DMA0_BASE_PTR,2)
#define DMA0_TCD2_DADDR                          DMA_DADDR_REG(DMA0_BASE_PTR,2)
#define DMA0_TCD2_DOFF                           DMA_DOFF_REG(DMA0_BASE_PTR,2)
#define DMA0_TCD2_CITER_ELINKNO                  DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,2)
#define DMA0_TCD2_CITER_ELINKYES                 DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,2)
#define DMA0_TCD2_DLASTSGA                       DMA_DLAST_SGA_REG(DMA0_BASE_PTR,2)
#define DMA0_TCD2_CSR                            DMA_CSR_REG(DMA0_BASE_PTR,2)
#define DMA0_TCD2_BITER_ELINKNO                  DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,2)
#define DMA0_TCD2_BITER_ELINKYES                 DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,2)
#define DMA0_TCD3_SADDR                          DMA_SADDR_REG(DMA0_BASE_PTR,3)
#define DMA0_TCD3_SOFF                           DMA_SOFF_REG(DMA0_BASE_PTR,3)
#define DMA0_TCD3_ATTR                           DMA_ATTR_REG(DMA0_BASE_PTR,3)
#define DMA0_TCD3_NBYTES_MLNO                    DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,3)
#define DMA0_TCD3_NBYTES_MLOFFNO                 DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,3)
#define DMA0_TCD3_NBYTES_MLOFFYES                DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,3)
#define DMA0_TCD3_SLAST                          DMA_SLAST_REG(DMA0_BASE_PTR,3)
#define DMA0_TCD3_DADDR                          DMA_DADDR_REG(DMA0_BASE_PTR,3)
#define DMA0_TCD3_DOFF                           DMA_DOFF_REG(DMA0_BASE_PTR,3)
#define DMA0_TCD3_CITER_ELINKNO                  DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,3)
#define DMA0_TCD3_CITER_ELINKYES                 DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,3)
#define DMA0_TCD3_DLASTSGA                       DMA_DLAST_SGA_REG(DMA0_BASE_PTR,3)
#define DMA0_TCD3_CSR                            DMA_CSR_REG(DMA0_BASE_PTR,3)
#define DMA0_TCD3_BITER_ELINKNO                  DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,3)
#define DMA0_TCD3_BITER_ELINKYES                 DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,3)
#define DMA0_TCD4_SADDR                          DMA_SADDR_REG(DMA0_BASE_PTR,4)
#define DMA0_TCD4_SOFF                           DMA_SOFF_REG(DMA0_BASE_PTR,4)
#define DMA0_TCD4_ATTR                           DMA_ATTR_REG(DMA0_BASE_PTR,4)
#define DMA0_TCD4_NBYTES_MLNO                    DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,4)
#define DMA0_TCD4_NBYTES_MLOFFNO                 DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,4)
#define DMA0_TCD4_NBYTES_MLOFFYES                DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,4)
#define DMA0_TCD4_SLAST                          DMA_SLAST_REG(DMA0_BASE_PTR,4)
#define DMA0_TCD4_DADDR                          DMA_DADDR_REG(DMA0_BASE_PTR,4)
#define DMA0_TCD4_DOFF                           DMA_DOFF_REG(DMA0_BASE_PTR,4)
#define DMA0_TCD4_CITER_ELINKNO                  DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,4)
#define DMA0_TCD4_CITER_ELINKYES                 DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,4)
#define DMA0_TCD4_DLASTSGA                       DMA_DLAST_SGA_REG(DMA0_BASE_PTR,4)
#define DMA0_TCD4_CSR                            DMA_CSR_REG(DMA0_BASE_PTR,4)
#define DMA0_TCD4_BITER_ELINKNO                  DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,4)
#define DMA0_TCD4_BITER_ELINKYES                 DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,4)
#define DMA0_TCD5_SADDR                          DMA_SADDR_REG(DMA0_BASE_PTR,5)
#define DMA0_TCD5_SOFF                           DMA_SOFF_REG(DMA0_BASE_PTR,5)
#define DMA0_TCD5_ATTR                           DMA_ATTR_REG(DMA0_BASE_PTR,5)
#define DMA0_TCD5_NBYTES_MLNO                    DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,5)
#define DMA0_TCD5_NBYTES_MLOFFNO                 DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,5)
#define DMA0_TCD5_NBYTES_MLOFFYES                DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,5)
#define DMA0_TCD5_SLAST                          DMA_SLAST_REG(DMA0_BASE_PTR,5)
#define DMA0_TCD5_DADDR                          DMA_DADDR_REG(DMA0_BASE_PTR,5)
#define DMA0_TCD5_DOFF                           DMA_DOFF_REG(DMA0_BASE_PTR,5)
#define DMA0_TCD5_CITER_ELINKNO                  DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,5)
#define DMA0_TCD5_CITER_ELINKYES                 DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,5)
#define DMA0_TCD5_DLASTSGA                       DMA_DLAST_SGA_REG(DMA0_BASE_PTR,5)
#define DMA0_TCD5_CSR                            DMA_CSR_REG(DMA0_BASE_PTR,5)
#define DMA0_TCD5_BITER_ELINKNO                  DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,5)
#define DMA0_TCD5_BITER_ELINKYES                 DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,5)
#define DMA0_TCD6_SADDR                          DMA_SADDR_REG(DMA0_BASE_PTR,6)
#define DMA0_TCD6_SOFF                           DMA_SOFF_REG(DMA0_BASE_PTR,6)
#define DMA0_TCD6_ATTR                           DMA_ATTR_REG(DMA0_BASE_PTR,6)
#define DMA0_TCD6_NBYTES_MLNO                    DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,6)
#define DMA0_TCD6_NBYTES_MLOFFNO                 DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,6)
#define DMA0_TCD6_NBYTES_MLOFFYES                DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,6)
#define DMA0_TCD6_SLAST                          DMA_SLAST_REG(DMA0_BASE_PTR,6)
#define DMA0_TCD6_DADDR                          DMA_DADDR_REG(DMA0_BASE_PTR,6)
#define DMA0_TCD6_DOFF                           DMA_DOFF_REG(DMA0_BASE_PTR,6)
#define DMA0_TCD6_CITER_ELINKNO                  DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,6)
#define DMA0_TCD6_CITER_ELINKYES                 DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,6)
#define DMA0_TCD6_DLASTSGA                       DMA_DLAST_SGA_REG(DMA0_BASE_PTR,6)
#define DMA0_TCD6_CSR                            DMA_CSR_REG(DMA0_BASE_PTR,6)
#define DMA0_TCD6_BITER_ELINKNO                  DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,6)
#define DMA0_TCD6_BITER_ELINKYES                 DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,6)
#define DMA0_TCD7_SADDR                          DMA_SADDR_REG(DMA0_BASE_PTR,7)
#define DMA0_TCD7_SOFF                           DMA_SOFF_REG(DMA0_BASE_PTR,7)
#define DMA0_TCD7_ATTR                           DMA_ATTR_REG(DMA0_BASE_PTR,7)
#define DMA0_TCD7_NBYTES_MLNO                    DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,7)
#define DMA0_TCD7_NBYTES_MLOFFNO                 DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,7)
#define DMA0_TCD7_NBYTES_MLOFFYES                DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,7)
#define DMA0_TCD7_SLAST                          DMA_SLAST_REG(DMA0_BASE_PTR,7)
#define DMA0_TCD7_DADDR                          DMA_DADDR_REG(DMA0_BASE_PTR,7)
#define DMA0_TCD7_DOFF                           DMA_DOFF_REG(DMA0_BASE_PTR,7)
#define DMA0_TCD7_CITER_ELINKNO                  DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,7)
#define DMA0_TCD7_CITER_ELINKYES                 DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,7)
#define DMA0_TCD7_DLASTSGA                       DMA_DLAST_SGA_REG(DMA0_BASE_PTR,7)
#define DMA0_TCD7_CSR                            DMA_CSR_REG(DMA0_BASE_PTR,7)
#define DMA0_TCD7_BITER_ELINKNO                  DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,7)
#define DMA0_TCD7_BITER_ELINKYES                 DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,7)
#define DMA0_TCD8_SADDR                          DMA_SADDR_REG(DMA0_BASE_PTR,8)
#define DMA0_TCD8_SOFF                           DMA_SOFF_REG(DMA0_BASE_PTR,8)
#define DMA0_TCD8_ATTR                           DMA_ATTR_REG(DMA0_BASE_PTR,8)
#define DMA0_TCD8_NBYTES_MLNO                    DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,8)
#define DMA0_TCD8_NBYTES_MLOFFNO                 DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,8)
#define DMA0_TCD8_NBYTES_MLOFFYES                DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,8)
#define DMA0_TCD8_SLAST                          DMA_SLAST_REG(DMA0_BASE_PTR,8)
#define DMA0_TCD8_DADDR                          DMA_DADDR_REG(DMA0_BASE_PTR,8)
#define DMA0_TCD8_DOFF                           DMA_DOFF_REG(DMA0_BASE_PTR,8)
#define DMA0_TCD8_CITER_ELINKNO                  DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,8)
#define DMA0_TCD8_CITER_ELINKYES                 DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,8)
#define DMA0_TCD8_DLASTSGA                       DMA_DLAST_SGA_REG(DMA0_BASE_PTR,8)
#define DMA0_TCD8_CSR                            DMA_CSR_REG(DMA0_BASE_PTR,8)
#define DMA0_TCD8_BITER_ELINKNO                  DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,8)
#define DMA0_TCD8_BITER_ELINKYES                 DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,8)
#define DMA0_TCD9_SADDR                          DMA_SADDR_REG(DMA0_BASE_PTR,9)
#define DMA0_TCD9_SOFF                           DMA_SOFF_REG(DMA0_BASE_PTR,9)
#define DMA0_TCD9_ATTR                           DMA_ATTR_REG(DMA0_BASE_PTR,9)
#define DMA0_TCD9_NBYTES_MLNO                    DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,9)
#define DMA0_TCD9_NBYTES_MLOFFNO                 DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,9)
#define DMA0_TCD9_NBYTES_MLOFFYES                DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,9)
#define DMA0_TCD9_SLAST                          DMA_SLAST_REG(DMA0_BASE_PTR,9)
#define DMA0_TCD9_DADDR                          DMA_DADDR_REG(DMA0_BASE_PTR,9)
#define DMA0_TCD9_DOFF                           DMA_DOFF_REG(DMA0_BASE_PTR,9)
#define DMA0_TCD9_CITER_ELINKNO                  DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,9)
#define DMA0_TCD9_CITER_ELINKYES                 DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,9)
#define DMA0_TCD9_DLASTSGA                       DMA_DLAST_SGA_REG(DMA0_BASE_PTR,9)
#define DMA0_TCD9_CSR                            DMA_CSR_REG(DMA0_BASE_PTR,9)
#define DMA0_TCD9_BITER_ELINKNO                  DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,9)
#define DMA0_TCD9_BITER_ELINKYES                 DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,9)
#define DMA0_TCD10_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,10)
#define DMA0_TCD10_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,10)
#define DMA0_TCD10_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,10)
#define DMA0_TCD10_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,10)
#define DMA0_TCD10_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,10)
#define DMA0_TCD10_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,10)
#define DMA0_TCD10_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,10)
#define DMA0_TCD10_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,10)
#define DMA0_TCD10_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,10)
#define DMA0_TCD10_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,10)
#define DMA0_TCD10_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,10)
#define DMA0_TCD10_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,10)
#define DMA0_TCD10_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,10)
#define DMA0_TCD10_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,10)
#define DMA0_TCD10_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,10)
#define DMA0_TCD11_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,11)
#define DMA0_TCD11_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,11)
#define DMA0_TCD11_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,11)
#define DMA0_TCD11_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,11)
#define DMA0_TCD11_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,11)
#define DMA0_TCD11_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,11)
#define DMA0_TCD11_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,11)
#define DMA0_TCD11_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,11)
#define DMA0_TCD11_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,11)
#define DMA0_TCD11_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,11)
#define DMA0_TCD11_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,11)
#define DMA0_TCD11_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,11)
#define DMA0_TCD11_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,11)
#define DMA0_TCD11_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,11)
#define DMA0_TCD11_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,11)
#define DMA0_TCD12_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,12)
#define DMA0_TCD12_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,12)
#define DMA0_TCD12_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,12)
#define DMA0_TCD12_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,12)
#define DMA0_TCD12_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,12)
#define DMA0_TCD12_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,12)
#define DMA0_TCD12_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,12)
#define DMA0_TCD12_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,12)
#define DMA0_TCD12_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,12)
#define DMA0_TCD12_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,12)
#define DMA0_TCD12_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,12)
#define DMA0_TCD12_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,12)
#define DMA0_TCD12_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,12)
#define DMA0_TCD12_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,12)
#define DMA0_TCD12_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,12)
#define DMA0_TCD13_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,13)
#define DMA0_TCD13_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,13)
#define DMA0_TCD13_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,13)
#define DMA0_TCD13_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,13)
#define DMA0_TCD13_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,13)
#define DMA0_TCD13_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,13)
#define DMA0_TCD13_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,13)
#define DMA0_TCD13_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,13)
#define DMA0_TCD13_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,13)
#define DMA0_TCD13_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,13)
#define DMA0_TCD13_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,13)
#define DMA0_TCD13_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,13)
#define DMA0_TCD13_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,13)
#define DMA0_TCD13_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,13)
#define DMA0_TCD13_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,13)
#define DMA0_TCD14_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,14)
#define DMA0_TCD14_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,14)
#define DMA0_TCD14_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,14)
#define DMA0_TCD14_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,14)
#define DMA0_TCD14_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,14)
#define DMA0_TCD14_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,14)
#define DMA0_TCD14_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,14)
#define DMA0_TCD14_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,14)
#define DMA0_TCD14_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,14)
#define DMA0_TCD14_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,14)
#define DMA0_TCD14_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,14)
#define DMA0_TCD14_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,14)
#define DMA0_TCD14_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,14)
#define DMA0_TCD14_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,14)
#define DMA0_TCD14_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,14)
#define DMA0_TCD15_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,15)
#define DMA0_TCD15_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,15)
#define DMA0_TCD15_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,15)
#define DMA0_TCD15_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,15)
#define DMA0_TCD15_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,15)
#define DMA0_TCD15_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,15)
#define DMA0_TCD15_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,15)
#define DMA0_TCD15_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,15)
#define DMA0_TCD15_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,15)
#define DMA0_TCD15_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,15)
#define DMA0_TCD15_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,15)
#define DMA0_TCD15_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,15)
#define DMA0_TCD15_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,15)
#define DMA0_TCD15_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,15)
#define DMA0_TCD15_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,15)
#define DMA0_TCD16_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,16)
#define DMA0_TCD16_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,16)
#define DMA0_TCD16_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,16)
#define DMA0_TCD16_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,16)
#define DMA0_TCD16_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,16)
#define DMA0_TCD16_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,16)
#define DMA0_TCD16_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,16)
#define DMA0_TCD16_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,16)
#define DMA0_TCD16_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,16)
#define DMA0_TCD16_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,16)
#define DMA0_TCD16_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,16)
#define DMA0_TCD16_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,16)
#define DMA0_TCD16_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,16)
#define DMA0_TCD16_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,16)
#define DMA0_TCD16_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,16)
#define DMA0_TCD17_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,17)
#define DMA0_TCD17_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,17)
#define DMA0_TCD17_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,17)
#define DMA0_TCD17_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,17)
#define DMA0_TCD17_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,17)
#define DMA0_TCD17_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,17)
#define DMA0_TCD17_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,17)
#define DMA0_TCD17_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,17)
#define DMA0_TCD17_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,17)
#define DMA0_TCD17_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,17)
#define DMA0_TCD17_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,17)
#define DMA0_TCD17_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,17)
#define DMA0_TCD17_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,17)
#define DMA0_TCD17_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,17)
#define DMA0_TCD17_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,17)
#define DMA0_TCD18_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,18)
#define DMA0_TCD18_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,18)
#define DMA0_TCD18_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,18)
#define DMA0_TCD18_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,18)
#define DMA0_TCD18_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,18)
#define DMA0_TCD18_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,18)
#define DMA0_TCD18_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,18)
#define DMA0_TCD18_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,18)
#define DMA0_TCD18_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,18)
#define DMA0_TCD18_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,18)
#define DMA0_TCD18_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,18)
#define DMA0_TCD18_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,18)
#define DMA0_TCD18_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,18)
#define DMA0_TCD18_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,18)
#define DMA0_TCD18_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,18)
#define DMA0_TCD19_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,19)
#define DMA0_TCD19_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,19)
#define DMA0_TCD19_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,19)
#define DMA0_TCD19_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,19)
#define DMA0_TCD19_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,19)
#define DMA0_TCD19_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,19)
#define DMA0_TCD19_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,19)
#define DMA0_TCD19_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,19)
#define DMA0_TCD19_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,19)
#define DMA0_TCD19_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,19)
#define DMA0_TCD19_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,19)
#define DMA0_TCD19_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,19)
#define DMA0_TCD19_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,19)
#define DMA0_TCD19_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,19)
#define DMA0_TCD19_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,19)
#define DMA0_TCD20_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,20)
#define DMA0_TCD20_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,20)
#define DMA0_TCD20_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,20)
#define DMA0_TCD20_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,20)
#define DMA0_TCD20_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,20)
#define DMA0_TCD20_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,20)
#define DMA0_TCD20_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,20)
#define DMA0_TCD20_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,20)
#define DMA0_TCD20_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,20)
#define DMA0_TCD20_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,20)
#define DMA0_TCD20_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,20)
#define DMA0_TCD20_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,20)
#define DMA0_TCD20_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,20)
#define DMA0_TCD20_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,20)
#define DMA0_TCD20_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,20)
#define DMA0_TCD21_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,21)
#define DMA0_TCD21_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,21)
#define DMA0_TCD21_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,21)
#define DMA0_TCD21_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,21)
#define DMA0_TCD21_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,21)
#define DMA0_TCD21_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,21)
#define DMA0_TCD21_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,21)
#define DMA0_TCD21_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,21)
#define DMA0_TCD21_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,21)
#define DMA0_TCD21_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,21)
#define DMA0_TCD21_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,21)
#define DMA0_TCD21_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,21)
#define DMA0_TCD21_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,21)
#define DMA0_TCD21_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,21)
#define DMA0_TCD21_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,21)
#define DMA0_TCD22_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,22)
#define DMA0_TCD22_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,22)
#define DMA0_TCD22_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,22)
#define DMA0_TCD22_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,22)
#define DMA0_TCD22_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,22)
#define DMA0_TCD22_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,22)
#define DMA0_TCD22_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,22)
#define DMA0_TCD22_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,22)
#define DMA0_TCD22_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,22)
#define DMA0_TCD22_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,22)
#define DMA0_TCD22_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,22)
#define DMA0_TCD22_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,22)
#define DMA0_TCD22_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,22)
#define DMA0_TCD22_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,22)
#define DMA0_TCD22_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,22)
#define DMA0_TCD23_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,23)
#define DMA0_TCD23_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,23)
#define DMA0_TCD23_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,23)
#define DMA0_TCD23_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,23)
#define DMA0_TCD23_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,23)
#define DMA0_TCD23_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,23)
#define DMA0_TCD23_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,23)
#define DMA0_TCD23_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,23)
#define DMA0_TCD23_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,23)
#define DMA0_TCD23_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,23)
#define DMA0_TCD23_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,23)
#define DMA0_TCD23_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,23)
#define DMA0_TCD23_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,23)
#define DMA0_TCD23_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,23)
#define DMA0_TCD23_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,23)
#define DMA0_TCD24_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,24)
#define DMA0_TCD24_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,24)
#define DMA0_TCD24_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,24)
#define DMA0_TCD24_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,24)
#define DMA0_TCD24_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,24)
#define DMA0_TCD24_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,24)
#define DMA0_TCD24_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,24)
#define DMA0_TCD24_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,24)
#define DMA0_TCD24_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,24)
#define DMA0_TCD24_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,24)
#define DMA0_TCD24_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,24)
#define DMA0_TCD24_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,24)
#define DMA0_TCD24_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,24)
#define DMA0_TCD24_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,24)
#define DMA0_TCD24_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,24)
#define DMA0_TCD25_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,25)
#define DMA0_TCD25_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,25)
#define DMA0_TCD25_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,25)
#define DMA0_TCD25_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,25)
#define DMA0_TCD25_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,25)
#define DMA0_TCD25_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,25)
#define DMA0_TCD25_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,25)
#define DMA0_TCD25_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,25)
#define DMA0_TCD25_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,25)
#define DMA0_TCD25_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,25)
#define DMA0_TCD25_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,25)
#define DMA0_TCD25_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,25)
#define DMA0_TCD25_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,25)
#define DMA0_TCD25_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,25)
#define DMA0_TCD25_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,25)
#define DMA0_TCD26_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,26)
#define DMA0_TCD26_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,26)
#define DMA0_TCD26_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,26)
#define DMA0_TCD26_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,26)
#define DMA0_TCD26_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,26)
#define DMA0_TCD26_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,26)
#define DMA0_TCD26_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,26)
#define DMA0_TCD26_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,26)
#define DMA0_TCD26_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,26)
#define DMA0_TCD26_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,26)
#define DMA0_TCD26_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,26)
#define DMA0_TCD26_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,26)
#define DMA0_TCD26_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,26)
#define DMA0_TCD26_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,26)
#define DMA0_TCD26_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,26)
#define DMA0_TCD27_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,27)
#define DMA0_TCD27_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,27)
#define DMA0_TCD27_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,27)
#define DMA0_TCD27_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,27)
#define DMA0_TCD27_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,27)
#define DMA0_TCD27_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,27)
#define DMA0_TCD27_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,27)
#define DMA0_TCD27_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,27)
#define DMA0_TCD27_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,27)
#define DMA0_TCD27_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,27)
#define DMA0_TCD27_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,27)
#define DMA0_TCD27_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,27)
#define DMA0_TCD27_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,27)
#define DMA0_TCD27_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,27)
#define DMA0_TCD27_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,27)
#define DMA0_TCD28_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,28)
#define DMA0_TCD28_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,28)
#define DMA0_TCD28_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,28)
#define DMA0_TCD28_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,28)
#define DMA0_TCD28_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,28)
#define DMA0_TCD28_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,28)
#define DMA0_TCD28_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,28)
#define DMA0_TCD28_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,28)
#define DMA0_TCD28_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,28)
#define DMA0_TCD28_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,28)
#define DMA0_TCD28_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,28)
#define DMA0_TCD28_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,28)
#define DMA0_TCD28_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,28)
#define DMA0_TCD28_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,28)
#define DMA0_TCD28_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,28)
#define DMA0_TCD29_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,29)
#define DMA0_TCD29_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,29)
#define DMA0_TCD29_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,29)
#define DMA0_TCD29_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,29)
#define DMA0_TCD29_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,29)
#define DMA0_TCD29_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,29)
#define DMA0_TCD29_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,29)
#define DMA0_TCD29_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,29)
#define DMA0_TCD29_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,29)
#define DMA0_TCD29_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,29)
#define DMA0_TCD29_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,29)
#define DMA0_TCD29_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,29)
#define DMA0_TCD29_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,29)
#define DMA0_TCD29_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,29)
#define DMA0_TCD29_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,29)
#define DMA0_TCD30_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,30)
#define DMA0_TCD30_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,30)
#define DMA0_TCD30_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,30)
#define DMA0_TCD30_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,30)
#define DMA0_TCD30_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,30)
#define DMA0_TCD30_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,30)
#define DMA0_TCD30_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,30)
#define DMA0_TCD30_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,30)
#define DMA0_TCD30_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,30)
#define DMA0_TCD30_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,30)
#define DMA0_TCD30_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,30)
#define DMA0_TCD30_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,30)
#define DMA0_TCD30_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,30)
#define DMA0_TCD30_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,30)
#define DMA0_TCD30_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,30)
#define DMA0_TCD31_SADDR                         DMA_SADDR_REG(DMA0_BASE_PTR,31)
#define DMA0_TCD31_SOFF                          DMA_SOFF_REG(DMA0_BASE_PTR,31)
#define DMA0_TCD31_ATTR                          DMA_ATTR_REG(DMA0_BASE_PTR,31)
#define DMA0_TCD31_NBYTES_MLNO                   DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,31)
#define DMA0_TCD31_NBYTES_MLOFFNO                DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,31)
#define DMA0_TCD31_NBYTES_MLOFFYES               DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,31)
#define DMA0_TCD31_SLAST                         DMA_SLAST_REG(DMA0_BASE_PTR,31)
#define DMA0_TCD31_DADDR                         DMA_DADDR_REG(DMA0_BASE_PTR,31)
#define DMA0_TCD31_DOFF                          DMA_DOFF_REG(DMA0_BASE_PTR,31)
#define DMA0_TCD31_CITER_ELINKNO                 DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,31)
#define DMA0_TCD31_CITER_ELINKYES                DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,31)
#define DMA0_TCD31_DLASTSGA                      DMA_DLAST_SGA_REG(DMA0_BASE_PTR,31)
#define DMA0_TCD31_CSR                           DMA_CSR_REG(DMA0_BASE_PTR,31)
#define DMA0_TCD31_BITER_ELINKNO                 DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,31)
#define DMA0_TCD31_BITER_ELINKYES                DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,31)

/* DMA - Register array accessors */
#define DMA0_DCHMID(index)                       DMA_DCHMID_REG(DMA0_BASE_PTR,index)
#define DMA0_SADDR(index)                        DMA_SADDR_REG(DMA0_BASE_PTR,index)
#define DMA0_SOFF(index)                         DMA_SOFF_REG(DMA0_BASE_PTR,index)
#define DMA0_ATTR(index)                         DMA_ATTR_REG(DMA0_BASE_PTR,index)
#define DMA0_NBYTES_MLNO(index)                  DMA_NBYTES_MLNO_REG(DMA0_BASE_PTR,index)
#define DMA0_NBYTES_MLOFFNO(index)               DMA_NBYTES_MLOFFNO_REG(DMA0_BASE_PTR,index)
#define DMA0_NBYTES_MLOFFYES(index)              DMA_NBYTES_MLOFFYES_REG(DMA0_BASE_PTR,index)
#define DMA0_SLAST(index)                        DMA_SLAST_REG(DMA0_BASE_PTR,index)
#define DMA0_DADDR(index)                        DMA_DADDR_REG(DMA0_BASE_PTR,index)
#define DMA0_DOFF(index)                         DMA_DOFF_REG(DMA0_BASE_PTR,index)
#define DMA0_CITER_ELINKNO(index)                DMA_CITER_ELINKNO_REG(DMA0_BASE_PTR,index)
#define DMA0_CITER_ELINKYES(index)               DMA_CITER_ELINKYES_REG(DMA0_BASE_PTR,index)
#define DMA0_DLAST_SGA(index)                    DMA_DLAST_SGA_REG(DMA0_BASE_PTR,index)
#define DMA0_CSR(index)                          DMA_CSR_REG(DMA0_BASE_PTR,index)
#define DMA0_BITER_ELINKNO(index)                DMA_BITER_ELINKNO_REG(DMA0_BASE_PTR,index)
#define DMA0_BITER_ELINKYES(index)               DMA_BITER_ELINKYES_REG(DMA0_BASE_PTR,index)

/*!
 * @}
 */ /* end of group DMA_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DMA_Peripheral */


/* ----------------------------------------------------------------------------
   -- DMAMUX
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMAMUX_Peripheral DMAMUX
 * @{
 */

/** DMAMUX - Peripheral register structure */
typedef struct DMAMUX_MemMap {
  uint32_t CHCFG[32];                              /**< Channel 0 Configuration Register..Channel 31 Configuration Register, array offset: 0x0, array step: 0x4 */
} volatile *DMAMUX_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DMAMUX - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMAMUX_Register_Accessor_Macros DMAMUX - Register accessor macros
 * @{
 */


/* DMAMUX - Register accessors */
#define DMAMUX_CHCFG_REG(base,index)             ((base)->CHCFG[index])

/*!
 * @}
 */ /* end of group DMAMUX_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DMAMUX Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMAMUX_Register_Masks DMAMUX Register Masks
 * @{
 */

/*! @name CHCFG - Channel 0 Configuration Register..Channel 31 Configuration Register */
#define DMAMUX_CHCFG_SOURCE_MASK                 (0x7FU)
#define DMAMUX_CHCFG_SOURCE_SHIFT                (0U)
#define DMAMUX_CHCFG_SOURCE(x)                   (((uint32_t)(((uint32_t)(x)) << DMAMUX_CHCFG_SOURCE_SHIFT)) & DMAMUX_CHCFG_SOURCE_MASK)
#define DMAMUX_CHCFG_A_ON_MASK                   (0x20000000U)
#define DMAMUX_CHCFG_A_ON_SHIFT                  (29U)
#define DMAMUX_CHCFG_TRIG_MASK                   (0x40000000U)
#define DMAMUX_CHCFG_TRIG_SHIFT                  (30U)
#define DMAMUX_CHCFG_ENBL_MASK                   (0x80000000U)
#define DMAMUX_CHCFG_ENBL_SHIFT                  (31U)

/* The count of DMAMUX_CHCFG */
#define DMAMUX_CHCFG_COUNT                       (32U)


/*!
 * @}
 */ /* end of group DMAMUX_Register_Masks */


/* DMAMUX - Peripheral instance base addresses */
/** Peripheral DMAMUX base pointer */
#define DMAMUX_BASE_PTR                          ((DMAMUX_MemMapPtr)0x400EC000u)
/** Array initializer of DMAMUX peripheral base pointers */
#define DMAMUX_BASE_PTRS                         { DMAMUX_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- DMAMUX - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMAMUX_Register_Accessor_Macros DMAMUX - Register accessor macros
 * @{
 */


/* DMAMUX - Register instance definitions */
/* DMAMUX */
#define DMAMUX_CHCFG0                            DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,0)
#define DMAMUX_CHCFG1                            DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,1)
#define DMAMUX_CHCFG2                            DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,2)
#define DMAMUX_CHCFG3                            DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,3)
#define DMAMUX_CHCFG4                            DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,4)
#define DMAMUX_CHCFG5                            DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,5)
#define DMAMUX_CHCFG6                            DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,6)
#define DMAMUX_CHCFG7                            DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,7)
#define DMAMUX_CHCFG8                            DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,8)
#define DMAMUX_CHCFG9                            DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,9)
#define DMAMUX_CHCFG10                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,10)
#define DMAMUX_CHCFG11                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,11)
#define DMAMUX_CHCFG12                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,12)
#define DMAMUX_CHCFG13                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,13)
#define DMAMUX_CHCFG14                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,14)
#define DMAMUX_CHCFG15                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,15)
#define DMAMUX_CHCFG16                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,16)
#define DMAMUX_CHCFG17                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,17)
#define DMAMUX_CHCFG18                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,18)
#define DMAMUX_CHCFG19                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,19)
#define DMAMUX_CHCFG20                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,20)
#define DMAMUX_CHCFG21                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,21)
#define DMAMUX_CHCFG22                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,22)
#define DMAMUX_CHCFG23                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,23)
#define DMAMUX_CHCFG24                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,24)
#define DMAMUX_CHCFG25                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,25)
#define DMAMUX_CHCFG26                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,26)
#define DMAMUX_CHCFG27                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,27)
#define DMAMUX_CHCFG28                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,28)
#define DMAMUX_CHCFG29                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,29)
#define DMAMUX_CHCFG30                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,30)
#define DMAMUX_CHCFG31                           DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,31)

/* DMAMUX - Register array accessors */
#define DMAMUX_CHCFG(index)                      DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,index)

/*!
 * @}
 */ /* end of group DMAMUX_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DMAMUX_Peripheral */


/* ----------------------------------------------------------------------------
   -- ENC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENC_Peripheral ENC
 * @{
 */

/** ENC - Peripheral register structure */
typedef struct ENC_MemMap {
  uint16_t CTRL;                                   /**< Control Register, offset: 0x0 */
  uint16_t FILT;                                   /**< Input Filter Register, offset: 0x2 */
  uint16_t WTR;                                    /**< Watchdog Timeout Register, offset: 0x4 */
  uint16_t POSD;                                   /**< Position Difference Counter Register, offset: 0x6 */
  uint16_t POSDH;                                  /**< Position Difference Hold Register, offset: 0x8 */
  uint16_t REV;                                    /**< Revolution Counter Register, offset: 0xA */
  uint16_t REVH;                                   /**< Revolution Hold Register, offset: 0xC */
  uint16_t UPOS;                                   /**< Upper Position Counter Register, offset: 0xE */
  uint16_t LPOS;                                   /**< Lower Position Counter Register, offset: 0x10 */
  uint16_t UPOSH;                                  /**< Upper Position Hold Register, offset: 0x12 */
  uint16_t LPOSH;                                  /**< Lower Position Hold Register, offset: 0x14 */
  uint16_t UINIT;                                  /**< Upper Initialization Register, offset: 0x16 */
  uint16_t LINIT;                                  /**< Lower Initialization Register, offset: 0x18 */
  uint16_t IMR;                                    /**< Input Monitor Register, offset: 0x1A */
  uint16_t TST;                                    /**< Test Register, offset: 0x1C */
  uint16_t CTRL2;                                  /**< Control 2 Register, offset: 0x1E */
  uint16_t UMOD;                                   /**< Upper Modulus Register, offset: 0x20 */
  uint16_t LMOD;                                   /**< Lower Modulus Register, offset: 0x22 */
  uint16_t UCOMP;                                  /**< Upper Position Compare Register, offset: 0x24 */
  uint16_t LCOMP;                                  /**< Lower Position Compare Register, offset: 0x26 */
} volatile *ENC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- ENC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENC_Register_Accessor_Macros ENC - Register accessor macros
 * @{
 */


/* ENC - Register accessors */
#define ENC_CTRL_REG(base)                       ((base)->CTRL)
#define ENC_FILT_REG(base)                       ((base)->FILT)
#define ENC_WTR_REG(base)                        ((base)->WTR)
#define ENC_POSD_REG(base)                       ((base)->POSD)
#define ENC_POSDH_REG(base)                      ((base)->POSDH)
#define ENC_REV_REG(base)                        ((base)->REV)
#define ENC_REVH_REG(base)                       ((base)->REVH)
#define ENC_UPOS_REG(base)                       ((base)->UPOS)
#define ENC_LPOS_REG(base)                       ((base)->LPOS)
#define ENC_UPOSH_REG(base)                      ((base)->UPOSH)
#define ENC_LPOSH_REG(base)                      ((base)->LPOSH)
#define ENC_UINIT_REG(base)                      ((base)->UINIT)
#define ENC_LINIT_REG(base)                      ((base)->LINIT)
#define ENC_IMR_REG(base)                        ((base)->IMR)
#define ENC_TST_REG(base)                        ((base)->TST)
#define ENC_CTRL2_REG(base)                      ((base)->CTRL2)
#define ENC_UMOD_REG(base)                       ((base)->UMOD)
#define ENC_LMOD_REG(base)                       ((base)->LMOD)
#define ENC_UCOMP_REG(base)                      ((base)->UCOMP)
#define ENC_LCOMP_REG(base)                      ((base)->LCOMP)

/*!
 * @}
 */ /* end of group ENC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- ENC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENC_Register_Masks ENC Register Masks
 * @{
 */

/*! @name CTRL - Control Register */
#define ENC_CTRL_CMPIE_MASK                      (0x1U)
#define ENC_CTRL_CMPIE_SHIFT                     (0U)
#define ENC_CTRL_CMPIRQ_MASK                     (0x2U)
#define ENC_CTRL_CMPIRQ_SHIFT                    (1U)
#define ENC_CTRL_WDE_MASK                        (0x4U)
#define ENC_CTRL_WDE_SHIFT                       (2U)
#define ENC_CTRL_DIE_MASK                        (0x8U)
#define ENC_CTRL_DIE_SHIFT                       (3U)
#define ENC_CTRL_DIRQ_MASK                       (0x10U)
#define ENC_CTRL_DIRQ_SHIFT                      (4U)
#define ENC_CTRL_XNE_MASK                        (0x20U)
#define ENC_CTRL_XNE_SHIFT                       (5U)
#define ENC_CTRL_XIP_MASK                        (0x40U)
#define ENC_CTRL_XIP_SHIFT                       (6U)
#define ENC_CTRL_XIE_MASK                        (0x80U)
#define ENC_CTRL_XIE_SHIFT                       (7U)
#define ENC_CTRL_XIRQ_MASK                       (0x100U)
#define ENC_CTRL_XIRQ_SHIFT                      (8U)
#define ENC_CTRL_PH1_MASK                        (0x200U)
#define ENC_CTRL_PH1_SHIFT                       (9U)
#define ENC_CTRL_REV_MASK                        (0x400U)
#define ENC_CTRL_REV_SHIFT                       (10U)
#define ENC_CTRL_SWIP_MASK                       (0x800U)
#define ENC_CTRL_SWIP_SHIFT                      (11U)
#define ENC_CTRL_HNE_MASK                        (0x1000U)
#define ENC_CTRL_HNE_SHIFT                       (12U)
#define ENC_CTRL_HIP_MASK                        (0x2000U)
#define ENC_CTRL_HIP_SHIFT                       (13U)
#define ENC_CTRL_HIE_MASK                        (0x4000U)
#define ENC_CTRL_HIE_SHIFT                       (14U)
#define ENC_CTRL_HIRQ_MASK                       (0x8000U)
#define ENC_CTRL_HIRQ_SHIFT                      (15U)

/*! @name FILT - Input Filter Register */
#define ENC_FILT_FILT_PER_MASK                   (0xFFU)
#define ENC_FILT_FILT_PER_SHIFT                  (0U)
#define ENC_FILT_FILT_PER(x)                     (((uint16_t)(((uint16_t)(x)) << ENC_FILT_FILT_PER_SHIFT)) & ENC_FILT_FILT_PER_MASK)
#define ENC_FILT_FILT_CNT_MASK                   (0x700U)
#define ENC_FILT_FILT_CNT_SHIFT                  (8U)
#define ENC_FILT_FILT_CNT(x)                     (((uint16_t)(((uint16_t)(x)) << ENC_FILT_FILT_CNT_SHIFT)) & ENC_FILT_FILT_CNT_MASK)

/*! @name WTR - Watchdog Timeout Register */
#define ENC_WTR_WDOG_MASK                        (0xFFFFU)
#define ENC_WTR_WDOG_SHIFT                       (0U)
#define ENC_WTR_WDOG(x)                          (((uint16_t)(((uint16_t)(x)) << ENC_WTR_WDOG_SHIFT)) & ENC_WTR_WDOG_MASK)

/*! @name POSD - Position Difference Counter Register */
#define ENC_POSD_POSD_MASK                       (0xFFFFU)
#define ENC_POSD_POSD_SHIFT                      (0U)
#define ENC_POSD_POSD(x)                         (((uint16_t)(((uint16_t)(x)) << ENC_POSD_POSD_SHIFT)) & ENC_POSD_POSD_MASK)

/*! @name POSDH - Position Difference Hold Register */
#define ENC_POSDH_POSDH_MASK                     (0xFFFFU)
#define ENC_POSDH_POSDH_SHIFT                    (0U)
#define ENC_POSDH_POSDH(x)                       (((uint16_t)(((uint16_t)(x)) << ENC_POSDH_POSDH_SHIFT)) & ENC_POSDH_POSDH_MASK)

/*! @name REV - Revolution Counter Register */
#define ENC_REV_REV_MASK                         (0xFFFFU)
#define ENC_REV_REV_SHIFT                        (0U)
#define ENC_REV_REV(x)                           (((uint16_t)(((uint16_t)(x)) << ENC_REV_REV_SHIFT)) & ENC_REV_REV_MASK)

/*! @name REVH - Revolution Hold Register */
#define ENC_REVH_REVH_MASK                       (0xFFFFU)
#define ENC_REVH_REVH_SHIFT                      (0U)
#define ENC_REVH_REVH(x)                         (((uint16_t)(((uint16_t)(x)) << ENC_REVH_REVH_SHIFT)) & ENC_REVH_REVH_MASK)

/*! @name UPOS - Upper Position Counter Register */
#define ENC_UPOS_POS_MASK                        (0xFFFFU)
#define ENC_UPOS_POS_SHIFT                       (0U)
#define ENC_UPOS_POS(x)                          (((uint16_t)(((uint16_t)(x)) << ENC_UPOS_POS_SHIFT)) & ENC_UPOS_POS_MASK)

/*! @name LPOS - Lower Position Counter Register */
#define ENC_LPOS_POS_MASK                        (0xFFFFU)
#define ENC_LPOS_POS_SHIFT                       (0U)
#define ENC_LPOS_POS(x)                          (((uint16_t)(((uint16_t)(x)) << ENC_LPOS_POS_SHIFT)) & ENC_LPOS_POS_MASK)

/*! @name UPOSH - Upper Position Hold Register */
#define ENC_UPOSH_POSH_MASK                      (0xFFFFU)
#define ENC_UPOSH_POSH_SHIFT                     (0U)
#define ENC_UPOSH_POSH(x)                        (((uint16_t)(((uint16_t)(x)) << ENC_UPOSH_POSH_SHIFT)) & ENC_UPOSH_POSH_MASK)

/*! @name LPOSH - Lower Position Hold Register */
#define ENC_LPOSH_POSH_MASK                      (0xFFFFU)
#define ENC_LPOSH_POSH_SHIFT                     (0U)
#define ENC_LPOSH_POSH(x)                        (((uint16_t)(((uint16_t)(x)) << ENC_LPOSH_POSH_SHIFT)) & ENC_LPOSH_POSH_MASK)

/*! @name UINIT - Upper Initialization Register */
#define ENC_UINIT_INIT_MASK                      (0xFFFFU)
#define ENC_UINIT_INIT_SHIFT                     (0U)
#define ENC_UINIT_INIT(x)                        (((uint16_t)(((uint16_t)(x)) << ENC_UINIT_INIT_SHIFT)) & ENC_UINIT_INIT_MASK)

/*! @name LINIT - Lower Initialization Register */
#define ENC_LINIT_INIT_MASK                      (0xFFFFU)
#define ENC_LINIT_INIT_SHIFT                     (0U)
#define ENC_LINIT_INIT(x)                        (((uint16_t)(((uint16_t)(x)) << ENC_LINIT_INIT_SHIFT)) & ENC_LINIT_INIT_MASK)

/*! @name IMR - Input Monitor Register */
#define ENC_IMR_HOME_MASK                        (0x1U)
#define ENC_IMR_HOME_SHIFT                       (0U)
#define ENC_IMR_INDEX_MASK                       (0x2U)
#define ENC_IMR_INDEX_SHIFT                      (1U)
#define ENC_IMR_PHB_MASK                         (0x4U)
#define ENC_IMR_PHB_SHIFT                        (2U)
#define ENC_IMR_PHA_MASK                         (0x8U)
#define ENC_IMR_PHA_SHIFT                        (3U)
#define ENC_IMR_FHOM_MASK                        (0x10U)
#define ENC_IMR_FHOM_SHIFT                       (4U)
#define ENC_IMR_FIND_MASK                        (0x20U)
#define ENC_IMR_FIND_SHIFT                       (5U)
#define ENC_IMR_FPHB_MASK                        (0x40U)
#define ENC_IMR_FPHB_SHIFT                       (6U)
#define ENC_IMR_FPHA_MASK                        (0x80U)
#define ENC_IMR_FPHA_SHIFT                       (7U)

/*! @name TST - Test Register */
#define ENC_TST_TEST_COUNT_MASK                  (0xFFU)
#define ENC_TST_TEST_COUNT_SHIFT                 (0U)
#define ENC_TST_TEST_COUNT(x)                    (((uint16_t)(((uint16_t)(x)) << ENC_TST_TEST_COUNT_SHIFT)) & ENC_TST_TEST_COUNT_MASK)
#define ENC_TST_TEST_PERIOD_MASK                 (0x1F00U)
#define ENC_TST_TEST_PERIOD_SHIFT                (8U)
#define ENC_TST_TEST_PERIOD(x)                   (((uint16_t)(((uint16_t)(x)) << ENC_TST_TEST_PERIOD_SHIFT)) & ENC_TST_TEST_PERIOD_MASK)
#define ENC_TST_QDN_MASK                         (0x2000U)
#define ENC_TST_QDN_SHIFT                        (13U)
#define ENC_TST_TCE_MASK                         (0x4000U)
#define ENC_TST_TCE_SHIFT                        (14U)
#define ENC_TST_TEN_MASK                         (0x8000U)
#define ENC_TST_TEN_SHIFT                        (15U)

/*! @name CTRL2 - Control 2 Register */
#define ENC_CTRL2_UPDHLD_MASK                    (0x1U)
#define ENC_CTRL2_UPDHLD_SHIFT                   (0U)
#define ENC_CTRL2_UPDPOS_MASK                    (0x2U)
#define ENC_CTRL2_UPDPOS_SHIFT                   (1U)
#define ENC_CTRL2_MOD_MASK                       (0x4U)
#define ENC_CTRL2_MOD_SHIFT                      (2U)
#define ENC_CTRL2_DIR_MASK                       (0x8U)
#define ENC_CTRL2_DIR_SHIFT                      (3U)
#define ENC_CTRL2_RUIE_MASK                      (0x10U)
#define ENC_CTRL2_RUIE_SHIFT                     (4U)
#define ENC_CTRL2_RUIRQ_MASK                     (0x20U)
#define ENC_CTRL2_RUIRQ_SHIFT                    (5U)
#define ENC_CTRL2_ROIE_MASK                      (0x40U)
#define ENC_CTRL2_ROIE_SHIFT                     (6U)
#define ENC_CTRL2_ROIRQ_MASK                     (0x80U)
#define ENC_CTRL2_ROIRQ_SHIFT                    (7U)
#define ENC_CTRL2_REVMOD_MASK                    (0x100U)
#define ENC_CTRL2_REVMOD_SHIFT                   (8U)
#define ENC_CTRL2_OUTCTL_MASK                    (0x200U)
#define ENC_CTRL2_OUTCTL_SHIFT                   (9U)
#define ENC_CTRL2_SABIE_MASK                     (0x400U)
#define ENC_CTRL2_SABIE_SHIFT                    (10U)
#define ENC_CTRL2_SABIRQ_MASK                    (0x800U)
#define ENC_CTRL2_SABIRQ_SHIFT                   (11U)

/*! @name UMOD - Upper Modulus Register */
#define ENC_UMOD_MOD_MASK                        (0xFFFFU)
#define ENC_UMOD_MOD_SHIFT                       (0U)
#define ENC_UMOD_MOD(x)                          (((uint16_t)(((uint16_t)(x)) << ENC_UMOD_MOD_SHIFT)) & ENC_UMOD_MOD_MASK)

/*! @name LMOD - Lower Modulus Register */
#define ENC_LMOD_MOD_MASK                        (0xFFFFU)
#define ENC_LMOD_MOD_SHIFT                       (0U)
#define ENC_LMOD_MOD(x)                          (((uint16_t)(((uint16_t)(x)) << ENC_LMOD_MOD_SHIFT)) & ENC_LMOD_MOD_MASK)

/*! @name UCOMP - Upper Position Compare Register */
#define ENC_UCOMP_COMP_MASK                      (0xFFFFU)
#define ENC_UCOMP_COMP_SHIFT                     (0U)
#define ENC_UCOMP_COMP(x)                        (((uint16_t)(((uint16_t)(x)) << ENC_UCOMP_COMP_SHIFT)) & ENC_UCOMP_COMP_MASK)

/*! @name LCOMP - Lower Position Compare Register */
#define ENC_LCOMP_COMP_MASK                      (0xFFFFU)
#define ENC_LCOMP_COMP_SHIFT                     (0U)
#define ENC_LCOMP_COMP(x)                        (((uint16_t)(((uint16_t)(x)) << ENC_LCOMP_COMP_SHIFT)) & ENC_LCOMP_COMP_MASK)


/*!
 * @}
 */ /* end of group ENC_Register_Masks */


/* ENC - Peripheral instance base addresses */
/** Peripheral ENC1 base pointer */
#define ENC1_BASE_PTR                            ((ENC_MemMapPtr)0x403C8000u)
/** Peripheral ENC2 base pointer */
#define ENC2_BASE_PTR                            ((ENC_MemMapPtr)0x403CC000u)
/** Array initializer of ENC peripheral base pointers */
#define ENC_BASE_PTRS                            { ENC1_BASE_PTR, ENC2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- ENC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENC_Register_Accessor_Macros ENC - Register accessor macros
 * @{
 */


/* ENC - Register instance definitions */
/* ENC1 */
#define ENC1_CTRL                                ENC_CTRL_REG(ENC1_BASE_PTR)
#define ENC1_FILT                                ENC_FILT_REG(ENC1_BASE_PTR)
#define ENC1_WTR                                 ENC_WTR_REG(ENC1_BASE_PTR)
#define ENC1_POSD                                ENC_POSD_REG(ENC1_BASE_PTR)
#define ENC1_POSDH                               ENC_POSDH_REG(ENC1_BASE_PTR)
#define ENC1_REV                                 ENC_REV_REG(ENC1_BASE_PTR)
#define ENC1_REVH                                ENC_REVH_REG(ENC1_BASE_PTR)
#define ENC1_UPOS                                ENC_UPOS_REG(ENC1_BASE_PTR)
#define ENC1_LPOS                                ENC_LPOS_REG(ENC1_BASE_PTR)
#define ENC1_UPOSH                               ENC_UPOSH_REG(ENC1_BASE_PTR)
#define ENC1_LPOSH                               ENC_LPOSH_REG(ENC1_BASE_PTR)
#define ENC1_UINIT                               ENC_UINIT_REG(ENC1_BASE_PTR)
#define ENC1_LINIT                               ENC_LINIT_REG(ENC1_BASE_PTR)
#define ENC1_IMR                                 ENC_IMR_REG(ENC1_BASE_PTR)
#define ENC1_TST                                 ENC_TST_REG(ENC1_BASE_PTR)
#define ENC1_CTRL2                               ENC_CTRL2_REG(ENC1_BASE_PTR)
#define ENC1_UMOD                                ENC_UMOD_REG(ENC1_BASE_PTR)
#define ENC1_LMOD                                ENC_LMOD_REG(ENC1_BASE_PTR)
#define ENC1_UCOMP                               ENC_UCOMP_REG(ENC1_BASE_PTR)
#define ENC1_LCOMP                               ENC_LCOMP_REG(ENC1_BASE_PTR)
/* ENC2 */
#define ENC2_CTRL                                ENC_CTRL_REG(ENC2_BASE_PTR)
#define ENC2_FILT                                ENC_FILT_REG(ENC2_BASE_PTR)
#define ENC2_WTR                                 ENC_WTR_REG(ENC2_BASE_PTR)
#define ENC2_POSD                                ENC_POSD_REG(ENC2_BASE_PTR)
#define ENC2_POSDH                               ENC_POSDH_REG(ENC2_BASE_PTR)
#define ENC2_REV                                 ENC_REV_REG(ENC2_BASE_PTR)
#define ENC2_REVH                                ENC_REVH_REG(ENC2_BASE_PTR)
#define ENC2_UPOS                                ENC_UPOS_REG(ENC2_BASE_PTR)
#define ENC2_LPOS                                ENC_LPOS_REG(ENC2_BASE_PTR)
#define ENC2_UPOSH                               ENC_UPOSH_REG(ENC2_BASE_PTR)
#define ENC2_LPOSH                               ENC_LPOSH_REG(ENC2_BASE_PTR)
#define ENC2_UINIT                               ENC_UINIT_REG(ENC2_BASE_PTR)
#define ENC2_LINIT                               ENC_LINIT_REG(ENC2_BASE_PTR)
#define ENC2_IMR                                 ENC_IMR_REG(ENC2_BASE_PTR)
#define ENC2_TST                                 ENC_TST_REG(ENC2_BASE_PTR)
#define ENC2_CTRL2                               ENC_CTRL2_REG(ENC2_BASE_PTR)
#define ENC2_UMOD                                ENC_UMOD_REG(ENC2_BASE_PTR)
#define ENC2_LMOD                                ENC_LMOD_REG(ENC2_BASE_PTR)
#define ENC2_UCOMP                               ENC_UCOMP_REG(ENC2_BASE_PTR)
#define ENC2_LCOMP                               ENC_LCOMP_REG(ENC2_BASE_PTR)

/*!
 * @}
 */ /* end of group ENC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group ENC_Peripheral */


/* ----------------------------------------------------------------------------
   -- ENET
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENET_Peripheral ENET
 * @{
 */

/** ENET - Peripheral register structure */
typedef struct ENET_MemMap {
  uint8_t RESERVED_0[4];
  uint32_t EIR;                                    /**< Interrupt Event Register, offset: 0x4 */
  uint32_t EIMR;                                   /**< Interrupt Mask Register, offset: 0x8 */
  uint8_t RESERVED_1[4];
  uint32_t RDAR;                                   /**< Receive Descriptor Active Register, offset: 0x10 */
  uint32_t TDAR;                                   /**< Transmit Descriptor Active Register, offset: 0x14 */
  uint8_t RESERVED_2[12];
  uint32_t ECR;                                    /**< Ethernet Control Register, offset: 0x24 */
  uint8_t RESERVED_3[24];
  uint32_t MMFR;                                   /**< MII Management Frame Register, offset: 0x40 */
  uint32_t MSCR;                                   /**< MII Speed Control Register, offset: 0x44 */
  uint8_t RESERVED_4[28];
  uint32_t MIBC;                                   /**< MIB Control Register, offset: 0x64 */
  uint8_t RESERVED_5[28];
  uint32_t RCR;                                    /**< Receive Control Register, offset: 0x84 */
  uint8_t RESERVED_6[60];
  uint32_t TCR;                                    /**< Transmit Control Register, offset: 0xC4 */
  uint8_t RESERVED_7[28];
  uint32_t PALR;                                   /**< Physical Address Lower Register, offset: 0xE4 */
  uint32_t PAUR;                                   /**< Physical Address Upper Register, offset: 0xE8 */
  uint32_t OPD;                                    /**< Opcode/Pause Duration Register, offset: 0xEC */
  uint32_t TXIC;                                   /**< Transmit Interrupt Coalescing Register, offset: 0xF0 */
  uint8_t RESERVED_8[12];
  uint32_t RXIC;                                   /**< Receive Interrupt Coalescing Register, offset: 0x100 */
  uint8_t RESERVED_9[20];
  uint32_t IAUR;                                   /**< Descriptor Individual Upper Address Register, offset: 0x118 */
  uint32_t IALR;                                   /**< Descriptor Individual Lower Address Register, offset: 0x11C */
  uint32_t GAUR;                                   /**< Descriptor Group Upper Address Register, offset: 0x120 */
  uint32_t GALR;                                   /**< Descriptor Group Lower Address Register, offset: 0x124 */
  uint8_t RESERVED_10[28];
  uint32_t TFWR;                                   /**< Transmit FIFO Watermark Register, offset: 0x144 */
  uint8_t RESERVED_11[56];
  uint32_t RDSR;                                   /**< Receive Descriptor Ring Start Register, offset: 0x180 */
  uint32_t TDSR;                                   /**< Transmit Buffer Descriptor Ring Start Register, offset: 0x184 */
  uint32_t MRBR;                                   /**< Maximum Receive Buffer Size Register, offset: 0x188 */
  uint8_t RESERVED_12[4];
  uint32_t RSFL;                                   /**< Receive FIFO Section Full Threshold, offset: 0x190 */
  uint32_t RSEM;                                   /**< Receive FIFO Section Empty Threshold, offset: 0x194 */
  uint32_t RAEM;                                   /**< Receive FIFO Almost Empty Threshold, offset: 0x198 */
  uint32_t RAFL;                                   /**< Receive FIFO Almost Full Threshold, offset: 0x19C */
  uint32_t TSEM;                                   /**< Transmit FIFO Section Empty Threshold, offset: 0x1A0 */
  uint32_t TAEM;                                   /**< Transmit FIFO Almost Empty Threshold, offset: 0x1A4 */
  uint32_t TAFL;                                   /**< Transmit FIFO Almost Full Threshold, offset: 0x1A8 */
  uint32_t TIPG;                                   /**< Transmit Inter-Packet Gap, offset: 0x1AC */
  uint32_t FTRL;                                   /**< Frame Truncation Length, offset: 0x1B0 */
  uint8_t RESERVED_13[12];
  uint32_t TACC;                                   /**< Transmit Accelerator Function Configuration, offset: 0x1C0 */
  uint32_t RACC;                                   /**< Receive Accelerator Function Configuration, offset: 0x1C4 */
  uint8_t RESERVED_14[56];
  uint32_t RMON_T_DROP;                            /**< Reserved Statistic Register, offset: 0x200 */
  uint32_t RMON_T_PACKETS;                         /**< Tx Packet Count Statistic Register, offset: 0x204 */
  uint32_t RMON_T_BC_PKT;                          /**< Tx Broadcast Packets Statistic Register, offset: 0x208 */
  uint32_t RMON_T_MC_PKT;                          /**< Tx Multicast Packets Statistic Register, offset: 0x20C */
  uint32_t RMON_T_CRC_ALIGN;                       /**< Tx Packets with CRC/Align Error Statistic Register, offset: 0x210 */
  uint32_t RMON_T_UNDERSIZE;                       /**< Tx Packets Less Than Bytes and Good CRC Statistic Register, offset: 0x214 */
  uint32_t RMON_T_OVERSIZE;                        /**< Tx Packets GT MAX_FL bytes and Good CRC Statistic Register, offset: 0x218 */
  uint32_t RMON_T_FRAG;                            /**< Tx Packets Less Than 64 Bytes and Bad CRC Statistic Register, offset: 0x21C */
  uint32_t RMON_T_JAB;                             /**< Tx Packets Greater Than MAX_FL bytes and Bad CRC Statistic Register, offset: 0x220 */
  uint32_t RMON_T_COL;                             /**< Tx Collision Count Statistic Register, offset: 0x224 */
  uint32_t RMON_T_P64;                             /**< Tx 64-Byte Packets Statistic Register, offset: 0x228 */
  uint32_t RMON_T_P65TO127;                        /**< Tx 65- to 127-byte Packets Statistic Register, offset: 0x22C */
  uint32_t RMON_T_P128TO255;                       /**< Tx 128- to 255-byte Packets Statistic Register, offset: 0x230 */
  uint32_t RMON_T_P256TO511;                       /**< Tx 256- to 511-byte Packets Statistic Register, offset: 0x234 */
  uint32_t RMON_T_P512TO1023;                      /**< Tx 512- to 1023-byte Packets Statistic Register, offset: 0x238 */
  uint32_t RMON_T_P1024TO2047;                     /**< Tx 1024- to 2047-byte Packets Statistic Register, offset: 0x23C */
  uint32_t RMON_T_P_GTE2048;                       /**< Tx Packets Greater Than 2048 Bytes Statistic Register, offset: 0x240 */
  uint32_t RMON_T_OCTETS;                          /**< Tx Octets Statistic Register, offset: 0x244 */
  uint32_t IEEE_T_DROP;                            /**< Reserved Statistic Register, offset: 0x248 */
  uint32_t IEEE_T_FRAME_OK;                        /**< Frames Transmitted OK Statistic Register, offset: 0x24C */
  uint32_t IEEE_T_1COL;                            /**< Frames Transmitted with Single Collision Statistic Register, offset: 0x250 */
  uint32_t IEEE_T_MCOL;                            /**< Frames Transmitted with Multiple Collisions Statistic Register, offset: 0x254 */
  uint32_t IEEE_T_DEF;                             /**< Frames Transmitted after Deferral Delay Statistic Register, offset: 0x258 */
  uint32_t IEEE_T_LCOL;                            /**< Frames Transmitted with Late Collision Statistic Register, offset: 0x25C */
  uint32_t IEEE_T_EXCOL;                           /**< Frames Transmitted with Excessive Collisions Statistic Register, offset: 0x260 */
  uint32_t IEEE_T_MACERR;                          /**< Frames Transmitted with Tx FIFO Underrun Statistic Register, offset: 0x264 */
  uint32_t IEEE_T_CSERR;                           /**< Frames Transmitted with Carrier Sense Error Statistic Register, offset: 0x268 */
  uint32_t IEEE_T_SQE;                             /**< Reserved Statistic Register, offset: 0x26C */
  uint32_t IEEE_T_FDXFC;                           /**< Flow Control Pause Frames Transmitted Statistic Register, offset: 0x270 */
  uint32_t IEEE_T_OCTETS_OK;                       /**< Octet Count for Frames Transmitted w/o Error Statistic Register, offset: 0x274 */
  uint8_t RESERVED_15[12];
  uint32_t RMON_R_PACKETS;                         /**< Rx Packet Count Statistic Register, offset: 0x284 */
  uint32_t RMON_R_BC_PKT;                          /**< Rx Broadcast Packets Statistic Register, offset: 0x288 */
  uint32_t RMON_R_MC_PKT;                          /**< Rx Multicast Packets Statistic Register, offset: 0x28C */
  uint32_t RMON_R_CRC_ALIGN;                       /**< Rx Packets with CRC/Align Error Statistic Register, offset: 0x290 */
  uint32_t RMON_R_UNDERSIZE;                       /**< Rx Packets with Less Than 64 Bytes and Good CRC Statistic Register, offset: 0x294 */
  uint32_t RMON_R_OVERSIZE;                        /**< Rx Packets Greater Than MAX_FL and Good CRC Statistic Register, offset: 0x298 */
  uint32_t RMON_R_FRAG;                            /**< Rx Packets Less Than 64 Bytes and Bad CRC Statistic Register, offset: 0x29C */
  uint32_t RMON_R_JAB;                             /**< Rx Packets Greater Than MAX_FL Bytes and Bad CRC Statistic Register, offset: 0x2A0 */
  uint32_t RMON_R_RESVD_0;                         /**< Reserved Statistic Register, offset: 0x2A4 */
  uint32_t RMON_R_P64;                             /**< Rx 64-Byte Packets Statistic Register, offset: 0x2A8 */
  uint32_t RMON_R_P65TO127;                        /**< Rx 65- to 127-Byte Packets Statistic Register, offset: 0x2AC */
  uint32_t RMON_R_P128TO255;                       /**< Rx 128- to 255-Byte Packets Statistic Register, offset: 0x2B0 */
  uint32_t RMON_R_P256TO511;                       /**< Rx 256- to 511-Byte Packets Statistic Register, offset: 0x2B4 */
  uint32_t RMON_R_P512TO1023;                      /**< Rx 512- to 1023-Byte Packets Statistic Register, offset: 0x2B8 */
  uint32_t RMON_R_P1024TO2047;                     /**< Rx 1024- to 2047-Byte Packets Statistic Register, offset: 0x2BC */
  uint32_t RMON_R_P_GTE2048;                       /**< Rx Packets Greater than 2048 Bytes Statistic Register, offset: 0x2C0 */
  uint32_t RMON_R_OCTETS;                          /**< Rx Octets Statistic Register, offset: 0x2C4 */
  uint32_t IEEE_R_DROP;                            /**< Frames not Counted Correctly Statistic Register, offset: 0x2C8 */
  uint32_t IEEE_R_FRAME_OK;                        /**< Frames Received OK Statistic Register, offset: 0x2CC */
  uint32_t IEEE_R_CRC;                             /**< Frames Received with CRC Error Statistic Register, offset: 0x2D0 */
  uint32_t IEEE_R_ALIGN;                           /**< Frames Received with Alignment Error Statistic Register, offset: 0x2D4 */
  uint32_t IEEE_R_MACERR;                          /**< Receive FIFO Overflow Count Statistic Register, offset: 0x2D8 */
  uint32_t IEEE_R_FDXFC;                           /**< Flow Control Pause Frames Received Statistic Register, offset: 0x2DC */
  uint32_t IEEE_R_OCTETS_OK;                       /**< Octet Count for Frames Received without Error Statistic Register, offset: 0x2E0 */
  uint8_t RESERVED_16[284];
  uint32_t ATCR;                                   /**< Adjustable Timer Control Register, offset: 0x400 */
  uint32_t ATVR;                                   /**< Timer Value Register, offset: 0x404 */
  uint32_t ATOFF;                                  /**< Timer Offset Register, offset: 0x408 */
  uint32_t ATPER;                                  /**< Timer Period Register, offset: 0x40C */
  uint32_t ATCOR;                                  /**< Timer Correction Register, offset: 0x410 */
  uint32_t ATINC;                                  /**< Time-Stamping Clock Period Register, offset: 0x414 */
  uint32_t ATSTMP;                                 /**< Timestamp of Last Transmitted Frame, offset: 0x418 */
  uint8_t RESERVED_17[488];
  uint32_t TGSR;                                   /**< Timer Global Status Register, offset: 0x604 */
  struct {                                         /* offset: 0x608, array step: 0x8 */
    uint32_t TCSR;                                   /**< Timer Control Status Register, array offset: 0x608, array step: 0x8 */
    uint32_t TCCR;                                   /**< Timer Compare Capture Register, array offset: 0x60C, array step: 0x8 */
  } CHANNEL[4];
} volatile *ENET_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- ENET - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENET_Register_Accessor_Macros ENET - Register accessor macros
 * @{
 */


/* ENET - Register accessors */
#define ENET_EIR_REG(base)                       ((base)->EIR)
#define ENET_EIMR_REG(base)                      ((base)->EIMR)
#define ENET_RDAR_REG(base)                      ((base)->RDAR)
#define ENET_TDAR_REG(base)                      ((base)->TDAR)
#define ENET_ECR_REG(base)                       ((base)->ECR)
#define ENET_MMFR_REG(base)                      ((base)->MMFR)
#define ENET_MSCR_REG(base)                      ((base)->MSCR)
#define ENET_MIBC_REG(base)                      ((base)->MIBC)
#define ENET_RCR_REG(base)                       ((base)->RCR)
#define ENET_TCR_REG(base)                       ((base)->TCR)
#define ENET_PALR_REG(base)                      ((base)->PALR)
#define ENET_PAUR_REG(base)                      ((base)->PAUR)
#define ENET_OPD_REG(base)                       ((base)->OPD)
#define ENET_TXIC_REG(base)                      ((base)->TXIC)
#define ENET_RXIC_REG(base)                      ((base)->RXIC)
#define ENET_IAUR_REG(base)                      ((base)->IAUR)
#define ENET_IALR_REG(base)                      ((base)->IALR)
#define ENET_GAUR_REG(base)                      ((base)->GAUR)
#define ENET_GALR_REG(base)                      ((base)->GALR)
#define ENET_TFWR_REG(base)                      ((base)->TFWR)
#define ENET_RDSR_REG(base)                      ((base)->RDSR)
#define ENET_TDSR_REG(base)                      ((base)->TDSR)
#define ENET_MRBR_REG(base)                      ((base)->MRBR)
#define ENET_RSFL_REG(base)                      ((base)->RSFL)
#define ENET_RSEM_REG(base)                      ((base)->RSEM)
#define ENET_RAEM_REG(base)                      ((base)->RAEM)
#define ENET_RAFL_REG(base)                      ((base)->RAFL)
#define ENET_TSEM_REG(base)                      ((base)->TSEM)
#define ENET_TAEM_REG(base)                      ((base)->TAEM)
#define ENET_TAFL_REG(base)                      ((base)->TAFL)
#define ENET_TIPG_REG(base)                      ((base)->TIPG)
#define ENET_FTRL_REG(base)                      ((base)->FTRL)
#define ENET_TACC_REG(base)                      ((base)->TACC)
#define ENET_RACC_REG(base)                      ((base)->RACC)
#define ENET_RMON_T_DROP_REG(base)               ((base)->RMON_T_DROP)
#define ENET_RMON_T_PACKETS_REG(base)            ((base)->RMON_T_PACKETS)
#define ENET_RMON_T_BC_PKT_REG(base)             ((base)->RMON_T_BC_PKT)
#define ENET_RMON_T_MC_PKT_REG(base)             ((base)->RMON_T_MC_PKT)
#define ENET_RMON_T_CRC_ALIGN_REG(base)          ((base)->RMON_T_CRC_ALIGN)
#define ENET_RMON_T_UNDERSIZE_REG(base)          ((base)->RMON_T_UNDERSIZE)
#define ENET_RMON_T_OVERSIZE_REG(base)           ((base)->RMON_T_OVERSIZE)
#define ENET_RMON_T_FRAG_REG(base)               ((base)->RMON_T_FRAG)
#define ENET_RMON_T_JAB_REG(base)                ((base)->RMON_T_JAB)
#define ENET_RMON_T_COL_REG(base)                ((base)->RMON_T_COL)
#define ENET_RMON_T_P64_REG(base)                ((base)->RMON_T_P64)
#define ENET_RMON_T_P65TO127_REG(base)           ((base)->RMON_T_P65TO127)
#define ENET_RMON_T_P128TO255_REG(base)          ((base)->RMON_T_P128TO255)
#define ENET_RMON_T_P256TO511_REG(base)          ((base)->RMON_T_P256TO511)
#define ENET_RMON_T_P512TO1023_REG(base)         ((base)->RMON_T_P512TO1023)
#define ENET_RMON_T_P1024TO2047_REG(base)        ((base)->RMON_T_P1024TO2047)
#define ENET_RMON_T_P_GTE2048_REG(base)          ((base)->RMON_T_P_GTE2048)
#define ENET_RMON_T_OCTETS_REG(base)             ((base)->RMON_T_OCTETS)
#define ENET_IEEE_T_DROP_REG(base)               ((base)->IEEE_T_DROP)
#define ENET_IEEE_T_FRAME_OK_REG(base)           ((base)->IEEE_T_FRAME_OK)
#define ENET_IEEE_T_1COL_REG(base)               ((base)->IEEE_T_1COL)
#define ENET_IEEE_T_MCOL_REG(base)               ((base)->IEEE_T_MCOL)
#define ENET_IEEE_T_DEF_REG(base)                ((base)->IEEE_T_DEF)
#define ENET_IEEE_T_LCOL_REG(base)               ((base)->IEEE_T_LCOL)
#define ENET_IEEE_T_EXCOL_REG(base)              ((base)->IEEE_T_EXCOL)
#define ENET_IEEE_T_MACERR_REG(base)             ((base)->IEEE_T_MACERR)
#define ENET_IEEE_T_CSERR_REG(base)              ((base)->IEEE_T_CSERR)
#define ENET_IEEE_T_SQE_REG(base)                ((base)->IEEE_T_SQE)
#define ENET_IEEE_T_FDXFC_REG(base)              ((base)->IEEE_T_FDXFC)
#define ENET_IEEE_T_OCTETS_OK_REG(base)          ((base)->IEEE_T_OCTETS_OK)
#define ENET_RMON_R_PACKETS_REG(base)            ((base)->RMON_R_PACKETS)
#define ENET_RMON_R_BC_PKT_REG(base)             ((base)->RMON_R_BC_PKT)
#define ENET_RMON_R_MC_PKT_REG(base)             ((base)->RMON_R_MC_PKT)
#define ENET_RMON_R_CRC_ALIGN_REG(base)          ((base)->RMON_R_CRC_ALIGN)
#define ENET_RMON_R_UNDERSIZE_REG(base)          ((base)->RMON_R_UNDERSIZE)
#define ENET_RMON_R_OVERSIZE_REG(base)           ((base)->RMON_R_OVERSIZE)
#define ENET_RMON_R_FRAG_REG(base)               ((base)->RMON_R_FRAG)
#define ENET_RMON_R_JAB_REG(base)                ((base)->RMON_R_JAB)
#define ENET_RMON_R_RESVD_0_REG(base)            ((base)->RMON_R_RESVD_0)
#define ENET_RMON_R_P64_REG(base)                ((base)->RMON_R_P64)
#define ENET_RMON_R_P65TO127_REG(base)           ((base)->RMON_R_P65TO127)
#define ENET_RMON_R_P128TO255_REG(base)          ((base)->RMON_R_P128TO255)
#define ENET_RMON_R_P256TO511_REG(base)          ((base)->RMON_R_P256TO511)
#define ENET_RMON_R_P512TO1023_REG(base)         ((base)->RMON_R_P512TO1023)
#define ENET_RMON_R_P1024TO2047_REG(base)        ((base)->RMON_R_P1024TO2047)
#define ENET_RMON_R_P_GTE2048_REG(base)          ((base)->RMON_R_P_GTE2048)
#define ENET_RMON_R_OCTETS_REG(base)             ((base)->RMON_R_OCTETS)
#define ENET_IEEE_R_DROP_REG(base)               ((base)->IEEE_R_DROP)
#define ENET_IEEE_R_FRAME_OK_REG(base)           ((base)->IEEE_R_FRAME_OK)
#define ENET_IEEE_R_CRC_REG(base)                ((base)->IEEE_R_CRC)
#define ENET_IEEE_R_ALIGN_REG(base)              ((base)->IEEE_R_ALIGN)
#define ENET_IEEE_R_MACERR_REG(base)             ((base)->IEEE_R_MACERR)
#define ENET_IEEE_R_FDXFC_REG(base)              ((base)->IEEE_R_FDXFC)
#define ENET_IEEE_R_OCTETS_OK_REG(base)          ((base)->IEEE_R_OCTETS_OK)
#define ENET_ATCR_REG(base)                      ((base)->ATCR)
#define ENET_ATVR_REG(base)                      ((base)->ATVR)
#define ENET_ATOFF_REG(base)                     ((base)->ATOFF)
#define ENET_ATPER_REG(base)                     ((base)->ATPER)
#define ENET_ATCOR_REG(base)                     ((base)->ATCOR)
#define ENET_ATINC_REG(base)                     ((base)->ATINC)
#define ENET_ATSTMP_REG(base)                    ((base)->ATSTMP)
#define ENET_TGSR_REG(base)                      ((base)->TGSR)
#define ENET_TCSR_REG(base,index)                ((base)->CHANNEL[index].TCSR)
#define ENET_TCCR_REG(base,index)                ((base)->CHANNEL[index].TCCR)

/*!
 * @}
 */ /* end of group ENET_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- ENET Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENET_Register_Masks ENET Register Masks
 * @{
 */

/*! @name EIR - Interrupt Event Register */
#define ENET_EIR_TS_TIMER_MASK                   (0x8000U)
#define ENET_EIR_TS_TIMER_SHIFT                  (15U)
#define ENET_EIR_TS_AVAIL_MASK                   (0x10000U)
#define ENET_EIR_TS_AVAIL_SHIFT                  (16U)
#define ENET_EIR_WAKEUP_MASK                     (0x20000U)
#define ENET_EIR_WAKEUP_SHIFT                    (17U)
#define ENET_EIR_PLR_MASK                        (0x40000U)
#define ENET_EIR_PLR_SHIFT                       (18U)
#define ENET_EIR_UN_MASK                         (0x80000U)
#define ENET_EIR_UN_SHIFT                        (19U)
#define ENET_EIR_RL_MASK                         (0x100000U)
#define ENET_EIR_RL_SHIFT                        (20U)
#define ENET_EIR_LC_MASK                         (0x200000U)
#define ENET_EIR_LC_SHIFT                        (21U)
#define ENET_EIR_EBERR_MASK                      (0x400000U)
#define ENET_EIR_EBERR_SHIFT                     (22U)
#define ENET_EIR_MII_MASK                        (0x800000U)
#define ENET_EIR_MII_SHIFT                       (23U)
#define ENET_EIR_RXB_MASK                        (0x1000000U)
#define ENET_EIR_RXB_SHIFT                       (24U)
#define ENET_EIR_RXF_MASK                        (0x2000000U)
#define ENET_EIR_RXF_SHIFT                       (25U)
#define ENET_EIR_TXB_MASK                        (0x4000000U)
#define ENET_EIR_TXB_SHIFT                       (26U)
#define ENET_EIR_TXF_MASK                        (0x8000000U)
#define ENET_EIR_TXF_SHIFT                       (27U)
#define ENET_EIR_GRA_MASK                        (0x10000000U)
#define ENET_EIR_GRA_SHIFT                       (28U)
#define ENET_EIR_BABT_MASK                       (0x20000000U)
#define ENET_EIR_BABT_SHIFT                      (29U)
#define ENET_EIR_BABR_MASK                       (0x40000000U)
#define ENET_EIR_BABR_SHIFT                      (30U)

/*! @name EIMR - Interrupt Mask Register */
#define ENET_EIMR_TS_TIMER_MASK                  (0x8000U)
#define ENET_EIMR_TS_TIMER_SHIFT                 (15U)
#define ENET_EIMR_TS_AVAIL_MASK                  (0x10000U)
#define ENET_EIMR_TS_AVAIL_SHIFT                 (16U)
#define ENET_EIMR_WAKEUP_MASK                    (0x20000U)
#define ENET_EIMR_WAKEUP_SHIFT                   (17U)
#define ENET_EIMR_PLR_MASK                       (0x40000U)
#define ENET_EIMR_PLR_SHIFT                      (18U)
#define ENET_EIMR_UN_MASK                        (0x80000U)
#define ENET_EIMR_UN_SHIFT                       (19U)
#define ENET_EIMR_RL_MASK                        (0x100000U)
#define ENET_EIMR_RL_SHIFT                       (20U)
#define ENET_EIMR_LC_MASK                        (0x200000U)
#define ENET_EIMR_LC_SHIFT                       (21U)
#define ENET_EIMR_EBERR_MASK                     (0x400000U)
#define ENET_EIMR_EBERR_SHIFT                    (22U)
#define ENET_EIMR_MII_MASK                       (0x800000U)
#define ENET_EIMR_MII_SHIFT                      (23U)
#define ENET_EIMR_RXB_MASK                       (0x1000000U)
#define ENET_EIMR_RXB_SHIFT                      (24U)
#define ENET_EIMR_RXF_MASK                       (0x2000000U)
#define ENET_EIMR_RXF_SHIFT                      (25U)
#define ENET_EIMR_TXB_MASK                       (0x4000000U)
#define ENET_EIMR_TXB_SHIFT                      (26U)
#define ENET_EIMR_TXF_MASK                       (0x8000000U)
#define ENET_EIMR_TXF_SHIFT                      (27U)
#define ENET_EIMR_GRA_MASK                       (0x10000000U)
#define ENET_EIMR_GRA_SHIFT                      (28U)
#define ENET_EIMR_BABT_MASK                      (0x20000000U)
#define ENET_EIMR_BABT_SHIFT                     (29U)
#define ENET_EIMR_BABR_MASK                      (0x40000000U)
#define ENET_EIMR_BABR_SHIFT                     (30U)

/*! @name RDAR - Receive Descriptor Active Register */
#define ENET_RDAR_RDAR_MASK                      (0x1000000U)
#define ENET_RDAR_RDAR_SHIFT                     (24U)

/*! @name TDAR - Transmit Descriptor Active Register */
#define ENET_TDAR_TDAR_MASK                      (0x1000000U)
#define ENET_TDAR_TDAR_SHIFT                     (24U)

/*! @name ECR - Ethernet Control Register */
#define ENET_ECR_RESET_MASK                      (0x1U)
#define ENET_ECR_RESET_SHIFT                     (0U)
#define ENET_ECR_ETHEREN_MASK                    (0x2U)
#define ENET_ECR_ETHEREN_SHIFT                   (1U)
#define ENET_ECR_MAGICEN_MASK                    (0x4U)
#define ENET_ECR_MAGICEN_SHIFT                   (2U)
#define ENET_ECR_SLEEP_MASK                      (0x8U)
#define ENET_ECR_SLEEP_SHIFT                     (3U)
#define ENET_ECR_EN1588_MASK                     (0x10U)
#define ENET_ECR_EN1588_SHIFT                    (4U)
#define ENET_ECR_DBGEN_MASK                      (0x40U)
#define ENET_ECR_DBGEN_SHIFT                     (6U)
#define ENET_ECR_DBSWP_MASK                      (0x100U)
#define ENET_ECR_DBSWP_SHIFT                     (8U)

/*! @name MMFR - MII Management Frame Register */
#define ENET_MMFR_DATA_MASK                      (0xFFFFU)
#define ENET_MMFR_DATA_SHIFT                     (0U)
#define ENET_MMFR_DATA(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_DATA_SHIFT)) & ENET_MMFR_DATA_MASK)
#define ENET_MMFR_TA_MASK                        (0x30000U)
#define ENET_MMFR_TA_SHIFT                       (16U)
#define ENET_MMFR_TA(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_TA_SHIFT)) & ENET_MMFR_TA_MASK)
#define ENET_MMFR_RA_MASK                        (0x7C0000U)
#define ENET_MMFR_RA_SHIFT                       (18U)
#define ENET_MMFR_RA(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_RA_SHIFT)) & ENET_MMFR_RA_MASK)
#define ENET_MMFR_PA_MASK                        (0xF800000U)
#define ENET_MMFR_PA_SHIFT                       (23U)
#define ENET_MMFR_PA(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_PA_SHIFT)) & ENET_MMFR_PA_MASK)
#define ENET_MMFR_OP_MASK                        (0x30000000U)
#define ENET_MMFR_OP_SHIFT                       (28U)
#define ENET_MMFR_OP(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_OP_SHIFT)) & ENET_MMFR_OP_MASK)
#define ENET_MMFR_ST_MASK                        (0xC0000000U)
#define ENET_MMFR_ST_SHIFT                       (30U)
#define ENET_MMFR_ST(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_ST_SHIFT)) & ENET_MMFR_ST_MASK)

/*! @name MSCR - MII Speed Control Register */
#define ENET_MSCR_MII_SPEED_MASK                 (0x7EU)
#define ENET_MSCR_MII_SPEED_SHIFT                (1U)
#define ENET_MSCR_MII_SPEED(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_MSCR_MII_SPEED_SHIFT)) & ENET_MSCR_MII_SPEED_MASK)
#define ENET_MSCR_DIS_PRE_MASK                   (0x80U)
#define ENET_MSCR_DIS_PRE_SHIFT                  (7U)
#define ENET_MSCR_HOLDTIME_MASK                  (0x700U)
#define ENET_MSCR_HOLDTIME_SHIFT                 (8U)
#define ENET_MSCR_HOLDTIME(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MSCR_HOLDTIME_SHIFT)) & ENET_MSCR_HOLDTIME_MASK)

/*! @name MIBC - MIB Control Register */
#define ENET_MIBC_MIB_CLEAR_MASK                 (0x20000000U)
#define ENET_MIBC_MIB_CLEAR_SHIFT                (29U)
#define ENET_MIBC_MIB_IDLE_MASK                  (0x40000000U)
#define ENET_MIBC_MIB_IDLE_SHIFT                 (30U)
#define ENET_MIBC_MIB_DIS_MASK                   (0x80000000U)
#define ENET_MIBC_MIB_DIS_SHIFT                  (31U)

/*! @name RCR - Receive Control Register */
#define ENET_RCR_LOOP_MASK                       (0x1U)
#define ENET_RCR_LOOP_SHIFT                      (0U)
#define ENET_RCR_DRT_MASK                        (0x2U)
#define ENET_RCR_DRT_SHIFT                       (1U)
#define ENET_RCR_MII_MODE_MASK                   (0x4U)
#define ENET_RCR_MII_MODE_SHIFT                  (2U)
#define ENET_RCR_PROM_MASK                       (0x8U)
#define ENET_RCR_PROM_SHIFT                      (3U)
#define ENET_RCR_BC_REJ_MASK                     (0x10U)
#define ENET_RCR_BC_REJ_SHIFT                    (4U)
#define ENET_RCR_FCE_MASK                        (0x20U)
#define ENET_RCR_FCE_SHIFT                       (5U)
#define ENET_RCR_RMII_MODE_MASK                  (0x100U)
#define ENET_RCR_RMII_MODE_SHIFT                 (8U)
#define ENET_RCR_RMII_10T_MASK                   (0x200U)
#define ENET_RCR_RMII_10T_SHIFT                  (9U)
#define ENET_RCR_PADEN_MASK                      (0x1000U)
#define ENET_RCR_PADEN_SHIFT                     (12U)
#define ENET_RCR_PAUFWD_MASK                     (0x2000U)
#define ENET_RCR_PAUFWD_SHIFT                    (13U)
#define ENET_RCR_CRCFWD_MASK                     (0x4000U)
#define ENET_RCR_CRCFWD_SHIFT                    (14U)
#define ENET_RCR_CFEN_MASK                       (0x8000U)
#define ENET_RCR_CFEN_SHIFT                      (15U)
#define ENET_RCR_MAX_FL_MASK                     (0x3FFF0000U)
#define ENET_RCR_MAX_FL_SHIFT                    (16U)
#define ENET_RCR_MAX_FL(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_RCR_MAX_FL_SHIFT)) & ENET_RCR_MAX_FL_MASK)
#define ENET_RCR_NLC_MASK                        (0x40000000U)
#define ENET_RCR_NLC_SHIFT                       (30U)
#define ENET_RCR_GRS_MASK                        (0x80000000U)
#define ENET_RCR_GRS_SHIFT                       (31U)

/*! @name TCR - Transmit Control Register */
#define ENET_TCR_GTS_MASK                        (0x1U)
#define ENET_TCR_GTS_SHIFT                       (0U)
#define ENET_TCR_FDEN_MASK                       (0x4U)
#define ENET_TCR_FDEN_SHIFT                      (2U)
#define ENET_TCR_TFC_PAUSE_MASK                  (0x8U)
#define ENET_TCR_TFC_PAUSE_SHIFT                 (3U)
#define ENET_TCR_RFC_PAUSE_MASK                  (0x10U)
#define ENET_TCR_RFC_PAUSE_SHIFT                 (4U)
#define ENET_TCR_ADDSEL_MASK                     (0xE0U)
#define ENET_TCR_ADDSEL_SHIFT                    (5U)
#define ENET_TCR_ADDSEL(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_TCR_ADDSEL_SHIFT)) & ENET_TCR_ADDSEL_MASK)
#define ENET_TCR_ADDINS_MASK                     (0x100U)
#define ENET_TCR_ADDINS_SHIFT                    (8U)
#define ENET_TCR_CRCFWD_MASK                     (0x200U)
#define ENET_TCR_CRCFWD_SHIFT                    (9U)

/*! @name PALR - Physical Address Lower Register */
#define ENET_PALR_PADDR1_MASK                    (0xFFFFFFFFU)
#define ENET_PALR_PADDR1_SHIFT                   (0U)
#define ENET_PALR_PADDR1(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_PALR_PADDR1_SHIFT)) & ENET_PALR_PADDR1_MASK)

/*! @name PAUR - Physical Address Upper Register */
#define ENET_PAUR_TYPE_MASK                      (0xFFFFU)
#define ENET_PAUR_TYPE_SHIFT                     (0U)
#define ENET_PAUR_TYPE(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_PAUR_TYPE_SHIFT)) & ENET_PAUR_TYPE_MASK)
#define ENET_PAUR_PADDR2_MASK                    (0xFFFF0000U)
#define ENET_PAUR_PADDR2_SHIFT                   (16U)
#define ENET_PAUR_PADDR2(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_PAUR_PADDR2_SHIFT)) & ENET_PAUR_PADDR2_MASK)

/*! @name OPD - Opcode/Pause Duration Register */
#define ENET_OPD_PAUSE_DUR_MASK                  (0xFFFFU)
#define ENET_OPD_PAUSE_DUR_SHIFT                 (0U)
#define ENET_OPD_PAUSE_DUR(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_OPD_PAUSE_DUR_SHIFT)) & ENET_OPD_PAUSE_DUR_MASK)
#define ENET_OPD_OPCODE_MASK                     (0xFFFF0000U)
#define ENET_OPD_OPCODE_SHIFT                    (16U)
#define ENET_OPD_OPCODE(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_OPD_OPCODE_SHIFT)) & ENET_OPD_OPCODE_MASK)

/*! @name TXIC - Transmit Interrupt Coalescing Register */
#define ENET_TXIC_ICTT_MASK                      (0xFFFFU)
#define ENET_TXIC_ICTT_SHIFT                     (0U)
#define ENET_TXIC_ICTT(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_TXIC_ICTT_SHIFT)) & ENET_TXIC_ICTT_MASK)
#define ENET_TXIC_ICFT_MASK                      (0xFF00000U)
#define ENET_TXIC_ICFT_SHIFT                     (20U)
#define ENET_TXIC_ICFT(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_TXIC_ICFT_SHIFT)) & ENET_TXIC_ICFT_MASK)
#define ENET_TXIC_ICCS_MASK                      (0x40000000U)
#define ENET_TXIC_ICCS_SHIFT                     (30U)
#define ENET_TXIC_ICEN_MASK                      (0x80000000U)
#define ENET_TXIC_ICEN_SHIFT                     (31U)

/*! @name RXIC - Receive Interrupt Coalescing Register */
#define ENET_RXIC_ICTT_MASK                      (0xFFFFU)
#define ENET_RXIC_ICTT_SHIFT                     (0U)
#define ENET_RXIC_ICTT(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RXIC_ICTT_SHIFT)) & ENET_RXIC_ICTT_MASK)
#define ENET_RXIC_ICFT_MASK                      (0xFF00000U)
#define ENET_RXIC_ICFT_SHIFT                     (20U)
#define ENET_RXIC_ICFT(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RXIC_ICFT_SHIFT)) & ENET_RXIC_ICFT_MASK)
#define ENET_RXIC_ICCS_MASK                      (0x40000000U)
#define ENET_RXIC_ICCS_SHIFT                     (30U)
#define ENET_RXIC_ICEN_MASK                      (0x80000000U)
#define ENET_RXIC_ICEN_SHIFT                     (31U)

/*! @name IAUR - Descriptor Individual Upper Address Register */
#define ENET_IAUR_IADDR1_MASK                    (0xFFFFFFFFU)
#define ENET_IAUR_IADDR1_SHIFT                   (0U)
#define ENET_IAUR_IADDR1(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_IAUR_IADDR1_SHIFT)) & ENET_IAUR_IADDR1_MASK)

/*! @name IALR - Descriptor Individual Lower Address Register */
#define ENET_IALR_IADDR2_MASK                    (0xFFFFFFFFU)
#define ENET_IALR_IADDR2_SHIFT                   (0U)
#define ENET_IALR_IADDR2(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_IALR_IADDR2_SHIFT)) & ENET_IALR_IADDR2_MASK)

/*! @name GAUR - Descriptor Group Upper Address Register */
#define ENET_GAUR_GADDR1_MASK                    (0xFFFFFFFFU)
#define ENET_GAUR_GADDR1_SHIFT                   (0U)
#define ENET_GAUR_GADDR1(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_GAUR_GADDR1_SHIFT)) & ENET_GAUR_GADDR1_MASK)

/*! @name GALR - Descriptor Group Lower Address Register */
#define ENET_GALR_GADDR2_MASK                    (0xFFFFFFFFU)
#define ENET_GALR_GADDR2_SHIFT                   (0U)
#define ENET_GALR_GADDR2(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_GALR_GADDR2_SHIFT)) & ENET_GALR_GADDR2_MASK)

/*! @name TFWR - Transmit FIFO Watermark Register */
#define ENET_TFWR_TFWR_MASK                      (0x3FU)
#define ENET_TFWR_TFWR_SHIFT                     (0U)
#define ENET_TFWR_TFWR(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_TFWR_TFWR_SHIFT)) & ENET_TFWR_TFWR_MASK)
#define ENET_TFWR_STRFWD_MASK                    (0x100U)
#define ENET_TFWR_STRFWD_SHIFT                   (8U)

/*! @name RDSR - Receive Descriptor Ring Start Register */
#define ENET_RDSR_R_DES_START_MASK               (0xFFFFFFF8U)
#define ENET_RDSR_R_DES_START_SHIFT              (3U)
#define ENET_RDSR_R_DES_START(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_RDSR_R_DES_START_SHIFT)) & ENET_RDSR_R_DES_START_MASK)

/*! @name TDSR - Transmit Buffer Descriptor Ring Start Register */
#define ENET_TDSR_X_DES_START_MASK               (0xFFFFFFF8U)
#define ENET_TDSR_X_DES_START_SHIFT              (3U)
#define ENET_TDSR_X_DES_START(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_TDSR_X_DES_START_SHIFT)) & ENET_TDSR_X_DES_START_MASK)

/*! @name MRBR - Maximum Receive Buffer Size Register */
#define ENET_MRBR_R_BUF_SIZE_MASK                (0x3FF0U)
#define ENET_MRBR_R_BUF_SIZE_SHIFT               (4U)
#define ENET_MRBR_R_BUF_SIZE(x)                  (((uint32_t)(((uint32_t)(x)) << ENET_MRBR_R_BUF_SIZE_SHIFT)) & ENET_MRBR_R_BUF_SIZE_MASK)

/*! @name RSFL - Receive FIFO Section Full Threshold */
#define ENET_RSFL_RX_SECTION_FULL_MASK           (0xFFU)
#define ENET_RSFL_RX_SECTION_FULL_SHIFT          (0U)
#define ENET_RSFL_RX_SECTION_FULL(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RSFL_RX_SECTION_FULL_SHIFT)) & ENET_RSFL_RX_SECTION_FULL_MASK)

/*! @name RSEM - Receive FIFO Section Empty Threshold */
#define ENET_RSEM_RX_SECTION_EMPTY_MASK          (0xFFU)
#define ENET_RSEM_RX_SECTION_EMPTY_SHIFT         (0U)
#define ENET_RSEM_RX_SECTION_EMPTY(x)            (((uint32_t)(((uint32_t)(x)) << ENET_RSEM_RX_SECTION_EMPTY_SHIFT)) & ENET_RSEM_RX_SECTION_EMPTY_MASK)
#define ENET_RSEM_STAT_SECTION_EMPTY_MASK        (0x1F0000U)
#define ENET_RSEM_STAT_SECTION_EMPTY_SHIFT       (16U)
#define ENET_RSEM_STAT_SECTION_EMPTY(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RSEM_STAT_SECTION_EMPTY_SHIFT)) & ENET_RSEM_STAT_SECTION_EMPTY_MASK)

/*! @name RAEM - Receive FIFO Almost Empty Threshold */
#define ENET_RAEM_RX_ALMOST_EMPTY_MASK           (0xFFU)
#define ENET_RAEM_RX_ALMOST_EMPTY_SHIFT          (0U)
#define ENET_RAEM_RX_ALMOST_EMPTY(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RAEM_RX_ALMOST_EMPTY_SHIFT)) & ENET_RAEM_RX_ALMOST_EMPTY_MASK)

/*! @name RAFL - Receive FIFO Almost Full Threshold */
#define ENET_RAFL_RX_ALMOST_FULL_MASK            (0xFFU)
#define ENET_RAFL_RX_ALMOST_FULL_SHIFT           (0U)
#define ENET_RAFL_RX_ALMOST_FULL(x)              (((uint32_t)(((uint32_t)(x)) << ENET_RAFL_RX_ALMOST_FULL_SHIFT)) & ENET_RAFL_RX_ALMOST_FULL_MASK)

/*! @name TSEM - Transmit FIFO Section Empty Threshold */
#define ENET_TSEM_TX_SECTION_EMPTY_MASK          (0xFFU)
#define ENET_TSEM_TX_SECTION_EMPTY_SHIFT         (0U)
#define ENET_TSEM_TX_SECTION_EMPTY(x)            (((uint32_t)(((uint32_t)(x)) << ENET_TSEM_TX_SECTION_EMPTY_SHIFT)) & ENET_TSEM_TX_SECTION_EMPTY_MASK)

/*! @name TAEM - Transmit FIFO Almost Empty Threshold */
#define ENET_TAEM_TX_ALMOST_EMPTY_MASK           (0xFFU)
#define ENET_TAEM_TX_ALMOST_EMPTY_SHIFT          (0U)
#define ENET_TAEM_TX_ALMOST_EMPTY(x)             (((uint32_t)(((uint32_t)(x)) << ENET_TAEM_TX_ALMOST_EMPTY_SHIFT)) & ENET_TAEM_TX_ALMOST_EMPTY_MASK)

/*! @name TAFL - Transmit FIFO Almost Full Threshold */
#define ENET_TAFL_TX_ALMOST_FULL_MASK            (0xFFU)
#define ENET_TAFL_TX_ALMOST_FULL_SHIFT           (0U)
#define ENET_TAFL_TX_ALMOST_FULL(x)              (((uint32_t)(((uint32_t)(x)) << ENET_TAFL_TX_ALMOST_FULL_SHIFT)) & ENET_TAFL_TX_ALMOST_FULL_MASK)

/*! @name TIPG - Transmit Inter-Packet Gap */
#define ENET_TIPG_IPG_MASK                       (0x1FU)
#define ENET_TIPG_IPG_SHIFT                      (0U)
#define ENET_TIPG_IPG(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_TIPG_IPG_SHIFT)) & ENET_TIPG_IPG_MASK)

/*! @name FTRL - Frame Truncation Length */
#define ENET_FTRL_TRUNC_FL_MASK                  (0x3FFFU)
#define ENET_FTRL_TRUNC_FL_SHIFT                 (0U)
#define ENET_FTRL_TRUNC_FL(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_FTRL_TRUNC_FL_SHIFT)) & ENET_FTRL_TRUNC_FL_MASK)

/*! @name TACC - Transmit Accelerator Function Configuration */
#define ENET_TACC_SHIFT16_MASK                   (0x1U)
#define ENET_TACC_SHIFT16_SHIFT                  (0U)
#define ENET_TACC_IPCHK_MASK                     (0x8U)
#define ENET_TACC_IPCHK_SHIFT                    (3U)
#define ENET_TACC_PROCHK_MASK                    (0x10U)
#define ENET_TACC_PROCHK_SHIFT                   (4U)

/*! @name RACC - Receive Accelerator Function Configuration */
#define ENET_RACC_PADREM_MASK                    (0x1U)
#define ENET_RACC_PADREM_SHIFT                   (0U)
#define ENET_RACC_IPDIS_MASK                     (0x2U)
#define ENET_RACC_IPDIS_SHIFT                    (1U)
#define ENET_RACC_PRODIS_MASK                    (0x4U)
#define ENET_RACC_PRODIS_SHIFT                   (2U)
#define ENET_RACC_LINEDIS_MASK                   (0x40U)
#define ENET_RACC_LINEDIS_SHIFT                  (6U)
#define ENET_RACC_SHIFT16_MASK                   (0x80U)
#define ENET_RACC_SHIFT16_SHIFT                  (7U)

/*! @name RMON_T_PACKETS - Tx Packet Count Statistic Register */
#define ENET_RMON_T_PACKETS_TXPKTS_MASK          (0xFFFFU)
#define ENET_RMON_T_PACKETS_TXPKTS_SHIFT         (0U)
#define ENET_RMON_T_PACKETS_TXPKTS(x)            (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_PACKETS_TXPKTS_SHIFT)) & ENET_RMON_T_PACKETS_TXPKTS_MASK)

/*! @name RMON_T_BC_PKT - Tx Broadcast Packets Statistic Register */
#define ENET_RMON_T_BC_PKT_TXPKTS_MASK           (0xFFFFU)
#define ENET_RMON_T_BC_PKT_TXPKTS_SHIFT          (0U)
#define ENET_RMON_T_BC_PKT_TXPKTS(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_BC_PKT_TXPKTS_SHIFT)) & ENET_RMON_T_BC_PKT_TXPKTS_MASK)

/*! @name RMON_T_MC_PKT - Tx Multicast Packets Statistic Register */
#define ENET_RMON_T_MC_PKT_TXPKTS_MASK           (0xFFFFU)
#define ENET_RMON_T_MC_PKT_TXPKTS_SHIFT          (0U)
#define ENET_RMON_T_MC_PKT_TXPKTS(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_MC_PKT_TXPKTS_SHIFT)) & ENET_RMON_T_MC_PKT_TXPKTS_MASK)

/*! @name RMON_T_CRC_ALIGN - Tx Packets with CRC/Align Error Statistic Register */
#define ENET_RMON_T_CRC_ALIGN_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_CRC_ALIGN_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_CRC_ALIGN_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_CRC_ALIGN_TXPKTS_SHIFT)) & ENET_RMON_T_CRC_ALIGN_TXPKTS_MASK)

/*! @name RMON_T_UNDERSIZE - Tx Packets Less Than Bytes and Good CRC Statistic Register */
#define ENET_RMON_T_UNDERSIZE_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_UNDERSIZE_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_UNDERSIZE_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_UNDERSIZE_TXPKTS_SHIFT)) & ENET_RMON_T_UNDERSIZE_TXPKTS_MASK)

/*! @name RMON_T_OVERSIZE - Tx Packets GT MAX_FL bytes and Good CRC Statistic Register */
#define ENET_RMON_T_OVERSIZE_TXPKTS_MASK         (0xFFFFU)
#define ENET_RMON_T_OVERSIZE_TXPKTS_SHIFT        (0U)
#define ENET_RMON_T_OVERSIZE_TXPKTS(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_OVERSIZE_TXPKTS_SHIFT)) & ENET_RMON_T_OVERSIZE_TXPKTS_MASK)

/*! @name RMON_T_FRAG - Tx Packets Less Than 64 Bytes and Bad CRC Statistic Register */
#define ENET_RMON_T_FRAG_TXPKTS_MASK             (0xFFFFU)
#define ENET_RMON_T_FRAG_TXPKTS_SHIFT            (0U)
#define ENET_RMON_T_FRAG_TXPKTS(x)               (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_FRAG_TXPKTS_SHIFT)) & ENET_RMON_T_FRAG_TXPKTS_MASK)

/*! @name RMON_T_JAB - Tx Packets Greater Than MAX_FL bytes and Bad CRC Statistic Register */
#define ENET_RMON_T_JAB_TXPKTS_MASK              (0xFFFFU)
#define ENET_RMON_T_JAB_TXPKTS_SHIFT             (0U)
#define ENET_RMON_T_JAB_TXPKTS(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_JAB_TXPKTS_SHIFT)) & ENET_RMON_T_JAB_TXPKTS_MASK)

/*! @name RMON_T_COL - Tx Collision Count Statistic Register */
#define ENET_RMON_T_COL_TXPKTS_MASK              (0xFFFFU)
#define ENET_RMON_T_COL_TXPKTS_SHIFT             (0U)
#define ENET_RMON_T_COL_TXPKTS(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_COL_TXPKTS_SHIFT)) & ENET_RMON_T_COL_TXPKTS_MASK)

/*! @name RMON_T_P64 - Tx 64-Byte Packets Statistic Register */
#define ENET_RMON_T_P64_TXPKTS_MASK              (0xFFFFU)
#define ENET_RMON_T_P64_TXPKTS_SHIFT             (0U)
#define ENET_RMON_T_P64_TXPKTS(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P64_TXPKTS_SHIFT)) & ENET_RMON_T_P64_TXPKTS_MASK)

/*! @name RMON_T_P65TO127 - Tx 65- to 127-byte Packets Statistic Register */
#define ENET_RMON_T_P65TO127_TXPKTS_MASK         (0xFFFFU)
#define ENET_RMON_T_P65TO127_TXPKTS_SHIFT        (0U)
#define ENET_RMON_T_P65TO127_TXPKTS(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P65TO127_TXPKTS_SHIFT)) & ENET_RMON_T_P65TO127_TXPKTS_MASK)

/*! @name RMON_T_P128TO255 - Tx 128- to 255-byte Packets Statistic Register */
#define ENET_RMON_T_P128TO255_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_P128TO255_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_P128TO255_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P128TO255_TXPKTS_SHIFT)) & ENET_RMON_T_P128TO255_TXPKTS_MASK)

/*! @name RMON_T_P256TO511 - Tx 256- to 511-byte Packets Statistic Register */
#define ENET_RMON_T_P256TO511_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_P256TO511_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_P256TO511_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P256TO511_TXPKTS_SHIFT)) & ENET_RMON_T_P256TO511_TXPKTS_MASK)

/*! @name RMON_T_P512TO1023 - Tx 512- to 1023-byte Packets Statistic Register */
#define ENET_RMON_T_P512TO1023_TXPKTS_MASK       (0xFFFFU)
#define ENET_RMON_T_P512TO1023_TXPKTS_SHIFT      (0U)
#define ENET_RMON_T_P512TO1023_TXPKTS(x)         (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P512TO1023_TXPKTS_SHIFT)) & ENET_RMON_T_P512TO1023_TXPKTS_MASK)

/*! @name RMON_T_P1024TO2047 - Tx 1024- to 2047-byte Packets Statistic Register */
#define ENET_RMON_T_P1024TO2047_TXPKTS_MASK      (0xFFFFU)
#define ENET_RMON_T_P1024TO2047_TXPKTS_SHIFT     (0U)
#define ENET_RMON_T_P1024TO2047_TXPKTS(x)        (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P1024TO2047_TXPKTS_SHIFT)) & ENET_RMON_T_P1024TO2047_TXPKTS_MASK)

/*! @name RMON_T_P_GTE2048 - Tx Packets Greater Than 2048 Bytes Statistic Register */
#define ENET_RMON_T_P_GTE2048_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_P_GTE2048_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_P_GTE2048_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P_GTE2048_TXPKTS_SHIFT)) & ENET_RMON_T_P_GTE2048_TXPKTS_MASK)

/*! @name RMON_T_OCTETS - Tx Octets Statistic Register */
#define ENET_RMON_T_OCTETS_TXOCTS_MASK           (0xFFFFFFFFU)
#define ENET_RMON_T_OCTETS_TXOCTS_SHIFT          (0U)
#define ENET_RMON_T_OCTETS_TXOCTS(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_OCTETS_TXOCTS_SHIFT)) & ENET_RMON_T_OCTETS_TXOCTS_MASK)

/*! @name IEEE_T_FRAME_OK - Frames Transmitted OK Statistic Register */
#define ENET_IEEE_T_FRAME_OK_COUNT_MASK          (0xFFFFU)
#define ENET_IEEE_T_FRAME_OK_COUNT_SHIFT         (0U)
#define ENET_IEEE_T_FRAME_OK_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_FRAME_OK_COUNT_SHIFT)) & ENET_IEEE_T_FRAME_OK_COUNT_MASK)

/*! @name IEEE_T_1COL - Frames Transmitted with Single Collision Statistic Register */
#define ENET_IEEE_T_1COL_COUNT_MASK              (0xFFFFU)
#define ENET_IEEE_T_1COL_COUNT_SHIFT             (0U)
#define ENET_IEEE_T_1COL_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_1COL_COUNT_SHIFT)) & ENET_IEEE_T_1COL_COUNT_MASK)

/*! @name IEEE_T_MCOL - Frames Transmitted with Multiple Collisions Statistic Register */
#define ENET_IEEE_T_MCOL_COUNT_MASK              (0xFFFFU)
#define ENET_IEEE_T_MCOL_COUNT_SHIFT             (0U)
#define ENET_IEEE_T_MCOL_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_MCOL_COUNT_SHIFT)) & ENET_IEEE_T_MCOL_COUNT_MASK)

/*! @name IEEE_T_DEF - Frames Transmitted after Deferral Delay Statistic Register */
#define ENET_IEEE_T_DEF_COUNT_MASK               (0xFFFFU)
#define ENET_IEEE_T_DEF_COUNT_SHIFT              (0U)
#define ENET_IEEE_T_DEF_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_DEF_COUNT_SHIFT)) & ENET_IEEE_T_DEF_COUNT_MASK)

/*! @name IEEE_T_LCOL - Frames Transmitted with Late Collision Statistic Register */
#define ENET_IEEE_T_LCOL_COUNT_MASK              (0xFFFFU)
#define ENET_IEEE_T_LCOL_COUNT_SHIFT             (0U)
#define ENET_IEEE_T_LCOL_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_LCOL_COUNT_SHIFT)) & ENET_IEEE_T_LCOL_COUNT_MASK)

/*! @name IEEE_T_EXCOL - Frames Transmitted with Excessive Collisions Statistic Register */
#define ENET_IEEE_T_EXCOL_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_T_EXCOL_COUNT_SHIFT            (0U)
#define ENET_IEEE_T_EXCOL_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_EXCOL_COUNT_SHIFT)) & ENET_IEEE_T_EXCOL_COUNT_MASK)

/*! @name IEEE_T_MACERR - Frames Transmitted with Tx FIFO Underrun Statistic Register */
#define ENET_IEEE_T_MACERR_COUNT_MASK            (0xFFFFU)
#define ENET_IEEE_T_MACERR_COUNT_SHIFT           (0U)
#define ENET_IEEE_T_MACERR_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_MACERR_COUNT_SHIFT)) & ENET_IEEE_T_MACERR_COUNT_MASK)

/*! @name IEEE_T_CSERR - Frames Transmitted with Carrier Sense Error Statistic Register */
#define ENET_IEEE_T_CSERR_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_T_CSERR_COUNT_SHIFT            (0U)
#define ENET_IEEE_T_CSERR_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_CSERR_COUNT_SHIFT)) & ENET_IEEE_T_CSERR_COUNT_MASK)

/*! @name IEEE_T_SQE - Reserved Statistic Register */
#define ENET_IEEE_T_SQE_COUNT_MASK               (0xFFFFU)
#define ENET_IEEE_T_SQE_COUNT_SHIFT              (0U)
#define ENET_IEEE_T_SQE_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_SQE_COUNT_SHIFT)) & ENET_IEEE_T_SQE_COUNT_MASK)

/*! @name IEEE_T_FDXFC - Flow Control Pause Frames Transmitted Statistic Register */
#define ENET_IEEE_T_FDXFC_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_T_FDXFC_COUNT_SHIFT            (0U)
#define ENET_IEEE_T_FDXFC_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_FDXFC_COUNT_SHIFT)) & ENET_IEEE_T_FDXFC_COUNT_MASK)

/*! @name IEEE_T_OCTETS_OK - Octet Count for Frames Transmitted w/o Error Statistic Register */
#define ENET_IEEE_T_OCTETS_OK_COUNT_MASK         (0xFFFFFFFFU)
#define ENET_IEEE_T_OCTETS_OK_COUNT_SHIFT        (0U)
#define ENET_IEEE_T_OCTETS_OK_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_OCTETS_OK_COUNT_SHIFT)) & ENET_IEEE_T_OCTETS_OK_COUNT_MASK)

/*! @name RMON_R_PACKETS - Rx Packet Count Statistic Register */
#define ENET_RMON_R_PACKETS_COUNT_MASK           (0xFFFFU)
#define ENET_RMON_R_PACKETS_COUNT_SHIFT          (0U)
#define ENET_RMON_R_PACKETS_COUNT(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_PACKETS_COUNT_SHIFT)) & ENET_RMON_R_PACKETS_COUNT_MASK)

/*! @name RMON_R_BC_PKT - Rx Broadcast Packets Statistic Register */
#define ENET_RMON_R_BC_PKT_COUNT_MASK            (0xFFFFU)
#define ENET_RMON_R_BC_PKT_COUNT_SHIFT           (0U)
#define ENET_RMON_R_BC_PKT_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_BC_PKT_COUNT_SHIFT)) & ENET_RMON_R_BC_PKT_COUNT_MASK)

/*! @name RMON_R_MC_PKT - Rx Multicast Packets Statistic Register */
#define ENET_RMON_R_MC_PKT_COUNT_MASK            (0xFFFFU)
#define ENET_RMON_R_MC_PKT_COUNT_SHIFT           (0U)
#define ENET_RMON_R_MC_PKT_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_MC_PKT_COUNT_SHIFT)) & ENET_RMON_R_MC_PKT_COUNT_MASK)

/*! @name RMON_R_CRC_ALIGN - Rx Packets with CRC/Align Error Statistic Register */
#define ENET_RMON_R_CRC_ALIGN_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_CRC_ALIGN_COUNT_SHIFT        (0U)
#define ENET_RMON_R_CRC_ALIGN_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_CRC_ALIGN_COUNT_SHIFT)) & ENET_RMON_R_CRC_ALIGN_COUNT_MASK)

/*! @name RMON_R_UNDERSIZE - Rx Packets with Less Than 64 Bytes and Good CRC Statistic Register */
#define ENET_RMON_R_UNDERSIZE_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_UNDERSIZE_COUNT_SHIFT        (0U)
#define ENET_RMON_R_UNDERSIZE_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_UNDERSIZE_COUNT_SHIFT)) & ENET_RMON_R_UNDERSIZE_COUNT_MASK)

/*! @name RMON_R_OVERSIZE - Rx Packets Greater Than MAX_FL and Good CRC Statistic Register */
#define ENET_RMON_R_OVERSIZE_COUNT_MASK          (0xFFFFU)
#define ENET_RMON_R_OVERSIZE_COUNT_SHIFT         (0U)
#define ENET_RMON_R_OVERSIZE_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_OVERSIZE_COUNT_SHIFT)) & ENET_RMON_R_OVERSIZE_COUNT_MASK)

/*! @name RMON_R_FRAG - Rx Packets Less Than 64 Bytes and Bad CRC Statistic Register */
#define ENET_RMON_R_FRAG_COUNT_MASK              (0xFFFFU)
#define ENET_RMON_R_FRAG_COUNT_SHIFT             (0U)
#define ENET_RMON_R_FRAG_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_FRAG_COUNT_SHIFT)) & ENET_RMON_R_FRAG_COUNT_MASK)

/*! @name RMON_R_JAB - Rx Packets Greater Than MAX_FL Bytes and Bad CRC Statistic Register */
#define ENET_RMON_R_JAB_COUNT_MASK               (0xFFFFU)
#define ENET_RMON_R_JAB_COUNT_SHIFT              (0U)
#define ENET_RMON_R_JAB_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_JAB_COUNT_SHIFT)) & ENET_RMON_R_JAB_COUNT_MASK)

/*! @name RMON_R_P64 - Rx 64-Byte Packets Statistic Register */
#define ENET_RMON_R_P64_COUNT_MASK               (0xFFFFU)
#define ENET_RMON_R_P64_COUNT_SHIFT              (0U)
#define ENET_RMON_R_P64_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P64_COUNT_SHIFT)) & ENET_RMON_R_P64_COUNT_MASK)

/*! @name RMON_R_P65TO127 - Rx 65- to 127-Byte Packets Statistic Register */
#define ENET_RMON_R_P65TO127_COUNT_MASK          (0xFFFFU)
#define ENET_RMON_R_P65TO127_COUNT_SHIFT         (0U)
#define ENET_RMON_R_P65TO127_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P65TO127_COUNT_SHIFT)) & ENET_RMON_R_P65TO127_COUNT_MASK)

/*! @name RMON_R_P128TO255 - Rx 128- to 255-Byte Packets Statistic Register */
#define ENET_RMON_R_P128TO255_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_P128TO255_COUNT_SHIFT        (0U)
#define ENET_RMON_R_P128TO255_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P128TO255_COUNT_SHIFT)) & ENET_RMON_R_P128TO255_COUNT_MASK)

/*! @name RMON_R_P256TO511 - Rx 256- to 511-Byte Packets Statistic Register */
#define ENET_RMON_R_P256TO511_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_P256TO511_COUNT_SHIFT        (0U)
#define ENET_RMON_R_P256TO511_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P256TO511_COUNT_SHIFT)) & ENET_RMON_R_P256TO511_COUNT_MASK)

/*! @name RMON_R_P512TO1023 - Rx 512- to 1023-Byte Packets Statistic Register */
#define ENET_RMON_R_P512TO1023_COUNT_MASK        (0xFFFFU)
#define ENET_RMON_R_P512TO1023_COUNT_SHIFT       (0U)
#define ENET_RMON_R_P512TO1023_COUNT(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P512TO1023_COUNT_SHIFT)) & ENET_RMON_R_P512TO1023_COUNT_MASK)

/*! @name RMON_R_P1024TO2047 - Rx 1024- to 2047-Byte Packets Statistic Register */
#define ENET_RMON_R_P1024TO2047_COUNT_MASK       (0xFFFFU)
#define ENET_RMON_R_P1024TO2047_COUNT_SHIFT      (0U)
#define ENET_RMON_R_P1024TO2047_COUNT(x)         (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P1024TO2047_COUNT_SHIFT)) & ENET_RMON_R_P1024TO2047_COUNT_MASK)

/*! @name RMON_R_P_GTE2048 - Rx Packets Greater than 2048 Bytes Statistic Register */
#define ENET_RMON_R_P_GTE2048_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_P_GTE2048_COUNT_SHIFT        (0U)
#define ENET_RMON_R_P_GTE2048_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P_GTE2048_COUNT_SHIFT)) & ENET_RMON_R_P_GTE2048_COUNT_MASK)

/*! @name RMON_R_OCTETS - Rx Octets Statistic Register */
#define ENET_RMON_R_OCTETS_COUNT_MASK            (0xFFFFFFFFU)
#define ENET_RMON_R_OCTETS_COUNT_SHIFT           (0U)
#define ENET_RMON_R_OCTETS_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_OCTETS_COUNT_SHIFT)) & ENET_RMON_R_OCTETS_COUNT_MASK)

/*! @name IEEE_R_DROP - Frames not Counted Correctly Statistic Register */
#define ENET_IEEE_R_DROP_COUNT_MASK              (0xFFFFU)
#define ENET_IEEE_R_DROP_COUNT_SHIFT             (0U)
#define ENET_IEEE_R_DROP_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_DROP_COUNT_SHIFT)) & ENET_IEEE_R_DROP_COUNT_MASK)

/*! @name IEEE_R_FRAME_OK - Frames Received OK Statistic Register */
#define ENET_IEEE_R_FRAME_OK_COUNT_MASK          (0xFFFFU)
#define ENET_IEEE_R_FRAME_OK_COUNT_SHIFT         (0U)
#define ENET_IEEE_R_FRAME_OK_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_FRAME_OK_COUNT_SHIFT)) & ENET_IEEE_R_FRAME_OK_COUNT_MASK)

/*! @name IEEE_R_CRC - Frames Received with CRC Error Statistic Register */
#define ENET_IEEE_R_CRC_COUNT_MASK               (0xFFFFU)
#define ENET_IEEE_R_CRC_COUNT_SHIFT              (0U)
#define ENET_IEEE_R_CRC_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_CRC_COUNT_SHIFT)) & ENET_IEEE_R_CRC_COUNT_MASK)

/*! @name IEEE_R_ALIGN - Frames Received with Alignment Error Statistic Register */
#define ENET_IEEE_R_ALIGN_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_R_ALIGN_COUNT_SHIFT            (0U)
#define ENET_IEEE_R_ALIGN_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_ALIGN_COUNT_SHIFT)) & ENET_IEEE_R_ALIGN_COUNT_MASK)

/*! @name IEEE_R_MACERR - Receive FIFO Overflow Count Statistic Register */
#define ENET_IEEE_R_MACERR_COUNT_MASK            (0xFFFFU)
#define ENET_IEEE_R_MACERR_COUNT_SHIFT           (0U)
#define ENET_IEEE_R_MACERR_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_MACERR_COUNT_SHIFT)) & ENET_IEEE_R_MACERR_COUNT_MASK)

/*! @name IEEE_R_FDXFC - Flow Control Pause Frames Received Statistic Register */
#define ENET_IEEE_R_FDXFC_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_R_FDXFC_COUNT_SHIFT            (0U)
#define ENET_IEEE_R_FDXFC_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_FDXFC_COUNT_SHIFT)) & ENET_IEEE_R_FDXFC_COUNT_MASK)

/*! @name IEEE_R_OCTETS_OK - Octet Count for Frames Received without Error Statistic Register */
#define ENET_IEEE_R_OCTETS_OK_COUNT_MASK         (0xFFFFFFFFU)
#define ENET_IEEE_R_OCTETS_OK_COUNT_SHIFT        (0U)
#define ENET_IEEE_R_OCTETS_OK_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_OCTETS_OK_COUNT_SHIFT)) & ENET_IEEE_R_OCTETS_OK_COUNT_MASK)

/*! @name ATCR - Adjustable Timer Control Register */
#define ENET_ATCR_EN_MASK                        (0x1U)
#define ENET_ATCR_EN_SHIFT                       (0U)
#define ENET_ATCR_OFFEN_MASK                     (0x4U)
#define ENET_ATCR_OFFEN_SHIFT                    (2U)
#define ENET_ATCR_OFFRST_MASK                    (0x8U)
#define ENET_ATCR_OFFRST_SHIFT                   (3U)
#define ENET_ATCR_PEREN_MASK                     (0x10U)
#define ENET_ATCR_PEREN_SHIFT                    (4U)
#define ENET_ATCR_PINPER_MASK                    (0x80U)
#define ENET_ATCR_PINPER_SHIFT                   (7U)
#define ENET_ATCR_RESTART_MASK                   (0x200U)
#define ENET_ATCR_RESTART_SHIFT                  (9U)
#define ENET_ATCR_CAPTURE_MASK                   (0x800U)
#define ENET_ATCR_CAPTURE_SHIFT                  (11U)
#define ENET_ATCR_SLAVE_MASK                     (0x2000U)
#define ENET_ATCR_SLAVE_SHIFT                    (13U)

/*! @name ATVR - Timer Value Register */
#define ENET_ATVR_ATIME_MASK                     (0xFFFFFFFFU)
#define ENET_ATVR_ATIME_SHIFT                    (0U)
#define ENET_ATVR_ATIME(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_ATVR_ATIME_SHIFT)) & ENET_ATVR_ATIME_MASK)

/*! @name ATOFF - Timer Offset Register */
#define ENET_ATOFF_OFFSET_MASK                   (0xFFFFFFFFU)
#define ENET_ATOFF_OFFSET_SHIFT                  (0U)
#define ENET_ATOFF_OFFSET(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_ATOFF_OFFSET_SHIFT)) & ENET_ATOFF_OFFSET_MASK)

/*! @name ATPER - Timer Period Register */
#define ENET_ATPER_PERIOD_MASK                   (0xFFFFFFFFU)
#define ENET_ATPER_PERIOD_SHIFT                  (0U)
#define ENET_ATPER_PERIOD(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_ATPER_PERIOD_SHIFT)) & ENET_ATPER_PERIOD_MASK)

/*! @name ATCOR - Timer Correction Register */
#define ENET_ATCOR_COR_MASK                      (0x7FFFFFFFU)
#define ENET_ATCOR_COR_SHIFT                     (0U)
#define ENET_ATCOR_COR(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_ATCOR_COR_SHIFT)) & ENET_ATCOR_COR_MASK)

/*! @name ATINC - Time-Stamping Clock Period Register */
#define ENET_ATINC_INC_MASK                      (0x7FU)
#define ENET_ATINC_INC_SHIFT                     (0U)
#define ENET_ATINC_INC(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_ATINC_INC_SHIFT)) & ENET_ATINC_INC_MASK)
#define ENET_ATINC_INC_CORR_MASK                 (0x7F00U)
#define ENET_ATINC_INC_CORR_SHIFT                (8U)
#define ENET_ATINC_INC_CORR(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_ATINC_INC_CORR_SHIFT)) & ENET_ATINC_INC_CORR_MASK)

/*! @name ATSTMP - Timestamp of Last Transmitted Frame */
#define ENET_ATSTMP_TIMESTAMP_MASK               (0xFFFFFFFFU)
#define ENET_ATSTMP_TIMESTAMP_SHIFT              (0U)
#define ENET_ATSTMP_TIMESTAMP(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_ATSTMP_TIMESTAMP_SHIFT)) & ENET_ATSTMP_TIMESTAMP_MASK)

/*! @name TGSR - Timer Global Status Register */
#define ENET_TGSR_TF0_MASK                       (0x1U)
#define ENET_TGSR_TF0_SHIFT                      (0U)
#define ENET_TGSR_TF1_MASK                       (0x2U)
#define ENET_TGSR_TF1_SHIFT                      (1U)
#define ENET_TGSR_TF2_MASK                       (0x4U)
#define ENET_TGSR_TF2_SHIFT                      (2U)
#define ENET_TGSR_TF3_MASK                       (0x8U)
#define ENET_TGSR_TF3_SHIFT                      (3U)

/*! @name TCSR - Timer Control Status Register */
#define ENET_TCSR_TDRE_MASK                      (0x1U)
#define ENET_TCSR_TDRE_SHIFT                     (0U)
#define ENET_TCSR_TMODE_MASK                     (0x3CU)
#define ENET_TCSR_TMODE_SHIFT                    (2U)
#define ENET_TCSR_TMODE(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_TCSR_TMODE_SHIFT)) & ENET_TCSR_TMODE_MASK)
#define ENET_TCSR_TIE_MASK                       (0x40U)
#define ENET_TCSR_TIE_SHIFT                      (6U)
#define ENET_TCSR_TF_MASK                        (0x80U)
#define ENET_TCSR_TF_SHIFT                       (7U)
#define ENET_TCSR_TPWC_MASK                      (0xF800U)
#define ENET_TCSR_TPWC_SHIFT                     (11U)
#define ENET_TCSR_TPWC(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_TCSR_TPWC_SHIFT)) & ENET_TCSR_TPWC_MASK)

/* The count of ENET_TCSR */
#define ENET_TCSR_COUNT                          (4U)

/*! @name TCCR - Timer Compare Capture Register */
#define ENET_TCCR_TCC_MASK                       (0xFFFFFFFFU)
#define ENET_TCCR_TCC_SHIFT                      (0U)
#define ENET_TCCR_TCC(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_TCCR_TCC_SHIFT)) & ENET_TCCR_TCC_MASK)

/* The count of ENET_TCCR */
#define ENET_TCCR_COUNT                          (4U)


/*!
 * @}
 */ /* end of group ENET_Register_Masks */


/* ENET - Peripheral instance base addresses */
/** Peripheral ENET base pointer */
#define ENET_BASE_PTR                            ((ENET_MemMapPtr)0x402D8000u)
/** Array initializer of ENET peripheral base pointers */
#define ENET_BASE_PTRS                           { ENET_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- ENET - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENET_Register_Accessor_Macros ENET - Register accessor macros
 * @{
 */


/* ENET - Register instance definitions */
/* ENET */
#define ENET_EIR                                 ENET_EIR_REG(ENET_BASE_PTR)
#define ENET_EIMR                                ENET_EIMR_REG(ENET_BASE_PTR)
#define ENET_RDAR                                ENET_RDAR_REG(ENET_BASE_PTR)
#define ENET_TDAR                                ENET_TDAR_REG(ENET_BASE_PTR)
#define ENET_ECR                                 ENET_ECR_REG(ENET_BASE_PTR)
#define ENET_MMFR                                ENET_MMFR_REG(ENET_BASE_PTR)
#define ENET_MSCR                                ENET_MSCR_REG(ENET_BASE_PTR)
#define ENET_MIBC                                ENET_MIBC_REG(ENET_BASE_PTR)
#define ENET_RCR                                 ENET_RCR_REG(ENET_BASE_PTR)
#define ENET_TCR                                 ENET_TCR_REG(ENET_BASE_PTR)
#define ENET_PALR                                ENET_PALR_REG(ENET_BASE_PTR)
#define ENET_PAUR                                ENET_PAUR_REG(ENET_BASE_PTR)
#define ENET_OPD                                 ENET_OPD_REG(ENET_BASE_PTR)
#define ENET_TXIC                                ENET_TXIC_REG(ENET_BASE_PTR)
#define ENET_RXIC                                ENET_RXIC_REG(ENET_BASE_PTR)
#define ENET_IAUR                                ENET_IAUR_REG(ENET_BASE_PTR)
#define ENET_IALR                                ENET_IALR_REG(ENET_BASE_PTR)
#define ENET_GAUR                                ENET_GAUR_REG(ENET_BASE_PTR)
#define ENET_GALR                                ENET_GALR_REG(ENET_BASE_PTR)
#define ENET_TFWR                                ENET_TFWR_REG(ENET_BASE_PTR)
#define ENET_RDSR                                ENET_RDSR_REG(ENET_BASE_PTR)
#define ENET_TDSR                                ENET_TDSR_REG(ENET_BASE_PTR)
#define ENET_MRBR                                ENET_MRBR_REG(ENET_BASE_PTR)
#define ENET_RSFL                                ENET_RSFL_REG(ENET_BASE_PTR)
#define ENET_RSEM                                ENET_RSEM_REG(ENET_BASE_PTR)
#define ENET_RAEM                                ENET_RAEM_REG(ENET_BASE_PTR)
#define ENET_RAFL                                ENET_RAFL_REG(ENET_BASE_PTR)
#define ENET_TSEM                                ENET_TSEM_REG(ENET_BASE_PTR)
#define ENET_TAEM                                ENET_TAEM_REG(ENET_BASE_PTR)
#define ENET_TAFL                                ENET_TAFL_REG(ENET_BASE_PTR)
#define ENET_TIPG                                ENET_TIPG_REG(ENET_BASE_PTR)
#define ENET_FTRL                                ENET_FTRL_REG(ENET_BASE_PTR)
#define ENET_TACC                                ENET_TACC_REG(ENET_BASE_PTR)
#define ENET_RACC                                ENET_RACC_REG(ENET_BASE_PTR)
#define ENET_RMON_T_DROP                         ENET_RMON_T_DROP_REG(ENET_BASE_PTR)
#define ENET_RMON_T_PACKETS                      ENET_RMON_T_PACKETS_REG(ENET_BASE_PTR)
#define ENET_RMON_T_BC_PKT                       ENET_RMON_T_BC_PKT_REG(ENET_BASE_PTR)
#define ENET_RMON_T_MC_PKT                       ENET_RMON_T_MC_PKT_REG(ENET_BASE_PTR)
#define ENET_RMON_T_CRC_ALIGN                    ENET_RMON_T_CRC_ALIGN_REG(ENET_BASE_PTR)
#define ENET_RMON_T_UNDERSIZE                    ENET_RMON_T_UNDERSIZE_REG(ENET_BASE_PTR)
#define ENET_RMON_T_OVERSIZE                     ENET_RMON_T_OVERSIZE_REG(ENET_BASE_PTR)
#define ENET_RMON_T_FRAG                         ENET_RMON_T_FRAG_REG(ENET_BASE_PTR)
#define ENET_RMON_T_JAB                          ENET_RMON_T_JAB_REG(ENET_BASE_PTR)
#define ENET_RMON_T_COL                          ENET_RMON_T_COL_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P64                          ENET_RMON_T_P64_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P65TO127                     ENET_RMON_T_P65TO127_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P128TO255                    ENET_RMON_T_P128TO255_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P256TO511                    ENET_RMON_T_P256TO511_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P512TO1023                   ENET_RMON_T_P512TO1023_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P1024TO2047                  ENET_RMON_T_P1024TO2047_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P_GTE2048                    ENET_RMON_T_P_GTE2048_REG(ENET_BASE_PTR)
#define ENET_RMON_T_OCTETS                       ENET_RMON_T_OCTETS_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_DROP                         ENET_IEEE_T_DROP_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_FRAME_OK                     ENET_IEEE_T_FRAME_OK_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_1COL                         ENET_IEEE_T_1COL_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_MCOL                         ENET_IEEE_T_MCOL_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_DEF                          ENET_IEEE_T_DEF_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_LCOL                         ENET_IEEE_T_LCOL_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_EXCOL                        ENET_IEEE_T_EXCOL_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_MACERR                       ENET_IEEE_T_MACERR_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_CSERR                        ENET_IEEE_T_CSERR_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_SQE                          ENET_IEEE_T_SQE_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_FDXFC                        ENET_IEEE_T_FDXFC_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_OCTETS_OK                    ENET_IEEE_T_OCTETS_OK_REG(ENET_BASE_PTR)
#define ENET_RMON_R_PACKETS                      ENET_RMON_R_PACKETS_REG(ENET_BASE_PTR)
#define ENET_RMON_R_BC_PKT                       ENET_RMON_R_BC_PKT_REG(ENET_BASE_PTR)
#define ENET_RMON_R_MC_PKT                       ENET_RMON_R_MC_PKT_REG(ENET_BASE_PTR)
#define ENET_RMON_R_CRC_ALIGN                    ENET_RMON_R_CRC_ALIGN_REG(ENET_BASE_PTR)
#define ENET_RMON_R_UNDERSIZE                    ENET_RMON_R_UNDERSIZE_REG(ENET_BASE_PTR)
#define ENET_RMON_R_OVERSIZE                     ENET_RMON_R_OVERSIZE_REG(ENET_BASE_PTR)
#define ENET_RMON_R_FRAG                         ENET_RMON_R_FRAG_REG(ENET_BASE_PTR)
#define ENET_RMON_R_JAB                          ENET_RMON_R_JAB_REG(ENET_BASE_PTR)
#define ENET_RMON_R_RESVD_0                      ENET_RMON_R_RESVD_0_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P64                          ENET_RMON_R_P64_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P65TO127                     ENET_RMON_R_P65TO127_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P128TO255                    ENET_RMON_R_P128TO255_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P256TO511                    ENET_RMON_R_P256TO511_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P512TO1023                   ENET_RMON_R_P512TO1023_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P1024TO2047                  ENET_RMON_R_P1024TO2047_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P_GTE2048                    ENET_RMON_R_P_GTE2048_REG(ENET_BASE_PTR)
#define ENET_RMON_R_OCTETS                       ENET_RMON_R_OCTETS_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_DROP                         ENET_IEEE_R_DROP_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_FRAME_OK                     ENET_IEEE_R_FRAME_OK_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_CRC                          ENET_IEEE_R_CRC_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_ALIGN                        ENET_IEEE_R_ALIGN_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_MACERR                       ENET_IEEE_R_MACERR_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_FDXFC                        ENET_IEEE_R_FDXFC_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_OCTETS_OK                    ENET_IEEE_R_OCTETS_OK_REG(ENET_BASE_PTR)
#define ENET_ATCR                                ENET_ATCR_REG(ENET_BASE_PTR)
#define ENET_ATVR                                ENET_ATVR_REG(ENET_BASE_PTR)
#define ENET_ATOFF                               ENET_ATOFF_REG(ENET_BASE_PTR)
#define ENET_ATPER                               ENET_ATPER_REG(ENET_BASE_PTR)
#define ENET_ATCOR                               ENET_ATCOR_REG(ENET_BASE_PTR)
#define ENET_ATINC                               ENET_ATINC_REG(ENET_BASE_PTR)
#define ENET_ATSTMP                              ENET_ATSTMP_REG(ENET_BASE_PTR)
#define ENET_TGSR                                ENET_TGSR_REG(ENET_BASE_PTR)
#define ENET_TCSR0                               ENET_TCSR_REG(ENET_BASE_PTR,0)
#define ENET_TCCR0                               ENET_TCCR_REG(ENET_BASE_PTR,0)
#define ENET_TCSR1                               ENET_TCSR_REG(ENET_BASE_PTR,1)
#define ENET_TCCR1                               ENET_TCCR_REG(ENET_BASE_PTR,1)
#define ENET_TCSR2                               ENET_TCSR_REG(ENET_BASE_PTR,2)
#define ENET_TCCR2                               ENET_TCCR_REG(ENET_BASE_PTR,2)
#define ENET_TCSR3                               ENET_TCSR_REG(ENET_BASE_PTR,3)
#define ENET_TCCR3                               ENET_TCCR_REG(ENET_BASE_PTR,3)

/* ENET - Register array accessors */
#define ENET_TCSR(index)                         ENET_TCSR_REG(ENET_BASE_PTR,index)
#define ENET_TCCR(index)                         ENET_TCCR_REG(ENET_BASE_PTR,index)

/*!
 * @}
 */ /* end of group ENET_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group ENET_Peripheral */


/* ----------------------------------------------------------------------------
   -- EWM
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup EWM_Peripheral EWM
 * @{
 */

/** EWM - Peripheral register structure */
typedef struct EWM_MemMap {
  uint8_t CTRL;                                    /**< Control Register, offset: 0x0 */
  uint8_t SERV;                                    /**< Service Register, offset: 0x1 */
  uint8_t CMPL;                                    /**< Compare Low Register, offset: 0x2 */
  uint8_t CMPH;                                    /**< Compare High Register, offset: 0x3 */
  uint8_t CLKCTRL;                                 /**< Clock Control Register, offset: 0x4 */
  uint8_t CLKPRESCALER;                            /**< Clock Prescaler Register, offset: 0x5 */
} volatile *EWM_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- EWM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup EWM_Register_Accessor_Macros EWM - Register accessor macros
 * @{
 */


/* EWM - Register accessors */
#define EWM_CTRL_REG(base)                       ((base)->CTRL)
#define EWM_SERV_REG(base)                       ((base)->SERV)
#define EWM_CMPL_REG(base)                       ((base)->CMPL)
#define EWM_CMPH_REG(base)                       ((base)->CMPH)
#define EWM_CLKCTRL_REG(base)                    ((base)->CLKCTRL)
#define EWM_CLKPRESCALER_REG(base)               ((base)->CLKPRESCALER)

/*!
 * @}
 */ /* end of group EWM_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- EWM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup EWM_Register_Masks EWM Register Masks
 * @{
 */

/*! @name CTRL - Control Register */
#define EWM_CTRL_EWMEN_MASK                      (0x1U)
#define EWM_CTRL_EWMEN_SHIFT                     (0U)
#define EWM_CTRL_ASSIN_MASK                      (0x2U)
#define EWM_CTRL_ASSIN_SHIFT                     (1U)
#define EWM_CTRL_INEN_MASK                       (0x4U)
#define EWM_CTRL_INEN_SHIFT                      (2U)
#define EWM_CTRL_INTEN_MASK                      (0x8U)
#define EWM_CTRL_INTEN_SHIFT                     (3U)

/*! @name SERV - Service Register */
#define EWM_SERV_SERVICE_MASK                    (0xFFU)
#define EWM_SERV_SERVICE_SHIFT                   (0U)
#define EWM_SERV_SERVICE(x)                      (((uint8_t)(((uint8_t)(x)) << EWM_SERV_SERVICE_SHIFT)) & EWM_SERV_SERVICE_MASK)

/*! @name CMPL - Compare Low Register */
#define EWM_CMPL_COMPAREL_MASK                   (0xFFU)
#define EWM_CMPL_COMPAREL_SHIFT                  (0U)
#define EWM_CMPL_COMPAREL(x)                     (((uint8_t)(((uint8_t)(x)) << EWM_CMPL_COMPAREL_SHIFT)) & EWM_CMPL_COMPAREL_MASK)

/*! @name CMPH - Compare High Register */
#define EWM_CMPH_COMPAREH_MASK                   (0xFFU)
#define EWM_CMPH_COMPAREH_SHIFT                  (0U)
#define EWM_CMPH_COMPAREH(x)                     (((uint8_t)(((uint8_t)(x)) << EWM_CMPH_COMPAREH_SHIFT)) & EWM_CMPH_COMPAREH_MASK)

/*! @name CLKCTRL - Clock Control Register */
#define EWM_CLKCTRL_CLKSEL_MASK                  (0x3U)
#define EWM_CLKCTRL_CLKSEL_SHIFT                 (0U)
#define EWM_CLKCTRL_CLKSEL(x)                    (((uint8_t)(((uint8_t)(x)) << EWM_CLKCTRL_CLKSEL_SHIFT)) & EWM_CLKCTRL_CLKSEL_MASK)

/*! @name CLKPRESCALER - Clock Prescaler Register */
#define EWM_CLKPRESCALER_CLK_DIV_MASK            (0xFFU)
#define EWM_CLKPRESCALER_CLK_DIV_SHIFT           (0U)
#define EWM_CLKPRESCALER_CLK_DIV(x)              (((uint8_t)(((uint8_t)(x)) << EWM_CLKPRESCALER_CLK_DIV_SHIFT)) & EWM_CLKPRESCALER_CLK_DIV_MASK)


/*!
 * @}
 */ /* end of group EWM_Register_Masks */


/* EWM - Peripheral instance base addresses */
/** Peripheral EWM base pointer */
#define EWM_BASE_PTR                             ((EWM_MemMapPtr)0x400B4000u)
/** Array initializer of EWM peripheral base pointers */
#define EWM_BASE_PTRS                            { EWM_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- EWM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup EWM_Register_Accessor_Macros EWM - Register accessor macros
 * @{
 */


/* EWM - Register instance definitions */
/* EWM */
#define EWM_CTRL                                 EWM_CTRL_REG(EWM_BASE_PTR)
#define EWM_SERV                                 EWM_SERV_REG(EWM_BASE_PTR)
#define EWM_CMPL                                 EWM_CMPL_REG(EWM_BASE_PTR)
#define EWM_CMPH                                 EWM_CMPH_REG(EWM_BASE_PTR)
#define EWM_CLKCTRL                              EWM_CLKCTRL_REG(EWM_BASE_PTR)
#define EWM_CLKPRESCALER                         EWM_CLKPRESCALER_REG(EWM_BASE_PTR)

/*!
 * @}
 */ /* end of group EWM_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group EWM_Peripheral */


/* ----------------------------------------------------------------------------
   -- FLEXIO
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXIO_Peripheral FLEXIO
 * @{
 */

/** FLEXIO - Peripheral register structure */
typedef struct FLEXIO_MemMap {
  uint32_t VERID;                                  /**< Version ID Register, offset: 0x0 */
  uint32_t PARAM;                                  /**< Parameter Register, offset: 0x4 */
  uint32_t CTRL;                                   /**< FlexIO Control Register, offset: 0x8 */
  uint32_t PIN;                                    /**< Pin State Register, offset: 0xC */
  uint32_t SHIFTSTAT;                              /**< Shifter Status Register, offset: 0x10 */
  uint32_t SHIFTERR;                               /**< Shifter Error Register, offset: 0x14 */
  uint32_t TIMSTAT;                                /**< Timer Status Register, offset: 0x18 */
  uint8_t RESERVED_0[4];
  uint32_t SHIFTSIEN;                              /**< Shifter Status Interrupt Enable, offset: 0x20 */
  uint32_t SHIFTEIEN;                              /**< Shifter Error Interrupt Enable, offset: 0x24 */
  uint32_t TIMIEN;                                 /**< Timer Interrupt Enable Register, offset: 0x28 */
  uint8_t RESERVED_1[4];
  uint32_t SHIFTSDEN;                              /**< Shifter Status DMA Enable, offset: 0x30 */
  uint8_t RESERVED_2[12];
  uint32_t SHIFTSTATE;                             /**< Shifter State Register, offset: 0x40 */
  uint8_t RESERVED_3[60];
  uint32_t SHIFTCTL[4];                            /**< Shifter Control N Register, array offset: 0x80, array step: 0x4 */
  uint8_t RESERVED_4[112];
  uint32_t SHIFTCFG[4];                            /**< Shifter Configuration N Register, array offset: 0x100, array step: 0x4 */
  uint8_t RESERVED_5[240];
  uint32_t SHIFTBUF[4];                            /**< Shifter Buffer N Register, array offset: 0x200, array step: 0x4 */
  uint8_t RESERVED_6[112];
  uint32_t SHIFTBUFBIS[4];                         /**< Shifter Buffer N Bit Swapped Register, array offset: 0x280, array step: 0x4 */
  uint8_t RESERVED_7[112];
  uint32_t SHIFTBUFBYS[4];                         /**< Shifter Buffer N Byte Swapped Register, array offset: 0x300, array step: 0x4 */
  uint8_t RESERVED_8[112];
  uint32_t SHIFTBUFBBS[4];                         /**< Shifter Buffer N Bit Byte Swapped Register, array offset: 0x380, array step: 0x4 */
  uint8_t RESERVED_9[112];
  uint32_t TIMCTL[4];                              /**< Timer Control N Register, array offset: 0x400, array step: 0x4 */
  uint8_t RESERVED_10[112];
  uint32_t TIMCFG[4];                              /**< Timer Configuration N Register, array offset: 0x480, array step: 0x4 */
  uint8_t RESERVED_11[112];
  uint32_t TIMCMP[4];                              /**< Timer Compare N Register, array offset: 0x500, array step: 0x4 */
  uint8_t RESERVED_12[368];
  uint32_t SHIFTBUFNBS[4];                         /**< Shifter Buffer N Nibble Byte Swapped Register, array offset: 0x680, array step: 0x4 */
  uint8_t RESERVED_13[112];
  uint32_t SHIFTBUFHWS[4];                         /**< Shifter Buffer N Half Word Swapped Register, array offset: 0x700, array step: 0x4 */
  uint8_t RESERVED_14[112];
  uint32_t SHIFTBUFNIS[4];                         /**< Shifter Buffer N Nibble Swapped Register, array offset: 0x780, array step: 0x4 */
} volatile *FLEXIO_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- FLEXIO - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXIO_Register_Accessor_Macros FLEXIO - Register accessor macros
 * @{
 */


/* FLEXIO - Register accessors */
#define FLEXIO_VERID_REG(base)                   ((base)->VERID)
#define FLEXIO_PARAM_REG(base)                   ((base)->PARAM)
#define FLEXIO_CTRL_REG(base)                    ((base)->CTRL)
#define FLEXIO_PIN_REG(base)                     ((base)->PIN)
#define FLEXIO_SHIFTSTAT_REG(base)               ((base)->SHIFTSTAT)
#define FLEXIO_SHIFTERR_REG(base)                ((base)->SHIFTERR)
#define FLEXIO_TIMSTAT_REG(base)                 ((base)->TIMSTAT)
#define FLEXIO_SHIFTSIEN_REG(base)               ((base)->SHIFTSIEN)
#define FLEXIO_SHIFTEIEN_REG(base)               ((base)->SHIFTEIEN)
#define FLEXIO_TIMIEN_REG(base)                  ((base)->TIMIEN)
#define FLEXIO_SHIFTSDEN_REG(base)               ((base)->SHIFTSDEN)
#define FLEXIO_SHIFTSTATE_REG(base)              ((base)->SHIFTSTATE)
#define FLEXIO_SHIFTCTL_REG(base,index)          ((base)->SHIFTCTL[index])
#define FLEXIO_SHIFTCFG_REG(base,index)          ((base)->SHIFTCFG[index])
#define FLEXIO_SHIFTBUF_REG(base,index)          ((base)->SHIFTBUF[index])
#define FLEXIO_SHIFTBUFBIS_REG(base,index)       ((base)->SHIFTBUFBIS[index])
#define FLEXIO_SHIFTBUFBYS_REG(base,index)       ((base)->SHIFTBUFBYS[index])
#define FLEXIO_SHIFTBUFBBS_REG(base,index)       ((base)->SHIFTBUFBBS[index])
#define FLEXIO_TIMCTL_REG(base,index)            ((base)->TIMCTL[index])
#define FLEXIO_TIMCFG_REG(base,index)            ((base)->TIMCFG[index])
#define FLEXIO_TIMCMP_REG(base,index)            ((base)->TIMCMP[index])
#define FLEXIO_SHIFTBUFNBS_REG(base,index)       ((base)->SHIFTBUFNBS[index])
#define FLEXIO_SHIFTBUFHWS_REG(base,index)       ((base)->SHIFTBUFHWS[index])
#define FLEXIO_SHIFTBUFNIS_REG(base,index)       ((base)->SHIFTBUFNIS[index])

/*!
 * @}
 */ /* end of group FLEXIO_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- FLEXIO Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXIO_Register_Masks FLEXIO Register Masks
 * @{
 */

/*! @name VERID - Version ID Register */
#define FLEXIO_VERID_FEATURE_MASK                (0xFFFFU)
#define FLEXIO_VERID_FEATURE_SHIFT               (0U)
#define FLEXIO_VERID_FEATURE(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_VERID_FEATURE_SHIFT)) & FLEXIO_VERID_FEATURE_MASK)
#define FLEXIO_VERID_MINOR_MASK                  (0xFF0000U)
#define FLEXIO_VERID_MINOR_SHIFT                 (16U)
#define FLEXIO_VERID_MINOR(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXIO_VERID_MINOR_SHIFT)) & FLEXIO_VERID_MINOR_MASK)
#define FLEXIO_VERID_MAJOR_MASK                  (0xFF000000U)
#define FLEXIO_VERID_MAJOR_SHIFT                 (24U)
#define FLEXIO_VERID_MAJOR(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXIO_VERID_MAJOR_SHIFT)) & FLEXIO_VERID_MAJOR_MASK)

/*! @name PARAM - Parameter Register */
#define FLEXIO_PARAM_SHIFTER_MASK                (0xFFU)
#define FLEXIO_PARAM_SHIFTER_SHIFT               (0U)
#define FLEXIO_PARAM_SHIFTER(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_PARAM_SHIFTER_SHIFT)) & FLEXIO_PARAM_SHIFTER_MASK)
#define FLEXIO_PARAM_TIMER_MASK                  (0xFF00U)
#define FLEXIO_PARAM_TIMER_SHIFT                 (8U)
#define FLEXIO_PARAM_TIMER(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXIO_PARAM_TIMER_SHIFT)) & FLEXIO_PARAM_TIMER_MASK)
#define FLEXIO_PARAM_PIN_MASK                    (0xFF0000U)
#define FLEXIO_PARAM_PIN_SHIFT                   (16U)
#define FLEXIO_PARAM_PIN(x)                      (((uint32_t)(((uint32_t)(x)) << FLEXIO_PARAM_PIN_SHIFT)) & FLEXIO_PARAM_PIN_MASK)
#define FLEXIO_PARAM_TRIGGER_MASK                (0xFF000000U)
#define FLEXIO_PARAM_TRIGGER_SHIFT               (24U)
#define FLEXIO_PARAM_TRIGGER(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_PARAM_TRIGGER_SHIFT)) & FLEXIO_PARAM_TRIGGER_MASK)

/*! @name CTRL - FlexIO Control Register */
#define FLEXIO_CTRL_FLEXEN_MASK                  (0x1U)
#define FLEXIO_CTRL_FLEXEN_SHIFT                 (0U)
#define FLEXIO_CTRL_SWRST_MASK                   (0x2U)
#define FLEXIO_CTRL_SWRST_SHIFT                  (1U)
#define FLEXIO_CTRL_FASTACC_MASK                 (0x4U)
#define FLEXIO_CTRL_FASTACC_SHIFT                (2U)
#define FLEXIO_CTRL_DBGE_MASK                    (0x40000000U)
#define FLEXIO_CTRL_DBGE_SHIFT                   (30U)
#define FLEXIO_CTRL_DOZEN_MASK                   (0x80000000U)
#define FLEXIO_CTRL_DOZEN_SHIFT                  (31U)

/*! @name PIN - Pin State Register */
#define FLEXIO_PIN_PDI_MASK                      (0xFFFFFFFFU)
#define FLEXIO_PIN_PDI_SHIFT                     (0U)
#define FLEXIO_PIN_PDI(x)                        (((uint32_t)(((uint32_t)(x)) << FLEXIO_PIN_PDI_SHIFT)) & FLEXIO_PIN_PDI_MASK)

/*! @name SHIFTSTAT - Shifter Status Register */
#define FLEXIO_SHIFTSTAT_SSF_MASK                (0xFU)
#define FLEXIO_SHIFTSTAT_SSF_SHIFT               (0U)
#define FLEXIO_SHIFTSTAT_SSF(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTSTAT_SSF_SHIFT)) & FLEXIO_SHIFTSTAT_SSF_MASK)

/*! @name SHIFTERR - Shifter Error Register */
#define FLEXIO_SHIFTERR_SEF_MASK                 (0xFU)
#define FLEXIO_SHIFTERR_SEF_SHIFT                (0U)
#define FLEXIO_SHIFTERR_SEF(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTERR_SEF_SHIFT)) & FLEXIO_SHIFTERR_SEF_MASK)

/*! @name TIMSTAT - Timer Status Register */
#define FLEXIO_TIMSTAT_TSF_MASK                  (0xFU)
#define FLEXIO_TIMSTAT_TSF_SHIFT                 (0U)
#define FLEXIO_TIMSTAT_TSF(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMSTAT_TSF_SHIFT)) & FLEXIO_TIMSTAT_TSF_MASK)

/*! @name SHIFTSIEN - Shifter Status Interrupt Enable */
#define FLEXIO_SHIFTSIEN_SSIE_MASK               (0xFU)
#define FLEXIO_SHIFTSIEN_SSIE_SHIFT              (0U)
#define FLEXIO_SHIFTSIEN_SSIE(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTSIEN_SSIE_SHIFT)) & FLEXIO_SHIFTSIEN_SSIE_MASK)

/*! @name SHIFTEIEN - Shifter Error Interrupt Enable */
#define FLEXIO_SHIFTEIEN_SEIE_MASK               (0xFU)
#define FLEXIO_SHIFTEIEN_SEIE_SHIFT              (0U)
#define FLEXIO_SHIFTEIEN_SEIE(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTEIEN_SEIE_SHIFT)) & FLEXIO_SHIFTEIEN_SEIE_MASK)

/*! @name TIMIEN - Timer Interrupt Enable Register */
#define FLEXIO_TIMIEN_TEIE_MASK                  (0xFU)
#define FLEXIO_TIMIEN_TEIE_SHIFT                 (0U)
#define FLEXIO_TIMIEN_TEIE(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMIEN_TEIE_SHIFT)) & FLEXIO_TIMIEN_TEIE_MASK)

/*! @name SHIFTSDEN - Shifter Status DMA Enable */
#define FLEXIO_SHIFTSDEN_SSDE_MASK               (0xFU)
#define FLEXIO_SHIFTSDEN_SSDE_SHIFT              (0U)
#define FLEXIO_SHIFTSDEN_SSDE(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTSDEN_SSDE_SHIFT)) & FLEXIO_SHIFTSDEN_SSDE_MASK)

/*! @name SHIFTSTATE - Shifter State Register */
#define FLEXIO_SHIFTSTATE_STATE_MASK             (0x7U)
#define FLEXIO_SHIFTSTATE_STATE_SHIFT            (0U)
#define FLEXIO_SHIFTSTATE_STATE(x)               (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTSTATE_STATE_SHIFT)) & FLEXIO_SHIFTSTATE_STATE_MASK)

/*! @name SHIFTCTL - Shifter Control N Register */
#define FLEXIO_SHIFTCTL_SMOD_MASK                (0x7U)
#define FLEXIO_SHIFTCTL_SMOD_SHIFT               (0U)
#define FLEXIO_SHIFTCTL_SMOD(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTCTL_SMOD_SHIFT)) & FLEXIO_SHIFTCTL_SMOD_MASK)
#define FLEXIO_SHIFTCTL_PINPOL_MASK              (0x80U)
#define FLEXIO_SHIFTCTL_PINPOL_SHIFT             (7U)
#define FLEXIO_SHIFTCTL_PINSEL_MASK              (0x1F00U)
#define FLEXIO_SHIFTCTL_PINSEL_SHIFT             (8U)
#define FLEXIO_SHIFTCTL_PINSEL(x)                (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTCTL_PINSEL_SHIFT)) & FLEXIO_SHIFTCTL_PINSEL_MASK)
#define FLEXIO_SHIFTCTL_PINCFG_MASK              (0x30000U)
#define FLEXIO_SHIFTCTL_PINCFG_SHIFT             (16U)
#define FLEXIO_SHIFTCTL_PINCFG(x)                (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTCTL_PINCFG_SHIFT)) & FLEXIO_SHIFTCTL_PINCFG_MASK)
#define FLEXIO_SHIFTCTL_TIMPOL_MASK              (0x800000U)
#define FLEXIO_SHIFTCTL_TIMPOL_SHIFT             (23U)
#define FLEXIO_SHIFTCTL_TIMSEL_MASK              (0x3000000U)
#define FLEXIO_SHIFTCTL_TIMSEL_SHIFT             (24U)
#define FLEXIO_SHIFTCTL_TIMSEL(x)                (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTCTL_TIMSEL_SHIFT)) & FLEXIO_SHIFTCTL_TIMSEL_MASK)

/* The count of FLEXIO_SHIFTCTL */
#define FLEXIO_SHIFTCTL_COUNT                    (4U)

/*! @name SHIFTCFG - Shifter Configuration N Register */
#define FLEXIO_SHIFTCFG_SSTART_MASK              (0x3U)
#define FLEXIO_SHIFTCFG_SSTART_SHIFT             (0U)
#define FLEXIO_SHIFTCFG_SSTART(x)                (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTCFG_SSTART_SHIFT)) & FLEXIO_SHIFTCFG_SSTART_MASK)
#define FLEXIO_SHIFTCFG_SSTOP_MASK               (0x30U)
#define FLEXIO_SHIFTCFG_SSTOP_SHIFT              (4U)
#define FLEXIO_SHIFTCFG_SSTOP(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTCFG_SSTOP_SHIFT)) & FLEXIO_SHIFTCFG_SSTOP_MASK)
#define FLEXIO_SHIFTCFG_INSRC_MASK               (0x100U)
#define FLEXIO_SHIFTCFG_INSRC_SHIFT              (8U)
#define FLEXIO_SHIFTCFG_PWIDTH_MASK              (0x1F0000U)
#define FLEXIO_SHIFTCFG_PWIDTH_SHIFT             (16U)
#define FLEXIO_SHIFTCFG_PWIDTH(x)                (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTCFG_PWIDTH_SHIFT)) & FLEXIO_SHIFTCFG_PWIDTH_MASK)

/* The count of FLEXIO_SHIFTCFG */
#define FLEXIO_SHIFTCFG_COUNT                    (4U)

/*! @name SHIFTBUF - Shifter Buffer N Register */
#define FLEXIO_SHIFTBUF_SHIFTBUF_MASK            (0xFFFFFFFFU)
#define FLEXIO_SHIFTBUF_SHIFTBUF_SHIFT           (0U)
#define FLEXIO_SHIFTBUF_SHIFTBUF(x)              (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTBUF_SHIFTBUF_SHIFT)) & FLEXIO_SHIFTBUF_SHIFTBUF_MASK)

/* The count of FLEXIO_SHIFTBUF */
#define FLEXIO_SHIFTBUF_COUNT                    (4U)

/*! @name SHIFTBUFBIS - Shifter Buffer N Bit Swapped Register */
#define FLEXIO_SHIFTBUFBIS_SHIFTBUFBIS_MASK      (0xFFFFFFFFU)
#define FLEXIO_SHIFTBUFBIS_SHIFTBUFBIS_SHIFT     (0U)
#define FLEXIO_SHIFTBUFBIS_SHIFTBUFBIS(x)        (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTBUFBIS_SHIFTBUFBIS_SHIFT)) & FLEXIO_SHIFTBUFBIS_SHIFTBUFBIS_MASK)

/* The count of FLEXIO_SHIFTBUFBIS */
#define FLEXIO_SHIFTBUFBIS_COUNT                 (4U)

/*! @name SHIFTBUFBYS - Shifter Buffer N Byte Swapped Register */
#define FLEXIO_SHIFTBUFBYS_SHIFTBUFBYS_MASK      (0xFFFFFFFFU)
#define FLEXIO_SHIFTBUFBYS_SHIFTBUFBYS_SHIFT     (0U)
#define FLEXIO_SHIFTBUFBYS_SHIFTBUFBYS(x)        (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTBUFBYS_SHIFTBUFBYS_SHIFT)) & FLEXIO_SHIFTBUFBYS_SHIFTBUFBYS_MASK)

/* The count of FLEXIO_SHIFTBUFBYS */
#define FLEXIO_SHIFTBUFBYS_COUNT                 (4U)

/*! @name SHIFTBUFBBS - Shifter Buffer N Bit Byte Swapped Register */
#define FLEXIO_SHIFTBUFBBS_SHIFTBUFBBS_MASK      (0xFFFFFFFFU)
#define FLEXIO_SHIFTBUFBBS_SHIFTBUFBBS_SHIFT     (0U)
#define FLEXIO_SHIFTBUFBBS_SHIFTBUFBBS(x)        (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTBUFBBS_SHIFTBUFBBS_SHIFT)) & FLEXIO_SHIFTBUFBBS_SHIFTBUFBBS_MASK)

/* The count of FLEXIO_SHIFTBUFBBS */
#define FLEXIO_SHIFTBUFBBS_COUNT                 (4U)

/*! @name TIMCTL - Timer Control N Register */
#define FLEXIO_TIMCTL_TIMOD_MASK                 (0x3U)
#define FLEXIO_TIMCTL_TIMOD_SHIFT                (0U)
#define FLEXIO_TIMCTL_TIMOD(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCTL_TIMOD_SHIFT)) & FLEXIO_TIMCTL_TIMOD_MASK)
#define FLEXIO_TIMCTL_PINPOL_MASK                (0x80U)
#define FLEXIO_TIMCTL_PINPOL_SHIFT               (7U)
#define FLEXIO_TIMCTL_PINSEL_MASK                (0x1F00U)
#define FLEXIO_TIMCTL_PINSEL_SHIFT               (8U)
#define FLEXIO_TIMCTL_PINSEL(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCTL_PINSEL_SHIFT)) & FLEXIO_TIMCTL_PINSEL_MASK)
#define FLEXIO_TIMCTL_PINCFG_MASK                (0x30000U)
#define FLEXIO_TIMCTL_PINCFG_SHIFT               (16U)
#define FLEXIO_TIMCTL_PINCFG(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCTL_PINCFG_SHIFT)) & FLEXIO_TIMCTL_PINCFG_MASK)
#define FLEXIO_TIMCTL_TRGSRC_MASK                (0x400000U)
#define FLEXIO_TIMCTL_TRGSRC_SHIFT               (22U)
#define FLEXIO_TIMCTL_TRGPOL_MASK                (0x800000U)
#define FLEXIO_TIMCTL_TRGPOL_SHIFT               (23U)
#define FLEXIO_TIMCTL_TRGSEL_MASK                (0x3F000000U)
#define FLEXIO_TIMCTL_TRGSEL_SHIFT               (24U)
#define FLEXIO_TIMCTL_TRGSEL(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCTL_TRGSEL_SHIFT)) & FLEXIO_TIMCTL_TRGSEL_MASK)

/* The count of FLEXIO_TIMCTL */
#define FLEXIO_TIMCTL_COUNT                      (4U)

/*! @name TIMCFG - Timer Configuration N Register */
#define FLEXIO_TIMCFG_TSTART_MASK                (0x2U)
#define FLEXIO_TIMCFG_TSTART_SHIFT               (1U)
#define FLEXIO_TIMCFG_TSTOP_MASK                 (0x30U)
#define FLEXIO_TIMCFG_TSTOP_SHIFT                (4U)
#define FLEXIO_TIMCFG_TSTOP(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCFG_TSTOP_SHIFT)) & FLEXIO_TIMCFG_TSTOP_MASK)
#define FLEXIO_TIMCFG_TIMENA_MASK                (0x700U)
#define FLEXIO_TIMCFG_TIMENA_SHIFT               (8U)
#define FLEXIO_TIMCFG_TIMENA(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCFG_TIMENA_SHIFT)) & FLEXIO_TIMCFG_TIMENA_MASK)
#define FLEXIO_TIMCFG_TIMDIS_MASK                (0x7000U)
#define FLEXIO_TIMCFG_TIMDIS_SHIFT               (12U)
#define FLEXIO_TIMCFG_TIMDIS(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCFG_TIMDIS_SHIFT)) & FLEXIO_TIMCFG_TIMDIS_MASK)
#define FLEXIO_TIMCFG_TIMRST_MASK                (0x70000U)
#define FLEXIO_TIMCFG_TIMRST_SHIFT               (16U)
#define FLEXIO_TIMCFG_TIMRST(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCFG_TIMRST_SHIFT)) & FLEXIO_TIMCFG_TIMRST_MASK)
#define FLEXIO_TIMCFG_TIMDEC_MASK                (0x300000U)
#define FLEXIO_TIMCFG_TIMDEC_SHIFT               (20U)
#define FLEXIO_TIMCFG_TIMDEC(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCFG_TIMDEC_SHIFT)) & FLEXIO_TIMCFG_TIMDEC_MASK)
#define FLEXIO_TIMCFG_TIMOUT_MASK                (0x3000000U)
#define FLEXIO_TIMCFG_TIMOUT_SHIFT               (24U)
#define FLEXIO_TIMCFG_TIMOUT(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCFG_TIMOUT_SHIFT)) & FLEXIO_TIMCFG_TIMOUT_MASK)

/* The count of FLEXIO_TIMCFG */
#define FLEXIO_TIMCFG_COUNT                      (4U)

/*! @name TIMCMP - Timer Compare N Register */
#define FLEXIO_TIMCMP_CMP_MASK                   (0xFFFFU)
#define FLEXIO_TIMCMP_CMP_SHIFT                  (0U)
#define FLEXIO_TIMCMP_CMP(x)                     (((uint32_t)(((uint32_t)(x)) << FLEXIO_TIMCMP_CMP_SHIFT)) & FLEXIO_TIMCMP_CMP_MASK)

/* The count of FLEXIO_TIMCMP */
#define FLEXIO_TIMCMP_COUNT                      (4U)

/*! @name SHIFTBUFNBS - Shifter Buffer N Nibble Byte Swapped Register */
#define FLEXIO_SHIFTBUFNBS_SHIFTBUFNBS_MASK      (0xFFFFFFFFU)
#define FLEXIO_SHIFTBUFNBS_SHIFTBUFNBS_SHIFT     (0U)
#define FLEXIO_SHIFTBUFNBS_SHIFTBUFNBS(x)        (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTBUFNBS_SHIFTBUFNBS_SHIFT)) & FLEXIO_SHIFTBUFNBS_SHIFTBUFNBS_MASK)

/* The count of FLEXIO_SHIFTBUFNBS */
#define FLEXIO_SHIFTBUFNBS_COUNT                 (4U)

/*! @name SHIFTBUFHWS - Shifter Buffer N Half Word Swapped Register */
#define FLEXIO_SHIFTBUFHWS_SHIFTBUFHWS_MASK      (0xFFFFFFFFU)
#define FLEXIO_SHIFTBUFHWS_SHIFTBUFHWS_SHIFT     (0U)
#define FLEXIO_SHIFTBUFHWS_SHIFTBUFHWS(x)        (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTBUFHWS_SHIFTBUFHWS_SHIFT)) & FLEXIO_SHIFTBUFHWS_SHIFTBUFHWS_MASK)

/* The count of FLEXIO_SHIFTBUFHWS */
#define FLEXIO_SHIFTBUFHWS_COUNT                 (4U)

/*! @name SHIFTBUFNIS - Shifter Buffer N Nibble Swapped Register */
#define FLEXIO_SHIFTBUFNIS_SHIFTBUFNIS_MASK      (0xFFFFFFFFU)
#define FLEXIO_SHIFTBUFNIS_SHIFTBUFNIS_SHIFT     (0U)
#define FLEXIO_SHIFTBUFNIS_SHIFTBUFNIS(x)        (((uint32_t)(((uint32_t)(x)) << FLEXIO_SHIFTBUFNIS_SHIFTBUFNIS_SHIFT)) & FLEXIO_SHIFTBUFNIS_SHIFTBUFNIS_MASK)

/* The count of FLEXIO_SHIFTBUFNIS */
#define FLEXIO_SHIFTBUFNIS_COUNT                 (4U)


/*!
 * @}
 */ /* end of group FLEXIO_Register_Masks */


/* FLEXIO - Peripheral instance base addresses */
/** Peripheral FLEXIO1 base pointer */
#define FLEXIO1_BASE_PTR                         ((FLEXIO_MemMapPtr)0x401AC000u)
/** Peripheral FLEXIO2 base pointer */
#define FLEXIO2_BASE_PTR                         ((FLEXIO_MemMapPtr)0x401B0000u)
/** Array initializer of FLEXIO peripheral base pointers */
#define FLEXIO_BASE_PTRS                         { FLEXIO1_BASE_PTR, FLEXIO2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- FLEXIO - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXIO_Register_Accessor_Macros FLEXIO - Register accessor macros
 * @{
 */


/* FLEXIO - Register instance definitions */
/* FLEXIO1 */
#define FLEXIO1_VERID                            FLEXIO_VERID_REG(FLEXIO1_BASE_PTR)
#define FLEXIO1_PARAM                            FLEXIO_PARAM_REG(FLEXIO1_BASE_PTR)
#define FLEXIO1_CTRL                             FLEXIO_CTRL_REG(FLEXIO1_BASE_PTR)
#define FLEXIO1_PIN                              FLEXIO_PIN_REG(FLEXIO1_BASE_PTR)
#define FLEXIO1_SHIFTSTAT                        FLEXIO_SHIFTSTAT_REG(FLEXIO1_BASE_PTR)
#define FLEXIO1_SHIFTERR                         FLEXIO_SHIFTERR_REG(FLEXIO1_BASE_PTR)
#define FLEXIO1_TIMSTAT                          FLEXIO_TIMSTAT_REG(FLEXIO1_BASE_PTR)
#define FLEXIO1_SHIFTSIEN                        FLEXIO_SHIFTSIEN_REG(FLEXIO1_BASE_PTR)
#define FLEXIO1_SHIFTEIEN                        FLEXIO_SHIFTEIEN_REG(FLEXIO1_BASE_PTR)
#define FLEXIO1_TIMIEN                           FLEXIO_TIMIEN_REG(FLEXIO1_BASE_PTR)
#define FLEXIO1_SHIFTSDEN                        FLEXIO_SHIFTSDEN_REG(FLEXIO1_BASE_PTR)
#define FLEXIO1_SHIFTSTATE                       FLEXIO_SHIFTSTATE_REG(FLEXIO1_BASE_PTR)
#define FLEXIO1_SHIFTCTL0                        FLEXIO_SHIFTCTL_REG(FLEXIO1_BASE_PTR,0)
#define FLEXIO1_SHIFTCTL1                        FLEXIO_SHIFTCTL_REG(FLEXIO1_BASE_PTR,1)
#define FLEXIO1_SHIFTCTL2                        FLEXIO_SHIFTCTL_REG(FLEXIO1_BASE_PTR,2)
#define FLEXIO1_SHIFTCTL3                        FLEXIO_SHIFTCTL_REG(FLEXIO1_BASE_PTR,3)
#define FLEXIO1_SHIFTCFG0                        FLEXIO_SHIFTCFG_REG(FLEXIO1_BASE_PTR,0)
#define FLEXIO1_SHIFTCFG1                        FLEXIO_SHIFTCFG_REG(FLEXIO1_BASE_PTR,1)
#define FLEXIO1_SHIFTCFG2                        FLEXIO_SHIFTCFG_REG(FLEXIO1_BASE_PTR,2)
#define FLEXIO1_SHIFTCFG3                        FLEXIO_SHIFTCFG_REG(FLEXIO1_BASE_PTR,3)
#define FLEXIO1_SHIFTBUF0                        FLEXIO_SHIFTBUF_REG(FLEXIO1_BASE_PTR,0)
#define FLEXIO1_SHIFTBUF1                        FLEXIO_SHIFTBUF_REG(FLEXIO1_BASE_PTR,1)
#define FLEXIO1_SHIFTBUF2                        FLEXIO_SHIFTBUF_REG(FLEXIO1_BASE_PTR,2)
#define FLEXIO1_SHIFTBUF3                        FLEXIO_SHIFTBUF_REG(FLEXIO1_BASE_PTR,3)
#define FLEXIO1_SHIFTBUFBIS0                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO1_BASE_PTR,0)
#define FLEXIO1_SHIFTBUFBIS1                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO1_BASE_PTR,1)
#define FLEXIO1_SHIFTBUFBIS2                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO1_BASE_PTR,2)
#define FLEXIO1_SHIFTBUFBIS3                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO1_BASE_PTR,3)
#define FLEXIO1_SHIFTBUFBYS0                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO1_BASE_PTR,0)
#define FLEXIO1_SHIFTBUFBYS1                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO1_BASE_PTR,1)
#define FLEXIO1_SHIFTBUFBYS2                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO1_BASE_PTR,2)
#define FLEXIO1_SHIFTBUFBYS3                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO1_BASE_PTR,3)
#define FLEXIO1_SHIFTBUFBBS0                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO1_BASE_PTR,0)
#define FLEXIO1_SHIFTBUFBBS1                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO1_BASE_PTR,1)
#define FLEXIO1_SHIFTBUFBBS2                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO1_BASE_PTR,2)
#define FLEXIO1_SHIFTBUFBBS3                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO1_BASE_PTR,3)
#define FLEXIO1_TIMCTL0                          FLEXIO_TIMCTL_REG(FLEXIO1_BASE_PTR,0)
#define FLEXIO1_TIMCTL1                          FLEXIO_TIMCTL_REG(FLEXIO1_BASE_PTR,1)
#define FLEXIO1_TIMCTL2                          FLEXIO_TIMCTL_REG(FLEXIO1_BASE_PTR,2)
#define FLEXIO1_TIMCTL3                          FLEXIO_TIMCTL_REG(FLEXIO1_BASE_PTR,3)
#define FLEXIO1_TIMCFG0                          FLEXIO_TIMCFG_REG(FLEXIO1_BASE_PTR,0)
#define FLEXIO1_TIMCFG1                          FLEXIO_TIMCFG_REG(FLEXIO1_BASE_PTR,1)
#define FLEXIO1_TIMCFG2                          FLEXIO_TIMCFG_REG(FLEXIO1_BASE_PTR,2)
#define FLEXIO1_TIMCFG3                          FLEXIO_TIMCFG_REG(FLEXIO1_BASE_PTR,3)
#define FLEXIO1_TIMCMP0                          FLEXIO_TIMCMP_REG(FLEXIO1_BASE_PTR,0)
#define FLEXIO1_TIMCMP1                          FLEXIO_TIMCMP_REG(FLEXIO1_BASE_PTR,1)
#define FLEXIO1_TIMCMP2                          FLEXIO_TIMCMP_REG(FLEXIO1_BASE_PTR,2)
#define FLEXIO1_TIMCMP3                          FLEXIO_TIMCMP_REG(FLEXIO1_BASE_PTR,3)
#define FLEXIO1_SHIFTBUFNBS0                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO1_BASE_PTR,0)
#define FLEXIO1_SHIFTBUFNBS1                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO1_BASE_PTR,1)
#define FLEXIO1_SHIFTBUFNBS2                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO1_BASE_PTR,2)
#define FLEXIO1_SHIFTBUFNBS3                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO1_BASE_PTR,3)
#define FLEXIO1_SHIFTBUFHWS0                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO1_BASE_PTR,0)
#define FLEXIO1_SHIFTBUFHWS1                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO1_BASE_PTR,1)
#define FLEXIO1_SHIFTBUFHWS2                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO1_BASE_PTR,2)
#define FLEXIO1_SHIFTBUFHWS3                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO1_BASE_PTR,3)
#define FLEXIO1_SHIFTBUFNIS0                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO1_BASE_PTR,0)
#define FLEXIO1_SHIFTBUFNIS1                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO1_BASE_PTR,1)
#define FLEXIO1_SHIFTBUFNIS2                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO1_BASE_PTR,2)
#define FLEXIO1_SHIFTBUFNIS3                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO1_BASE_PTR,3)
/* FLEXIO2 */
#define FLEXIO2_VERID                            FLEXIO_VERID_REG(FLEXIO2_BASE_PTR)
#define FLEXIO2_PARAM                            FLEXIO_PARAM_REG(FLEXIO2_BASE_PTR)
#define FLEXIO2_CTRL                             FLEXIO_CTRL_REG(FLEXIO2_BASE_PTR)
#define FLEXIO2_PIN                              FLEXIO_PIN_REG(FLEXIO2_BASE_PTR)
#define FLEXIO2_SHIFTSTAT                        FLEXIO_SHIFTSTAT_REG(FLEXIO2_BASE_PTR)
#define FLEXIO2_SHIFTERR                         FLEXIO_SHIFTERR_REG(FLEXIO2_BASE_PTR)
#define FLEXIO2_TIMSTAT                          FLEXIO_TIMSTAT_REG(FLEXIO2_BASE_PTR)
#define FLEXIO2_SHIFTSIEN                        FLEXIO_SHIFTSIEN_REG(FLEXIO2_BASE_PTR)
#define FLEXIO2_SHIFTEIEN                        FLEXIO_SHIFTEIEN_REG(FLEXIO2_BASE_PTR)
#define FLEXIO2_TIMIEN                           FLEXIO_TIMIEN_REG(FLEXIO2_BASE_PTR)
#define FLEXIO2_SHIFTSDEN                        FLEXIO_SHIFTSDEN_REG(FLEXIO2_BASE_PTR)
#define FLEXIO2_SHIFTSTATE                       FLEXIO_SHIFTSTATE_REG(FLEXIO2_BASE_PTR)
#define FLEXIO2_SHIFTCTL0                        FLEXIO_SHIFTCTL_REG(FLEXIO2_BASE_PTR,0)
#define FLEXIO2_SHIFTCTL1                        FLEXIO_SHIFTCTL_REG(FLEXIO2_BASE_PTR,1)
#define FLEXIO2_SHIFTCTL2                        FLEXIO_SHIFTCTL_REG(FLEXIO2_BASE_PTR,2)
#define FLEXIO2_SHIFTCTL3                        FLEXIO_SHIFTCTL_REG(FLEXIO2_BASE_PTR,3)
#define FLEXIO2_SHIFTCFG0                        FLEXIO_SHIFTCFG_REG(FLEXIO2_BASE_PTR,0)
#define FLEXIO2_SHIFTCFG1                        FLEXIO_SHIFTCFG_REG(FLEXIO2_BASE_PTR,1)
#define FLEXIO2_SHIFTCFG2                        FLEXIO_SHIFTCFG_REG(FLEXIO2_BASE_PTR,2)
#define FLEXIO2_SHIFTCFG3                        FLEXIO_SHIFTCFG_REG(FLEXIO2_BASE_PTR,3)
#define FLEXIO2_SHIFTBUF0                        FLEXIO_SHIFTBUF_REG(FLEXIO2_BASE_PTR,0)
#define FLEXIO2_SHIFTBUF1                        FLEXIO_SHIFTBUF_REG(FLEXIO2_BASE_PTR,1)
#define FLEXIO2_SHIFTBUF2                        FLEXIO_SHIFTBUF_REG(FLEXIO2_BASE_PTR,2)
#define FLEXIO2_SHIFTBUF3                        FLEXIO_SHIFTBUF_REG(FLEXIO2_BASE_PTR,3)
#define FLEXIO2_SHIFTBUFBIS0                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO2_BASE_PTR,0)
#define FLEXIO2_SHIFTBUFBIS1                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO2_BASE_PTR,1)
#define FLEXIO2_SHIFTBUFBIS2                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO2_BASE_PTR,2)
#define FLEXIO2_SHIFTBUFBIS3                     FLEXIO_SHIFTBUFBIS_REG(FLEXIO2_BASE_PTR,3)
#define FLEXIO2_SHIFTBUFBYS0                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO2_BASE_PTR,0)
#define FLEXIO2_SHIFTBUFBYS1                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO2_BASE_PTR,1)
#define FLEXIO2_SHIFTBUFBYS2                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO2_BASE_PTR,2)
#define FLEXIO2_SHIFTBUFBYS3                     FLEXIO_SHIFTBUFBYS_REG(FLEXIO2_BASE_PTR,3)
#define FLEXIO2_SHIFTBUFBBS0                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO2_BASE_PTR,0)
#define FLEXIO2_SHIFTBUFBBS1                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO2_BASE_PTR,1)
#define FLEXIO2_SHIFTBUFBBS2                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO2_BASE_PTR,2)
#define FLEXIO2_SHIFTBUFBBS3                     FLEXIO_SHIFTBUFBBS_REG(FLEXIO2_BASE_PTR,3)
#define FLEXIO2_TIMCTL0                          FLEXIO_TIMCTL_REG(FLEXIO2_BASE_PTR,0)
#define FLEXIO2_TIMCTL1                          FLEXIO_TIMCTL_REG(FLEXIO2_BASE_PTR,1)
#define FLEXIO2_TIMCTL2                          FLEXIO_TIMCTL_REG(FLEXIO2_BASE_PTR,2)
#define FLEXIO2_TIMCTL3                          FLEXIO_TIMCTL_REG(FLEXIO2_BASE_PTR,3)
#define FLEXIO2_TIMCFG0                          FLEXIO_TIMCFG_REG(FLEXIO2_BASE_PTR,0)
#define FLEXIO2_TIMCFG1                          FLEXIO_TIMCFG_REG(FLEXIO2_BASE_PTR,1)
#define FLEXIO2_TIMCFG2                          FLEXIO_TIMCFG_REG(FLEXIO2_BASE_PTR,2)
#define FLEXIO2_TIMCFG3                          FLEXIO_TIMCFG_REG(FLEXIO2_BASE_PTR,3)
#define FLEXIO2_TIMCMP0                          FLEXIO_TIMCMP_REG(FLEXIO2_BASE_PTR,0)
#define FLEXIO2_TIMCMP1                          FLEXIO_TIMCMP_REG(FLEXIO2_BASE_PTR,1)
#define FLEXIO2_TIMCMP2                          FLEXIO_TIMCMP_REG(FLEXIO2_BASE_PTR,2)
#define FLEXIO2_TIMCMP3                          FLEXIO_TIMCMP_REG(FLEXIO2_BASE_PTR,3)
#define FLEXIO2_SHIFTBUFNBS0                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO2_BASE_PTR,0)
#define FLEXIO2_SHIFTBUFNBS1                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO2_BASE_PTR,1)
#define FLEXIO2_SHIFTBUFNBS2                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO2_BASE_PTR,2)
#define FLEXIO2_SHIFTBUFNBS3                     FLEXIO_SHIFTBUFNBS_REG(FLEXIO2_BASE_PTR,3)
#define FLEXIO2_SHIFTBUFHWS0                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO2_BASE_PTR,0)
#define FLEXIO2_SHIFTBUFHWS1                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO2_BASE_PTR,1)
#define FLEXIO2_SHIFTBUFHWS2                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO2_BASE_PTR,2)
#define FLEXIO2_SHIFTBUFHWS3                     FLEXIO_SHIFTBUFHWS_REG(FLEXIO2_BASE_PTR,3)
#define FLEXIO2_SHIFTBUFNIS0                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO2_BASE_PTR,0)
#define FLEXIO2_SHIFTBUFNIS1                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO2_BASE_PTR,1)
#define FLEXIO2_SHIFTBUFNIS2                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO2_BASE_PTR,2)
#define FLEXIO2_SHIFTBUFNIS3                     FLEXIO_SHIFTBUFNIS_REG(FLEXIO2_BASE_PTR,3)

/* FLEXIO - Register array accessors */
#define FLEXIO1_SHIFTCTL(index)                  FLEXIO_SHIFTCTL_REG(FLEXIO1_BASE_PTR,index)
#define FLEXIO2_SHIFTCTL(index)                  FLEXIO_SHIFTCTL_REG(FLEXIO2_BASE_PTR,index)
#define FLEXIO1_SHIFTCFG(index)                  FLEXIO_SHIFTCFG_REG(FLEXIO1_BASE_PTR,index)
#define FLEXIO2_SHIFTCFG(index)                  FLEXIO_SHIFTCFG_REG(FLEXIO2_BASE_PTR,index)
#define FLEXIO1_SHIFTBUF(index)                  FLEXIO_SHIFTBUF_REG(FLEXIO1_BASE_PTR,index)
#define FLEXIO2_SHIFTBUF(index)                  FLEXIO_SHIFTBUF_REG(FLEXIO2_BASE_PTR,index)
#define FLEXIO1_SHIFTBUFBIS(index)               FLEXIO_SHIFTBUFBIS_REG(FLEXIO1_BASE_PTR,index)
#define FLEXIO2_SHIFTBUFBIS(index)               FLEXIO_SHIFTBUFBIS_REG(FLEXIO2_BASE_PTR,index)
#define FLEXIO1_SHIFTBUFBYS(index)               FLEXIO_SHIFTBUFBYS_REG(FLEXIO1_BASE_PTR,index)
#define FLEXIO2_SHIFTBUFBYS(index)               FLEXIO_SHIFTBUFBYS_REG(FLEXIO2_BASE_PTR,index)
#define FLEXIO1_SHIFTBUFBBS(index)               FLEXIO_SHIFTBUFBBS_REG(FLEXIO1_BASE_PTR,index)
#define FLEXIO2_SHIFTBUFBBS(index)               FLEXIO_SHIFTBUFBBS_REG(FLEXIO2_BASE_PTR,index)
#define FLEXIO1_TIMCTL(index)                    FLEXIO_TIMCTL_REG(FLEXIO1_BASE_PTR,index)
#define FLEXIO2_TIMCTL(index)                    FLEXIO_TIMCTL_REG(FLEXIO2_BASE_PTR,index)
#define FLEXIO1_TIMCFG(index)                    FLEXIO_TIMCFG_REG(FLEXIO1_BASE_PTR,index)
#define FLEXIO2_TIMCFG(index)                    FLEXIO_TIMCFG_REG(FLEXIO2_BASE_PTR,index)
#define FLEXIO1_TIMCMP(index)                    FLEXIO_TIMCMP_REG(FLEXIO1_BASE_PTR,index)
#define FLEXIO2_TIMCMP(index)                    FLEXIO_TIMCMP_REG(FLEXIO2_BASE_PTR,index)
#define FLEXIO1_SHIFTBUFNBS(index)               FLEXIO_SHIFTBUFNBS_REG(FLEXIO1_BASE_PTR,index)
#define FLEXIO2_SHIFTBUFNBS(index)               FLEXIO_SHIFTBUFNBS_REG(FLEXIO2_BASE_PTR,index)
#define FLEXIO1_SHIFTBUFHWS(index)               FLEXIO_SHIFTBUFHWS_REG(FLEXIO1_BASE_PTR,index)
#define FLEXIO2_SHIFTBUFHWS(index)               FLEXIO_SHIFTBUFHWS_REG(FLEXIO2_BASE_PTR,index)
#define FLEXIO1_SHIFTBUFNIS(index)               FLEXIO_SHIFTBUFNIS_REG(FLEXIO1_BASE_PTR,index)
#define FLEXIO2_SHIFTBUFNIS(index)               FLEXIO_SHIFTBUFNIS_REG(FLEXIO2_BASE_PTR,index)

/*!
 * @}
 */ /* end of group FLEXIO_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group FLEXIO_Peripheral */


/* ----------------------------------------------------------------------------
   -- FLEXRAM
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXRAM_Peripheral FLEXRAM
 * @{
 */

/** FLEXRAM - Peripheral register structure */
typedef struct FLEXRAM_MemMap {
  uint32_t TCM_CTRL;                               /**< TCM CRTL Register, offset: 0x0 */
  uint32_t OCRAM_MAGIC_ADDR;                       /**< OCRAM Magic Address Register, offset: 0x4 */
  uint32_t DTCM_MAGIC_ADDR;                        /**< DTCM Magic Address Register, offset: 0x8 */
  uint32_t ITCM_MAGIC_ADDR;                        /**< ITCM Magic Address Register, offset: 0xC */
  uint32_t INT_STATUS;                             /**< Interrupt Status Register, offset: 0x10 */
  uint32_t INT_STAT_EN;                            /**< Interrupt Status Enable Register, offset: 0x14 */
  uint32_t INT_SIG_EN;                             /**< Interrupt Enable Register, offset: 0x18 */
} volatile *FLEXRAM_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- FLEXRAM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXRAM_Register_Accessor_Macros FLEXRAM - Register accessor macros
 * @{
 */


/* FLEXRAM - Register accessors */
#define FLEXRAM_TCM_CTRL_REG(base)               ((base)->TCM_CTRL)
#define FLEXRAM_OCRAM_MAGIC_ADDR_REG(base)       ((base)->OCRAM_MAGIC_ADDR)
#define FLEXRAM_DTCM_MAGIC_ADDR_REG(base)        ((base)->DTCM_MAGIC_ADDR)
#define FLEXRAM_ITCM_MAGIC_ADDR_REG(base)        ((base)->ITCM_MAGIC_ADDR)
#define FLEXRAM_INT_STATUS_REG(base)             ((base)->INT_STATUS)
#define FLEXRAM_INT_STAT_EN_REG(base)            ((base)->INT_STAT_EN)
#define FLEXRAM_INT_SIG_EN_REG(base)             ((base)->INT_SIG_EN)

/*!
 * @}
 */ /* end of group FLEXRAM_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- FLEXRAM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXRAM_Register_Masks FLEXRAM Register Masks
 * @{
 */

/*! @name TCM_CTRL - TCM CRTL Register */
#define FLEXRAM_TCM_CTRL_TCM_WWAIT_EN_MASK       (0x1U)
#define FLEXRAM_TCM_CTRL_TCM_WWAIT_EN_SHIFT      (0U)
#define FLEXRAM_TCM_CTRL_TCM_RWAIT_EN_MASK       (0x2U)
#define FLEXRAM_TCM_CTRL_TCM_RWAIT_EN_SHIFT      (1U)
#define FLEXRAM_TCM_CTRL_FORCE_CLK_ON_MASK       (0x4U)
#define FLEXRAM_TCM_CTRL_FORCE_CLK_ON_SHIFT      (2U)
#define FLEXRAM_TCM_CTRL_Reserved_MASK           (0xFFFFFFF8U)
#define FLEXRAM_TCM_CTRL_Reserved_SHIFT          (3U)
#define FLEXRAM_TCM_CTRL_Reserved(x)             (((uint32_t)(((uint32_t)(x)) << FLEXRAM_TCM_CTRL_Reserved_SHIFT)) & FLEXRAM_TCM_CTRL_Reserved_MASK)

/*! @name OCRAM_MAGIC_ADDR - OCRAM Magic Address Register */
#define FLEXRAM_OCRAM_MAGIC_ADDR_OCRAM_WR_RD_SEL_MASK (0x1U)
#define FLEXRAM_OCRAM_MAGIC_ADDR_OCRAM_WR_RD_SEL_SHIFT (0U)
#define FLEXRAM_OCRAM_MAGIC_ADDR_OCRAM_MAGIC_ADDR_MASK (0x1FFFEU)
#define FLEXRAM_OCRAM_MAGIC_ADDR_OCRAM_MAGIC_ADDR_SHIFT (1U)
#define FLEXRAM_OCRAM_MAGIC_ADDR_OCRAM_MAGIC_ADDR(x) (((uint32_t)(((uint32_t)(x)) << FLEXRAM_OCRAM_MAGIC_ADDR_OCRAM_MAGIC_ADDR_SHIFT)) & FLEXRAM_OCRAM_MAGIC_ADDR_OCRAM_MAGIC_ADDR_MASK)
#define FLEXRAM_OCRAM_MAGIC_ADDR_Reserved_MASK   (0xFFFE0000U)
#define FLEXRAM_OCRAM_MAGIC_ADDR_Reserved_SHIFT  (17U)
#define FLEXRAM_OCRAM_MAGIC_ADDR_Reserved(x)     (((uint32_t)(((uint32_t)(x)) << FLEXRAM_OCRAM_MAGIC_ADDR_Reserved_SHIFT)) & FLEXRAM_OCRAM_MAGIC_ADDR_Reserved_MASK)

/*! @name DTCM_MAGIC_ADDR - DTCM Magic Address Register */
#define FLEXRAM_DTCM_MAGIC_ADDR_DTCM_WR_RD_SEL_MASK (0x1U)
#define FLEXRAM_DTCM_MAGIC_ADDR_DTCM_WR_RD_SEL_SHIFT (0U)
#define FLEXRAM_DTCM_MAGIC_ADDR_DTCM_MAGIC_ADDR_MASK (0x1FFFEU)
#define FLEXRAM_DTCM_MAGIC_ADDR_DTCM_MAGIC_ADDR_SHIFT (1U)
#define FLEXRAM_DTCM_MAGIC_ADDR_DTCM_MAGIC_ADDR(x) (((uint32_t)(((uint32_t)(x)) << FLEXRAM_DTCM_MAGIC_ADDR_DTCM_MAGIC_ADDR_SHIFT)) & FLEXRAM_DTCM_MAGIC_ADDR_DTCM_MAGIC_ADDR_MASK)
#define FLEXRAM_DTCM_MAGIC_ADDR_Reserved_MASK    (0xFFFE0000U)
#define FLEXRAM_DTCM_MAGIC_ADDR_Reserved_SHIFT   (17U)
#define FLEXRAM_DTCM_MAGIC_ADDR_Reserved(x)      (((uint32_t)(((uint32_t)(x)) << FLEXRAM_DTCM_MAGIC_ADDR_Reserved_SHIFT)) & FLEXRAM_DTCM_MAGIC_ADDR_Reserved_MASK)

/*! @name ITCM_MAGIC_ADDR - ITCM Magic Address Register */
#define FLEXRAM_ITCM_MAGIC_ADDR_ITCM_WR_RD_SEL_MASK (0x1U)
#define FLEXRAM_ITCM_MAGIC_ADDR_ITCM_WR_RD_SEL_SHIFT (0U)
#define FLEXRAM_ITCM_MAGIC_ADDR_ITCM_MAGIC_ADDR_MASK (0x1FFFEU)
#define FLEXRAM_ITCM_MAGIC_ADDR_ITCM_MAGIC_ADDR_SHIFT (1U)
#define FLEXRAM_ITCM_MAGIC_ADDR_ITCM_MAGIC_ADDR(x) (((uint32_t)(((uint32_t)(x)) << FLEXRAM_ITCM_MAGIC_ADDR_ITCM_MAGIC_ADDR_SHIFT)) & FLEXRAM_ITCM_MAGIC_ADDR_ITCM_MAGIC_ADDR_MASK)
#define FLEXRAM_ITCM_MAGIC_ADDR_Reserved_MASK    (0xFFFE0000U)
#define FLEXRAM_ITCM_MAGIC_ADDR_Reserved_SHIFT   (17U)
#define FLEXRAM_ITCM_MAGIC_ADDR_Reserved(x)      (((uint32_t)(((uint32_t)(x)) << FLEXRAM_ITCM_MAGIC_ADDR_Reserved_SHIFT)) & FLEXRAM_ITCM_MAGIC_ADDR_Reserved_MASK)

/*! @name INT_STATUS - Interrupt Status Register */
#define FLEXRAM_INT_STATUS_ITCM_MAM_STATUS_MASK  (0x1U)
#define FLEXRAM_INT_STATUS_ITCM_MAM_STATUS_SHIFT (0U)
#define FLEXRAM_INT_STATUS_DTCM_MAM_STATUS_MASK  (0x2U)
#define FLEXRAM_INT_STATUS_DTCM_MAM_STATUS_SHIFT (1U)
#define FLEXRAM_INT_STATUS_OCRAM_MAM_STATUS_MASK (0x4U)
#define FLEXRAM_INT_STATUS_OCRAM_MAM_STATUS_SHIFT (2U)
#define FLEXRAM_INT_STATUS_ITCM_ERR_STATUS_MASK  (0x8U)
#define FLEXRAM_INT_STATUS_ITCM_ERR_STATUS_SHIFT (3U)
#define FLEXRAM_INT_STATUS_DTCM_ERR_STATUS_MASK  (0x10U)
#define FLEXRAM_INT_STATUS_DTCM_ERR_STATUS_SHIFT (4U)
#define FLEXRAM_INT_STATUS_OCRAM_ERR_STATUS_MASK (0x20U)
#define FLEXRAM_INT_STATUS_OCRAM_ERR_STATUS_SHIFT (5U)
#define FLEXRAM_INT_STATUS_Reserved_MASK         (0xFFFFFFC0U)
#define FLEXRAM_INT_STATUS_Reserved_SHIFT        (6U)
#define FLEXRAM_INT_STATUS_Reserved(x)           (((uint32_t)(((uint32_t)(x)) << FLEXRAM_INT_STATUS_Reserved_SHIFT)) & FLEXRAM_INT_STATUS_Reserved_MASK)

/*! @name INT_STAT_EN - Interrupt Status Enable Register */
#define FLEXRAM_INT_STAT_EN_ITCM_MAM_STAT_EN_MASK (0x1U)
#define FLEXRAM_INT_STAT_EN_ITCM_MAM_STAT_EN_SHIFT (0U)
#define FLEXRAM_INT_STAT_EN_DTCM_MAM_STAT_EN_MASK (0x2U)
#define FLEXRAM_INT_STAT_EN_DTCM_MAM_STAT_EN_SHIFT (1U)
#define FLEXRAM_INT_STAT_EN_OCRAM_MAM_STAT_EN_MASK (0x4U)
#define FLEXRAM_INT_STAT_EN_OCRAM_MAM_STAT_EN_SHIFT (2U)
#define FLEXRAM_INT_STAT_EN_ITCM_ERR_STAT_EN_MASK (0x8U)
#define FLEXRAM_INT_STAT_EN_ITCM_ERR_STAT_EN_SHIFT (3U)
#define FLEXRAM_INT_STAT_EN_DTCM_ERR_STAT_EN_MASK (0x10U)
#define FLEXRAM_INT_STAT_EN_DTCM_ERR_STAT_EN_SHIFT (4U)
#define FLEXRAM_INT_STAT_EN_OCRAM_ERR_STAT_EN_MASK (0x20U)
#define FLEXRAM_INT_STAT_EN_OCRAM_ERR_STAT_EN_SHIFT (5U)
#define FLEXRAM_INT_STAT_EN_Reserved_MASK        (0xFFFFFFC0U)
#define FLEXRAM_INT_STAT_EN_Reserved_SHIFT       (6U)
#define FLEXRAM_INT_STAT_EN_Reserved(x)          (((uint32_t)(((uint32_t)(x)) << FLEXRAM_INT_STAT_EN_Reserved_SHIFT)) & FLEXRAM_INT_STAT_EN_Reserved_MASK)

/*! @name INT_SIG_EN - Interrupt Enable Register */
#define FLEXRAM_INT_SIG_EN_ITCM_MAM_SIG_EN_MASK  (0x1U)
#define FLEXRAM_INT_SIG_EN_ITCM_MAM_SIG_EN_SHIFT (0U)
#define FLEXRAM_INT_SIG_EN_DTCM_MAM_SIG_EN_MASK  (0x2U)
#define FLEXRAM_INT_SIG_EN_DTCM_MAM_SIG_EN_SHIFT (1U)
#define FLEXRAM_INT_SIG_EN_OCRAM_MAM_SIG_EN_MASK (0x4U)
#define FLEXRAM_INT_SIG_EN_OCRAM_MAM_SIG_EN_SHIFT (2U)
#define FLEXRAM_INT_SIG_EN_ITCM_ERR_SIG_EN_MASK  (0x8U)
#define FLEXRAM_INT_SIG_EN_ITCM_ERR_SIG_EN_SHIFT (3U)
#define FLEXRAM_INT_SIG_EN_DTCM_ERR_SIG_EN_MASK  (0x10U)
#define FLEXRAM_INT_SIG_EN_DTCM_ERR_SIG_EN_SHIFT (4U)
#define FLEXRAM_INT_SIG_EN_OCRAM_ERR_SIG_EN_MASK (0x20U)
#define FLEXRAM_INT_SIG_EN_OCRAM_ERR_SIG_EN_SHIFT (5U)
#define FLEXRAM_INT_SIG_EN_Reserved_MASK         (0xFFFFFFC0U)
#define FLEXRAM_INT_SIG_EN_Reserved_SHIFT        (6U)
#define FLEXRAM_INT_SIG_EN_Reserved(x)           (((uint32_t)(((uint32_t)(x)) << FLEXRAM_INT_SIG_EN_Reserved_SHIFT)) & FLEXRAM_INT_SIG_EN_Reserved_MASK)


/*!
 * @}
 */ /* end of group FLEXRAM_Register_Masks */


/* FLEXRAM - Peripheral instance base addresses */
/** Peripheral FLEXRAM base pointer */
#define FLEXRAM_BASE_PTR                         ((FLEXRAM_MemMapPtr)0x400B0000u)
/** Array initializer of FLEXRAM peripheral base pointers */
#define FLEXRAM_BASE_PTRS                        { FLEXRAM_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- FLEXRAM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXRAM_Register_Accessor_Macros FLEXRAM - Register accessor macros
 * @{
 */


/* FLEXRAM - Register instance definitions */
/* FLEXRAM */
#define FLEXRAM_TCM_CTRL                         FLEXRAM_TCM_CTRL_REG(FLEXRAM_BASE_PTR)
#define FLEXRAM_OCRAM_MAGIC_ADDR                 FLEXRAM_OCRAM_MAGIC_ADDR_REG(FLEXRAM_BASE_PTR)
#define FLEXRAM_DTCM_MAGIC_ADDR                  FLEXRAM_DTCM_MAGIC_ADDR_REG(FLEXRAM_BASE_PTR)
#define FLEXRAM_ITCM_MAGIC_ADDR                  FLEXRAM_ITCM_MAGIC_ADDR_REG(FLEXRAM_BASE_PTR)
#define FLEXRAM_INT_STATUS                       FLEXRAM_INT_STATUS_REG(FLEXRAM_BASE_PTR)
#define FLEXRAM_INT_STAT_EN                      FLEXRAM_INT_STAT_EN_REG(FLEXRAM_BASE_PTR)
#define FLEXRAM_INT_SIG_EN                       FLEXRAM_INT_SIG_EN_REG(FLEXRAM_BASE_PTR)

/*!
 * @}
 */ /* end of group FLEXRAM_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group FLEXRAM_Peripheral */


/* ----------------------------------------------------------------------------
   -- FLEXSPI
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXSPI_Peripheral FLEXSPI
 * @{
 */

/** FLEXSPI - Peripheral register structure */
typedef struct FLEXSPI_MemMap {
  uint32_t MCR0;                                   /**< Module Control Register 0, offset: 0x0 */
  uint32_t MCR1;                                   /**< Module Control Register 1, offset: 0x4 */
  uint32_t MCR2;                                   /**< Module Control Register 2, offset: 0x8 */
  uint32_t AHBCR;                                  /**< AHB Bus Control Register, offset: 0xC */
  uint32_t INTEN;                                  /**< Interrupt Enable Register, offset: 0x10 */
  uint32_t INTR;                                   /**< Interrupt Register, offset: 0x14 */
  uint32_t LUTKEY;                                 /**< LUT Key Register, offset: 0x18 */
  uint32_t LUTCR;                                  /**< LUT Control Register, offset: 0x1C */
  uint32_t AHBRXBUFCR0[4];                         /**< AHB RX Buffer 0 Control Register 0..AHB RX Buffer 3 Control Register 0, array offset: 0x20, array step: 0x4 */
  uint8_t RESERVED_0[48];
  uint32_t FLSHCR0[4];                             /**< Flash A1 Control Register 0..Flash B2 Control Register 0, array offset: 0x60, array step: 0x4 */
  uint32_t FLSHCR1[4];                             /**< Flash A1 Control Register 1..Flash B2 Control Register 1, array offset: 0x70, array step: 0x4 */
  uint32_t FLSHCR2[4];                             /**< Flash A1 Control Register 2..Flash B2 Control Register 2, array offset: 0x80, array step: 0x4 */
  uint8_t RESERVED_1[4];
  uint32_t FLSHCR4;                                /**< Flash Control Register 4, offset: 0x94 */
  uint8_t RESERVED_2[8];
  uint32_t IPCR0;                                  /**< IP Control Register 0, offset: 0xA0 */
  uint32_t IPCR1;                                  /**< IP Control Register 1, offset: 0xA4 */
  uint8_t RESERVED_3[8];
  uint32_t IPCMD;                                  /**< IP Command Register, offset: 0xB0 */
  uint8_t RESERVED_4[4];
  uint32_t IPRXFCR;                                /**< IP RX FIFO Control Register, offset: 0xB8 */
  uint32_t IPTXFCR;                                /**< IP TX FIFO Control Register, offset: 0xBC */
  uint32_t DLLCR[2];                               /**< DLL Control Register 0, array offset: 0xC0, array step: 0x4 */
  uint8_t RESERVED_5[24];
  uint32_t STS0;                                   /**< Status Register 0, offset: 0xE0 */
  uint32_t STS1;                                   /**< Status Register 1, offset: 0xE4 */
  uint32_t STS2;                                   /**< Status Register 2, offset: 0xE8 */
  uint32_t AHBSPNDSTS;                             /**< AHB Suspend Status Register, offset: 0xEC */
  uint32_t IPRXFSTS;                               /**< IP RX FIFO Status Register, offset: 0xF0 */
  uint32_t IPTXFSTS;                               /**< IP TX FIFO Status Register, offset: 0xF4 */
  uint8_t RESERVED_6[8];
  uint32_t RFDR[32];                               /**< IP RX FIFO Data Register 0..IP RX FIFO Data Register 31, array offset: 0x100, array step: 0x4 */
  uint32_t TFDR[32];                               /**< IP TX FIFO Data Register 0..IP TX FIFO Data Register 31, array offset: 0x180, array step: 0x4 */
  uint32_t LUT[64];                                /**< LUT 0..LUT 63, array offset: 0x200, array step: 0x4 */
} volatile *FLEXSPI_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- FLEXSPI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXSPI_Register_Accessor_Macros FLEXSPI - Register accessor macros
 * @{
 */


/* FLEXSPI - Register accessors */
#define FLEXSPI_MCR0_REG(base)                   ((base)->MCR0)
#define FLEXSPI_MCR1_REG(base)                   ((base)->MCR1)
#define FLEXSPI_MCR2_REG(base)                   ((base)->MCR2)
#define FLEXSPI_AHBCR_REG(base)                  ((base)->AHBCR)
#define FLEXSPI_INTEN_REG(base)                  ((base)->INTEN)
#define FLEXSPI_INTR_REG(base)                   ((base)->INTR)
#define FLEXSPI_LUTKEY_REG(base)                 ((base)->LUTKEY)
#define FLEXSPI_LUTCR_REG(base)                  ((base)->LUTCR)
#define FLEXSPI_AHBRXBUFCR0_REG(base,index)      ((base)->AHBRXBUFCR0[index])
#define FLEXSPI_FLSHCR0_REG(base,index)          ((base)->FLSHCR0[index])
#define FLEXSPI_FLSHCR1_REG(base,index)          ((base)->FLSHCR1[index])
#define FLEXSPI_FLSHCR2_REG(base,index)          ((base)->FLSHCR2[index])
#define FLEXSPI_FLSHCR4_REG(base)                ((base)->FLSHCR4)
#define FLEXSPI_IPCR0_REG(base)                  ((base)->IPCR0)
#define FLEXSPI_IPCR1_REG(base)                  ((base)->IPCR1)
#define FLEXSPI_IPCMD_REG(base)                  ((base)->IPCMD)
#define FLEXSPI_IPRXFCR_REG(base)                ((base)->IPRXFCR)
#define FLEXSPI_IPTXFCR_REG(base)                ((base)->IPTXFCR)
#define FLEXSPI_DLLCR_REG(base,index)            ((base)->DLLCR[index])
#define FLEXSPI_STS0_REG(base)                   ((base)->STS0)
#define FLEXSPI_STS1_REG(base)                   ((base)->STS1)
#define FLEXSPI_STS2_REG(base)                   ((base)->STS2)
#define FLEXSPI_AHBSPNDSTS_REG(base)             ((base)->AHBSPNDSTS)
#define FLEXSPI_IPRXFSTS_REG(base)               ((base)->IPRXFSTS)
#define FLEXSPI_IPTXFSTS_REG(base)               ((base)->IPTXFSTS)
#define FLEXSPI_RFDR_REG(base,index)             ((base)->RFDR[index])
#define FLEXSPI_TFDR_REG(base,index)             ((base)->TFDR[index])
#define FLEXSPI_LUT_REG(base,index)              ((base)->LUT[index])

/*!
 * @}
 */ /* end of group FLEXSPI_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- FLEXSPI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXSPI_Register_Masks FLEXSPI Register Masks
 * @{
 */

/*! @name MCR0 - Module Control Register 0 */
#define FLEXSPI_MCR0_SWRESET_MASK                (0x1U)
#define FLEXSPI_MCR0_SWRESET_SHIFT               (0U)
#define FLEXSPI_MCR0_MDIS_MASK                   (0x2U)
#define FLEXSPI_MCR0_MDIS_SHIFT                  (1U)
#define FLEXSPI_MCR0_RXCLKSRC_MASK               (0x30U)
#define FLEXSPI_MCR0_RXCLKSRC_SHIFT              (4U)
#define FLEXSPI_MCR0_RXCLKSRC(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXSPI_MCR0_RXCLKSRC_SHIFT)) & FLEXSPI_MCR0_RXCLKSRC_MASK)
#define FLEXSPI_MCR0_ARDFEN_MASK                 (0x40U)
#define FLEXSPI_MCR0_ARDFEN_SHIFT                (6U)
#define FLEXSPI_MCR0_ATDFEN_MASK                 (0x80U)
#define FLEXSPI_MCR0_ATDFEN_SHIFT                (7U)
#define FLEXSPI_MCR0_HSEN_MASK                   (0x800U)
#define FLEXSPI_MCR0_HSEN_SHIFT                  (11U)
#define FLEXSPI_MCR0_DOZEEN_MASK                 (0x1000U)
#define FLEXSPI_MCR0_DOZEEN_SHIFT                (12U)
#define FLEXSPI_MCR0_COMBINATIONEN_MASK          (0x2000U)
#define FLEXSPI_MCR0_COMBINATIONEN_SHIFT         (13U)
#define FLEXSPI_MCR0_SCKFREERUNEN_MASK           (0x4000U)
#define FLEXSPI_MCR0_SCKFREERUNEN_SHIFT          (14U)
#define FLEXSPI_MCR0_IPGRANTWAIT_MASK            (0xFF0000U)
#define FLEXSPI_MCR0_IPGRANTWAIT_SHIFT           (16U)
#define FLEXSPI_MCR0_IPGRANTWAIT(x)              (((uint32_t)(((uint32_t)(x)) << FLEXSPI_MCR0_IPGRANTWAIT_SHIFT)) & FLEXSPI_MCR0_IPGRANTWAIT_MASK)
#define FLEXSPI_MCR0_AHBGRANTWAIT_MASK           (0xFF000000U)
#define FLEXSPI_MCR0_AHBGRANTWAIT_SHIFT          (24U)
#define FLEXSPI_MCR0_AHBGRANTWAIT(x)             (((uint32_t)(((uint32_t)(x)) << FLEXSPI_MCR0_AHBGRANTWAIT_SHIFT)) & FLEXSPI_MCR0_AHBGRANTWAIT_MASK)

/*! @name MCR1 - Module Control Register 1 */
#define FLEXSPI_MCR1_AHBBUSWAIT_MASK             (0xFFFFU)
#define FLEXSPI_MCR1_AHBBUSWAIT_SHIFT            (0U)
#define FLEXSPI_MCR1_AHBBUSWAIT(x)               (((uint32_t)(((uint32_t)(x)) << FLEXSPI_MCR1_AHBBUSWAIT_SHIFT)) & FLEXSPI_MCR1_AHBBUSWAIT_MASK)
#define FLEXSPI_MCR1_SEQWAIT_MASK                (0xFFFF0000U)
#define FLEXSPI_MCR1_SEQWAIT_SHIFT               (16U)
#define FLEXSPI_MCR1_SEQWAIT(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_MCR1_SEQWAIT_SHIFT)) & FLEXSPI_MCR1_SEQWAIT_MASK)

/*! @name MCR2 - Module Control Register 2 */
#define FLEXSPI_MCR2_CLRAHBBUFOPT_MASK           (0x800U)
#define FLEXSPI_MCR2_CLRAHBBUFOPT_SHIFT          (11U)
#define FLEXSPI_MCR2_CLRLEARNPHASE_MASK          (0x4000U)
#define FLEXSPI_MCR2_CLRLEARNPHASE_SHIFT         (14U)
#define FLEXSPI_MCR2_SAMEDEVICEEN_MASK           (0x8000U)
#define FLEXSPI_MCR2_SAMEDEVICEEN_SHIFT          (15U)
#define FLEXSPI_MCR2_SCKBDIFFOPT_MASK            (0x80000U)
#define FLEXSPI_MCR2_SCKBDIFFOPT_SHIFT           (19U)
#define FLEXSPI_MCR2_RESUMEWAIT_MASK             (0xFF000000U)
#define FLEXSPI_MCR2_RESUMEWAIT_SHIFT            (24U)
#define FLEXSPI_MCR2_RESUMEWAIT(x)               (((uint32_t)(((uint32_t)(x)) << FLEXSPI_MCR2_RESUMEWAIT_SHIFT)) & FLEXSPI_MCR2_RESUMEWAIT_MASK)

/*! @name AHBCR - AHB Bus Control Register */
#define FLEXSPI_AHBCR_APAREN_MASK                (0x1U)
#define FLEXSPI_AHBCR_APAREN_SHIFT               (0U)
#define FLEXSPI_AHBCR_CACHABLEEN_MASK            (0x8U)
#define FLEXSPI_AHBCR_CACHABLEEN_SHIFT           (3U)
#define FLEXSPI_AHBCR_BUFFERABLEEN_MASK          (0x10U)
#define FLEXSPI_AHBCR_BUFFERABLEEN_SHIFT         (4U)
#define FLEXSPI_AHBCR_PREFETCHEN_MASK            (0x20U)
#define FLEXSPI_AHBCR_PREFETCHEN_SHIFT           (5U)
#define FLEXSPI_AHBCR_READADDROPT_MASK           (0x40U)
#define FLEXSPI_AHBCR_READADDROPT_SHIFT          (6U)

/*! @name INTEN - Interrupt Enable Register */
#define FLEXSPI_INTEN_IPCMDDONEEN_MASK           (0x1U)
#define FLEXSPI_INTEN_IPCMDDONEEN_SHIFT          (0U)
#define FLEXSPI_INTEN_IPCMDGEEN_MASK             (0x2U)
#define FLEXSPI_INTEN_IPCMDGEEN_SHIFT            (1U)
#define FLEXSPI_INTEN_AHBCMDGEEN_MASK            (0x4U)
#define FLEXSPI_INTEN_AHBCMDGEEN_SHIFT           (2U)
#define FLEXSPI_INTEN_IPCMDERREN_MASK            (0x8U)
#define FLEXSPI_INTEN_IPCMDERREN_SHIFT           (3U)
#define FLEXSPI_INTEN_AHBCMDERREN_MASK           (0x10U)
#define FLEXSPI_INTEN_AHBCMDERREN_SHIFT          (4U)
#define FLEXSPI_INTEN_IPRXWAEN_MASK              (0x20U)
#define FLEXSPI_INTEN_IPRXWAEN_SHIFT             (5U)
#define FLEXSPI_INTEN_IPTXWEEN_MASK              (0x40U)
#define FLEXSPI_INTEN_IPTXWEEN_SHIFT             (6U)
#define FLEXSPI_INTEN_SCKSTOPBYRDEN_MASK         (0x100U)
#define FLEXSPI_INTEN_SCKSTOPBYRDEN_SHIFT        (8U)
#define FLEXSPI_INTEN_SCKSTOPBYWREN_MASK         (0x200U)
#define FLEXSPI_INTEN_SCKSTOPBYWREN_SHIFT        (9U)
#define FLEXSPI_INTEN_AHBBUSTIMEOUTEN_MASK       (0x400U)
#define FLEXSPI_INTEN_AHBBUSTIMEOUTEN_SHIFT      (10U)
#define FLEXSPI_INTEN_SEQTIMEOUTEN_MASK          (0x800U)
#define FLEXSPI_INTEN_SEQTIMEOUTEN_SHIFT         (11U)

/*! @name INTR - Interrupt Register */
#define FLEXSPI_INTR_IPCMDDONE_MASK              (0x1U)
#define FLEXSPI_INTR_IPCMDDONE_SHIFT             (0U)
#define FLEXSPI_INTR_IPCMDGE_MASK                (0x2U)
#define FLEXSPI_INTR_IPCMDGE_SHIFT               (1U)
#define FLEXSPI_INTR_AHBCMDGE_MASK               (0x4U)
#define FLEXSPI_INTR_AHBCMDGE_SHIFT              (2U)
#define FLEXSPI_INTR_IPCMDERR_MASK               (0x8U)
#define FLEXSPI_INTR_IPCMDERR_SHIFT              (3U)
#define FLEXSPI_INTR_AHBCMDERR_MASK              (0x10U)
#define FLEXSPI_INTR_AHBCMDERR_SHIFT             (4U)
#define FLEXSPI_INTR_IPRXWA_MASK                 (0x20U)
#define FLEXSPI_INTR_IPRXWA_SHIFT                (5U)
#define FLEXSPI_INTR_IPTXWE_MASK                 (0x40U)
#define FLEXSPI_INTR_IPTXWE_SHIFT                (6U)
#define FLEXSPI_INTR_SCKSTOPBYRD_MASK            (0x100U)
#define FLEXSPI_INTR_SCKSTOPBYRD_SHIFT           (8U)
#define FLEXSPI_INTR_SCKSTOPBYWR_MASK            (0x200U)
#define FLEXSPI_INTR_SCKSTOPBYWR_SHIFT           (9U)
#define FLEXSPI_INTR_AHBBUSTIMEOUT_MASK          (0x400U)
#define FLEXSPI_INTR_AHBBUSTIMEOUT_SHIFT         (10U)
#define FLEXSPI_INTR_SEQTIMEOUT_MASK             (0x800U)
#define FLEXSPI_INTR_SEQTIMEOUT_SHIFT            (11U)

/*! @name LUTKEY - LUT Key Register */
#define FLEXSPI_LUTKEY_KEY_MASK                  (0xFFFFFFFFU)
#define FLEXSPI_LUTKEY_KEY_SHIFT                 (0U)
#define FLEXSPI_LUTKEY_KEY(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXSPI_LUTKEY_KEY_SHIFT)) & FLEXSPI_LUTKEY_KEY_MASK)

/*! @name LUTCR - LUT Control Register */
#define FLEXSPI_LUTCR_LOCK_MASK                  (0x1U)
#define FLEXSPI_LUTCR_LOCK_SHIFT                 (0U)
#define FLEXSPI_LUTCR_UNLOCK_MASK                (0x2U)
#define FLEXSPI_LUTCR_UNLOCK_SHIFT               (1U)

/*! @name AHBRXBUFCR0 - AHB RX Buffer 0 Control Register 0..AHB RX Buffer 3 Control Register 0 */
#define FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK           (0xFFU)
#define FLEXSPI_AHBRXBUFCR0_BUFSZ_SHIFT          (0U)
#define FLEXSPI_AHBRXBUFCR0_BUFSZ(x)             (((uint32_t)(((uint32_t)(x)) << FLEXSPI_AHBRXBUFCR0_BUFSZ_SHIFT)) & FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK)
#define FLEXSPI_AHBRXBUFCR0_MSTRID_MASK          (0xF0000U)
#define FLEXSPI_AHBRXBUFCR0_MSTRID_SHIFT         (16U)
#define FLEXSPI_AHBRXBUFCR0_MSTRID(x)            (((uint32_t)(((uint32_t)(x)) << FLEXSPI_AHBRXBUFCR0_MSTRID_SHIFT)) & FLEXSPI_AHBRXBUFCR0_MSTRID_MASK)
#define FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK        (0x3000000U)
#define FLEXSPI_AHBRXBUFCR0_PRIORITY_SHIFT       (24U)
#define FLEXSPI_AHBRXBUFCR0_PRIORITY(x)          (((uint32_t)(((uint32_t)(x)) << FLEXSPI_AHBRXBUFCR0_PRIORITY_SHIFT)) & FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK)
#define FLEXSPI_AHBRXBUFCR0_PREFETCHEN_MASK      (0x80000000U)
#define FLEXSPI_AHBRXBUFCR0_PREFETCHEN_SHIFT     (31U)

/* The count of FLEXSPI_AHBRXBUFCR0 */
#define FLEXSPI_AHBRXBUFCR0_COUNT                (4U)

/*! @name FLSHCR0 - Flash A1 Control Register 0..Flash B2 Control Register 0 */
#define FLEXSPI_FLSHCR0_FLSHSZ_MASK              (0x7FFFFFU)
#define FLEXSPI_FLSHCR0_FLSHSZ_SHIFT             (0U)
#define FLEXSPI_FLSHCR0_FLSHSZ(x)                (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR0_FLSHSZ_SHIFT)) & FLEXSPI_FLSHCR0_FLSHSZ_MASK)

/* The count of FLEXSPI_FLSHCR0 */
#define FLEXSPI_FLSHCR0_COUNT                    (4U)

/*! @name FLSHCR1 - Flash A1 Control Register 1..Flash B2 Control Register 1 */
#define FLEXSPI_FLSHCR1_TCSS_MASK                (0x1FU)
#define FLEXSPI_FLSHCR1_TCSS_SHIFT               (0U)
#define FLEXSPI_FLSHCR1_TCSS(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR1_TCSS_SHIFT)) & FLEXSPI_FLSHCR1_TCSS_MASK)
#define FLEXSPI_FLSHCR1_TCSH_MASK                (0x3E0U)
#define FLEXSPI_FLSHCR1_TCSH_SHIFT               (5U)
#define FLEXSPI_FLSHCR1_TCSH(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR1_TCSH_SHIFT)) & FLEXSPI_FLSHCR1_TCSH_MASK)
#define FLEXSPI_FLSHCR1_WA_MASK                  (0x400U)
#define FLEXSPI_FLSHCR1_WA_SHIFT                 (10U)
#define FLEXSPI_FLSHCR1_CAS_MASK                 (0x7800U)
#define FLEXSPI_FLSHCR1_CAS_SHIFT                (11U)
#define FLEXSPI_FLSHCR1_CAS(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR1_CAS_SHIFT)) & FLEXSPI_FLSHCR1_CAS_MASK)
#define FLEXSPI_FLSHCR1_CSINTERVALUNIT_MASK      (0x8000U)
#define FLEXSPI_FLSHCR1_CSINTERVALUNIT_SHIFT     (15U)
#define FLEXSPI_FLSHCR1_CSINTERVAL_MASK          (0xFFFF0000U)
#define FLEXSPI_FLSHCR1_CSINTERVAL_SHIFT         (16U)
#define FLEXSPI_FLSHCR1_CSINTERVAL(x)            (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR1_CSINTERVAL_SHIFT)) & FLEXSPI_FLSHCR1_CSINTERVAL_MASK)

/* The count of FLEXSPI_FLSHCR1 */
#define FLEXSPI_FLSHCR1_COUNT                    (4U)

/*! @name FLSHCR2 - Flash A1 Control Register 2..Flash B2 Control Register 2 */
#define FLEXSPI_FLSHCR2_ARDSEQID_MASK            (0xFU)
#define FLEXSPI_FLSHCR2_ARDSEQID_SHIFT           (0U)
#define FLEXSPI_FLSHCR2_ARDSEQID(x)              (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR2_ARDSEQID_SHIFT)) & FLEXSPI_FLSHCR2_ARDSEQID_MASK)
#define FLEXSPI_FLSHCR2_ARDSEQNUM_MASK           (0xE0U)
#define FLEXSPI_FLSHCR2_ARDSEQNUM_SHIFT          (5U)
#define FLEXSPI_FLSHCR2_ARDSEQNUM(x)             (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR2_ARDSEQNUM_SHIFT)) & FLEXSPI_FLSHCR2_ARDSEQNUM_MASK)
#define FLEXSPI_FLSHCR2_AWRSEQID_MASK            (0xF00U)
#define FLEXSPI_FLSHCR2_AWRSEQID_SHIFT           (8U)
#define FLEXSPI_FLSHCR2_AWRSEQID(x)              (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR2_AWRSEQID_SHIFT)) & FLEXSPI_FLSHCR2_AWRSEQID_MASK)
#define FLEXSPI_FLSHCR2_AWRSEQNUM_MASK           (0xE000U)
#define FLEXSPI_FLSHCR2_AWRSEQNUM_SHIFT          (13U)
#define FLEXSPI_FLSHCR2_AWRSEQNUM(x)             (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR2_AWRSEQNUM_SHIFT)) & FLEXSPI_FLSHCR2_AWRSEQNUM_MASK)
#define FLEXSPI_FLSHCR2_AWRWAIT_MASK             (0xFFF0000U)
#define FLEXSPI_FLSHCR2_AWRWAIT_SHIFT            (16U)
#define FLEXSPI_FLSHCR2_AWRWAIT(x)               (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR2_AWRWAIT_SHIFT)) & FLEXSPI_FLSHCR2_AWRWAIT_MASK)
#define FLEXSPI_FLSHCR2_AWRWAITUNIT_MASK         (0x70000000U)
#define FLEXSPI_FLSHCR2_AWRWAITUNIT_SHIFT        (28U)
#define FLEXSPI_FLSHCR2_AWRWAITUNIT(x)           (((uint32_t)(((uint32_t)(x)) << FLEXSPI_FLSHCR2_AWRWAITUNIT_SHIFT)) & FLEXSPI_FLSHCR2_AWRWAITUNIT_MASK)
#define FLEXSPI_FLSHCR2_CLRINSTRPTR_MASK         (0x80000000U)
#define FLEXSPI_FLSHCR2_CLRINSTRPTR_SHIFT        (31U)

/* The count of FLEXSPI_FLSHCR2 */
#define FLEXSPI_FLSHCR2_COUNT                    (4U)

/*! @name FLSHCR4 - Flash Control Register 4 */
#define FLEXSPI_FLSHCR4_WMOPT1_MASK              (0x1U)
#define FLEXSPI_FLSHCR4_WMOPT1_SHIFT             (0U)
#define FLEXSPI_FLSHCR4_WMENA_MASK               (0x4U)
#define FLEXSPI_FLSHCR4_WMENA_SHIFT              (2U)
#define FLEXSPI_FLSHCR4_WMENB_MASK               (0x8U)
#define FLEXSPI_FLSHCR4_WMENB_SHIFT              (3U)

/*! @name IPCR0 - IP Control Register 0 */
#define FLEXSPI_IPCR0_SFAR_MASK                  (0xFFFFFFFFU)
#define FLEXSPI_IPCR0_SFAR_SHIFT                 (0U)
#define FLEXSPI_IPCR0_SFAR(x)                    (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPCR0_SFAR_SHIFT)) & FLEXSPI_IPCR0_SFAR_MASK)

/*! @name IPCR1 - IP Control Register 1 */
#define FLEXSPI_IPCR1_IDATSZ_MASK                (0xFFFFU)
#define FLEXSPI_IPCR1_IDATSZ_SHIFT               (0U)
#define FLEXSPI_IPCR1_IDATSZ(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPCR1_IDATSZ_SHIFT)) & FLEXSPI_IPCR1_IDATSZ_MASK)
#define FLEXSPI_IPCR1_ISEQID_MASK                (0xF0000U)
#define FLEXSPI_IPCR1_ISEQID_SHIFT               (16U)
#define FLEXSPI_IPCR1_ISEQID(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPCR1_ISEQID_SHIFT)) & FLEXSPI_IPCR1_ISEQID_MASK)
#define FLEXSPI_IPCR1_ISEQNUM_MASK               (0x7000000U)
#define FLEXSPI_IPCR1_ISEQNUM_SHIFT              (24U)
#define FLEXSPI_IPCR1_ISEQNUM(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPCR1_ISEQNUM_SHIFT)) & FLEXSPI_IPCR1_ISEQNUM_MASK)
#define FLEXSPI_IPCR1_IPAREN_MASK                (0x80000000U)
#define FLEXSPI_IPCR1_IPAREN_SHIFT               (31U)

/*! @name IPCMD - IP Command Register */
#define FLEXSPI_IPCMD_TRG_MASK                   (0x1U)
#define FLEXSPI_IPCMD_TRG_SHIFT                  (0U)

/*! @name IPRXFCR - IP RX FIFO Control Register */
#define FLEXSPI_IPRXFCR_CLRIPRXF_MASK            (0x1U)
#define FLEXSPI_IPRXFCR_CLRIPRXF_SHIFT           (0U)
#define FLEXSPI_IPRXFCR_RXDMAEN_MASK             (0x2U)
#define FLEXSPI_IPRXFCR_RXDMAEN_SHIFT            (1U)
#define FLEXSPI_IPRXFCR_RXWMRK_MASK              (0x3CU)
#define FLEXSPI_IPRXFCR_RXWMRK_SHIFT             (2U)
#define FLEXSPI_IPRXFCR_RXWMRK(x)                (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPRXFCR_RXWMRK_SHIFT)) & FLEXSPI_IPRXFCR_RXWMRK_MASK)

/*! @name IPTXFCR - IP TX FIFO Control Register */
#define FLEXSPI_IPTXFCR_CLRIPTXF_MASK            (0x1U)
#define FLEXSPI_IPTXFCR_CLRIPTXF_SHIFT           (0U)
#define FLEXSPI_IPTXFCR_TXDMAEN_MASK             (0x2U)
#define FLEXSPI_IPTXFCR_TXDMAEN_SHIFT            (1U)
#define FLEXSPI_IPTXFCR_TXWMRK_MASK              (0x3CU)
#define FLEXSPI_IPTXFCR_TXWMRK_SHIFT             (2U)
#define FLEXSPI_IPTXFCR_TXWMRK(x)                (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPTXFCR_TXWMRK_SHIFT)) & FLEXSPI_IPTXFCR_TXWMRK_MASK)

/*! @name DLLCR - DLL Control Register 0 */
#define FLEXSPI_DLLCR_DLLEN_MASK                 (0x1U)
#define FLEXSPI_DLLCR_DLLEN_SHIFT                (0U)
#define FLEXSPI_DLLCR_DLLRESET_MASK              (0x2U)
#define FLEXSPI_DLLCR_DLLRESET_SHIFT             (1U)
#define FLEXSPI_DLLCR_SLVDLYTARGET_MASK          (0x78U)
#define FLEXSPI_DLLCR_SLVDLYTARGET_SHIFT         (3U)
#define FLEXSPI_DLLCR_SLVDLYTARGET(x)            (((uint32_t)(((uint32_t)(x)) << FLEXSPI_DLLCR_SLVDLYTARGET_SHIFT)) & FLEXSPI_DLLCR_SLVDLYTARGET_MASK)
#define FLEXSPI_DLLCR_OVRDEN_MASK                (0x100U)
#define FLEXSPI_DLLCR_OVRDEN_SHIFT               (8U)
#define FLEXSPI_DLLCR_OVRDVAL_MASK               (0x7E00U)
#define FLEXSPI_DLLCR_OVRDVAL_SHIFT              (9U)
#define FLEXSPI_DLLCR_OVRDVAL(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXSPI_DLLCR_OVRDVAL_SHIFT)) & FLEXSPI_DLLCR_OVRDVAL_MASK)

/* The count of FLEXSPI_DLLCR */
#define FLEXSPI_DLLCR_COUNT                      (2U)

/*! @name STS0 - Status Register 0 */
#define FLEXSPI_STS0_SEQIDLE_MASK                (0x1U)
#define FLEXSPI_STS0_SEQIDLE_SHIFT               (0U)
#define FLEXSPI_STS0_ARBIDLE_MASK                (0x2U)
#define FLEXSPI_STS0_ARBIDLE_SHIFT               (1U)
#define FLEXSPI_STS0_ARBCMDSRC_MASK              (0xCU)
#define FLEXSPI_STS0_ARBCMDSRC_SHIFT             (2U)
#define FLEXSPI_STS0_ARBCMDSRC(x)                (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS0_ARBCMDSRC_SHIFT)) & FLEXSPI_STS0_ARBCMDSRC_MASK)

/*! @name STS1 - Status Register 1 */
#define FLEXSPI_STS1_AHBCMDERRID_MASK            (0xFU)
#define FLEXSPI_STS1_AHBCMDERRID_SHIFT           (0U)
#define FLEXSPI_STS1_AHBCMDERRID(x)              (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS1_AHBCMDERRID_SHIFT)) & FLEXSPI_STS1_AHBCMDERRID_MASK)
#define FLEXSPI_STS1_AHBCMDERRCODE_MASK          (0xF00U)
#define FLEXSPI_STS1_AHBCMDERRCODE_SHIFT         (8U)
#define FLEXSPI_STS1_AHBCMDERRCODE(x)            (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS1_AHBCMDERRCODE_SHIFT)) & FLEXSPI_STS1_AHBCMDERRCODE_MASK)
#define FLEXSPI_STS1_IPCMDERRID_MASK             (0xF0000U)
#define FLEXSPI_STS1_IPCMDERRID_SHIFT            (16U)
#define FLEXSPI_STS1_IPCMDERRID(x)               (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS1_IPCMDERRID_SHIFT)) & FLEXSPI_STS1_IPCMDERRID_MASK)
#define FLEXSPI_STS1_IPCMDERRCODE_MASK           (0xF000000U)
#define FLEXSPI_STS1_IPCMDERRCODE_SHIFT          (24U)
#define FLEXSPI_STS1_IPCMDERRCODE(x)             (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS1_IPCMDERRCODE_SHIFT)) & FLEXSPI_STS1_IPCMDERRCODE_MASK)

/*! @name STS2 - Status Register 2 */
#define FLEXSPI_STS2_ASLVLOCK_MASK               (0x1U)
#define FLEXSPI_STS2_ASLVLOCK_SHIFT              (0U)
#define FLEXSPI_STS2_AREFLOCK_MASK               (0x2U)
#define FLEXSPI_STS2_AREFLOCK_SHIFT              (1U)
#define FLEXSPI_STS2_ASLVSEL_MASK                (0xFCU)
#define FLEXSPI_STS2_ASLVSEL_SHIFT               (2U)
#define FLEXSPI_STS2_ASLVSEL(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS2_ASLVSEL_SHIFT)) & FLEXSPI_STS2_ASLVSEL_MASK)
#define FLEXSPI_STS2_AREFSEL_MASK                (0x3F00U)
#define FLEXSPI_STS2_AREFSEL_SHIFT               (8U)
#define FLEXSPI_STS2_AREFSEL(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS2_AREFSEL_SHIFT)) & FLEXSPI_STS2_AREFSEL_MASK)
#define FLEXSPI_STS2_BSLVLOCK_MASK               (0x10000U)
#define FLEXSPI_STS2_BSLVLOCK_SHIFT              (16U)
#define FLEXSPI_STS2_BREFLOCK_MASK               (0x20000U)
#define FLEXSPI_STS2_BREFLOCK_SHIFT              (17U)
#define FLEXSPI_STS2_BSLVSEL_MASK                (0xFC0000U)
#define FLEXSPI_STS2_BSLVSEL_SHIFT               (18U)
#define FLEXSPI_STS2_BSLVSEL(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS2_BSLVSEL_SHIFT)) & FLEXSPI_STS2_BSLVSEL_MASK)
#define FLEXSPI_STS2_BREFSEL_MASK                (0x3F000000U)
#define FLEXSPI_STS2_BREFSEL_SHIFT               (24U)
#define FLEXSPI_STS2_BREFSEL(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_STS2_BREFSEL_SHIFT)) & FLEXSPI_STS2_BREFSEL_MASK)

/*! @name AHBSPNDSTS - AHB Suspend Status Register */
#define FLEXSPI_AHBSPNDSTS_ACTIVE_MASK           (0x1U)
#define FLEXSPI_AHBSPNDSTS_ACTIVE_SHIFT          (0U)
#define FLEXSPI_AHBSPNDSTS_BUFID_MASK            (0xEU)
#define FLEXSPI_AHBSPNDSTS_BUFID_SHIFT           (1U)
#define FLEXSPI_AHBSPNDSTS_BUFID(x)              (((uint32_t)(((uint32_t)(x)) << FLEXSPI_AHBSPNDSTS_BUFID_SHIFT)) & FLEXSPI_AHBSPNDSTS_BUFID_MASK)
#define FLEXSPI_AHBSPNDSTS_DATLFT_MASK           (0xFFFF0000U)
#define FLEXSPI_AHBSPNDSTS_DATLFT_SHIFT          (16U)
#define FLEXSPI_AHBSPNDSTS_DATLFT(x)             (((uint32_t)(((uint32_t)(x)) << FLEXSPI_AHBSPNDSTS_DATLFT_SHIFT)) & FLEXSPI_AHBSPNDSTS_DATLFT_MASK)

/*! @name IPRXFSTS - IP RX FIFO Status Register */
#define FLEXSPI_IPRXFSTS_FILL_MASK               (0xFFU)
#define FLEXSPI_IPRXFSTS_FILL_SHIFT              (0U)
#define FLEXSPI_IPRXFSTS_FILL(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPRXFSTS_FILL_SHIFT)) & FLEXSPI_IPRXFSTS_FILL_MASK)
#define FLEXSPI_IPRXFSTS_RDCNTR_MASK             (0xFFFF0000U)
#define FLEXSPI_IPRXFSTS_RDCNTR_SHIFT            (16U)
#define FLEXSPI_IPRXFSTS_RDCNTR(x)               (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPRXFSTS_RDCNTR_SHIFT)) & FLEXSPI_IPRXFSTS_RDCNTR_MASK)

/*! @name IPTXFSTS - IP TX FIFO Status Register */
#define FLEXSPI_IPTXFSTS_FILL_MASK               (0xFFU)
#define FLEXSPI_IPTXFSTS_FILL_SHIFT              (0U)
#define FLEXSPI_IPTXFSTS_FILL(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPTXFSTS_FILL_SHIFT)) & FLEXSPI_IPTXFSTS_FILL_MASK)
#define FLEXSPI_IPTXFSTS_WRCNTR_MASK             (0xFFFF0000U)
#define FLEXSPI_IPTXFSTS_WRCNTR_SHIFT            (16U)
#define FLEXSPI_IPTXFSTS_WRCNTR(x)               (((uint32_t)(((uint32_t)(x)) << FLEXSPI_IPTXFSTS_WRCNTR_SHIFT)) & FLEXSPI_IPTXFSTS_WRCNTR_MASK)

/*! @name RFDR - IP RX FIFO Data Register 0..IP RX FIFO Data Register 31 */
#define FLEXSPI_RFDR_RXDATA_MASK                 (0xFFFFFFFFU)
#define FLEXSPI_RFDR_RXDATA_SHIFT                (0U)
#define FLEXSPI_RFDR_RXDATA(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXSPI_RFDR_RXDATA_SHIFT)) & FLEXSPI_RFDR_RXDATA_MASK)

/* The count of FLEXSPI_RFDR */
#define FLEXSPI_RFDR_COUNT                       (32U)

/*! @name TFDR - IP TX FIFO Data Register 0..IP TX FIFO Data Register 31 */
#define FLEXSPI_TFDR_TXDATA_MASK                 (0xFFFFFFFFU)
#define FLEXSPI_TFDR_TXDATA_SHIFT                (0U)
#define FLEXSPI_TFDR_TXDATA(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXSPI_TFDR_TXDATA_SHIFT)) & FLEXSPI_TFDR_TXDATA_MASK)

/* The count of FLEXSPI_TFDR */
#define FLEXSPI_TFDR_COUNT                       (32U)

/*! @name LUT - LUT 0..LUT 63 */
#define FLEXSPI_LUT_OPERAND0_MASK                (0xFFU)
#define FLEXSPI_LUT_OPERAND0_SHIFT               (0U)
#define FLEXSPI_LUT_OPERAND0(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_LUT_OPERAND0_SHIFT)) & FLEXSPI_LUT_OPERAND0_MASK)
#define FLEXSPI_LUT_NUM_PADS0_MASK               (0x300U)
#define FLEXSPI_LUT_NUM_PADS0_SHIFT              (8U)
#define FLEXSPI_LUT_NUM_PADS0(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXSPI_LUT_NUM_PADS0_SHIFT)) & FLEXSPI_LUT_NUM_PADS0_MASK)
#define FLEXSPI_LUT_OPCODE0_MASK                 (0xFC00U)
#define FLEXSPI_LUT_OPCODE0_SHIFT                (10U)
#define FLEXSPI_LUT_OPCODE0(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXSPI_LUT_OPCODE0_SHIFT)) & FLEXSPI_LUT_OPCODE0_MASK)
#define FLEXSPI_LUT_OPERAND1_MASK                (0xFF0000U)
#define FLEXSPI_LUT_OPERAND1_SHIFT               (16U)
#define FLEXSPI_LUT_OPERAND1(x)                  (((uint32_t)(((uint32_t)(x)) << FLEXSPI_LUT_OPERAND1_SHIFT)) & FLEXSPI_LUT_OPERAND1_MASK)
#define FLEXSPI_LUT_NUM_PADS1_MASK               (0x3000000U)
#define FLEXSPI_LUT_NUM_PADS1_SHIFT              (24U)
#define FLEXSPI_LUT_NUM_PADS1(x)                 (((uint32_t)(((uint32_t)(x)) << FLEXSPI_LUT_NUM_PADS1_SHIFT)) & FLEXSPI_LUT_NUM_PADS1_MASK)
#define FLEXSPI_LUT_OPCODE1_MASK                 (0xFC000000U)
#define FLEXSPI_LUT_OPCODE1_SHIFT                (26U)
#define FLEXSPI_LUT_OPCODE1(x)                   (((uint32_t)(((uint32_t)(x)) << FLEXSPI_LUT_OPCODE1_SHIFT)) & FLEXSPI_LUT_OPCODE1_MASK)

/* The count of FLEXSPI_LUT */
#define FLEXSPI_LUT_COUNT                        (64U)


/*!
 * @}
 */ /* end of group FLEXSPI_Register_Masks */


/* FLEXSPI - Peripheral instance base addresses */
/** Peripheral FLEXSPI base pointer */
#define FLEXSPI_BASE_PTR                         ((FLEXSPI_MemMapPtr)0x402A8000u)
/** Array initializer of FLEXSPI peripheral base pointers */
#define FLEXSPI_BASE_PTRS                        { FLEXSPI_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- FLEXSPI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLEXSPI_Register_Accessor_Macros FLEXSPI - Register accessor macros
 * @{
 */


/* FLEXSPI - Register instance definitions */
/* FLEXSPI */
#define FLEXSPI_MCR0                             FLEXSPI_MCR0_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_MCR1                             FLEXSPI_MCR1_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_MCR2                             FLEXSPI_MCR2_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_AHBCR                            FLEXSPI_AHBCR_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_INTEN                            FLEXSPI_INTEN_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_INTR                             FLEXSPI_INTR_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_LUTKEY                           FLEXSPI_LUTKEY_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_LUTCR                            FLEXSPI_LUTCR_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_AHBRXBUF0CR0                     FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI_BASE_PTR,0)
#define FLEXSPI_AHBRXBUF1CR0                     FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI_BASE_PTR,1)
#define FLEXSPI_AHBRXBUF2CR0                     FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI_BASE_PTR,2)
#define FLEXSPI_AHBRXBUF3CR0                     FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI_BASE_PTR,3)
#define FLEXSPI_FLSHA1CR0                        FLEXSPI_FLSHCR0_REG(FLEXSPI_BASE_PTR,0)
#define FLEXSPI_FLSHA2CR0                        FLEXSPI_FLSHCR0_REG(FLEXSPI_BASE_PTR,1)
#define FLEXSPI_FLSHB1CR0                        FLEXSPI_FLSHCR0_REG(FLEXSPI_BASE_PTR,2)
#define FLEXSPI_FLSHB2CR0                        FLEXSPI_FLSHCR0_REG(FLEXSPI_BASE_PTR,3)
#define FLEXSPI_FLSHA1CR1                        FLEXSPI_FLSHCR1_REG(FLEXSPI_BASE_PTR,0)
#define FLEXSPI_FLSHA2CR1                        FLEXSPI_FLSHCR1_REG(FLEXSPI_BASE_PTR,1)
#define FLEXSPI_FLSHB1CR1                        FLEXSPI_FLSHCR1_REG(FLEXSPI_BASE_PTR,2)
#define FLEXSPI_FLSHB2CR1                        FLEXSPI_FLSHCR1_REG(FLEXSPI_BASE_PTR,3)
#define FLEXSPI_FLSHA1CR2                        FLEXSPI_FLSHCR2_REG(FLEXSPI_BASE_PTR,0)
#define FLEXSPI_FLSHA2CR2                        FLEXSPI_FLSHCR2_REG(FLEXSPI_BASE_PTR,1)
#define FLEXSPI_FLSHB1CR2                        FLEXSPI_FLSHCR2_REG(FLEXSPI_BASE_PTR,2)
#define FLEXSPI_FLSHB2CR2                        FLEXSPI_FLSHCR2_REG(FLEXSPI_BASE_PTR,3)
#define FLEXSPI_FLSHCR4                          FLEXSPI_FLSHCR4_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_IPCR0                            FLEXSPI_IPCR0_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_IPCR1                            FLEXSPI_IPCR1_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_IPCMD                            FLEXSPI_IPCMD_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_IPRXFCR                          FLEXSPI_IPRXFCR_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_IPTXFCR                          FLEXSPI_IPTXFCR_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_DLLACR                           FLEXSPI_DLLCR_REG(FLEXSPI_BASE_PTR,0)
#define FLEXSPI_DLLBCR                           FLEXSPI_DLLCR_REG(FLEXSPI_BASE_PTR,1)
#define FLEXSPI_STS0                             FLEXSPI_STS0_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_STS1                             FLEXSPI_STS1_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_STS2                             FLEXSPI_STS2_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_AHBSPNDSTS                       FLEXSPI_AHBSPNDSTS_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_IPRXFSTS                         FLEXSPI_IPRXFSTS_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_IPTXFSTS                         FLEXSPI_IPTXFSTS_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_RFDR0                            FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,0)
#define FLEXSPI_RFDR1                            FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,1)
#define FLEXSPI_RFDR2                            FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,2)
#define FLEXSPI_RFDR3                            FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,3)
#define FLEXSPI_RFDR4                            FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,4)
#define FLEXSPI_RFDR5                            FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,5)
#define FLEXSPI_RFDR6                            FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,6)
#define FLEXSPI_RFDR7                            FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,7)
#define FLEXSPI_RFDR8                            FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,8)
#define FLEXSPI_RFDR9                            FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,9)
#define FLEXSPI_RFDR10                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,10)
#define FLEXSPI_RFDR11                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,11)
#define FLEXSPI_RFDR12                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,12)
#define FLEXSPI_RFDR13                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,13)
#define FLEXSPI_RFDR14                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,14)
#define FLEXSPI_RFDR15                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,15)
#define FLEXSPI_RFDR16                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,16)
#define FLEXSPI_RFDR17                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,17)
#define FLEXSPI_RFDR18                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,18)
#define FLEXSPI_RFDR19                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,19)
#define FLEXSPI_RFDR20                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,20)
#define FLEXSPI_RFDR21                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,21)
#define FLEXSPI_RFDR22                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,22)
#define FLEXSPI_RFDR23                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,23)
#define FLEXSPI_RFDR24                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,24)
#define FLEXSPI_RFDR25                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,25)
#define FLEXSPI_RFDR26                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,26)
#define FLEXSPI_RFDR27                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,27)
#define FLEXSPI_RFDR28                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,28)
#define FLEXSPI_RFDR29                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,29)
#define FLEXSPI_RFDR30                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,30)
#define FLEXSPI_RFDR31                           FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,31)
#define FLEXSPI_TFDR0                            FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,0)
#define FLEXSPI_TFDR1                            FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,1)
#define FLEXSPI_TFDR2                            FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,2)
#define FLEXSPI_TFDR3                            FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,3)
#define FLEXSPI_TFDR4                            FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,4)
#define FLEXSPI_TFDR5                            FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,5)
#define FLEXSPI_TFDR6                            FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,6)
#define FLEXSPI_TFDR7                            FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,7)
#define FLEXSPI_TFDR8                            FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,8)
#define FLEXSPI_TFDR9                            FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,9)
#define FLEXSPI_TFDR10                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,10)
#define FLEXSPI_TFDR11                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,11)
#define FLEXSPI_TFDR12                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,12)
#define FLEXSPI_TFDR13                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,13)
#define FLEXSPI_TFDR14                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,14)
#define FLEXSPI_TFDR15                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,15)
#define FLEXSPI_TFDR16                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,16)
#define FLEXSPI_TFDR17                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,17)
#define FLEXSPI_TFDR18                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,18)
#define FLEXSPI_TFDR19                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,19)
#define FLEXSPI_TFDR20                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,20)
#define FLEXSPI_TFDR21                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,21)
#define FLEXSPI_TFDR22                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,22)
#define FLEXSPI_TFDR23                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,23)
#define FLEXSPI_TFDR24                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,24)
#define FLEXSPI_TFDR25                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,25)
#define FLEXSPI_TFDR26                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,26)
#define FLEXSPI_TFDR27                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,27)
#define FLEXSPI_TFDR28                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,28)
#define FLEXSPI_TFDR29                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,29)
#define FLEXSPI_TFDR30                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,30)
#define FLEXSPI_TFDR31                           FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,31)
#define FLEXSPI_LUT0                             FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,0)
#define FLEXSPI_LUT1                             FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,1)
#define FLEXSPI_LUT2                             FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,2)
#define FLEXSPI_LUT3                             FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,3)
#define FLEXSPI_LUT4                             FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,4)
#define FLEXSPI_LUT5                             FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,5)
#define FLEXSPI_LUT6                             FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,6)
#define FLEXSPI_LUT7                             FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,7)
#define FLEXSPI_LUT8                             FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,8)
#define FLEXSPI_LUT9                             FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,9)
#define FLEXSPI_LUT10                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,10)
#define FLEXSPI_LUT11                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,11)
#define FLEXSPI_LUT12                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,12)
#define FLEXSPI_LUT13                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,13)
#define FLEXSPI_LUT14                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,14)
#define FLEXSPI_LUT15                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,15)
#define FLEXSPI_LUT16                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,16)
#define FLEXSPI_LUT17                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,17)
#define FLEXSPI_LUT18                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,18)
#define FLEXSPI_LUT19                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,19)
#define FLEXSPI_LUT20                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,20)
#define FLEXSPI_LUT21                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,21)
#define FLEXSPI_LUT22                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,22)
#define FLEXSPI_LUT23                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,23)
#define FLEXSPI_LUT24                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,24)
#define FLEXSPI_LUT25                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,25)
#define FLEXSPI_LUT26                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,26)
#define FLEXSPI_LUT27                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,27)
#define FLEXSPI_LUT28                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,28)
#define FLEXSPI_LUT29                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,29)
#define FLEXSPI_LUT30                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,30)
#define FLEXSPI_LUT31                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,31)
#define FLEXSPI_LUT32                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,32)
#define FLEXSPI_LUT33                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,33)
#define FLEXSPI_LUT34                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,34)
#define FLEXSPI_LUT35                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,35)
#define FLEXSPI_LUT36                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,36)
#define FLEXSPI_LUT37                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,37)
#define FLEXSPI_LUT38                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,38)
#define FLEXSPI_LUT39                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,39)
#define FLEXSPI_LUT40                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,40)
#define FLEXSPI_LUT41                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,41)
#define FLEXSPI_LUT42                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,42)
#define FLEXSPI_LUT43                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,43)
#define FLEXSPI_LUT44                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,44)
#define FLEXSPI_LUT45                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,45)
#define FLEXSPI_LUT46                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,46)
#define FLEXSPI_LUT47                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,47)
#define FLEXSPI_LUT48                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,48)
#define FLEXSPI_LUT49                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,49)
#define FLEXSPI_LUT50                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,50)
#define FLEXSPI_LUT51                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,51)
#define FLEXSPI_LUT52                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,52)
#define FLEXSPI_LUT53                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,53)
#define FLEXSPI_LUT54                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,54)
#define FLEXSPI_LUT55                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,55)
#define FLEXSPI_LUT56                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,56)
#define FLEXSPI_LUT57                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,57)
#define FLEXSPI_LUT58                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,58)
#define FLEXSPI_LUT59                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,59)
#define FLEXSPI_LUT60                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,60)
#define FLEXSPI_LUT61                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,61)
#define FLEXSPI_LUT62                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,62)
#define FLEXSPI_LUT63                            FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,63)

/* FLEXSPI - Register array accessors */
#define FLEXSPI_AHBRXBUFCR0(index)               FLEXSPI_AHBRXBUFCR0_REG(FLEXSPI_BASE_PTR,index)
#define FLEXSPI_FLSHCR0(index)                   FLEXSPI_FLSHCR0_REG(FLEXSPI_BASE_PTR,index)
#define FLEXSPI_FLSHCR1(index)                   FLEXSPI_FLSHCR1_REG(FLEXSPI_BASE_PTR,index)
#define FLEXSPI_FLSHCR2(index)                   FLEXSPI_FLSHCR2_REG(FLEXSPI_BASE_PTR,index)
#define FLEXSPI_DLLCR(index)                     FLEXSPI_DLLCR_REG(FLEXSPI_BASE_PTR,index)
#define FLEXSPI_RFDR(index)                      FLEXSPI_RFDR_REG(FLEXSPI_BASE_PTR,index)
#define FLEXSPI_TFDR(index)                      FLEXSPI_TFDR_REG(FLEXSPI_BASE_PTR,index)
#define FLEXSPI_LUT(index)                       FLEXSPI_LUT_REG(FLEXSPI_BASE_PTR,index)

/*!
 * @}
 */ /* end of group FLEXSPI_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group FLEXSPI_Peripheral */


/* ----------------------------------------------------------------------------
   -- GPC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_Peripheral GPC
 * @{
 */

/** GPC - Peripheral register structure */
typedef struct GPC_MemMap {
  uint32_t CNTR;                                   /**< GPC Interface control register, offset: 0x0 */
  uint8_t RESERVED_0[4];
  uint32_t IMR[4];                                 /**< IRQ masking register 1..IRQ masking register 4, array offset: 0x8, array step: 0x4 */
  uint32_t ISR[4];                                 /**< IRQ status resister 1..IRQ status resister 4, array offset: 0x18, array step: 0x4 */
  uint8_t RESERVED_1[12];
  uint32_t IMR5;                                   /**< IRQ masking register 5, offset: 0x34 */
  uint32_t ISR5;                                   /**< IRQ status resister 5, offset: 0x38 */
} volatile *GPC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- GPC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_Register_Accessor_Macros GPC - Register accessor macros
 * @{
 */


/* GPC - Register accessors */
#define GPC_CNTR_REG(base)                       ((base)->CNTR)
#define GPC_IMR_REG(base,index)                  ((base)->IMR[index])
#define GPC_ISR_REG(base,index)                  ((base)->ISR[index])
#define GPC_IMR5_REG(base)                       ((base)->IMR5)
#define GPC_ISR5_REG(base)                       ((base)->ISR5)

/*!
 * @}
 */ /* end of group GPC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- GPC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_Register_Masks GPC Register Masks
 * @{
 */

/*! @name CNTR - GPC Interface control register */
#define GPC_CNTR_MEGA_PDN_REQ_MASK               (0x4U)
#define GPC_CNTR_MEGA_PDN_REQ_SHIFT              (2U)
#define GPC_CNTR_MEGA_PUP_REQ_MASK               (0x8U)
#define GPC_CNTR_MEGA_PUP_REQ_SHIFT              (3U)
#define GPC_CNTR_PDRAM0_PGE_MASK                 (0x400000U)
#define GPC_CNTR_PDRAM0_PGE_SHIFT                (22U)

/*! @name IMR - IRQ masking register 1..IRQ masking register 4 */
#define GPC_IMR_IMR1_MASK                        (0xFFFFFFFFU)
#define GPC_IMR_IMR1_SHIFT                       (0U)
#define GPC_IMR_IMR1(x)                          (((uint32_t)(((uint32_t)(x)) << GPC_IMR_IMR1_SHIFT)) & GPC_IMR_IMR1_MASK)
#define GPC_IMR_IMR2_MASK                        (0xFFFFFFFFU)
#define GPC_IMR_IMR2_SHIFT                       (0U)
#define GPC_IMR_IMR2(x)                          (((uint32_t)(((uint32_t)(x)) << GPC_IMR_IMR2_SHIFT)) & GPC_IMR_IMR2_MASK)
#define GPC_IMR_IMR3_MASK                        (0xFFFFFFFFU)
#define GPC_IMR_IMR3_SHIFT                       (0U)
#define GPC_IMR_IMR3(x)                          (((uint32_t)(((uint32_t)(x)) << GPC_IMR_IMR3_SHIFT)) & GPC_IMR_IMR3_MASK)
#define GPC_IMR_IMR4_MASK                        (0xFFFFFFFFU)
#define GPC_IMR_IMR4_SHIFT                       (0U)
#define GPC_IMR_IMR4(x)                          (((uint32_t)(((uint32_t)(x)) << GPC_IMR_IMR4_SHIFT)) & GPC_IMR_IMR4_MASK)

/* The count of GPC_IMR */
#define GPC_IMR_COUNT                            (4U)

/*! @name ISR - IRQ status resister 1..IRQ status resister 4 */
#define GPC_ISR_ISR1_MASK                        (0xFFFFFFFFU)
#define GPC_ISR_ISR1_SHIFT                       (0U)
#define GPC_ISR_ISR1(x)                          (((uint32_t)(((uint32_t)(x)) << GPC_ISR_ISR1_SHIFT)) & GPC_ISR_ISR1_MASK)
#define GPC_ISR_ISR2_MASK                        (0xFFFFFFFFU)
#define GPC_ISR_ISR2_SHIFT                       (0U)
#define GPC_ISR_ISR2(x)                          (((uint32_t)(((uint32_t)(x)) << GPC_ISR_ISR2_SHIFT)) & GPC_ISR_ISR2_MASK)
#define GPC_ISR_ISR3_MASK                        (0xFFFFFFFFU)
#define GPC_ISR_ISR3_SHIFT                       (0U)
#define GPC_ISR_ISR3(x)                          (((uint32_t)(((uint32_t)(x)) << GPC_ISR_ISR3_SHIFT)) & GPC_ISR_ISR3_MASK)
#define GPC_ISR_ISR4_MASK                        (0xFFFFFFFFU)
#define GPC_ISR_ISR4_SHIFT                       (0U)
#define GPC_ISR_ISR4(x)                          (((uint32_t)(((uint32_t)(x)) << GPC_ISR_ISR4_SHIFT)) & GPC_ISR_ISR4_MASK)

/* The count of GPC_ISR */
#define GPC_ISR_COUNT                            (4U)

/*! @name IMR5 - IRQ masking register 5 */
#define GPC_IMR5_IMR5_MASK                       (0xFFFFFFFFU)
#define GPC_IMR5_IMR5_SHIFT                      (0U)
#define GPC_IMR5_IMR5(x)                         (((uint32_t)(((uint32_t)(x)) << GPC_IMR5_IMR5_SHIFT)) & GPC_IMR5_IMR5_MASK)

/*! @name ISR5 - IRQ status resister 5 */
#define GPC_ISR5_ISR4_MASK                       (0xFFFFFFFFU)
#define GPC_ISR5_ISR4_SHIFT                      (0U)
#define GPC_ISR5_ISR4(x)                         (((uint32_t)(((uint32_t)(x)) << GPC_ISR5_ISR4_SHIFT)) & GPC_ISR5_ISR4_MASK)


/*!
 * @}
 */ /* end of group GPC_Register_Masks */


/* GPC - Peripheral instance base addresses */
/** Peripheral GPC base pointer */
#define GPC_BASE_PTR                             ((GPC_MemMapPtr)0x400F4000u)
/** Array initializer of GPC peripheral base pointers */
#define GPC_BASE_PTRS                            { GPC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- GPC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_Register_Accessor_Macros GPC - Register accessor macros
 * @{
 */


/* GPC - Register instance definitions */
/* GPC */
#define GPC_CNTR                                 GPC_CNTR_REG(GPC_BASE_PTR)
#define GPC_IMR1                                 GPC_IMR_REG(GPC_BASE_PTR,0)
#define GPC_IMR2                                 GPC_IMR_REG(GPC_BASE_PTR,1)
#define GPC_IMR3                                 GPC_IMR_REG(GPC_BASE_PTR,2)
#define GPC_IMR4                                 GPC_IMR_REG(GPC_BASE_PTR,3)
#define GPC_ISR1                                 GPC_ISR_REG(GPC_BASE_PTR,0)
#define GPC_ISR2                                 GPC_ISR_REG(GPC_BASE_PTR,1)
#define GPC_ISR3                                 GPC_ISR_REG(GPC_BASE_PTR,2)
#define GPC_ISR4                                 GPC_ISR_REG(GPC_BASE_PTR,3)
#define GPC_IMR5                                 GPC_IMR5_REG(GPC_BASE_PTR)
#define GPC_ISR5                                 GPC_ISR5_REG(GPC_BASE_PTR)

/* GPC - Register array accessors */
#define GPC_IMR(index)                           GPC_IMR_REG(GPC_BASE_PTR,index)
#define GPC_ISR(index)                           GPC_ISR_REG(GPC_BASE_PTR,index)

/*!
 * @}
 */ /* end of group GPC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group GPC_Peripheral */


/* ----------------------------------------------------------------------------
   -- GPIO
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Peripheral GPIO
 * @{
 */

/** GPIO - Peripheral register structure */
typedef struct GPIO_MemMap {
  uint32_t DR;                                     /**< GPIO data register, offset: 0x0 */
  uint32_t GDIR;                                   /**< GPIO direction register, offset: 0x4 */
  uint32_t PSR;                                    /**< GPIO pad status register, offset: 0x8 */
  uint32_t ICR1;                                   /**< GPIO interrupt configuration register1, offset: 0xC */
  uint32_t ICR2;                                   /**< GPIO interrupt configuration register2, offset: 0x10 */
  uint32_t IMR;                                    /**< GPIO interrupt mask register, offset: 0x14 */
  uint32_t ISR;                                    /**< GPIO interrupt status register, offset: 0x18 */
  uint32_t EDGE_SEL;                               /**< GPIO edge select register, offset: 0x1C */
  uint8_t RESERVED_0[100];
  uint32_t DR_SET;                                 /**< GPIO data register SET, offset: 0x84 */
  uint32_t DR_CLEAR;                               /**< GPIO data register CLEAR, offset: 0x88 */
  uint32_t DR_TOGGLE;                              /**< GPIO data register TOGGLE, offset: 0x8C */
} volatile *GPIO_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- GPIO - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Register_Accessor_Macros GPIO - Register accessor macros
 * @{
 */


/* GPIO - Register accessors */
#define GPIO_DR_REG(base)                        ((base)->DR)
#define GPIO_GDIR_REG(base)                      ((base)->GDIR)
#define GPIO_PSR_REG(base)                       ((base)->PSR)
#define GPIO_ICR1_REG(base)                      ((base)->ICR1)
#define GPIO_ICR2_REG(base)                      ((base)->ICR2)
#define GPIO_IMR_REG(base)                       ((base)->IMR)
#define GPIO_ISR_REG(base)                       ((base)->ISR)
#define GPIO_EDGE_SEL_REG(base)                  ((base)->EDGE_SEL)
#define GPIO_DR_SET_REG(base)                    ((base)->DR_SET)
#define GPIO_DR_CLEAR_REG(base)                  ((base)->DR_CLEAR)
#define GPIO_DR_TOGGLE_REG(base)                 ((base)->DR_TOGGLE)

/*!
 * @}
 */ /* end of group GPIO_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- GPIO Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Register_Masks GPIO Register Masks
 * @{
 */

/*! @name DR - GPIO data register */
#define GPIO_DR_DR_MASK                          (0xFFFFFFFFU)
#define GPIO_DR_DR_SHIFT                         (0U)
#define GPIO_DR_DR(x)                            (((uint32_t)(((uint32_t)(x)) << GPIO_DR_DR_SHIFT)) & GPIO_DR_DR_MASK)

/*! @name GDIR - GPIO direction register */
#define GPIO_GDIR_GDIR_MASK                      (0xFFFFFFFFU)
#define GPIO_GDIR_GDIR_SHIFT                     (0U)
#define GPIO_GDIR_GDIR(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_GDIR_GDIR_SHIFT)) & GPIO_GDIR_GDIR_MASK)

/*! @name PSR - GPIO pad status register */
#define GPIO_PSR_PSR_MASK                        (0xFFFFFFFFU)
#define GPIO_PSR_PSR_SHIFT                       (0U)
#define GPIO_PSR_PSR(x)                          (((uint32_t)(((uint32_t)(x)) << GPIO_PSR_PSR_SHIFT)) & GPIO_PSR_PSR_MASK)

/*! @name ICR1 - GPIO interrupt configuration register1 */
#define GPIO_ICR1_ICR0_MASK                      (0x3U)
#define GPIO_ICR1_ICR0_SHIFT                     (0U)
#define GPIO_ICR1_ICR0(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR0_SHIFT)) & GPIO_ICR1_ICR0_MASK)
#define GPIO_ICR1_ICR1_MASK                      (0xCU)
#define GPIO_ICR1_ICR1_SHIFT                     (2U)
#define GPIO_ICR1_ICR1(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR1_SHIFT)) & GPIO_ICR1_ICR1_MASK)
#define GPIO_ICR1_ICR2_MASK                      (0x30U)
#define GPIO_ICR1_ICR2_SHIFT                     (4U)
#define GPIO_ICR1_ICR2(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR2_SHIFT)) & GPIO_ICR1_ICR2_MASK)
#define GPIO_ICR1_ICR3_MASK                      (0xC0U)
#define GPIO_ICR1_ICR3_SHIFT                     (6U)
#define GPIO_ICR1_ICR3(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR3_SHIFT)) & GPIO_ICR1_ICR3_MASK)
#define GPIO_ICR1_ICR4_MASK                      (0x300U)
#define GPIO_ICR1_ICR4_SHIFT                     (8U)
#define GPIO_ICR1_ICR4(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR4_SHIFT)) & GPIO_ICR1_ICR4_MASK)
#define GPIO_ICR1_ICR5_MASK                      (0xC00U)
#define GPIO_ICR1_ICR5_SHIFT                     (10U)
#define GPIO_ICR1_ICR5(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR5_SHIFT)) & GPIO_ICR1_ICR5_MASK)
#define GPIO_ICR1_ICR6_MASK                      (0x3000U)
#define GPIO_ICR1_ICR6_SHIFT                     (12U)
#define GPIO_ICR1_ICR6(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR6_SHIFT)) & GPIO_ICR1_ICR6_MASK)
#define GPIO_ICR1_ICR7_MASK                      (0xC000U)
#define GPIO_ICR1_ICR7_SHIFT                     (14U)
#define GPIO_ICR1_ICR7(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR7_SHIFT)) & GPIO_ICR1_ICR7_MASK)
#define GPIO_ICR1_ICR8_MASK                      (0x30000U)
#define GPIO_ICR1_ICR8_SHIFT                     (16U)
#define GPIO_ICR1_ICR8(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR8_SHIFT)) & GPIO_ICR1_ICR8_MASK)
#define GPIO_ICR1_ICR9_MASK                      (0xC0000U)
#define GPIO_ICR1_ICR9_SHIFT                     (18U)
#define GPIO_ICR1_ICR9(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR9_SHIFT)) & GPIO_ICR1_ICR9_MASK)
#define GPIO_ICR1_ICR10_MASK                     (0x300000U)
#define GPIO_ICR1_ICR10_SHIFT                    (20U)
#define GPIO_ICR1_ICR10(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR10_SHIFT)) & GPIO_ICR1_ICR10_MASK)
#define GPIO_ICR1_ICR11_MASK                     (0xC00000U)
#define GPIO_ICR1_ICR11_SHIFT                    (22U)
#define GPIO_ICR1_ICR11(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR11_SHIFT)) & GPIO_ICR1_ICR11_MASK)
#define GPIO_ICR1_ICR12_MASK                     (0x3000000U)
#define GPIO_ICR1_ICR12_SHIFT                    (24U)
#define GPIO_ICR1_ICR12(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR12_SHIFT)) & GPIO_ICR1_ICR12_MASK)
#define GPIO_ICR1_ICR13_MASK                     (0xC000000U)
#define GPIO_ICR1_ICR13_SHIFT                    (26U)
#define GPIO_ICR1_ICR13(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR13_SHIFT)) & GPIO_ICR1_ICR13_MASK)
#define GPIO_ICR1_ICR14_MASK                     (0x30000000U)
#define GPIO_ICR1_ICR14_SHIFT                    (28U)
#define GPIO_ICR1_ICR14(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR14_SHIFT)) & GPIO_ICR1_ICR14_MASK)
#define GPIO_ICR1_ICR15_MASK                     (0xC0000000U)
#define GPIO_ICR1_ICR15_SHIFT                    (30U)
#define GPIO_ICR1_ICR15(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR15_SHIFT)) & GPIO_ICR1_ICR15_MASK)

/*! @name ICR2 - GPIO interrupt configuration register2 */
#define GPIO_ICR2_ICR16_MASK                     (0x3U)
#define GPIO_ICR2_ICR16_SHIFT                    (0U)
#define GPIO_ICR2_ICR16(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR16_SHIFT)) & GPIO_ICR2_ICR16_MASK)
#define GPIO_ICR2_ICR17_MASK                     (0xCU)
#define GPIO_ICR2_ICR17_SHIFT                    (2U)
#define GPIO_ICR2_ICR17(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR17_SHIFT)) & GPIO_ICR2_ICR17_MASK)
#define GPIO_ICR2_ICR18_MASK                     (0x30U)
#define GPIO_ICR2_ICR18_SHIFT                    (4U)
#define GPIO_ICR2_ICR18(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR18_SHIFT)) & GPIO_ICR2_ICR18_MASK)
#define GPIO_ICR2_ICR19_MASK                     (0xC0U)
#define GPIO_ICR2_ICR19_SHIFT                    (6U)
#define GPIO_ICR2_ICR19(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR19_SHIFT)) & GPIO_ICR2_ICR19_MASK)
#define GPIO_ICR2_ICR20_MASK                     (0x300U)
#define GPIO_ICR2_ICR20_SHIFT                    (8U)
#define GPIO_ICR2_ICR20(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR20_SHIFT)) & GPIO_ICR2_ICR20_MASK)
#define GPIO_ICR2_ICR21_MASK                     (0xC00U)
#define GPIO_ICR2_ICR21_SHIFT                    (10U)
#define GPIO_ICR2_ICR21(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR21_SHIFT)) & GPIO_ICR2_ICR21_MASK)
#define GPIO_ICR2_ICR22_MASK                     (0x3000U)
#define GPIO_ICR2_ICR22_SHIFT                    (12U)
#define GPIO_ICR2_ICR22(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR22_SHIFT)) & GPIO_ICR2_ICR22_MASK)
#define GPIO_ICR2_ICR23_MASK                     (0xC000U)
#define GPIO_ICR2_ICR23_SHIFT                    (14U)
#define GPIO_ICR2_ICR23(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR23_SHIFT)) & GPIO_ICR2_ICR23_MASK)
#define GPIO_ICR2_ICR24_MASK                     (0x30000U)
#define GPIO_ICR2_ICR24_SHIFT                    (16U)
#define GPIO_ICR2_ICR24(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR24_SHIFT)) & GPIO_ICR2_ICR24_MASK)
#define GPIO_ICR2_ICR25_MASK                     (0xC0000U)
#define GPIO_ICR2_ICR25_SHIFT                    (18U)
#define GPIO_ICR2_ICR25(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR25_SHIFT)) & GPIO_ICR2_ICR25_MASK)
#define GPIO_ICR2_ICR26_MASK                     (0x300000U)
#define GPIO_ICR2_ICR26_SHIFT                    (20U)
#define GPIO_ICR2_ICR26(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR26_SHIFT)) & GPIO_ICR2_ICR26_MASK)
#define GPIO_ICR2_ICR27_MASK                     (0xC00000U)
#define GPIO_ICR2_ICR27_SHIFT                    (22U)
#define GPIO_ICR2_ICR27(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR27_SHIFT)) & GPIO_ICR2_ICR27_MASK)
#define GPIO_ICR2_ICR28_MASK                     (0x3000000U)
#define GPIO_ICR2_ICR28_SHIFT                    (24U)
#define GPIO_ICR2_ICR28(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR28_SHIFT)) & GPIO_ICR2_ICR28_MASK)
#define GPIO_ICR2_ICR29_MASK                     (0xC000000U)
#define GPIO_ICR2_ICR29_SHIFT                    (26U)
#define GPIO_ICR2_ICR29(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR29_SHIFT)) & GPIO_ICR2_ICR29_MASK)
#define GPIO_ICR2_ICR30_MASK                     (0x30000000U)
#define GPIO_ICR2_ICR30_SHIFT                    (28U)
#define GPIO_ICR2_ICR30(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR30_SHIFT)) & GPIO_ICR2_ICR30_MASK)
#define GPIO_ICR2_ICR31_MASK                     (0xC0000000U)
#define GPIO_ICR2_ICR31_SHIFT                    (30U)
#define GPIO_ICR2_ICR31(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR31_SHIFT)) & GPIO_ICR2_ICR31_MASK)

/*! @name IMR - GPIO interrupt mask register */
#define GPIO_IMR_IMR_MASK                        (0xFFFFFFFFU)
#define GPIO_IMR_IMR_SHIFT                       (0U)
#define GPIO_IMR_IMR(x)                          (((uint32_t)(((uint32_t)(x)) << GPIO_IMR_IMR_SHIFT)) & GPIO_IMR_IMR_MASK)

/*! @name ISR - GPIO interrupt status register */
#define GPIO_ISR_ISR_MASK                        (0xFFFFFFFFU)
#define GPIO_ISR_ISR_SHIFT                       (0U)
#define GPIO_ISR_ISR(x)                          (((uint32_t)(((uint32_t)(x)) << GPIO_ISR_ISR_SHIFT)) & GPIO_ISR_ISR_MASK)

/*! @name EDGE_SEL - GPIO edge select register */
#define GPIO_EDGE_SEL_GPIO_EDGE_SEL_MASK         (0xFFFFFFFFU)
#define GPIO_EDGE_SEL_GPIO_EDGE_SEL_SHIFT        (0U)
#define GPIO_EDGE_SEL_GPIO_EDGE_SEL(x)           (((uint32_t)(((uint32_t)(x)) << GPIO_EDGE_SEL_GPIO_EDGE_SEL_SHIFT)) & GPIO_EDGE_SEL_GPIO_EDGE_SEL_MASK)

/*! @name DR_SET - GPIO data register SET */
#define GPIO_DR_SET_DR_SET_MASK                  (0xFFFFFFFFU)
#define GPIO_DR_SET_DR_SET_SHIFT                 (0U)
#define GPIO_DR_SET_DR_SET(x)                    (((uint32_t)(((uint32_t)(x)) << GPIO_DR_SET_DR_SET_SHIFT)) & GPIO_DR_SET_DR_SET_MASK)

/*! @name DR_CLEAR - GPIO data register CLEAR */
#define GPIO_DR_CLEAR_DR_CLEAR_MASK              (0xFFFFFFFFU)
#define GPIO_DR_CLEAR_DR_CLEAR_SHIFT             (0U)
#define GPIO_DR_CLEAR_DR_CLEAR(x)                (((uint32_t)(((uint32_t)(x)) << GPIO_DR_CLEAR_DR_CLEAR_SHIFT)) & GPIO_DR_CLEAR_DR_CLEAR_MASK)

/*! @name DR_TOGGLE - GPIO data register TOGGLE */
#define GPIO_DR_TOGGLE_DR_TOGGLE_MASK            (0xFFFFFFFFU)
#define GPIO_DR_TOGGLE_DR_TOGGLE_SHIFT           (0U)
#define GPIO_DR_TOGGLE_DR_TOGGLE(x)              (((uint32_t)(((uint32_t)(x)) << GPIO_DR_TOGGLE_DR_TOGGLE_SHIFT)) & GPIO_DR_TOGGLE_DR_TOGGLE_MASK)


/*!
 * @}
 */ /* end of group GPIO_Register_Masks */


/* GPIO - Peripheral instance base addresses */
/** Peripheral GPIO1 base pointer */
#define GPIO1_BASE_PTR                           ((GPIO_MemMapPtr)0x401B8000u)
/** Peripheral GPIO2 base pointer */
#define GPIO2_BASE_PTR                           ((GPIO_MemMapPtr)0x401BC000u)
/** Peripheral GPIO3 base pointer */
#define GPIO3_BASE_PTR                           ((GPIO_MemMapPtr)0x401C0000u)
/** Peripheral GPIO5 base pointer */
#define GPIO5_BASE_PTR                           ((GPIO_MemMapPtr)0x400C0000u)
/** Array initializer of GPIO peripheral base pointers */
#define GPIO_BASE_PTRS                           { GPIO1_BASE_PTR, GPIO2_BASE_PTR, GPIO3_BASE_PTR, GPIO5_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- GPIO - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Register_Accessor_Macros GPIO - Register accessor macros
 * @{
 */


/* GPIO - Register instance definitions */
/* GPIO1 */
#define GPIO1_DR                                 GPIO_DR_REG(GPIO1_BASE_PTR)
#define GPIO1_GDIR                               GPIO_GDIR_REG(GPIO1_BASE_PTR)
#define GPIO1_PSR                                GPIO_PSR_REG(GPIO1_BASE_PTR)
#define GPIO1_ICR1                               GPIO_ICR1_REG(GPIO1_BASE_PTR)
#define GPIO1_ICR2                               GPIO_ICR2_REG(GPIO1_BASE_PTR)
#define GPIO1_IMR                                GPIO_IMR_REG(GPIO1_BASE_PTR)
#define GPIO1_ISR                                GPIO_ISR_REG(GPIO1_BASE_PTR)
#define GPIO1_EDGE_SEL                           GPIO_EDGE_SEL_REG(GPIO1_BASE_PTR)
#define GPIO1_DR_SET                             GPIO_DR_SET_REG(GPIO1_BASE_PTR)
#define GPIO1_DR_CLEAR                           GPIO_DR_CLEAR_REG(GPIO1_BASE_PTR)
#define GPIO1_DR_TOGGLE                          GPIO_DR_TOGGLE_REG(GPIO1_BASE_PTR)
/* GPIO2 */
#define GPIO2_DR                                 GPIO_DR_REG(GPIO2_BASE_PTR)
#define GPIO2_GDIR                               GPIO_GDIR_REG(GPIO2_BASE_PTR)
#define GPIO2_PSR                                GPIO_PSR_REG(GPIO2_BASE_PTR)
#define GPIO2_ICR1                               GPIO_ICR1_REG(GPIO2_BASE_PTR)
#define GPIO2_ICR2                               GPIO_ICR2_REG(GPIO2_BASE_PTR)
#define GPIO2_IMR                                GPIO_IMR_REG(GPIO2_BASE_PTR)
#define GPIO2_ISR                                GPIO_ISR_REG(GPIO2_BASE_PTR)
#define GPIO2_EDGE_SEL                           GPIO_EDGE_SEL_REG(GPIO2_BASE_PTR)
#define GPIO2_DR_SET                             GPIO_DR_SET_REG(GPIO2_BASE_PTR)
#define GPIO2_DR_CLEAR                           GPIO_DR_CLEAR_REG(GPIO2_BASE_PTR)
#define GPIO2_DR_TOGGLE                          GPIO_DR_TOGGLE_REG(GPIO2_BASE_PTR)
/* GPIO3 */
#define GPIO3_DR                                 GPIO_DR_REG(GPIO3_BASE_PTR)
#define GPIO3_GDIR                               GPIO_GDIR_REG(GPIO3_BASE_PTR)
#define GPIO3_PSR                                GPIO_PSR_REG(GPIO3_BASE_PTR)
#define GPIO3_ICR1                               GPIO_ICR1_REG(GPIO3_BASE_PTR)
#define GPIO3_ICR2                               GPIO_ICR2_REG(GPIO3_BASE_PTR)
#define GPIO3_IMR                                GPIO_IMR_REG(GPIO3_BASE_PTR)
#define GPIO3_ISR                                GPIO_ISR_REG(GPIO3_BASE_PTR)
#define GPIO3_EDGE_SEL                           GPIO_EDGE_SEL_REG(GPIO3_BASE_PTR)
#define GPIO3_DR_SET                             GPIO_DR_SET_REG(GPIO3_BASE_PTR)
#define GPIO3_DR_CLEAR                           GPIO_DR_CLEAR_REG(GPIO3_BASE_PTR)
#define GPIO3_DR_TOGGLE                          GPIO_DR_TOGGLE_REG(GPIO3_BASE_PTR)
/* GPIO5 */
#define GPIO5_DR                                 GPIO_DR_REG(GPIO5_BASE_PTR)
#define GPIO5_GDIR                               GPIO_GDIR_REG(GPIO5_BASE_PTR)
#define GPIO5_PSR                                GPIO_PSR_REG(GPIO5_BASE_PTR)
#define GPIO5_ICR1                               GPIO_ICR1_REG(GPIO5_BASE_PTR)
#define GPIO5_ICR2                               GPIO_ICR2_REG(GPIO5_BASE_PTR)
#define GPIO5_IMR                                GPIO_IMR_REG(GPIO5_BASE_PTR)
#define GPIO5_ISR                                GPIO_ISR_REG(GPIO5_BASE_PTR)
#define GPIO5_EDGE_SEL                           GPIO_EDGE_SEL_REG(GPIO5_BASE_PTR)
#define GPIO5_DR_SET                             GPIO_DR_SET_REG(GPIO5_BASE_PTR)
#define GPIO5_DR_CLEAR                           GPIO_DR_CLEAR_REG(GPIO5_BASE_PTR)
#define GPIO5_DR_TOGGLE                          GPIO_DR_TOGGLE_REG(GPIO5_BASE_PTR)

/*!
 * @}
 */ /* end of group GPIO_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group GPIO_Peripheral */


/* ----------------------------------------------------------------------------
   -- GPT
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPT_Peripheral GPT
 * @{
 */

/** GPT - Peripheral register structure */
typedef struct GPT_MemMap {
  uint32_t CR;                                     /**< GPT Control Register, offset: 0x0 */
  uint32_t PR;                                     /**< GPT Prescaler Register, offset: 0x4 */
  uint32_t SR;                                     /**< GPT Status Register, offset: 0x8 */
  uint32_t IR;                                     /**< GPT Interrupt Register, offset: 0xC */
  uint32_t OCR[3];                                 /**< GPT Output Compare Register 1..GPT Output Compare Register 3, array offset: 0x10, array step: 0x4 */
  uint32_t ICR[2];                                 /**< GPT Input Capture Register 1..GPT Input Capture Register 2, array offset: 0x1C, array step: 0x4 */
  uint32_t CNT;                                    /**< GPT Counter Register, offset: 0x24 */
} volatile *GPT_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- GPT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPT_Register_Accessor_Macros GPT - Register accessor macros
 * @{
 */


/* GPT - Register accessors */
#define GPT_CR_REG(base)                         ((base)->CR)
#define GPT_PR_REG(base)                         ((base)->PR)
#define GPT_SR_REG(base)                         ((base)->SR)
#define GPT_IR_REG(base)                         ((base)->IR)
#define GPT_OCR_REG(base,index)                  ((base)->OCR[index])
#define GPT_ICR_REG(base,index)                  ((base)->ICR[index])
#define GPT_CNT_REG(base)                        ((base)->CNT)

/*!
 * @}
 */ /* end of group GPT_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- GPT Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPT_Register_Masks GPT Register Masks
 * @{
 */

/*! @name CR - GPT Control Register */
#define GPT_CR_EN_MASK                           (0x1U)
#define GPT_CR_EN_SHIFT                          (0U)
#define GPT_CR_ENMOD_MASK                        (0x2U)
#define GPT_CR_ENMOD_SHIFT                       (1U)
#define GPT_CR_DBGEN_MASK                        (0x4U)
#define GPT_CR_DBGEN_SHIFT                       (2U)
#define GPT_CR_WAITEN_MASK                       (0x8U)
#define GPT_CR_WAITEN_SHIFT                      (3U)
#define GPT_CR_DOZEEN_MASK                       (0x10U)
#define GPT_CR_DOZEEN_SHIFT                      (4U)
#define GPT_CR_STOPEN_MASK                       (0x20U)
#define GPT_CR_STOPEN_SHIFT                      (5U)
#define GPT_CR_CLKSRC_MASK                       (0x1C0U)
#define GPT_CR_CLKSRC_SHIFT                      (6U)
#define GPT_CR_CLKSRC(x)                         (((uint32_t)(((uint32_t)(x)) << GPT_CR_CLKSRC_SHIFT)) & GPT_CR_CLKSRC_MASK)
#define GPT_CR_FRR_MASK                          (0x200U)
#define GPT_CR_FRR_SHIFT                         (9U)
#define GPT_CR_EN_24M_MASK                       (0x400U)
#define GPT_CR_EN_24M_SHIFT                      (10U)
#define GPT_CR_SWR_MASK                          (0x8000U)
#define GPT_CR_SWR_SHIFT                         (15U)
#define GPT_CR_IM1_MASK                          (0x30000U)
#define GPT_CR_IM1_SHIFT                         (16U)
#define GPT_CR_IM1(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_IM1_SHIFT)) & GPT_CR_IM1_MASK)
#define GPT_CR_IM2_MASK                          (0xC0000U)
#define GPT_CR_IM2_SHIFT                         (18U)
#define GPT_CR_IM2(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_IM2_SHIFT)) & GPT_CR_IM2_MASK)
#define GPT_CR_OM1_MASK                          (0x700000U)
#define GPT_CR_OM1_SHIFT                         (20U)
#define GPT_CR_OM1(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_OM1_SHIFT)) & GPT_CR_OM1_MASK)
#define GPT_CR_OM2_MASK                          (0x3800000U)
#define GPT_CR_OM2_SHIFT                         (23U)
#define GPT_CR_OM2(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_OM2_SHIFT)) & GPT_CR_OM2_MASK)
#define GPT_CR_OM3_MASK                          (0x1C000000U)
#define GPT_CR_OM3_SHIFT                         (26U)
#define GPT_CR_OM3(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_OM3_SHIFT)) & GPT_CR_OM3_MASK)
#define GPT_CR_FO1_MASK                          (0x20000000U)
#define GPT_CR_FO1_SHIFT                         (29U)
#define GPT_CR_FO2_MASK                          (0x40000000U)
#define GPT_CR_FO2_SHIFT                         (30U)
#define GPT_CR_FO3_MASK                          (0x80000000U)
#define GPT_CR_FO3_SHIFT                         (31U)

/*! @name PR - GPT Prescaler Register */
#define GPT_PR_PRESCALER_MASK                    (0xFFFU)
#define GPT_PR_PRESCALER_SHIFT                   (0U)
#define GPT_PR_PRESCALER(x)                      (((uint32_t)(((uint32_t)(x)) << GPT_PR_PRESCALER_SHIFT)) & GPT_PR_PRESCALER_MASK)
#define GPT_PR_PRESCALER24M_MASK                 (0xF000U)
#define GPT_PR_PRESCALER24M_SHIFT                (12U)
#define GPT_PR_PRESCALER24M(x)                   (((uint32_t)(((uint32_t)(x)) << GPT_PR_PRESCALER24M_SHIFT)) & GPT_PR_PRESCALER24M_MASK)

/*! @name SR - GPT Status Register */
#define GPT_SR_OF1_MASK                          (0x1U)
#define GPT_SR_OF1_SHIFT                         (0U)
#define GPT_SR_OF2_MASK                          (0x2U)
#define GPT_SR_OF2_SHIFT                         (1U)
#define GPT_SR_OF3_MASK                          (0x4U)
#define GPT_SR_OF3_SHIFT                         (2U)
#define GPT_SR_IF1_MASK                          (0x8U)
#define GPT_SR_IF1_SHIFT                         (3U)
#define GPT_SR_IF2_MASK                          (0x10U)
#define GPT_SR_IF2_SHIFT                         (4U)
#define GPT_SR_ROV_MASK                          (0x20U)
#define GPT_SR_ROV_SHIFT                         (5U)

/*! @name IR - GPT Interrupt Register */
#define GPT_IR_OF1IE_MASK                        (0x1U)
#define GPT_IR_OF1IE_SHIFT                       (0U)
#define GPT_IR_OF2IE_MASK                        (0x2U)
#define GPT_IR_OF2IE_SHIFT                       (1U)
#define GPT_IR_OF3IE_MASK                        (0x4U)
#define GPT_IR_OF3IE_SHIFT                       (2U)
#define GPT_IR_IF1IE_MASK                        (0x8U)
#define GPT_IR_IF1IE_SHIFT                       (3U)
#define GPT_IR_IF2IE_MASK                        (0x10U)
#define GPT_IR_IF2IE_SHIFT                       (4U)
#define GPT_IR_ROVIE_MASK                        (0x20U)
#define GPT_IR_ROVIE_SHIFT                       (5U)

/*! @name OCR - GPT Output Compare Register 1..GPT Output Compare Register 3 */
#define GPT_OCR_COMP_MASK                        (0xFFFFFFFFU)
#define GPT_OCR_COMP_SHIFT                       (0U)
#define GPT_OCR_COMP(x)                          (((uint32_t)(((uint32_t)(x)) << GPT_OCR_COMP_SHIFT)) & GPT_OCR_COMP_MASK)

/* The count of GPT_OCR */
#define GPT_OCR_COUNT                            (3U)

/*! @name ICR - GPT Input Capture Register 1..GPT Input Capture Register 2 */
#define GPT_ICR_CAPT_MASK                        (0xFFFFFFFFU)
#define GPT_ICR_CAPT_SHIFT                       (0U)
#define GPT_ICR_CAPT(x)                          (((uint32_t)(((uint32_t)(x)) << GPT_ICR_CAPT_SHIFT)) & GPT_ICR_CAPT_MASK)

/* The count of GPT_ICR */
#define GPT_ICR_COUNT                            (2U)

/*! @name CNT - GPT Counter Register */
#define GPT_CNT_COUNT_MASK                       (0xFFFFFFFFU)
#define GPT_CNT_COUNT_SHIFT                      (0U)
#define GPT_CNT_COUNT(x)                         (((uint32_t)(((uint32_t)(x)) << GPT_CNT_COUNT_SHIFT)) & GPT_CNT_COUNT_MASK)


/*!
 * @}
 */ /* end of group GPT_Register_Masks */


/* GPT - Peripheral instance base addresses */
/** Peripheral GPT1 base pointer */
#define GPT1_BASE_PTR                            ((GPT_MemMapPtr)0x401EC000u)
/** Peripheral GPT2 base pointer */
#define GPT2_BASE_PTR                            ((GPT_MemMapPtr)0x401F0000u)
/** Array initializer of GPT peripheral base pointers */
#define GPT_BASE_PTRS                            { GPT1_BASE_PTR, GPT2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- GPT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPT_Register_Accessor_Macros GPT - Register accessor macros
 * @{
 */


/* GPT - Register instance definitions */
/* GPT1 */
#define GPT1_CR                                  GPT_CR_REG(GPT1_BASE_PTR)
#define GPT1_PR                                  GPT_PR_REG(GPT1_BASE_PTR)
#define GPT1_SR                                  GPT_SR_REG(GPT1_BASE_PTR)
#define GPT1_IR                                  GPT_IR_REG(GPT1_BASE_PTR)
#define GPT1_OCR1                                GPT_OCR_REG(GPT1_BASE_PTR,0)
#define GPT1_OCR2                                GPT_OCR_REG(GPT1_BASE_PTR,1)
#define GPT1_OCR3                                GPT_OCR_REG(GPT1_BASE_PTR,2)
#define GPT1_ICR1                                GPT_ICR_REG(GPT1_BASE_PTR,0)
#define GPT1_ICR2                                GPT_ICR_REG(GPT1_BASE_PTR,1)
#define GPT1_CNT                                 GPT_CNT_REG(GPT1_BASE_PTR)
/* GPT2 */
#define GPT2_CR                                  GPT_CR_REG(GPT2_BASE_PTR)
#define GPT2_PR                                  GPT_PR_REG(GPT2_BASE_PTR)
#define GPT2_SR                                  GPT_SR_REG(GPT2_BASE_PTR)
#define GPT2_IR                                  GPT_IR_REG(GPT2_BASE_PTR)
#define GPT2_OCR1                                GPT_OCR_REG(GPT2_BASE_PTR,0)
#define GPT2_OCR2                                GPT_OCR_REG(GPT2_BASE_PTR,1)
#define GPT2_OCR3                                GPT_OCR_REG(GPT2_BASE_PTR,2)
#define GPT2_ICR1                                GPT_ICR_REG(GPT2_BASE_PTR,0)
#define GPT2_ICR2                                GPT_ICR_REG(GPT2_BASE_PTR,1)
#define GPT2_CNT                                 GPT_CNT_REG(GPT2_BASE_PTR)

/* GPT - Register array accessors */
#define GPT1_OCR(index)                          GPT_OCR_REG(GPT1_BASE_PTR,index)
#define GPT2_OCR(index)                          GPT_OCR_REG(GPT2_BASE_PTR,index)
#define GPT1_ICR(index)                          GPT_ICR_REG(GPT1_BASE_PTR,index)
#define GPT2_ICR(index)                          GPT_ICR_REG(GPT2_BASE_PTR,index)

/*!
 * @}
 */ /* end of group GPT_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group GPT_Peripheral */


/* ----------------------------------------------------------------------------
   -- I2S
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Peripheral I2S
 * @{
 */

/** I2S - Peripheral register structure */
typedef struct I2S_MemMap {
  uint32_t VERID;                                  /**< Version ID Register, offset: 0x0 */
  uint32_t PARAM;                                  /**< Parameter Register, offset: 0x4 */
  uint32_t TCSR;                                   /**< SAI Transmit Control Register, offset: 0x8 */
  uint32_t TCR1;                                   /**< SAI Transmit Configuration 1 Register, offset: 0xC */
  uint32_t TCR2;                                   /**< SAI Transmit Configuration 2 Register, offset: 0x10 */
  uint32_t TCR3;                                   /**< SAI Transmit Configuration 3 Register, offset: 0x14 */
  uint32_t TCR4;                                   /**< SAI Transmit Configuration 4 Register, offset: 0x18 */
  uint32_t TCR5;                                   /**< SAI Transmit Configuration 5 Register, offset: 0x1C */
  uint32_t TDR[4];                                 /**< SAI Transmit Data Register, array offset: 0x20, array step: 0x4 */
  uint8_t RESERVED_0[16];
  uint32_t TFR[4];                                 /**< SAI Transmit FIFO Register, array offset: 0x40, array step: 0x4 */
  uint8_t RESERVED_1[16];
  uint32_t TMR;                                    /**< SAI Transmit Mask Register, offset: 0x60 */
  uint8_t RESERVED_2[36];
  uint32_t RCSR;                                   /**< SAI Receive Control Register, offset: 0x88 */
  uint32_t RCR1;                                   /**< SAI Receive Configuration 1 Register, offset: 0x8C */
  uint32_t RCR2;                                   /**< SAI Receive Configuration 2 Register, offset: 0x90 */
  uint32_t RCR3;                                   /**< SAI Receive Configuration 3 Register, offset: 0x94 */
  uint32_t RCR4;                                   /**< SAI Receive Configuration 4 Register, offset: 0x98 */
  uint32_t RCR5;                                   /**< SAI Receive Configuration 5 Register, offset: 0x9C */
  uint32_t RDR[4];                                 /**< SAI Receive Data Register, array offset: 0xA0, array step: 0x4 */
  uint8_t RESERVED_3[16];
  uint32_t RFR[4];                                 /**< SAI Receive FIFO Register, array offset: 0xC0, array step: 0x4 */
  uint8_t RESERVED_4[16];
  uint32_t RMR;                                    /**< SAI Receive Mask Register, offset: 0xE0 */
} volatile *I2S_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- I2S - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Register_Accessor_Macros I2S - Register accessor macros
 * @{
 */


/* I2S - Register accessors */
#define I2S_VERID_REG(base)                      ((base)->VERID)
#define I2S_PARAM_REG(base)                      ((base)->PARAM)
#define I2S_TCSR_REG(base)                       ((base)->TCSR)
#define I2S_TCR1_REG(base)                       ((base)->TCR1)
#define I2S_TCR2_REG(base)                       ((base)->TCR2)
#define I2S_TCR3_REG(base)                       ((base)->TCR3)
#define I2S_TCR4_REG(base)                       ((base)->TCR4)
#define I2S_TCR5_REG(base)                       ((base)->TCR5)
#define I2S_TDR_REG(base,index)                  ((base)->TDR[index])
#define I2S_TFR_REG(base,index)                  ((base)->TFR[index])
#define I2S_TMR_REG(base)                        ((base)->TMR)
#define I2S_RCSR_REG(base)                       ((base)->RCSR)
#define I2S_RCR1_REG(base)                       ((base)->RCR1)
#define I2S_RCR2_REG(base)                       ((base)->RCR2)
#define I2S_RCR3_REG(base)                       ((base)->RCR3)
#define I2S_RCR4_REG(base)                       ((base)->RCR4)
#define I2S_RCR5_REG(base)                       ((base)->RCR5)
#define I2S_RDR_REG(base,index)                  ((base)->RDR[index])
#define I2S_RFR_REG(base,index)                  ((base)->RFR[index])
#define I2S_RMR_REG(base)                        ((base)->RMR)

/*!
 * @}
 */ /* end of group I2S_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- I2S Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Register_Masks I2S Register Masks
 * @{
 */

/*! @name VERID - Version ID Register */
#define I2S_VERID_FEATURE_MASK                   (0xFFFFU)
#define I2S_VERID_FEATURE_SHIFT                  (0U)
#define I2S_VERID_FEATURE(x)                     (((uint32_t)(((uint32_t)(x)) << I2S_VERID_FEATURE_SHIFT)) & I2S_VERID_FEATURE_MASK)
#define I2S_VERID_MINOR_MASK                     (0xFF0000U)
#define I2S_VERID_MINOR_SHIFT                    (16U)
#define I2S_VERID_MINOR(x)                       (((uint32_t)(((uint32_t)(x)) << I2S_VERID_MINOR_SHIFT)) & I2S_VERID_MINOR_MASK)
#define I2S_VERID_MAJOR_MASK                     (0xFF000000U)
#define I2S_VERID_MAJOR_SHIFT                    (24U)
#define I2S_VERID_MAJOR(x)                       (((uint32_t)(((uint32_t)(x)) << I2S_VERID_MAJOR_SHIFT)) & I2S_VERID_MAJOR_MASK)

/*! @name PARAM - Parameter Register */
#define I2S_PARAM_DATALINE_MASK                  (0xFU)
#define I2S_PARAM_DATALINE_SHIFT                 (0U)
#define I2S_PARAM_DATALINE(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_PARAM_DATALINE_SHIFT)) & I2S_PARAM_DATALINE_MASK)
#define I2S_PARAM_FIFO_MASK                      (0xF00U)
#define I2S_PARAM_FIFO_SHIFT                     (8U)
#define I2S_PARAM_FIFO(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_PARAM_FIFO_SHIFT)) & I2S_PARAM_FIFO_MASK)
#define I2S_PARAM_FRAME_MASK                     (0xF0000U)
#define I2S_PARAM_FRAME_SHIFT                    (16U)
#define I2S_PARAM_FRAME(x)                       (((uint32_t)(((uint32_t)(x)) << I2S_PARAM_FRAME_SHIFT)) & I2S_PARAM_FRAME_MASK)

/*! @name TCSR - SAI Transmit Control Register */
#define I2S_TCSR_FRDE_MASK                       (0x1U)
#define I2S_TCSR_FRDE_SHIFT                      (0U)
#define I2S_TCSR_FWDE_MASK                       (0x2U)
#define I2S_TCSR_FWDE_SHIFT                      (1U)
#define I2S_TCSR_FRIE_MASK                       (0x100U)
#define I2S_TCSR_FRIE_SHIFT                      (8U)
#define I2S_TCSR_FWIE_MASK                       (0x200U)
#define I2S_TCSR_FWIE_SHIFT                      (9U)
#define I2S_TCSR_FEIE_MASK                       (0x400U)
#define I2S_TCSR_FEIE_SHIFT                      (10U)
#define I2S_TCSR_SEIE_MASK                       (0x800U)
#define I2S_TCSR_SEIE_SHIFT                      (11U)
#define I2S_TCSR_WSIE_MASK                       (0x1000U)
#define I2S_TCSR_WSIE_SHIFT                      (12U)
#define I2S_TCSR_FRF_MASK                        (0x10000U)
#define I2S_TCSR_FRF_SHIFT                       (16U)
#define I2S_TCSR_FWF_MASK                        (0x20000U)
#define I2S_TCSR_FWF_SHIFT                       (17U)
#define I2S_TCSR_FEF_MASK                        (0x40000U)
#define I2S_TCSR_FEF_SHIFT                       (18U)
#define I2S_TCSR_SEF_MASK                        (0x80000U)
#define I2S_TCSR_SEF_SHIFT                       (19U)
#define I2S_TCSR_WSF_MASK                        (0x100000U)
#define I2S_TCSR_WSF_SHIFT                       (20U)
#define I2S_TCSR_SR_MASK                         (0x1000000U)
#define I2S_TCSR_SR_SHIFT                        (24U)
#define I2S_TCSR_FR_MASK                         (0x2000000U)
#define I2S_TCSR_FR_SHIFT                        (25U)
#define I2S_TCSR_BCE_MASK                        (0x10000000U)
#define I2S_TCSR_BCE_SHIFT                       (28U)
#define I2S_TCSR_DBGE_MASK                       (0x20000000U)
#define I2S_TCSR_DBGE_SHIFT                      (29U)
#define I2S_TCSR_STOPE_MASK                      (0x40000000U)
#define I2S_TCSR_STOPE_SHIFT                     (30U)
#define I2S_TCSR_TE_MASK                         (0x80000000U)
#define I2S_TCSR_TE_SHIFT                        (31U)

/*! @name TCR1 - SAI Transmit Configuration 1 Register */
#define I2S_TCR1_TFW_MASK                        (0x1FU)
#define I2S_TCR1_TFW_SHIFT                       (0U)
#define I2S_TCR1_TFW(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR1_TFW_SHIFT)) & I2S_TCR1_TFW_MASK)

/*! @name TCR2 - SAI Transmit Configuration 2 Register */
#define I2S_TCR2_DIV_MASK                        (0xFFU)
#define I2S_TCR2_DIV_SHIFT                       (0U)
#define I2S_TCR2_DIV(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR2_DIV_SHIFT)) & I2S_TCR2_DIV_MASK)
#define I2S_TCR2_BCD_MASK                        (0x1000000U)
#define I2S_TCR2_BCD_SHIFT                       (24U)
#define I2S_TCR2_BCP_MASK                        (0x2000000U)
#define I2S_TCR2_BCP_SHIFT                       (25U)
#define I2S_TCR2_MSEL_MASK                       (0xC000000U)
#define I2S_TCR2_MSEL_SHIFT                      (26U)
#define I2S_TCR2_MSEL(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR2_MSEL_SHIFT)) & I2S_TCR2_MSEL_MASK)
#define I2S_TCR2_BCI_MASK                        (0x10000000U)
#define I2S_TCR2_BCI_SHIFT                       (28U)
#define I2S_TCR2_BCS_MASK                        (0x20000000U)
#define I2S_TCR2_BCS_SHIFT                       (29U)
#define I2S_TCR2_SYNC_MASK                       (0xC0000000U)
#define I2S_TCR2_SYNC_SHIFT                      (30U)
#define I2S_TCR2_SYNC(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR2_SYNC_SHIFT)) & I2S_TCR2_SYNC_MASK)

/*! @name TCR3 - SAI Transmit Configuration 3 Register */
#define I2S_TCR3_WDFL_MASK                       (0x1FU)
#define I2S_TCR3_WDFL_SHIFT                      (0U)
#define I2S_TCR3_WDFL(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR3_WDFL_SHIFT)) & I2S_TCR3_WDFL_MASK)
#define I2S_TCR3_TCE_MASK                        (0xF0000U)
#define I2S_TCR3_TCE_SHIFT                       (16U)
#define I2S_TCR3_TCE(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR3_TCE_SHIFT)) & I2S_TCR3_TCE_MASK)
#define I2S_TCR3_CFR_MASK                        (0xF000000U)
#define I2S_TCR3_CFR_SHIFT                       (24U)
#define I2S_TCR3_CFR(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR3_CFR_SHIFT)) & I2S_TCR3_CFR_MASK)

/*! @name TCR4 - SAI Transmit Configuration 4 Register */
#define I2S_TCR4_FSD_MASK                        (0x1U)
#define I2S_TCR4_FSD_SHIFT                       (0U)
#define I2S_TCR4_FSP_MASK                        (0x2U)
#define I2S_TCR4_FSP_SHIFT                       (1U)
#define I2S_TCR4_ONDEM_MASK                      (0x4U)
#define I2S_TCR4_ONDEM_SHIFT                     (2U)
#define I2S_TCR4_FSE_MASK                        (0x8U)
#define I2S_TCR4_FSE_SHIFT                       (3U)
#define I2S_TCR4_MF_MASK                         (0x10U)
#define I2S_TCR4_MF_SHIFT                        (4U)
#define I2S_TCR4_CHMOD_MASK                      (0x20U)
#define I2S_TCR4_CHMOD_SHIFT                     (5U)
#define I2S_TCR4_SYWD_MASK                       (0x1F00U)
#define I2S_TCR4_SYWD_SHIFT                      (8U)
#define I2S_TCR4_SYWD(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_SYWD_SHIFT)) & I2S_TCR4_SYWD_MASK)
#define I2S_TCR4_FRSZ_MASK                       (0x1F0000U)
#define I2S_TCR4_FRSZ_SHIFT                      (16U)
#define I2S_TCR4_FRSZ(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_FRSZ_SHIFT)) & I2S_TCR4_FRSZ_MASK)
#define I2S_TCR4_FPACK_MASK                      (0x3000000U)
#define I2S_TCR4_FPACK_SHIFT                     (24U)
#define I2S_TCR4_FPACK(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_FPACK_SHIFT)) & I2S_TCR4_FPACK_MASK)
#define I2S_TCR4_FCOMB_MASK                      (0xC000000U)
#define I2S_TCR4_FCOMB_SHIFT                     (26U)
#define I2S_TCR4_FCOMB(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_FCOMB_SHIFT)) & I2S_TCR4_FCOMB_MASK)
#define I2S_TCR4_FCONT_MASK                      (0x10000000U)
#define I2S_TCR4_FCONT_SHIFT                     (28U)

/*! @name TCR5 - SAI Transmit Configuration 5 Register */
#define I2S_TCR5_FBT_MASK                        (0x1F00U)
#define I2S_TCR5_FBT_SHIFT                       (8U)
#define I2S_TCR5_FBT(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR5_FBT_SHIFT)) & I2S_TCR5_FBT_MASK)
#define I2S_TCR5_W0W_MASK                        (0x1F0000U)
#define I2S_TCR5_W0W_SHIFT                       (16U)
#define I2S_TCR5_W0W(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR5_W0W_SHIFT)) & I2S_TCR5_W0W_MASK)
#define I2S_TCR5_WNW_MASK                        (0x1F000000U)
#define I2S_TCR5_WNW_SHIFT                       (24U)
#define I2S_TCR5_WNW(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR5_WNW_SHIFT)) & I2S_TCR5_WNW_MASK)

/*! @name TDR - SAI Transmit Data Register */
#define I2S_TDR_TDR_MASK                         (0xFFFFFFFFU)
#define I2S_TDR_TDR_SHIFT                        (0U)
#define I2S_TDR_TDR(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TDR_TDR_SHIFT)) & I2S_TDR_TDR_MASK)

/* The count of I2S_TDR */
#define I2S_TDR_COUNT                            (4U)

/*! @name TFR - SAI Transmit FIFO Register */
#define I2S_TFR_RFP_MASK                         (0x3FU)
#define I2S_TFR_RFP_SHIFT                        (0U)
#define I2S_TFR_RFP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TFR_RFP_SHIFT)) & I2S_TFR_RFP_MASK)
#define I2S_TFR_WFP_MASK                         (0x3F0000U)
#define I2S_TFR_WFP_SHIFT                        (16U)
#define I2S_TFR_WFP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TFR_WFP_SHIFT)) & I2S_TFR_WFP_MASK)
#define I2S_TFR_WCP_MASK                         (0x80000000U)
#define I2S_TFR_WCP_SHIFT                        (31U)

/* The count of I2S_TFR */
#define I2S_TFR_COUNT                            (4U)

/*! @name TMR - SAI Transmit Mask Register */
#define I2S_TMR_TWM_MASK                         (0xFFFFFFFFU)
#define I2S_TMR_TWM_SHIFT                        (0U)
#define I2S_TMR_TWM(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TMR_TWM_SHIFT)) & I2S_TMR_TWM_MASK)

/*! @name RCSR - SAI Receive Control Register */
#define I2S_RCSR_FRDE_MASK                       (0x1U)
#define I2S_RCSR_FRDE_SHIFT                      (0U)
#define I2S_RCSR_FWDE_MASK                       (0x2U)
#define I2S_RCSR_FWDE_SHIFT                      (1U)
#define I2S_RCSR_FRIE_MASK                       (0x100U)
#define I2S_RCSR_FRIE_SHIFT                      (8U)
#define I2S_RCSR_FWIE_MASK                       (0x200U)
#define I2S_RCSR_FWIE_SHIFT                      (9U)
#define I2S_RCSR_FEIE_MASK                       (0x400U)
#define I2S_RCSR_FEIE_SHIFT                      (10U)
#define I2S_RCSR_SEIE_MASK                       (0x800U)
#define I2S_RCSR_SEIE_SHIFT                      (11U)
#define I2S_RCSR_WSIE_MASK                       (0x1000U)
#define I2S_RCSR_WSIE_SHIFT                      (12U)
#define I2S_RCSR_FRF_MASK                        (0x10000U)
#define I2S_RCSR_FRF_SHIFT                       (16U)
#define I2S_RCSR_FWF_MASK                        (0x20000U)
#define I2S_RCSR_FWF_SHIFT                       (17U)
#define I2S_RCSR_FEF_MASK                        (0x40000U)
#define I2S_RCSR_FEF_SHIFT                       (18U)
#define I2S_RCSR_SEF_MASK                        (0x80000U)
#define I2S_RCSR_SEF_SHIFT                       (19U)
#define I2S_RCSR_WSF_MASK                        (0x100000U)
#define I2S_RCSR_WSF_SHIFT                       (20U)
#define I2S_RCSR_SR_MASK                         (0x1000000U)
#define I2S_RCSR_SR_SHIFT                        (24U)
#define I2S_RCSR_FR_MASK                         (0x2000000U)
#define I2S_RCSR_FR_SHIFT                        (25U)
#define I2S_RCSR_BCE_MASK                        (0x10000000U)
#define I2S_RCSR_BCE_SHIFT                       (28U)
#define I2S_RCSR_DBGE_MASK                       (0x20000000U)
#define I2S_RCSR_DBGE_SHIFT                      (29U)
#define I2S_RCSR_STOPE_MASK                      (0x40000000U)
#define I2S_RCSR_STOPE_SHIFT                     (30U)
#define I2S_RCSR_RE_MASK                         (0x80000000U)
#define I2S_RCSR_RE_SHIFT                        (31U)

/*! @name RCR1 - SAI Receive Configuration 1 Register */
#define I2S_RCR1_RFW_MASK                        (0x1FU)
#define I2S_RCR1_RFW_SHIFT                       (0U)
#define I2S_RCR1_RFW(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR1_RFW_SHIFT)) & I2S_RCR1_RFW_MASK)

/*! @name RCR2 - SAI Receive Configuration 2 Register */
#define I2S_RCR2_DIV_MASK                        (0xFFU)
#define I2S_RCR2_DIV_SHIFT                       (0U)
#define I2S_RCR2_DIV(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR2_DIV_SHIFT)) & I2S_RCR2_DIV_MASK)
#define I2S_RCR2_BCD_MASK                        (0x1000000U)
#define I2S_RCR2_BCD_SHIFT                       (24U)
#define I2S_RCR2_BCP_MASK                        (0x2000000U)
#define I2S_RCR2_BCP_SHIFT                       (25U)
#define I2S_RCR2_MSEL_MASK                       (0xC000000U)
#define I2S_RCR2_MSEL_SHIFT                      (26U)
#define I2S_RCR2_MSEL(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR2_MSEL_SHIFT)) & I2S_RCR2_MSEL_MASK)
#define I2S_RCR2_BCI_MASK                        (0x10000000U)
#define I2S_RCR2_BCI_SHIFT                       (28U)
#define I2S_RCR2_BCS_MASK                        (0x20000000U)
#define I2S_RCR2_BCS_SHIFT                       (29U)
#define I2S_RCR2_SYNC_MASK                       (0xC0000000U)
#define I2S_RCR2_SYNC_SHIFT                      (30U)
#define I2S_RCR2_SYNC(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR2_SYNC_SHIFT)) & I2S_RCR2_SYNC_MASK)

/*! @name RCR3 - SAI Receive Configuration 3 Register */
#define I2S_RCR3_WDFL_MASK                       (0x1FU)
#define I2S_RCR3_WDFL_SHIFT                      (0U)
#define I2S_RCR3_WDFL(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR3_WDFL_SHIFT)) & I2S_RCR3_WDFL_MASK)
#define I2S_RCR3_RCE_MASK                        (0xF0000U)
#define I2S_RCR3_RCE_SHIFT                       (16U)
#define I2S_RCR3_RCE(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR3_RCE_SHIFT)) & I2S_RCR3_RCE_MASK)
#define I2S_RCR3_CFR_MASK                        (0xF000000U)
#define I2S_RCR3_CFR_SHIFT                       (24U)
#define I2S_RCR3_CFR(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR3_CFR_SHIFT)) & I2S_RCR3_CFR_MASK)

/*! @name RCR4 - SAI Receive Configuration 4 Register */
#define I2S_RCR4_FSD_MASK                        (0x1U)
#define I2S_RCR4_FSD_SHIFT                       (0U)
#define I2S_RCR4_FSP_MASK                        (0x2U)
#define I2S_RCR4_FSP_SHIFT                       (1U)
#define I2S_RCR4_ONDEM_MASK                      (0x4U)
#define I2S_RCR4_ONDEM_SHIFT                     (2U)
#define I2S_RCR4_FSE_MASK                        (0x8U)
#define I2S_RCR4_FSE_SHIFT                       (3U)
#define I2S_RCR4_MF_MASK                         (0x10U)
#define I2S_RCR4_MF_SHIFT                        (4U)
#define I2S_RCR4_SYWD_MASK                       (0x1F00U)
#define I2S_RCR4_SYWD_SHIFT                      (8U)
#define I2S_RCR4_SYWD(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_SYWD_SHIFT)) & I2S_RCR4_SYWD_MASK)
#define I2S_RCR4_FRSZ_MASK                       (0x1F0000U)
#define I2S_RCR4_FRSZ_SHIFT                      (16U)
#define I2S_RCR4_FRSZ(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_FRSZ_SHIFT)) & I2S_RCR4_FRSZ_MASK)
#define I2S_RCR4_FPACK_MASK                      (0x3000000U)
#define I2S_RCR4_FPACK_SHIFT                     (24U)
#define I2S_RCR4_FPACK(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_FPACK_SHIFT)) & I2S_RCR4_FPACK_MASK)
#define I2S_RCR4_FCOMB_MASK                      (0xC000000U)
#define I2S_RCR4_FCOMB_SHIFT                     (26U)
#define I2S_RCR4_FCOMB(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_FCOMB_SHIFT)) & I2S_RCR4_FCOMB_MASK)
#define I2S_RCR4_FCONT_MASK                      (0x10000000U)
#define I2S_RCR4_FCONT_SHIFT                     (28U)

/*! @name RCR5 - SAI Receive Configuration 5 Register */
#define I2S_RCR5_FBT_MASK                        (0x1F00U)
#define I2S_RCR5_FBT_SHIFT                       (8U)
#define I2S_RCR5_FBT(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR5_FBT_SHIFT)) & I2S_RCR5_FBT_MASK)
#define I2S_RCR5_W0W_MASK                        (0x1F0000U)
#define I2S_RCR5_W0W_SHIFT                       (16U)
#define I2S_RCR5_W0W(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR5_W0W_SHIFT)) & I2S_RCR5_W0W_MASK)
#define I2S_RCR5_WNW_MASK                        (0x1F000000U)
#define I2S_RCR5_WNW_SHIFT                       (24U)
#define I2S_RCR5_WNW(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR5_WNW_SHIFT)) & I2S_RCR5_WNW_MASK)

/*! @name RDR - SAI Receive Data Register */
#define I2S_RDR_RDR_MASK                         (0xFFFFFFFFU)
#define I2S_RDR_RDR_SHIFT                        (0U)
#define I2S_RDR_RDR(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RDR_RDR_SHIFT)) & I2S_RDR_RDR_MASK)

/* The count of I2S_RDR */
#define I2S_RDR_COUNT                            (4U)

/*! @name RFR - SAI Receive FIFO Register */
#define I2S_RFR_RFP_MASK                         (0x3FU)
#define I2S_RFR_RFP_SHIFT                        (0U)
#define I2S_RFR_RFP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RFR_RFP_SHIFT)) & I2S_RFR_RFP_MASK)
#define I2S_RFR_RCP_MASK                         (0x8000U)
#define I2S_RFR_RCP_SHIFT                        (15U)
#define I2S_RFR_WFP_MASK                         (0x3F0000U)
#define I2S_RFR_WFP_SHIFT                        (16U)
#define I2S_RFR_WFP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RFR_WFP_SHIFT)) & I2S_RFR_WFP_MASK)

/* The count of I2S_RFR */
#define I2S_RFR_COUNT                            (4U)

/*! @name RMR - SAI Receive Mask Register */
#define I2S_RMR_RWM_MASK                         (0xFFFFFFFFU)
#define I2S_RMR_RWM_SHIFT                        (0U)
#define I2S_RMR_RWM(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RMR_RWM_SHIFT)) & I2S_RMR_RWM_MASK)


/*!
 * @}
 */ /* end of group I2S_Register_Masks */


/* I2S - Peripheral instance base addresses */
/** Peripheral SAI1 base pointer */
#define SAI1_BASE_PTR                            ((I2S_MemMapPtr)0x40384000u)
/** Peripheral SAI2 base pointer */
#define SAI2_BASE_PTR                            ((I2S_MemMapPtr)0x40388000u)
/** Peripheral SAI3 base pointer */
#define SAI3_BASE_PTR                            ((I2S_MemMapPtr)0x4038C000u)
/** Array initializer of I2S peripheral base pointers */
#define I2S_BASE_PTRS                            { SAI1_BASE_PTR, SAI2_BASE_PTR, SAI3_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- I2S - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Register_Accessor_Macros I2S - Register accessor macros
 * @{
 */


/* I2S - Register instance definitions */
/* SAI1 */
#define SAI1_VERID                               I2S_VERID_REG(SAI1_BASE_PTR)
#define SAI1_PARAM                               I2S_PARAM_REG(SAI1_BASE_PTR)
#define SAI1_TCSR                                I2S_TCSR_REG(SAI1_BASE_PTR)
#define SAI1_TCR1                                I2S_TCR1_REG(SAI1_BASE_PTR)
#define SAI1_TCR2                                I2S_TCR2_REG(SAI1_BASE_PTR)
#define SAI1_TCR3                                I2S_TCR3_REG(SAI1_BASE_PTR)
#define SAI1_TCR4                                I2S_TCR4_REG(SAI1_BASE_PTR)
#define SAI1_TCR5                                I2S_TCR5_REG(SAI1_BASE_PTR)
#define SAI1_TDR0                                I2S_TDR_REG(SAI1_BASE_PTR,0)
#define SAI1_TDR1                                I2S_TDR_REG(SAI1_BASE_PTR,1)
#define SAI1_TDR2                                I2S_TDR_REG(SAI1_BASE_PTR,2)
#define SAI1_TDR3                                I2S_TDR_REG(SAI1_BASE_PTR,3)
#define SAI1_TFR0                                I2S_TFR_REG(SAI1_BASE_PTR,0)
#define SAI1_TFR1                                I2S_TFR_REG(SAI1_BASE_PTR,1)
#define SAI1_TFR2                                I2S_TFR_REG(SAI1_BASE_PTR,2)
#define SAI1_TFR3                                I2S_TFR_REG(SAI1_BASE_PTR,3)
#define SAI1_TMR                                 I2S_TMR_REG(SAI1_BASE_PTR)
#define SAI1_RCSR                                I2S_RCSR_REG(SAI1_BASE_PTR)
#define SAI1_RCR1                                I2S_RCR1_REG(SAI1_BASE_PTR)
#define SAI1_RCR2                                I2S_RCR2_REG(SAI1_BASE_PTR)
#define SAI1_RCR3                                I2S_RCR3_REG(SAI1_BASE_PTR)
#define SAI1_RCR4                                I2S_RCR4_REG(SAI1_BASE_PTR)
#define SAI1_RCR5                                I2S_RCR5_REG(SAI1_BASE_PTR)
#define SAI1_RDR0                                I2S_RDR_REG(SAI1_BASE_PTR,0)
#define SAI1_RDR1                                I2S_RDR_REG(SAI1_BASE_PTR,1)
#define SAI1_RDR2                                I2S_RDR_REG(SAI1_BASE_PTR,2)
#define SAI1_RDR3                                I2S_RDR_REG(SAI1_BASE_PTR,3)
#define SAI1_RFR0                                I2S_RFR_REG(SAI1_BASE_PTR,0)
#define SAI1_RFR1                                I2S_RFR_REG(SAI1_BASE_PTR,1)
#define SAI1_RFR2                                I2S_RFR_REG(SAI1_BASE_PTR,2)
#define SAI1_RFR3                                I2S_RFR_REG(SAI1_BASE_PTR,3)
#define SAI1_RMR                                 I2S_RMR_REG(SAI1_BASE_PTR)
/* SAI2 */
#define SAI2_VERID                               I2S_VERID_REG(SAI2_BASE_PTR)
#define SAI2_PARAM                               I2S_PARAM_REG(SAI2_BASE_PTR)
#define SAI2_TCSR                                I2S_TCSR_REG(SAI2_BASE_PTR)
#define SAI2_TCR1                                I2S_TCR1_REG(SAI2_BASE_PTR)
#define SAI2_TCR2                                I2S_TCR2_REG(SAI2_BASE_PTR)
#define SAI2_TCR3                                I2S_TCR3_REG(SAI2_BASE_PTR)
#define SAI2_TCR4                                I2S_TCR4_REG(SAI2_BASE_PTR)
#define SAI2_TCR5                                I2S_TCR5_REG(SAI2_BASE_PTR)
#define SAI2_TDR0                                I2S_TDR_REG(SAI2_BASE_PTR,0)
#define SAI2_TDR1                                I2S_TDR_REG(SAI2_BASE_PTR,1)
#define SAI2_TDR2                                I2S_TDR_REG(SAI2_BASE_PTR,2)
#define SAI2_TDR3                                I2S_TDR_REG(SAI2_BASE_PTR,3)
#define SAI2_TFR0                                I2S_TFR_REG(SAI2_BASE_PTR,0)
#define SAI2_TFR1                                I2S_TFR_REG(SAI2_BASE_PTR,1)
#define SAI2_TFR2                                I2S_TFR_REG(SAI2_BASE_PTR,2)
#define SAI2_TFR3                                I2S_TFR_REG(SAI2_BASE_PTR,3)
#define SAI2_TMR                                 I2S_TMR_REG(SAI2_BASE_PTR)
#define SAI2_RCSR                                I2S_RCSR_REG(SAI2_BASE_PTR)
#define SAI2_RCR1                                I2S_RCR1_REG(SAI2_BASE_PTR)
#define SAI2_RCR2                                I2S_RCR2_REG(SAI2_BASE_PTR)
#define SAI2_RCR3                                I2S_RCR3_REG(SAI2_BASE_PTR)
#define SAI2_RCR4                                I2S_RCR4_REG(SAI2_BASE_PTR)
#define SAI2_RCR5                                I2S_RCR5_REG(SAI2_BASE_PTR)
#define SAI2_RDR0                                I2S_RDR_REG(SAI2_BASE_PTR,0)
#define SAI2_RDR1                                I2S_RDR_REG(SAI2_BASE_PTR,1)
#define SAI2_RDR2                                I2S_RDR_REG(SAI2_BASE_PTR,2)
#define SAI2_RDR3                                I2S_RDR_REG(SAI2_BASE_PTR,3)
#define SAI2_RFR0                                I2S_RFR_REG(SAI2_BASE_PTR,0)
#define SAI2_RFR1                                I2S_RFR_REG(SAI2_BASE_PTR,1)
#define SAI2_RFR2                                I2S_RFR_REG(SAI2_BASE_PTR,2)
#define SAI2_RFR3                                I2S_RFR_REG(SAI2_BASE_PTR,3)
#define SAI2_RMR                                 I2S_RMR_REG(SAI2_BASE_PTR)
/* SAI3 */
#define SAI3_VERID                               I2S_VERID_REG(SAI3_BASE_PTR)
#define SAI3_PARAM                               I2S_PARAM_REG(SAI3_BASE_PTR)
#define SAI3_TCSR                                I2S_TCSR_REG(SAI3_BASE_PTR)
#define SAI3_TCR1                                I2S_TCR1_REG(SAI3_BASE_PTR)
#define SAI3_TCR2                                I2S_TCR2_REG(SAI3_BASE_PTR)
#define SAI3_TCR3                                I2S_TCR3_REG(SAI3_BASE_PTR)
#define SAI3_TCR4                                I2S_TCR4_REG(SAI3_BASE_PTR)
#define SAI3_TCR5                                I2S_TCR5_REG(SAI3_BASE_PTR)
#define SAI3_TDR0                                I2S_TDR_REG(SAI3_BASE_PTR,0)
#define SAI3_TDR1                                I2S_TDR_REG(SAI3_BASE_PTR,1)
#define SAI3_TDR2                                I2S_TDR_REG(SAI3_BASE_PTR,2)
#define SAI3_TDR3                                I2S_TDR_REG(SAI3_BASE_PTR,3)
#define SAI3_TFR0                                I2S_TFR_REG(SAI3_BASE_PTR,0)
#define SAI3_TFR1                                I2S_TFR_REG(SAI3_BASE_PTR,1)
#define SAI3_TFR2                                I2S_TFR_REG(SAI3_BASE_PTR,2)
#define SAI3_TFR3                                I2S_TFR_REG(SAI3_BASE_PTR,3)
#define SAI3_TMR                                 I2S_TMR_REG(SAI3_BASE_PTR)
#define SAI3_RCSR                                I2S_RCSR_REG(SAI3_BASE_PTR)
#define SAI3_RCR1                                I2S_RCR1_REG(SAI3_BASE_PTR)
#define SAI3_RCR2                                I2S_RCR2_REG(SAI3_BASE_PTR)
#define SAI3_RCR3                                I2S_RCR3_REG(SAI3_BASE_PTR)
#define SAI3_RCR4                                I2S_RCR4_REG(SAI3_BASE_PTR)
#define SAI3_RCR5                                I2S_RCR5_REG(SAI3_BASE_PTR)
#define SAI3_RDR0                                I2S_RDR_REG(SAI3_BASE_PTR,0)
#define SAI3_RDR1                                I2S_RDR_REG(SAI3_BASE_PTR,1)
#define SAI3_RDR2                                I2S_RDR_REG(SAI3_BASE_PTR,2)
#define SAI3_RDR3                                I2S_RDR_REG(SAI3_BASE_PTR,3)
#define SAI3_RFR0                                I2S_RFR_REG(SAI3_BASE_PTR,0)
#define SAI3_RFR1                                I2S_RFR_REG(SAI3_BASE_PTR,1)
#define SAI3_RFR2                                I2S_RFR_REG(SAI3_BASE_PTR,2)
#define SAI3_RFR3                                I2S_RFR_REG(SAI3_BASE_PTR,3)
#define SAI3_RMR                                 I2S_RMR_REG(SAI3_BASE_PTR)

/* I2S - Register array accessors */
#define SAI1_TDR(index)                          I2S_TDR_REG(SAI1_BASE_PTR,index)
#define SAI2_TDR(index)                          I2S_TDR_REG(SAI2_BASE_PTR,index)
#define SAI3_TDR(index)                          I2S_TDR_REG(SAI3_BASE_PTR,index)
#define SAI1_TFR(index)                          I2S_TFR_REG(SAI1_BASE_PTR,index)
#define SAI2_TFR(index)                          I2S_TFR_REG(SAI2_BASE_PTR,index)
#define SAI3_TFR(index)                          I2S_TFR_REG(SAI3_BASE_PTR,index)
#define SAI1_RDR(index)                          I2S_RDR_REG(SAI1_BASE_PTR,index)
#define SAI2_RDR(index)                          I2S_RDR_REG(SAI2_BASE_PTR,index)
#define SAI3_RDR(index)                          I2S_RDR_REG(SAI3_BASE_PTR,index)
#define SAI1_RFR(index)                          I2S_RFR_REG(SAI1_BASE_PTR,index)
#define SAI2_RFR(index)                          I2S_RFR_REG(SAI2_BASE_PTR,index)
#define SAI3_RFR(index)                          I2S_RFR_REG(SAI3_BASE_PTR,index)

/*!
 * @}
 */ /* end of group I2S_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group I2S_Peripheral */


/* ----------------------------------------------------------------------------
   -- IOMUXC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_Peripheral IOMUXC
 * @{
 */

/** IOMUXC - Peripheral register structure */
typedef struct IOMUXC_MemMap {
  uint8_t RESERVED_0[20];
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_00;             /**< SW_MUX_CTL_PAD_GPIO_EMC_00 SW MUX Control Register, offset: 0x14 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_01;             /**< SW_MUX_CTL_PAD_GPIO_EMC_01 SW MUX Control Register, offset: 0x18 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_02;             /**< SW_MUX_CTL_PAD_GPIO_EMC_02 SW MUX Control Register, offset: 0x1C */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_03;             /**< SW_MUX_CTL_PAD_GPIO_EMC_03 SW MUX Control Register, offset: 0x20 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_04;             /**< SW_MUX_CTL_PAD_GPIO_EMC_04 SW MUX Control Register, offset: 0x24 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_05;             /**< SW_MUX_CTL_PAD_GPIO_EMC_05 SW MUX Control Register, offset: 0x28 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_06;             /**< SW_MUX_CTL_PAD_GPIO_EMC_06 SW MUX Control Register, offset: 0x2C */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_07;             /**< SW_MUX_CTL_PAD_GPIO_EMC_07 SW MUX Control Register, offset: 0x30 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_08;             /**< SW_MUX_CTL_PAD_GPIO_EMC_08 SW MUX Control Register, offset: 0x34 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_09;             /**< SW_MUX_CTL_PAD_GPIO_EMC_09 SW MUX Control Register, offset: 0x38 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_10;             /**< SW_MUX_CTL_PAD_GPIO_EMC_10 SW MUX Control Register, offset: 0x3C */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_11;             /**< SW_MUX_CTL_PAD_GPIO_EMC_11 SW MUX Control Register, offset: 0x40 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_12;             /**< SW_MUX_CTL_PAD_GPIO_EMC_12 SW MUX Control Register, offset: 0x44 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_13;             /**< SW_MUX_CTL_PAD_GPIO_EMC_13 SW MUX Control Register, offset: 0x48 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_14;             /**< SW_MUX_CTL_PAD_GPIO_EMC_14 SW MUX Control Register, offset: 0x4C */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_15;             /**< SW_MUX_CTL_PAD_GPIO_EMC_15 SW MUX Control Register, offset: 0x50 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_16;             /**< SW_MUX_CTL_PAD_GPIO_EMC_16 SW MUX Control Register, offset: 0x54 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_17;             /**< SW_MUX_CTL_PAD_GPIO_EMC_17 SW MUX Control Register, offset: 0x58 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_18;             /**< SW_MUX_CTL_PAD_GPIO_EMC_18 SW MUX Control Register, offset: 0x5C */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_19;             /**< SW_MUX_CTL_PAD_GPIO_EMC_19 SW MUX Control Register, offset: 0x60 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_20;             /**< SW_MUX_CTL_PAD_GPIO_EMC_20 SW MUX Control Register, offset: 0x64 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_21;             /**< SW_MUX_CTL_PAD_GPIO_EMC_21 SW MUX Control Register, offset: 0x68 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_22;             /**< SW_MUX_CTL_PAD_GPIO_EMC_22 SW MUX Control Register, offset: 0x6C */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_23;             /**< SW_MUX_CTL_PAD_GPIO_EMC_23 SW MUX Control Register, offset: 0x70 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_24;             /**< SW_MUX_CTL_PAD_GPIO_EMC_24 SW MUX Control Register, offset: 0x74 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_25;             /**< SW_MUX_CTL_PAD_GPIO_EMC_25 SW MUX Control Register, offset: 0x78 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_26;             /**< SW_MUX_CTL_PAD_GPIO_EMC_26 SW MUX Control Register, offset: 0x7C */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_27;             /**< SW_MUX_CTL_PAD_GPIO_EMC_27 SW MUX Control Register, offset: 0x80 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_28;             /**< SW_MUX_CTL_PAD_GPIO_EMC_28 SW MUX Control Register, offset: 0x84 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_29;             /**< SW_MUX_CTL_PAD_GPIO_EMC_29 SW MUX Control Register, offset: 0x88 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_30;             /**< SW_MUX_CTL_PAD_GPIO_EMC_30 SW MUX Control Register, offset: 0x8C */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_31;             /**< SW_MUX_CTL_PAD_GPIO_EMC_31 SW MUX Control Register, offset: 0x90 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_32;             /**< SW_MUX_CTL_PAD_GPIO_EMC_32 SW MUX Control Register, offset: 0x94 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_33;             /**< SW_MUX_CTL_PAD_GPIO_EMC_33 SW MUX Control Register, offset: 0x98 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_34;             /**< SW_MUX_CTL_PAD_GPIO_EMC_34 SW MUX Control Register, offset: 0x9C */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_35;             /**< SW_MUX_CTL_PAD_GPIO_EMC_35 SW MUX Control Register, offset: 0xA0 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_36;             /**< SW_MUX_CTL_PAD_GPIO_EMC_36 SW MUX Control Register, offset: 0xA4 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_37;             /**< SW_MUX_CTL_PAD_GPIO_EMC_37 SW MUX Control Register, offset: 0xA8 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_38;             /**< SW_MUX_CTL_PAD_GPIO_EMC_38 SW MUX Control Register, offset: 0xAC */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_39;             /**< SW_MUX_CTL_PAD_GPIO_EMC_39 SW MUX Control Register, offset: 0xB0 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_40;             /**< SW_MUX_CTL_PAD_GPIO_EMC_40 SW MUX Control Register, offset: 0xB4 */
  uint32_t SW_MUX_CTL_PAD_GPIO_EMC_41;             /**< SW_MUX_CTL_PAD_GPIO_EMC_41 SW MUX Control Register, offset: 0xB8 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B0_00;           /**< SW_MUX_CTL_PAD_GPIO_AD_B0_00 SW MUX Control Register, offset: 0xBC */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B0_01;           /**< SW_MUX_CTL_PAD_GPIO_AD_B0_01 SW MUX Control Register, offset: 0xC0 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B0_02;           /**< SW_MUX_CTL_PAD_GPIO_AD_B0_02 SW MUX Control Register, offset: 0xC4 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B0_03;           /**< SW_MUX_CTL_PAD_GPIO_AD_B0_03 SW MUX Control Register, offset: 0xC8 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B0_04;           /**< SW_MUX_CTL_PAD_GPIO_AD_B0_04 SW MUX Control Register, offset: 0xCC */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B0_05;           /**< SW_MUX_CTL_PAD_GPIO_AD_B0_05 SW MUX Control Register, offset: 0xD0 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B0_06;           /**< SW_MUX_CTL_PAD_GPIO_AD_B0_06 SW MUX Control Register, offset: 0xD4 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B0_07;           /**< SW_MUX_CTL_PAD_GPIO_AD_B0_07 SW MUX Control Register, offset: 0xD8 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B0_08;           /**< SW_MUX_CTL_PAD_GPIO_AD_B0_08 SW MUX Control Register, offset: 0xDC */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B0_09;           /**< SW_MUX_CTL_PAD_GPIO_AD_B0_09 SW MUX Control Register, offset: 0xE0 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B0_10;           /**< SW_MUX_CTL_PAD_GPIO_AD_B0_10 SW MUX Control Register, offset: 0xE4 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B0_11;           /**< SW_MUX_CTL_PAD_GPIO_AD_B0_11 SW MUX Control Register, offset: 0xE8 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B0_12;           /**< SW_MUX_CTL_PAD_GPIO_AD_B0_12 SW MUX Control Register, offset: 0xEC */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B0_13;           /**< SW_MUX_CTL_PAD_GPIO_AD_B0_13 SW MUX Control Register, offset: 0xF0 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B0_14;           /**< SW_MUX_CTL_PAD_GPIO_AD_B0_14 SW MUX Control Register, offset: 0xF4 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B0_15;           /**< SW_MUX_CTL_PAD_GPIO_AD_B0_15 SW MUX Control Register, offset: 0xF8 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B1_00;           /**< SW_MUX_CTL_PAD_GPIO_AD_B1_00 SW MUX Control Register, offset: 0xFC */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B1_01;           /**< SW_MUX_CTL_PAD_GPIO_AD_B1_01 SW MUX Control Register, offset: 0x100 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B1_02;           /**< SW_MUX_CTL_PAD_GPIO_AD_B1_02 SW MUX Control Register, offset: 0x104 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B1_03;           /**< SW_MUX_CTL_PAD_GPIO_AD_B1_03 SW MUX Control Register, offset: 0x108 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B1_04;           /**< SW_MUX_CTL_PAD_GPIO_AD_B1_04 SW MUX Control Register, offset: 0x10C */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B1_05;           /**< SW_MUX_CTL_PAD_GPIO_AD_B1_05 SW MUX Control Register, offset: 0x110 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B1_06;           /**< SW_MUX_CTL_PAD_GPIO_AD_B1_06 SW MUX Control Register, offset: 0x114 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B1_07;           /**< SW_MUX_CTL_PAD_GPIO_AD_B1_07 SW MUX Control Register, offset: 0x118 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B1_08;           /**< SW_MUX_CTL_PAD_GPIO_AD_B1_08 SW MUX Control Register, offset: 0x11C */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B1_09;           /**< SW_MUX_CTL_PAD_GPIO_AD_B1_09 SW MUX Control Register, offset: 0x120 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B1_10;           /**< SW_MUX_CTL_PAD_GPIO_AD_B1_10 SW MUX Control Register, offset: 0x124 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B1_11;           /**< SW_MUX_CTL_PAD_GPIO_AD_B1_11 SW MUX Control Register, offset: 0x128 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B1_12;           /**< SW_MUX_CTL_PAD_GPIO_AD_B1_12 SW MUX Control Register, offset: 0x12C */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B1_13;           /**< SW_MUX_CTL_PAD_GPIO_AD_B1_13 SW MUX Control Register, offset: 0x130 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B1_14;           /**< SW_MUX_CTL_PAD_GPIO_AD_B1_14 SW MUX Control Register, offset: 0x134 */
  uint32_t SW_MUX_CTL_PAD_GPIO_AD_B1_15;           /**< SW_MUX_CTL_PAD_GPIO_AD_B1_15 SW MUX Control Register, offset: 0x138 */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B0_00;           /**< SW_MUX_CTL_PAD_GPIO_SD_B0_00 SW MUX Control Register, offset: 0x13C */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B0_01;           /**< SW_MUX_CTL_PAD_GPIO_SD_B0_01 SW MUX Control Register, offset: 0x140 */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B0_02;           /**< SW_MUX_CTL_PAD_GPIO_SD_B0_02 SW MUX Control Register, offset: 0x144 */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B0_03;           /**< SW_MUX_CTL_PAD_GPIO_SD_B0_03 SW MUX Control Register, offset: 0x148 */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B0_04;           /**< SW_MUX_CTL_PAD_GPIO_SD_B0_04 SW MUX Control Register, offset: 0x14C */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B0_05;           /**< SW_MUX_CTL_PAD_GPIO_SD_B0_05 SW MUX Control Register, offset: 0x150 */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B0_06;           /**< SW_MUX_CTL_PAD_GPIO_SD_B0_06 SW MUX Control Register, offset: 0x154 */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B1_00;           /**< SW_MUX_CTL_PAD_GPIO_SD_B1_00 SW MUX Control Register, offset: 0x158 */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B1_01;           /**< SW_MUX_CTL_PAD_GPIO_SD_B1_01 SW MUX Control Register, offset: 0x15C */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B1_02;           /**< SW_MUX_CTL_PAD_GPIO_SD_B1_02 SW MUX Control Register, offset: 0x160 */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B1_03;           /**< SW_MUX_CTL_PAD_GPIO_SD_B1_03 SW MUX Control Register, offset: 0x164 */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B1_04;           /**< SW_MUX_CTL_PAD_GPIO_SD_B1_04 SW MUX Control Register, offset: 0x168 */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B1_05;           /**< SW_MUX_CTL_PAD_GPIO_SD_B1_05 SW MUX Control Register, offset: 0x16C */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B1_06;           /**< SW_MUX_CTL_PAD_GPIO_SD_B1_06 SW MUX Control Register, offset: 0x170 */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B1_07;           /**< SW_MUX_CTL_PAD_GPIO_SD_B1_07 SW MUX Control Register, offset: 0x174 */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B1_08;           /**< SW_MUX_CTL_PAD_GPIO_SD_B1_08 SW MUX Control Register, offset: 0x178 */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B1_09;           /**< SW_MUX_CTL_PAD_GPIO_SD_B1_09 SW MUX Control Register, offset: 0x17C */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B1_10;           /**< SW_MUX_CTL_PAD_GPIO_SD_B1_10 SW MUX Control Register, offset: 0x180 */
  uint32_t SW_MUX_CTL_PAD_GPIO_SD_B1_11;           /**< SW_MUX_CTL_PAD_GPIO_SD_B1_11 SW MUX Control Register, offset: 0x184 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_00;             /**< SW_PAD_CTL_PAD_GPIO_EMC_00 SW PAD Control Register, offset: 0x188 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_01;             /**< SW_PAD_CTL_PAD_GPIO_EMC_01 SW PAD Control Register, offset: 0x18C */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_02;             /**< SW_PAD_CTL_PAD_GPIO_EMC_02 SW PAD Control Register, offset: 0x190 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_03;             /**< SW_PAD_CTL_PAD_GPIO_EMC_03 SW PAD Control Register, offset: 0x194 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_04;             /**< SW_PAD_CTL_PAD_GPIO_EMC_04 SW PAD Control Register, offset: 0x198 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_05;             /**< SW_PAD_CTL_PAD_GPIO_EMC_05 SW PAD Control Register, offset: 0x19C */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_06;             /**< SW_PAD_CTL_PAD_GPIO_EMC_06 SW PAD Control Register, offset: 0x1A0 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_07;             /**< SW_PAD_CTL_PAD_GPIO_EMC_07 SW PAD Control Register, offset: 0x1A4 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_08;             /**< SW_PAD_CTL_PAD_GPIO_EMC_08 SW PAD Control Register, offset: 0x1A8 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_09;             /**< SW_PAD_CTL_PAD_GPIO_EMC_09 SW PAD Control Register, offset: 0x1AC */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_10;             /**< SW_PAD_CTL_PAD_GPIO_EMC_10 SW PAD Control Register, offset: 0x1B0 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_11;             /**< SW_PAD_CTL_PAD_GPIO_EMC_11 SW PAD Control Register, offset: 0x1B4 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_12;             /**< SW_PAD_CTL_PAD_GPIO_EMC_12 SW PAD Control Register, offset: 0x1B8 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_13;             /**< SW_PAD_CTL_PAD_GPIO_EMC_13 SW PAD Control Register, offset: 0x1BC */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_14;             /**< SW_PAD_CTL_PAD_GPIO_EMC_14 SW PAD Control Register, offset: 0x1C0 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_15;             /**< SW_PAD_CTL_PAD_GPIO_EMC_15 SW PAD Control Register, offset: 0x1C4 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_16;             /**< SW_PAD_CTL_PAD_GPIO_EMC_16 SW PAD Control Register, offset: 0x1C8 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_17;             /**< SW_PAD_CTL_PAD_GPIO_EMC_17 SW PAD Control Register, offset: 0x1CC */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_18;             /**< SW_PAD_CTL_PAD_GPIO_EMC_18 SW PAD Control Register, offset: 0x1D0 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_19;             /**< SW_PAD_CTL_PAD_GPIO_EMC_19 SW PAD Control Register, offset: 0x1D4 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_20;             /**< SW_PAD_CTL_PAD_GPIO_EMC_20 SW PAD Control Register, offset: 0x1D8 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_21;             /**< SW_PAD_CTL_PAD_GPIO_EMC_21 SW PAD Control Register, offset: 0x1DC */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_22;             /**< SW_PAD_CTL_PAD_GPIO_EMC_22 SW PAD Control Register, offset: 0x1E0 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_23;             /**< SW_PAD_CTL_PAD_GPIO_EMC_23 SW PAD Control Register, offset: 0x1E4 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_24;             /**< SW_PAD_CTL_PAD_GPIO_EMC_24 SW PAD Control Register, offset: 0x1E8 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_25;             /**< SW_PAD_CTL_PAD_GPIO_EMC_25 SW PAD Control Register, offset: 0x1EC */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_26;             /**< SW_PAD_CTL_PAD_GPIO_EMC_26 SW PAD Control Register, offset: 0x1F0 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_27;             /**< SW_PAD_CTL_PAD_GPIO_EMC_27 SW PAD Control Register, offset: 0x1F4 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_28;             /**< SW_PAD_CTL_PAD_GPIO_EMC_28 SW PAD Control Register, offset: 0x1F8 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_29;             /**< SW_PAD_CTL_PAD_GPIO_EMC_29 SW PAD Control Register, offset: 0x1FC */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_30;             /**< SW_PAD_CTL_PAD_GPIO_EMC_30 SW PAD Control Register, offset: 0x200 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_31;             /**< SW_PAD_CTL_PAD_GPIO_EMC_31 SW PAD Control Register, offset: 0x204 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_32;             /**< SW_PAD_CTL_PAD_GPIO_EMC_32 SW PAD Control Register, offset: 0x208 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_33;             /**< SW_PAD_CTL_PAD_GPIO_EMC_33 SW PAD Control Register, offset: 0x20C */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_34;             /**< SW_PAD_CTL_PAD_GPIO_EMC_34 SW PAD Control Register, offset: 0x210 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_35;             /**< SW_PAD_CTL_PAD_GPIO_EMC_35 SW PAD Control Register, offset: 0x214 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_36;             /**< SW_PAD_CTL_PAD_GPIO_EMC_36 SW PAD Control Register, offset: 0x218 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_37;             /**< SW_PAD_CTL_PAD_GPIO_EMC_37 SW PAD Control Register, offset: 0x21C */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_38;             /**< SW_PAD_CTL_PAD_GPIO_EMC_38 SW PAD Control Register, offset: 0x220 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_39;             /**< SW_PAD_CTL_PAD_GPIO_EMC_39 SW PAD Control Register, offset: 0x224 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_40;             /**< SW_PAD_CTL_PAD_GPIO_EMC_40 SW PAD Control Register, offset: 0x228 */
  uint32_t SW_PAD_CTL_PAD_GPIO_EMC_41;             /**< SW_PAD_CTL_PAD_GPIO_EMC_41 SW PAD Control Register, offset: 0x22C */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B0_00;           /**< SW_PAD_CTL_PAD_GPIO_AD_B0_00 SW PAD Control Register, offset: 0x230 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B0_01;           /**< SW_PAD_CTL_PAD_GPIO_AD_B0_01 SW PAD Control Register, offset: 0x234 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B0_02;           /**< SW_PAD_CTL_PAD_GPIO_AD_B0_02 SW PAD Control Register, offset: 0x238 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B0_03;           /**< SW_PAD_CTL_PAD_GPIO_AD_B0_03 SW PAD Control Register, offset: 0x23C */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B0_04;           /**< SW_PAD_CTL_PAD_GPIO_AD_B0_04 SW PAD Control Register, offset: 0x240 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B0_05;           /**< SW_PAD_CTL_PAD_GPIO_AD_B0_05 SW PAD Control Register, offset: 0x244 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B0_06;           /**< SW_PAD_CTL_PAD_GPIO_AD_B0_06 SW PAD Control Register, offset: 0x248 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B0_07;           /**< SW_PAD_CTL_PAD_GPIO_AD_B0_07 SW PAD Control Register, offset: 0x24C */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B0_08;           /**< SW_PAD_CTL_PAD_GPIO_AD_B0_08 SW PAD Control Register, offset: 0x250 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B0_09;           /**< SW_PAD_CTL_PAD_GPIO_AD_B0_09 SW PAD Control Register, offset: 0x254 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B0_10;           /**< SW_PAD_CTL_PAD_GPIO_AD_B0_10 SW PAD Control Register, offset: 0x258 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B0_11;           /**< SW_PAD_CTL_PAD_GPIO_AD_B0_11 SW PAD Control Register, offset: 0x25C */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B0_12;           /**< SW_PAD_CTL_PAD_GPIO_AD_B0_12 SW PAD Control Register, offset: 0x260 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B0_13;           /**< SW_PAD_CTL_PAD_GPIO_AD_B0_13 SW PAD Control Register, offset: 0x264 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B0_14;           /**< SW_PAD_CTL_PAD_GPIO_AD_B0_14 SW PAD Control Register, offset: 0x268 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B0_15;           /**< SW_PAD_CTL_PAD_GPIO_AD_B0_15 SW PAD Control Register, offset: 0x26C */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B1_00;           /**< SW_PAD_CTL_PAD_GPIO_AD_B1_00 SW PAD Control Register, offset: 0x270 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B1_01;           /**< SW_PAD_CTL_PAD_GPIO_AD_B1_01 SW PAD Control Register, offset: 0x274 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B1_02;           /**< SW_PAD_CTL_PAD_GPIO_AD_B1_02 SW PAD Control Register, offset: 0x278 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B1_03;           /**< SW_PAD_CTL_PAD_GPIO_AD_B1_03 SW PAD Control Register, offset: 0x27C */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B1_04;           /**< SW_PAD_CTL_PAD_GPIO_AD_B1_04 SW PAD Control Register, offset: 0x280 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B1_05;           /**< SW_PAD_CTL_PAD_GPIO_AD_B1_05 SW PAD Control Register, offset: 0x284 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B1_06;           /**< SW_PAD_CTL_PAD_GPIO_AD_B1_06 SW PAD Control Register, offset: 0x288 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B1_07;           /**< SW_PAD_CTL_PAD_GPIO_AD_B1_07 SW PAD Control Register, offset: 0x28C */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B1_08;           /**< SW_PAD_CTL_PAD_GPIO_AD_B1_08 SW PAD Control Register, offset: 0x290 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B1_09;           /**< SW_PAD_CTL_PAD_GPIO_AD_B1_09 SW PAD Control Register, offset: 0x294 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B1_10;           /**< SW_PAD_CTL_PAD_GPIO_AD_B1_10 SW PAD Control Register, offset: 0x298 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B1_11;           /**< SW_PAD_CTL_PAD_GPIO_AD_B1_11 SW PAD Control Register, offset: 0x29C */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B1_12;           /**< SW_PAD_CTL_PAD_GPIO_AD_B1_12 SW PAD Control Register, offset: 0x2A0 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B1_13;           /**< SW_PAD_CTL_PAD_GPIO_AD_B1_13 SW PAD Control Register, offset: 0x2A4 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B1_14;           /**< SW_PAD_CTL_PAD_GPIO_AD_B1_14 SW PAD Control Register, offset: 0x2A8 */
  uint32_t SW_PAD_CTL_PAD_GPIO_AD_B1_15;           /**< SW_PAD_CTL_PAD_GPIO_AD_B1_15 SW PAD Control Register, offset: 0x2AC */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B0_00;           /**< SW_PAD_CTL_PAD_GPIO_SD_B0_00 SW PAD Control Register, offset: 0x2B0 */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B0_01;           /**< SW_PAD_CTL_PAD_GPIO_SD_B0_01 SW PAD Control Register, offset: 0x2B4 */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B0_02;           /**< SW_PAD_CTL_PAD_GPIO_SD_B0_02 SW PAD Control Register, offset: 0x2B8 */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B0_03;           /**< SW_PAD_CTL_PAD_GPIO_SD_B0_03 SW PAD Control Register, offset: 0x2BC */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B0_04;           /**< SW_PAD_CTL_PAD_GPIO_SD_B0_04 SW PAD Control Register, offset: 0x2C0 */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B0_05;           /**< SW_PAD_CTL_PAD_GPIO_SD_B0_05 SW PAD Control Register, offset: 0x2C4 */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B0_06;           /**< SW_PAD_CTL_PAD_GPIO_SD_B0_06 SW PAD Control Register, offset: 0x2C8 */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B1_00;           /**< SW_PAD_CTL_PAD_GPIO_SD_B1_00 SW PAD Control Register, offset: 0x2CC */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B1_01;           /**< SW_PAD_CTL_PAD_GPIO_SD_B1_01 SW PAD Control Register, offset: 0x2D0 */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B1_02;           /**< SW_PAD_CTL_PAD_GPIO_SD_B1_02 SW PAD Control Register, offset: 0x2D4 */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B1_03;           /**< SW_PAD_CTL_PAD_GPIO_SD_B1_03 SW PAD Control Register, offset: 0x2D8 */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B1_04;           /**< SW_PAD_CTL_PAD_GPIO_SD_B1_04 SW PAD Control Register, offset: 0x2DC */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B1_05;           /**< SW_PAD_CTL_PAD_GPIO_SD_B1_05 SW PAD Control Register, offset: 0x2E0 */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B1_06;           /**< SW_PAD_CTL_PAD_GPIO_SD_B1_06 SW PAD Control Register, offset: 0x2E4 */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B1_07;           /**< SW_PAD_CTL_PAD_GPIO_SD_B1_07 SW PAD Control Register, offset: 0x2E8 */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B1_08;           /**< SW_PAD_CTL_PAD_GPIO_SD_B1_08 SW PAD Control Register, offset: 0x2EC */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B1_09;           /**< SW_PAD_CTL_PAD_GPIO_SD_B1_09 SW PAD Control Register, offset: 0x2F0 */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B1_10;           /**< SW_PAD_CTL_PAD_GPIO_SD_B1_10 SW PAD Control Register, offset: 0x2F4 */
  uint32_t SW_PAD_CTL_PAD_GPIO_SD_B1_11;           /**< SW_PAD_CTL_PAD_GPIO_SD_B1_11 SW PAD Control Register, offset: 0x2F8 */
  uint32_t ANATOP_USB_OTG_ID_SELECT_INPUT;         /**< ANATOP_USB_OTG_ID_SELECT_INPUT DAISY Register, offset: 0x2FC */
  uint32_t CCM_PMIC_READY_SELECT_INPUT;            /**< CCM_PMIC_READY_SELECT_INPUT DAISY Register, offset: 0x300 */
  uint32_t ENET_RMII_SELECT_INPUT;                 /**< ENET_RMII_SELECT_INPUT DAISY Register, offset: 0x304 */
  uint32_t ENET_MDIO_SELECT_INPUT;                 /**< ENET_MDIO_SELECT_INPUT DAISY Register, offset: 0x308 */
  uint32_t ENET_RX_DATA0_SELECT_INPUT;             /**< ENET_RX_DATA0_SELECT_INPUT DAISY Register, offset: 0x30C */
  uint32_t ENET_RX_DATA1_SELECT_INPUT;             /**< ENET_RX_DATA1_SELECT_INPUT DAISY Register, offset: 0x310 */
  uint32_t ENET_RX_EN_SELECT_INPUT;                /**< ENET_RX_EN_SELECT_INPUT DAISY Register, offset: 0x314 */
  uint32_t ENET_RX_ERR_SELECT_INPUT;               /**< ENET_RX_ERR_SELECT_INPUT DAISY Register, offset: 0x318 */
  uint32_t ENET_TX_CLK_SELECT_INPUT;               /**< ENET_TX_CLK_SELECT_INPUT DAISY Register, offset: 0x31C */
  uint32_t FLEXCAN1_RX_SELECT_INPUT;               /**< FLEXCAN1_RX_SELECT_INPUT DAISY Register, offset: 0x320 */
  uint32_t FLEXCAN2_RX_SELECT_INPUT;               /**< FLEXCAN2_RX_SELECT_INPUT DAISY Register, offset: 0x324 */
  uint32_t FLEXPWM1_PWMA0_SELECT_INPUT;            /**< FLEXPWM1_PWMA0_SELECT_INPUT DAISY Register, offset: 0x328 */
  uint32_t FLEXPWM1_PWMA1_SELECT_INPUT;            /**< FLEXPWM1_PWMA1_SELECT_INPUT DAISY Register, offset: 0x32C */
  uint32_t FLEXPWM1_PWMA2_SELECT_INPUT;            /**< FLEXPWM1_PWMA2_SELECT_INPUT DAISY Register, offset: 0x330 */
  uint32_t FLEXPWM1_PWMA3_SELECT_INPUT;            /**< FLEXPWM1_PWMA3_SELECT_INPUT DAISY Register, offset: 0x334 */
  uint32_t FLEXPWM1_PWMB0_SELECT_INPUT;            /**< FLEXPWM1_PWMB0_SELECT_INPUT DAISY Register, offset: 0x338 */
  uint32_t FLEXPWM1_PWMB1_SELECT_INPUT;            /**< FLEXPWM1_PWMB1_SELECT_INPUT DAISY Register, offset: 0x33C */
  uint32_t FLEXPWM1_PWMB2_SELECT_INPUT;            /**< FLEXPWM1_PWMB2_SELECT_INPUT DAISY Register, offset: 0x340 */
  uint32_t FLEXPWM1_PWMB3_SELECT_INPUT;            /**< FLEXPWM1_PWMB3_SELECT_INPUT DAISY Register, offset: 0x344 */
  uint32_t FLEXPWM2_PWMA0_SELECT_INPUT;            /**< FLEXPWM2_PWMA0_SELECT_INPUT DAISY Register, offset: 0x348 */
  uint32_t FLEXPWM2_PWMA1_SELECT_INPUT;            /**< FLEXPWM2_PWMA1_SELECT_INPUT DAISY Register, offset: 0x34C */
  uint32_t FLEXPWM2_PWMA2_SELECT_INPUT;            /**< FLEXPWM2_PWMA2_SELECT_INPUT DAISY Register, offset: 0x350 */
  uint32_t FLEXPWM2_PWMA3_SELECT_INPUT;            /**< FLEXPWM2_PWMA3_SELECT_INPUT DAISY Register, offset: 0x354 */
  uint32_t FLEXPWM2_PWMB0_SELECT_INPUT;            /**< FLEXPWM2_PWMB0_SELECT_INPUT DAISY Register, offset: 0x358 */
  uint32_t FLEXPWM2_PWMB1_SELECT_INPUT;            /**< FLEXPWM2_PWMB1_SELECT_INPUT DAISY Register, offset: 0x35C */
  uint32_t FLEXPWM2_PWMB2_SELECT_INPUT;            /**< FLEXPWM2_PWMB2_SELECT_INPUT DAISY Register, offset: 0x360 */
  uint32_t FLEXPWM2_PWMB3_SELECT_INPUT;            /**< FLEXPWM2_PWMB3_SELECT_INPUT DAISY Register, offset: 0x364 */
  uint32_t FLEXSPI_A_DATA0_SELECT_INPUT;           /**< FLEXSPI_A_DATA0_SELECT_INPUT DAISY Register, offset: 0x368 */
  uint32_t FLEXSPI_A_DATA1_SELECT_INPUT;           /**< FLEXSPI_A_DATA1_SELECT_INPUT DAISY Register, offset: 0x36C */
  uint32_t FLEXSPI_A_DATA2_SELECT_INPUT;           /**< FLEXSPI_A_DATA2_SELECT_INPUT DAISY Register, offset: 0x370 */
  uint32_t FLEXSPI_A_DATA3_SELECT_INPUT;           /**< FLEXSPI_A_DATA3_SELECT_INPUT DAISY Register, offset: 0x374 */
  uint32_t FLEXSPI_A_SCLK_SELECT_INPUT;            /**< FLEXSPI_A_SCLK_SELECT_INPUT DAISY Register, offset: 0x378 */
  uint32_t LPI2C1_SCL_SELECT_INPUT;                /**< LPI2C1_SCL_SELECT_INPUT DAISY Register, offset: 0x37C */
  uint32_t LPI2C1_SDA_SELECT_INPUT;                /**< LPI2C1_SDA_SELECT_INPUT DAISY Register, offset: 0x380 */
  uint32_t LPI2C2_SCL_SELECT_INPUT;                /**< LPI2C2_SCL_SELECT_INPUT DAISY Register, offset: 0x384 */
  uint32_t LPI2C2_SDA_SELECT_INPUT;                /**< LPI2C2_SDA_SELECT_INPUT DAISY Register, offset: 0x388 */
  uint32_t LPI2C3_SCL_SELECT_INPUT;                /**< LPI2C3_SCL_SELECT_INPUT DAISY Register, offset: 0x38C */
  uint32_t LPI2C3_SDA_SELECT_INPUT;                /**< LPI2C3_SDA_SELECT_INPUT DAISY Register, offset: 0x390 */
  uint32_t LPI2C4_SCL_SELECT_INPUT;                /**< LPI2C4_SCL_SELECT_INPUT DAISY Register, offset: 0x394 */
  uint32_t LPI2C4_SDA_SELECT_INPUT;                /**< LPI2C4_SDA_SELECT_INPUT DAISY Register, offset: 0x398 */
  uint32_t LPSPI1_PCS0_SELECT_INPUT;               /**< LPSPI1_PCS0_SELECT_INPUT DAISY Register, offset: 0x39C */
  uint32_t LPSPI1_SCK_SELECT_INPUT;                /**< LPSPI1_SCK_SELECT_INPUT DAISY Register, offset: 0x3A0 */
  uint32_t LPSPI1_SDI_SELECT_INPUT;                /**< LPSPI1_SDI_SELECT_INPUT DAISY Register, offset: 0x3A4 */
  uint32_t LPSPI1_SDO_SELECT_INPUT;                /**< LPSPI1_SDO_SELECT_INPUT DAISY Register, offset: 0x3A8 */
  uint32_t LPSPI2_PCS0_SELECT_INPUT;               /**< LPSPI2_PCS0_SELECT_INPUT DAISY Register, offset: 0x3AC */
  uint32_t LPSPI2_SCK_SELECT_INPUT;                /**< LPSPI2_SCK_SELECT_INPUT DAISY Register, offset: 0x3B0 */
  uint32_t LPSPI2_SDI_SELECT_INPUT;                /**< LPSPI2_SDI_SELECT_INPUT DAISY Register, offset: 0x3B4 */
  uint32_t LPSPI2_SDO_SELECT_INPUT;                /**< LPSPI2_SDO_SELECT_INPUT DAISY Register, offset: 0x3B8 */
  uint32_t LPSPI4_PCS0_SELECT_INPUT;               /**< LPSPI4_PCS0_SELECT_INPUT DAISY Register, offset: 0x3BC */
  uint32_t LPSPI4_SCK_SELECT_INPUT;                /**< LPSPI4_SCK_SELECT_INPUT DAISY Register, offset: 0x3C0 */
  uint32_t LPSPI4_SDI_SELECT_INPUT;                /**< LPSPI4_SDI_SELECT_INPUT DAISY Register, offset: 0x3C4 */
  uint32_t LPSPI4_SDO_SELECT_INPUT;                /**< LPSPI4_SDO_SELECT_INPUT DAISY Register, offset: 0x3C8 */
  uint32_t LPUART2_CTS_B_SELECT_INPUT;             /**< LPUART2_CTS_B_SELECT_INPUT DAISY Register, offset: 0x3CC */
  uint32_t LPUART2_RX_SELECT_INPUT;                /**< LPUART2_RX_SELECT_INPUT DAISY Register, offset: 0x3D0 */
  uint32_t LPUART2_TX_SELECT_INPUT;                /**< LPUART2_TX_SELECT_INPUT DAISY Register, offset: 0x3D4 */
  uint32_t LPUART3_RX_SELECT_INPUT;                /**< LPUART3_RX_SELECT_INPUT DAISY Register, offset: 0x3D8 */
  uint32_t LPUART3_TX_SELECT_INPUT;                /**< LPUART3_TX_SELECT_INPUT DAISY Register, offset: 0x3DC */
  uint32_t LPUART4_CTS_B_SELECT_INPUT;             /**< LPUART4_CTS_B_SELECT_INPUT DAISY Register, offset: 0x3E0 */
  uint32_t LPUART4_RX_SELECT_INPUT;                /**< LPUART4_RX_SELECT_INPUT DAISY Register, offset: 0x3E4 */
  uint32_t LPUART4_TX_SELECT_INPUT;                /**< LPUART4_TX_SELECT_INPUT DAISY Register, offset: 0x3E8 */
  uint32_t LPUART5_RX_SELECT_INPUT;                /**< LPUART5_RX_SELECT_INPUT DAISY Register, offset: 0x3EC */
  uint32_t LPUART5_TX_SELECT_INPUT;                /**< LPUART5_TX_SELECT_INPUT DAISY Register, offset: 0x3F0 */
  uint32_t LPUART6_RX_SELECT_INPUT;                /**< LPUART6_RX_SELECT_INPUT DAISY Register, offset: 0x3F4 */
  uint32_t LPUART6_TX_SELECT_INPUT;                /**< LPUART6_TX_SELECT_INPUT DAISY Register, offset: 0x3F8 */
  uint32_t LPUART7_RX_SELECT_INPUT;                /**< LPUART7_RX_SELECT_INPUT DAISY Register, offset: 0x3FC */
  uint32_t LPUART7_TX_SELECT_INPUT;                /**< LPUART7_TX_SELECT_INPUT DAISY Register, offset: 0x400 */
  uint32_t LPUART8_RX_SELECT_INPUT;                /**< LPUART8_RX_SELECT_INPUT DAISY Register, offset: 0x404 */
  uint32_t LPUART8_TX_SELECT_INPUT;                /**< LPUART8_TX_SELECT_INPUT DAISY Register, offset: 0x408 */
  uint32_t NMI_SELECT_INPUT;                       /**< NMI_SELECT_INPUT DAISY Register, offset: 0x40C */
  uint32_t QTIMER1_TIMER0_INPUT_SELECT_INPUT;      /**< QTIMER1_TIMER0_INPUT_SELECT_INPUT DAISY Register, offset: 0x410 */
  uint32_t QTIMER1_TIMER1_INPUT_SELECT_INPUT;      /**< QTIMER1_TIMER1_INPUT_SELECT_INPUT DAISY Register, offset: 0x414 */
  uint32_t QTIMER1_TIMER2_INPUT_SELECT_INPUT;      /**< QTIMER1_TIMER2_INPUT_SELECT_INPUT DAISY Register, offset: 0x418 */
  uint32_t QTIMER1_TIMER3_INPUT_SELECT_INPUT;      /**< QTIMER1_TIMER3_INPUT_SELECT_INPUT DAISY Register, offset: 0x41C */
  uint32_t QTIMER2_TIMER0_INPUT_SELECT_INPUT;      /**< QTIMER2_TIMER0_INPUT_SELECT_INPUT DAISY Register, offset: 0x420 */
  uint32_t QTIMER2_TIMER1_INPUT_SELECT_INPUT;      /**< QTIMER2_TIMER1_INPUT_SELECT_INPUT DAISY Register, offset: 0x424 */
  uint32_t QTIMER2_TIMER2_INPUT_SELECT_INPUT;      /**< QTIMER2_TIMER2_INPUT_SELECT_INPUT DAISY Register, offset: 0x428 */
  uint32_t QTIMER2_TIMER3_INPUT_SELECT_INPUT;      /**< QTIMER2_TIMER3_INPUT_SELECT_INPUT DAISY Register, offset: 0x42C */
  uint32_t SAI1_MCLK_SELECT_INPUT;                 /**< SAI1_MCLK_SELECT_INPUT DAISY Register, offset: 0x430 */
  uint32_t SAI1_RX_BCLK_SELECT_INPUT;              /**< SAI1_RX_BCLK_SELECT_INPUT DAISY Register, offset: 0x434 */
  uint32_t SAI1_RX_DATA0_SELECT_INPUT;             /**< SAI1_RX_DATA0_SELECT_INPUT DAISY Register, offset: 0x438 */
  uint32_t SAI1_RX_DATA1_SELECT_INPUT;             /**< SAI1_RX_DATA1_SELECT_INPUT DAISY Register, offset: 0x43C */
  uint32_t SAI1_RX_DATA2_SELECT_INPUT;             /**< SAI1_RX_DATA2_SELECT_INPUT DAISY Register, offset: 0x440 */
  uint32_t SAI1_RX_DATA3_SELECT_INPUT;             /**< SAI1_RX_DATA3_SELECT_INPUT DAISY Register, offset: 0x444 */
  uint32_t SAI1_RX_SYNC_SELECT_INPUT;              /**< SAI1_RX_SYNC_SELECT_INPUT DAISY Register, offset: 0x448 */
  uint32_t SAI1_TX_BCLK_SELECT_INPUT;              /**< SAI1_TX_BCLK_SELECT_INPUT DAISY Register, offset: 0x44C */
  uint32_t SAI1_TX_SYNC_SELECT_INPUT;              /**< SAI1_TX_SYNC_SELECT_INPUT DAISY Register, offset: 0x450 */
  uint32_t SAI2_MCLK_SELECT_INPUT;                 /**< SAI2_MCLK_SELECT_INPUT DAISY Register, offset: 0x454 */
  uint32_t SAI2_RX_BCLK_SELECT_INPUT;              /**< SAI2_RX_BCLK_SELECT_INPUT DAISY Register, offset: 0x458 */
  uint32_t SAI2_RX_DATA0_SELECT_INPUT;             /**< SAI2_RX_DATA0_SELECT_INPUT DAISY Register, offset: 0x45C */
  uint32_t SAI2_RX_SYNC_SELECT_INPUT;              /**< SAI2_RX_SYNC_SELECT_INPUT DAISY Register, offset: 0x460 */
  uint32_t SAI2_TX_BCLK_SELECT_INPUT;              /**< SAI2_TX_BCLK_SELECT_INPUT DAISY Register, offset: 0x464 */
  uint32_t SAI2_TX_SYNC_SELECT_INPUT;              /**< SAI2_TX_SYNC_SELECT_INPUT DAISY Register, offset: 0x468 */
  uint32_t SAI3_MCLK_SELECT_INPUT;                 /**< SAI3_MCLK_SELECT_INPUT DAISY Register, offset: 0x46C */
  uint32_t SAI3_RX_BCLK_SELECT_INPUT;              /**< SAI3_RX_BCLK_SELECT_INPUT DAISY Register, offset: 0x470 */
  uint32_t SAI3_RX_DATA0_SELECT_INPUT;             /**< SAI3_RX_DATA0_SELECT_INPUT DAISY Register, offset: 0x474 */
  uint32_t SAI3_RX_SYNC_SELECT_INPUT;              /**< SAI3_RX_SYNC_SELECT_INPUT DAISY Register, offset: 0x478 */
  uint32_t SAI3_TX_BCLK_SELECT_INPUT;              /**< SAI3_TX_BCLK_SELECT_INPUT DAISY Register, offset: 0x47C */
  uint32_t SAI3_TX_SYNC_SELECT_INPUT;              /**< SAI3_TX_SYNC_SELECT_INPUT DAISY Register, offset: 0x480 */
  uint32_t SEMC_READY_SELECT_INPUT;                /**< SEMC_READY_SELECT_INPUT DAISY Register, offset: 0x484 */
  uint32_t SPDIF_IN_SELECT_INPUT;                  /**< SPDIF_IN_SELECT_INPUT DAISY Register, offset: 0x488 */
  uint32_t USB_OTG_OC_SELECT_INPUT;                /**< USB_OTG_OC_SELECT_INPUT DAISY Register, offset: 0x48C */
  uint32_t USDHC1_CD_B_SELECT_INPUT;               /**< USDHC1_CD_B_SELECT_INPUT DAISY Register, offset: 0x490 */
  uint32_t USDHC1_WP_SELECT_INPUT;                 /**< USDHC1_WP_SELECT_INPUT DAISY Register, offset: 0x494 */
  uint32_t USDHC2_CD_B_SELECT_INPUT;               /**< USDHC2_CD_B_SELECT_INPUT DAISY Register, offset: 0x498 */
  uint32_t USDHC2_WP_SELECT_INPUT;                 /**< USDHC2_WP_SELECT_INPUT DAISY Register, offset: 0x49C */
  uint32_t XBAR1_IN14_SELECT_INPUT;                /**< XBAR1_IN14_SELECT_INPUT DAISY Register, offset: 0x4A0 */
  uint32_t XBAR1_IN15_SELECT_INPUT;                /**< XBAR1_IN15_SELECT_INPUT DAISY Register, offset: 0x4A4 */
  uint32_t XBAR1_IN16_SELECT_INPUT;                /**< XBAR1_IN16_SELECT_INPUT DAISY Register, offset: 0x4A8 */
  uint32_t XBAR1_IN17_SELECT_INPUT;                /**< XBAR1_IN17_SELECT_INPUT DAISY Register, offset: 0x4AC */
  uint32_t XBAR1_IN10_SELECT_INPUT;                /**< XBAR1_IN10_SELECT_INPUT DAISY Register, offset: 0x4B0 */
  uint32_t XBAR1_IN12_SELECT_INPUT;                /**< XBAR1_IN12_SELECT_INPUT DAISY Register, offset: 0x4B4 */
  uint32_t XBAR1_IN13_SELECT_INPUT;                /**< XBAR1_IN13_SELECT_INPUT DAISY Register, offset: 0x4B8 */
  uint32_t XBAR1_IN18_SELECT_INPUT;                /**< XBAR1_IN18_SELECT_INPUT DAISY Register, offset: 0x4BC */
  uint32_t XBAR1_IN19_SELECT_INPUT;                /**< XBAR1_IN19_SELECT_INPUT DAISY Register, offset: 0x4C0 */
} volatile *IOMUXC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- IOMUXC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_Register_Accessor_Macros IOMUXC - Register accessor macros
 * @{
 */


/* IOMUXC - Register accessors */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_00_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_00)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_01_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_01)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_02_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_02)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_03_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_03)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_04_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_04)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_05_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_05)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_06_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_06)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_07_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_07)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_08_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_08)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_09_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_09)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_10_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_10)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_11_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_11)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_12_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_12)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_13_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_13)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_14_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_14)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_15_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_15)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_16_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_16)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_17_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_17)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_18_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_18)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_19_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_19)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_20_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_20)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_21_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_21)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_22)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_23)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_24)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_25)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_26)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_27)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_28)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_29)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_30_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_30)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_31_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_31)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_32_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_32)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_33_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_33)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_34_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_34)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_35_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_35)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_36_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_36)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_37_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_37)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_38_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_38)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_39_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_39)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_40)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_41_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_EMC_41)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_00_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B0_00)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_01_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B0_01)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B0_02)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_03_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B0_03)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_04_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B0_04)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_05_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B0_05)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_06_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B0_06)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_07_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B0_07)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_08_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B0_08)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_09_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B0_09)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_10_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B0_10)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_11_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B0_11)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_12_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B0_12)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_13_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B0_13)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_14_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B0_14)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_15_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B0_15)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_00_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B1_00)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_01_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B1_01)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_02_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B1_02)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_03_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B1_03)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_04_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B1_04)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_05_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B1_05)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_06_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B1_06)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_07_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B1_07)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_08_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B1_08)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_09_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B1_09)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_10_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B1_10)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_11_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B1_11)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_12_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B1_12)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_13_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B1_13)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_14_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B1_14)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_15_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_AD_B1_15)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B0_00)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B0_01)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B0_02)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B0_03)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B0_04)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B0_05)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_06_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B0_06)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_00_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B1_00)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_01_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B1_01)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B1_02)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_03_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B1_03)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_04_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B1_04)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_05_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B1_05)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_06_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B1_06)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_07_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B1_07)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_08_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B1_08)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_09_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B1_09)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_10_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B1_10)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_11_REG(base) ((base)->SW_MUX_CTL_PAD_GPIO_SD_B1_11)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_00)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_01)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_02)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_03)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_04)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_05)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_06)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_07)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_08)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_09)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_10)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_11)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_12)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_13)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_14)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_15)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_16)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_17)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_18)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_19)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_20)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_21)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_22)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_23)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_24)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_25)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_26)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_27)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_28)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_29)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_30)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_31)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_32)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_33)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_34)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_35)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_36)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_37)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_38)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_39)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_40)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_EMC_41)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B0_00)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B0_01)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B0_02)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B0_03)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B0_04)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B0_05)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B0_06)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B0_07)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B0_08)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B0_09)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B0_10)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B0_11)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B0_12)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B0_13)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B0_14)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B0_15)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B1_00)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B1_01)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B1_02)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B1_03)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B1_04)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B1_05)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B1_06)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B1_07)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B1_08)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B1_09)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B1_10)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B1_11)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B1_12)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B1_13)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B1_14)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_AD_B1_15)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B0_00)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B0_01)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B0_02)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B0_03)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B0_04)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B0_05)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B0_06)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B1_00)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B1_01)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B1_02)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B1_03)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B1_04)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B1_05)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B1_06)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B1_07)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B1_08)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B1_09)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B1_10)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_REG(base) ((base)->SW_PAD_CTL_PAD_GPIO_SD_B1_11)
#define IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_REG(base) ((base)->ANATOP_USB_OTG_ID_SELECT_INPUT)
#define IOMUXC_CCM_PMIC_READY_SELECT_INPUT_REG(base) ((base)->CCM_PMIC_READY_SELECT_INPUT)
#define IOMUXC_ENET_RMII_SELECT_INPUT_REG(base)  ((base)->ENET_RMII_SELECT_INPUT)
#define IOMUXC_ENET_MDIO_SELECT_INPUT_REG(base)  ((base)->ENET_MDIO_SELECT_INPUT)
#define IOMUXC_ENET_RX_DATA0_SELECT_INPUT_REG(base) ((base)->ENET_RX_DATA0_SELECT_INPUT)
#define IOMUXC_ENET_RX_DATA1_SELECT_INPUT_REG(base) ((base)->ENET_RX_DATA1_SELECT_INPUT)
#define IOMUXC_ENET_RX_EN_SELECT_INPUT_REG(base) ((base)->ENET_RX_EN_SELECT_INPUT)
#define IOMUXC_ENET_RX_ERR_SELECT_INPUT_REG(base) ((base)->ENET_RX_ERR_SELECT_INPUT)
#define IOMUXC_ENET_TX_CLK_SELECT_INPUT_REG(base) ((base)->ENET_TX_CLK_SELECT_INPUT)
#define IOMUXC_FLEXCAN1_RX_SELECT_INPUT_REG(base) ((base)->FLEXCAN1_RX_SELECT_INPUT)
#define IOMUXC_FLEXCAN2_RX_SELECT_INPUT_REG(base) ((base)->FLEXCAN2_RX_SELECT_INPUT)
#define IOMUXC_FLEXPWM1_PWMA0_SELECT_INPUT_REG(base) ((base)->FLEXPWM1_PWMA0_SELECT_INPUT)
#define IOMUXC_FLEXPWM1_PWMA1_SELECT_INPUT_REG(base) ((base)->FLEXPWM1_PWMA1_SELECT_INPUT)
#define IOMUXC_FLEXPWM1_PWMA2_SELECT_INPUT_REG(base) ((base)->FLEXPWM1_PWMA2_SELECT_INPUT)
#define IOMUXC_FLEXPWM1_PWMA3_SELECT_INPUT_REG(base) ((base)->FLEXPWM1_PWMA3_SELECT_INPUT)
#define IOMUXC_FLEXPWM1_PWMB0_SELECT_INPUT_REG(base) ((base)->FLEXPWM1_PWMB0_SELECT_INPUT)
#define IOMUXC_FLEXPWM1_PWMB1_SELECT_INPUT_REG(base) ((base)->FLEXPWM1_PWMB1_SELECT_INPUT)
#define IOMUXC_FLEXPWM1_PWMB2_SELECT_INPUT_REG(base) ((base)->FLEXPWM1_PWMB2_SELECT_INPUT)
#define IOMUXC_FLEXPWM1_PWMB3_SELECT_INPUT_REG(base) ((base)->FLEXPWM1_PWMB3_SELECT_INPUT)
#define IOMUXC_FLEXPWM2_PWMA0_SELECT_INPUT_REG(base) ((base)->FLEXPWM2_PWMA0_SELECT_INPUT)
#define IOMUXC_FLEXPWM2_PWMA1_SELECT_INPUT_REG(base) ((base)->FLEXPWM2_PWMA1_SELECT_INPUT)
#define IOMUXC_FLEXPWM2_PWMA2_SELECT_INPUT_REG(base) ((base)->FLEXPWM2_PWMA2_SELECT_INPUT)
#define IOMUXC_FLEXPWM2_PWMA3_SELECT_INPUT_REG(base) ((base)->FLEXPWM2_PWMA3_SELECT_INPUT)
#define IOMUXC_FLEXPWM2_PWMB0_SELECT_INPUT_REG(base) ((base)->FLEXPWM2_PWMB0_SELECT_INPUT)
#define IOMUXC_FLEXPWM2_PWMB1_SELECT_INPUT_REG(base) ((base)->FLEXPWM2_PWMB1_SELECT_INPUT)
#define IOMUXC_FLEXPWM2_PWMB2_SELECT_INPUT_REG(base) ((base)->FLEXPWM2_PWMB2_SELECT_INPUT)
#define IOMUXC_FLEXPWM2_PWMB3_SELECT_INPUT_REG(base) ((base)->FLEXPWM2_PWMB3_SELECT_INPUT)
#define IOMUXC_FLEXSPI_A_DATA0_SELECT_INPUT_REG(base) ((base)->FLEXSPI_A_DATA0_SELECT_INPUT)
#define IOMUXC_FLEXSPI_A_DATA1_SELECT_INPUT_REG(base) ((base)->FLEXSPI_A_DATA1_SELECT_INPUT)
#define IOMUXC_FLEXSPI_A_DATA2_SELECT_INPUT_REG(base) ((base)->FLEXSPI_A_DATA2_SELECT_INPUT)
#define IOMUXC_FLEXSPI_A_DATA3_SELECT_INPUT_REG(base) ((base)->FLEXSPI_A_DATA3_SELECT_INPUT)
#define IOMUXC_FLEXSPI_A_SCLK_SELECT_INPUT_REG(base) ((base)->FLEXSPI_A_SCLK_SELECT_INPUT)
#define IOMUXC_LPI2C1_SCL_SELECT_INPUT_REG(base) ((base)->LPI2C1_SCL_SELECT_INPUT)
#define IOMUXC_LPI2C1_SDA_SELECT_INPUT_REG(base) ((base)->LPI2C1_SDA_SELECT_INPUT)
#define IOMUXC_LPI2C2_SCL_SELECT_INPUT_REG(base) ((base)->LPI2C2_SCL_SELECT_INPUT)
#define IOMUXC_LPI2C2_SDA_SELECT_INPUT_REG(base) ((base)->LPI2C2_SDA_SELECT_INPUT)
#define IOMUXC_LPI2C3_SCL_SELECT_INPUT_REG(base) ((base)->LPI2C3_SCL_SELECT_INPUT)
#define IOMUXC_LPI2C3_SDA_SELECT_INPUT_REG(base) ((base)->LPI2C3_SDA_SELECT_INPUT)
#define IOMUXC_LPI2C4_SCL_SELECT_INPUT_REG(base) ((base)->LPI2C4_SCL_SELECT_INPUT)
#define IOMUXC_LPI2C4_SDA_SELECT_INPUT_REG(base) ((base)->LPI2C4_SDA_SELECT_INPUT)
#define IOMUXC_LPSPI1_PCS0_SELECT_INPUT_REG(base) ((base)->LPSPI1_PCS0_SELECT_INPUT)
#define IOMUXC_LPSPI1_SCK_SELECT_INPUT_REG(base) ((base)->LPSPI1_SCK_SELECT_INPUT)
#define IOMUXC_LPSPI1_SDI_SELECT_INPUT_REG(base) ((base)->LPSPI1_SDI_SELECT_INPUT)
#define IOMUXC_LPSPI1_SDO_SELECT_INPUT_REG(base) ((base)->LPSPI1_SDO_SELECT_INPUT)
#define IOMUXC_LPSPI2_PCS0_SELECT_INPUT_REG(base) ((base)->LPSPI2_PCS0_SELECT_INPUT)
#define IOMUXC_LPSPI2_SCK_SELECT_INPUT_REG(base) ((base)->LPSPI2_SCK_SELECT_INPUT)
#define IOMUXC_LPSPI2_SDI_SELECT_INPUT_REG(base) ((base)->LPSPI2_SDI_SELECT_INPUT)
#define IOMUXC_LPSPI2_SDO_SELECT_INPUT_REG(base) ((base)->LPSPI2_SDO_SELECT_INPUT)
#define IOMUXC_LPSPI4_PCS0_SELECT_INPUT_REG(base) ((base)->LPSPI4_PCS0_SELECT_INPUT)
#define IOMUXC_LPSPI4_SCK_SELECT_INPUT_REG(base) ((base)->LPSPI4_SCK_SELECT_INPUT)
#define IOMUXC_LPSPI4_SDI_SELECT_INPUT_REG(base) ((base)->LPSPI4_SDI_SELECT_INPUT)
#define IOMUXC_LPSPI4_SDO_SELECT_INPUT_REG(base) ((base)->LPSPI4_SDO_SELECT_INPUT)
#define IOMUXC_LPUART2_CTS_B_SELECT_INPUT_REG(base) ((base)->LPUART2_CTS_B_SELECT_INPUT)
#define IOMUXC_LPUART2_RX_SELECT_INPUT_REG(base) ((base)->LPUART2_RX_SELECT_INPUT)
#define IOMUXC_LPUART2_TX_SELECT_INPUT_REG(base) ((base)->LPUART2_TX_SELECT_INPUT)
#define IOMUXC_LPUART3_RX_SELECT_INPUT_REG(base) ((base)->LPUART3_RX_SELECT_INPUT)
#define IOMUXC_LPUART3_TX_SELECT_INPUT_REG(base) ((base)->LPUART3_TX_SELECT_INPUT)
#define IOMUXC_LPUART4_CTS_B_SELECT_INPUT_REG(base) ((base)->LPUART4_CTS_B_SELECT_INPUT)
#define IOMUXC_LPUART4_RX_SELECT_INPUT_REG(base) ((base)->LPUART4_RX_SELECT_INPUT)
#define IOMUXC_LPUART4_TX_SELECT_INPUT_REG(base) ((base)->LPUART4_TX_SELECT_INPUT)
#define IOMUXC_LPUART5_RX_SELECT_INPUT_REG(base) ((base)->LPUART5_RX_SELECT_INPUT)
#define IOMUXC_LPUART5_TX_SELECT_INPUT_REG(base) ((base)->LPUART5_TX_SELECT_INPUT)
#define IOMUXC_LPUART6_RX_SELECT_INPUT_REG(base) ((base)->LPUART6_RX_SELECT_INPUT)
#define IOMUXC_LPUART6_TX_SELECT_INPUT_REG(base) ((base)->LPUART6_TX_SELECT_INPUT)
#define IOMUXC_LPUART7_RX_SELECT_INPUT_REG(base) ((base)->LPUART7_RX_SELECT_INPUT)
#define IOMUXC_LPUART7_TX_SELECT_INPUT_REG(base) ((base)->LPUART7_TX_SELECT_INPUT)
#define IOMUXC_LPUART8_RX_SELECT_INPUT_REG(base) ((base)->LPUART8_RX_SELECT_INPUT)
#define IOMUXC_LPUART8_TX_SELECT_INPUT_REG(base) ((base)->LPUART8_TX_SELECT_INPUT)
#define IOMUXC_NMI_SELECT_INPUT_REG(base)        ((base)->NMI_SELECT_INPUT)
#define IOMUXC_QTIMER1_TIMER0_INPUT_SELECT_INPUT_REG(base) ((base)->QTIMER1_TIMER0_INPUT_SELECT_INPUT)
#define IOMUXC_QTIMER1_TIMER1_INPUT_SELECT_INPUT_REG(base) ((base)->QTIMER1_TIMER1_INPUT_SELECT_INPUT)
#define IOMUXC_QTIMER1_TIMER2_INPUT_SELECT_INPUT_REG(base) ((base)->QTIMER1_TIMER2_INPUT_SELECT_INPUT)
#define IOMUXC_QTIMER1_TIMER3_INPUT_SELECT_INPUT_REG(base) ((base)->QTIMER1_TIMER3_INPUT_SELECT_INPUT)
#define IOMUXC_QTIMER2_TIMER0_INPUT_SELECT_INPUT_REG(base) ((base)->QTIMER2_TIMER0_INPUT_SELECT_INPUT)
#define IOMUXC_QTIMER2_TIMER1_INPUT_SELECT_INPUT_REG(base) ((base)->QTIMER2_TIMER1_INPUT_SELECT_INPUT)
#define IOMUXC_QTIMER2_TIMER2_INPUT_SELECT_INPUT_REG(base) ((base)->QTIMER2_TIMER2_INPUT_SELECT_INPUT)
#define IOMUXC_QTIMER2_TIMER3_INPUT_SELECT_INPUT_REG(base) ((base)->QTIMER2_TIMER3_INPUT_SELECT_INPUT)
#define IOMUXC_SAI1_MCLK_SELECT_INPUT_REG(base)  ((base)->SAI1_MCLK_SELECT_INPUT)
#define IOMUXC_SAI1_RX_BCLK_SELECT_INPUT_REG(base) ((base)->SAI1_RX_BCLK_SELECT_INPUT)
#define IOMUXC_SAI1_RX_DATA0_SELECT_INPUT_REG(base) ((base)->SAI1_RX_DATA0_SELECT_INPUT)
#define IOMUXC_SAI1_RX_DATA1_SELECT_INPUT_REG(base) ((base)->SAI1_RX_DATA1_SELECT_INPUT)
#define IOMUXC_SAI1_RX_DATA2_SELECT_INPUT_REG(base) ((base)->SAI1_RX_DATA2_SELECT_INPUT)
#define IOMUXC_SAI1_RX_DATA3_SELECT_INPUT_REG(base) ((base)->SAI1_RX_DATA3_SELECT_INPUT)
#define IOMUXC_SAI1_RX_SYNC_SELECT_INPUT_REG(base) ((base)->SAI1_RX_SYNC_SELECT_INPUT)
#define IOMUXC_SAI1_TX_BCLK_SELECT_INPUT_REG(base) ((base)->SAI1_TX_BCLK_SELECT_INPUT)
#define IOMUXC_SAI1_TX_SYNC_SELECT_INPUT_REG(base) ((base)->SAI1_TX_SYNC_SELECT_INPUT)
#define IOMUXC_SAI2_MCLK_SELECT_INPUT_REG(base)  ((base)->SAI2_MCLK_SELECT_INPUT)
#define IOMUXC_SAI2_RX_BCLK_SELECT_INPUT_REG(base) ((base)->SAI2_RX_BCLK_SELECT_INPUT)
#define IOMUXC_SAI2_RX_DATA0_SELECT_INPUT_REG(base) ((base)->SAI2_RX_DATA0_SELECT_INPUT)
#define IOMUXC_SAI2_RX_SYNC_SELECT_INPUT_REG(base) ((base)->SAI2_RX_SYNC_SELECT_INPUT)
#define IOMUXC_SAI2_TX_BCLK_SELECT_INPUT_REG(base) ((base)->SAI2_TX_BCLK_SELECT_INPUT)
#define IOMUXC_SAI2_TX_SYNC_SELECT_INPUT_REG(base) ((base)->SAI2_TX_SYNC_SELECT_INPUT)
#define IOMUXC_SAI3_MCLK_SELECT_INPUT_REG(base)  ((base)->SAI3_MCLK_SELECT_INPUT)
#define IOMUXC_SAI3_RX_BCLK_SELECT_INPUT_REG(base) ((base)->SAI3_RX_BCLK_SELECT_INPUT)
#define IOMUXC_SAI3_RX_DATA0_SELECT_INPUT_REG(base) ((base)->SAI3_RX_DATA0_SELECT_INPUT)
#define IOMUXC_SAI3_RX_SYNC_SELECT_INPUT_REG(base) ((base)->SAI3_RX_SYNC_SELECT_INPUT)
#define IOMUXC_SAI3_TX_BCLK_SELECT_INPUT_REG(base) ((base)->SAI3_TX_BCLK_SELECT_INPUT)
#define IOMUXC_SAI3_TX_SYNC_SELECT_INPUT_REG(base) ((base)->SAI3_TX_SYNC_SELECT_INPUT)
#define IOMUXC_SEMC_READY_SELECT_INPUT_REG(base) ((base)->SEMC_READY_SELECT_INPUT)
#define IOMUXC_SPDIF_IN_SELECT_INPUT_REG(base)   ((base)->SPDIF_IN_SELECT_INPUT)
#define IOMUXC_USB_OTG_OC_SELECT_INPUT_REG(base) ((base)->USB_OTG_OC_SELECT_INPUT)
#define IOMUXC_USDHC1_CD_B_SELECT_INPUT_REG(base) ((base)->USDHC1_CD_B_SELECT_INPUT)
#define IOMUXC_USDHC1_WP_SELECT_INPUT_REG(base)  ((base)->USDHC1_WP_SELECT_INPUT)
#define IOMUXC_USDHC2_CD_B_SELECT_INPUT_REG(base) ((base)->USDHC2_CD_B_SELECT_INPUT)
#define IOMUXC_USDHC2_WP_SELECT_INPUT_REG(base)  ((base)->USDHC2_WP_SELECT_INPUT)
#define IOMUXC_XBAR1_IN14_SELECT_INPUT_REG(base) ((base)->XBAR1_IN14_SELECT_INPUT)
#define IOMUXC_XBAR1_IN15_SELECT_INPUT_REG(base) ((base)->XBAR1_IN15_SELECT_INPUT)
#define IOMUXC_XBAR1_IN16_SELECT_INPUT_REG(base) ((base)->XBAR1_IN16_SELECT_INPUT)
#define IOMUXC_XBAR1_IN17_SELECT_INPUT_REG(base) ((base)->XBAR1_IN17_SELECT_INPUT)
#define IOMUXC_XBAR1_IN10_SELECT_INPUT_REG(base) ((base)->XBAR1_IN10_SELECT_INPUT)
#define IOMUXC_XBAR1_IN12_SELECT_INPUT_REG(base) ((base)->XBAR1_IN12_SELECT_INPUT)
#define IOMUXC_XBAR1_IN13_SELECT_INPUT_REG(base) ((base)->XBAR1_IN13_SELECT_INPUT)
#define IOMUXC_XBAR1_IN18_SELECT_INPUT_REG(base) ((base)->XBAR1_IN18_SELECT_INPUT)
#define IOMUXC_XBAR1_IN19_SELECT_INPUT_REG(base) ((base)->XBAR1_IN19_SELECT_INPUT)

/*!
 * @}
 */ /* end of group IOMUXC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- IOMUXC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_Register_Masks IOMUXC Register Masks
 * @{
 */

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_00 - SW_MUX_CTL_PAD_GPIO_EMC_00 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_00_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_00_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_00_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_00_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_00_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_00_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_00_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_01 - SW_MUX_CTL_PAD_GPIO_EMC_01 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_01_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_01_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_01_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_01_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_01_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_01_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_01_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_02 - SW_MUX_CTL_PAD_GPIO_EMC_02 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_02_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_02_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_02_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_02_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_02_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_02_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_02_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_03 - SW_MUX_CTL_PAD_GPIO_EMC_03 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_03_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_03_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_03_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_03_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_03_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_03_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_03_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_04 - SW_MUX_CTL_PAD_GPIO_EMC_04 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_04_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_04_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_04_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_04_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_04_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_04_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_04_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_05 - SW_MUX_CTL_PAD_GPIO_EMC_05 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_05_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_05_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_05_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_05_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_05_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_05_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_05_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_06 - SW_MUX_CTL_PAD_GPIO_EMC_06 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_06_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_06_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_06_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_06_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_06_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_06_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_06_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_07 - SW_MUX_CTL_PAD_GPIO_EMC_07 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_07_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_07_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_07_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_07_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_07_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_07_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_07_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_08 - SW_MUX_CTL_PAD_GPIO_EMC_08 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_08_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_08_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_08_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_08_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_08_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_08_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_08_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_09 - SW_MUX_CTL_PAD_GPIO_EMC_09 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_09_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_09_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_09_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_09_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_09_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_09_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_09_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_10 - SW_MUX_CTL_PAD_GPIO_EMC_10 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_10_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_10_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_10_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_10_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_10_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_10_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_10_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_11 - SW_MUX_CTL_PAD_GPIO_EMC_11 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_11_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_11_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_11_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_11_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_11_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_11_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_11_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_12 - SW_MUX_CTL_PAD_GPIO_EMC_12 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_12_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_12_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_12_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_12_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_12_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_12_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_12_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_13 - SW_MUX_CTL_PAD_GPIO_EMC_13 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_13_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_13_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_13_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_13_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_13_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_13_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_13_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_14 - SW_MUX_CTL_PAD_GPIO_EMC_14 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_14_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_14_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_14_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_14_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_14_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_14_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_14_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_15 - SW_MUX_CTL_PAD_GPIO_EMC_15 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_15_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_15_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_15_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_15_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_15_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_15_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_15_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_16 - SW_MUX_CTL_PAD_GPIO_EMC_16 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_16_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_16_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_16_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_16_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_16_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_16_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_16_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_17 - SW_MUX_CTL_PAD_GPIO_EMC_17 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_17_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_17_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_17_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_17_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_17_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_17_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_17_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_18 - SW_MUX_CTL_PAD_GPIO_EMC_18 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_18_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_18_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_18_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_18_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_18_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_18_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_18_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_19 - SW_MUX_CTL_PAD_GPIO_EMC_19 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_19_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_19_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_19_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_19_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_19_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_19_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_19_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_20 - SW_MUX_CTL_PAD_GPIO_EMC_20 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_20_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_20_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_20_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_20_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_20_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_20_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_20_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_21 - SW_MUX_CTL_PAD_GPIO_EMC_21 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_21_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_21_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_21_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_21_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_21_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_21_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_21_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_22 - SW_MUX_CTL_PAD_GPIO_EMC_22 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_23 - SW_MUX_CTL_PAD_GPIO_EMC_23 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_24 - SW_MUX_CTL_PAD_GPIO_EMC_24 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_25 - SW_MUX_CTL_PAD_GPIO_EMC_25 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_26 - SW_MUX_CTL_PAD_GPIO_EMC_26 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_27 - SW_MUX_CTL_PAD_GPIO_EMC_27 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_28 - SW_MUX_CTL_PAD_GPIO_EMC_28 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_29 - SW_MUX_CTL_PAD_GPIO_EMC_29 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_30 - SW_MUX_CTL_PAD_GPIO_EMC_30 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_30_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_30_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_30_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_30_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_30_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_30_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_30_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_31 - SW_MUX_CTL_PAD_GPIO_EMC_31 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_31_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_31_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_31_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_31_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_31_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_31_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_31_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_32 - SW_MUX_CTL_PAD_GPIO_EMC_32 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_32_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_32_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_32_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_32_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_32_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_32_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_32_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_33 - SW_MUX_CTL_PAD_GPIO_EMC_33 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_33_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_33_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_33_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_33_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_33_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_33_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_33_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_34 - SW_MUX_CTL_PAD_GPIO_EMC_34 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_34_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_34_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_34_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_34_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_34_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_34_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_34_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_35 - SW_MUX_CTL_PAD_GPIO_EMC_35 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_35_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_35_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_35_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_35_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_35_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_35_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_35_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_36 - SW_MUX_CTL_PAD_GPIO_EMC_36 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_36_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_36_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_36_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_36_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_36_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_36_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_36_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_37 - SW_MUX_CTL_PAD_GPIO_EMC_37 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_37_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_37_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_37_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_37_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_37_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_37_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_37_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_38 - SW_MUX_CTL_PAD_GPIO_EMC_38 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_38_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_38_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_38_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_38_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_38_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_38_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_38_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_39 - SW_MUX_CTL_PAD_GPIO_EMC_39 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_39_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_39_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_39_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_39_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_39_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_39_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_39_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_40 - SW_MUX_CTL_PAD_GPIO_EMC_40 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_EMC_41 - SW_MUX_CTL_PAD_GPIO_EMC_41 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_41_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_41_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_41_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_41_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_41_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_41_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_41_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B0_00 - SW_MUX_CTL_PAD_GPIO_AD_B0_00 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_00_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_00_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_00_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_00_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_00_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_00_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_00_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B0_01 - SW_MUX_CTL_PAD_GPIO_AD_B0_01 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_01_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_01_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_01_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_01_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_01_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_01_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_01_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B0_02 - SW_MUX_CTL_PAD_GPIO_AD_B0_02 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B0_03 - SW_MUX_CTL_PAD_GPIO_AD_B0_03 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_03_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_03_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_03_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_03_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_03_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_03_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_03_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B0_04 - SW_MUX_CTL_PAD_GPIO_AD_B0_04 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_04_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_04_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_04_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_04_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_04_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_04_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_04_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B0_05 - SW_MUX_CTL_PAD_GPIO_AD_B0_05 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_05_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_05_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_05_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_05_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_05_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_05_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_05_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B0_06 - SW_MUX_CTL_PAD_GPIO_AD_B0_06 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_06_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_06_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_06_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_06_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_06_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_06_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_06_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B0_07 - SW_MUX_CTL_PAD_GPIO_AD_B0_07 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_07_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_07_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_07_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_07_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_07_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_07_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_07_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B0_08 - SW_MUX_CTL_PAD_GPIO_AD_B0_08 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_08_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_08_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_08_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_08_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_08_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_08_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_08_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B0_09 - SW_MUX_CTL_PAD_GPIO_AD_B0_09 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_09_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_09_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_09_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_09_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_09_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_09_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_09_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B0_10 - SW_MUX_CTL_PAD_GPIO_AD_B0_10 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_10_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_10_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_10_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_10_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_10_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_10_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_10_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B0_11 - SW_MUX_CTL_PAD_GPIO_AD_B0_11 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_11_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_11_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_11_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_11_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_11_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_11_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_11_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B0_12 - SW_MUX_CTL_PAD_GPIO_AD_B0_12 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_12_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_12_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_12_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_12_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_12_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_12_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_12_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B0_13 - SW_MUX_CTL_PAD_GPIO_AD_B0_13 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_13_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_13_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_13_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_13_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_13_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_13_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_13_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B0_14 - SW_MUX_CTL_PAD_GPIO_AD_B0_14 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_14_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_14_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_14_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_14_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_14_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_14_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_14_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B0_15 - SW_MUX_CTL_PAD_GPIO_AD_B0_15 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_15_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_15_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_15_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_15_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_15_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_15_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_15_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B1_00 - SW_MUX_CTL_PAD_GPIO_AD_B1_00 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_00_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_00_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_00_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_00_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_00_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_00_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_00_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B1_01 - SW_MUX_CTL_PAD_GPIO_AD_B1_01 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_01_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_01_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_01_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_01_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_01_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_01_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_01_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B1_02 - SW_MUX_CTL_PAD_GPIO_AD_B1_02 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_02_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_02_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_02_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_02_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_02_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_02_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_02_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B1_03 - SW_MUX_CTL_PAD_GPIO_AD_B1_03 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_03_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_03_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_03_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_03_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_03_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_03_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_03_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B1_04 - SW_MUX_CTL_PAD_GPIO_AD_B1_04 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_04_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_04_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_04_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_04_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_04_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_04_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_04_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B1_05 - SW_MUX_CTL_PAD_GPIO_AD_B1_05 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_05_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_05_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_05_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_05_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_05_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_05_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_05_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B1_06 - SW_MUX_CTL_PAD_GPIO_AD_B1_06 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_06_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_06_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_06_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_06_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_06_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_06_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_06_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B1_07 - SW_MUX_CTL_PAD_GPIO_AD_B1_07 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_07_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_07_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_07_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_07_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_07_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_07_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_07_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B1_08 - SW_MUX_CTL_PAD_GPIO_AD_B1_08 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_08_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_08_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_08_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_08_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_08_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_08_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_08_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B1_09 - SW_MUX_CTL_PAD_GPIO_AD_B1_09 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_09_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_09_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_09_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_09_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_09_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_09_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_09_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B1_10 - SW_MUX_CTL_PAD_GPIO_AD_B1_10 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_10_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_10_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_10_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_10_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_10_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_10_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_10_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B1_11 - SW_MUX_CTL_PAD_GPIO_AD_B1_11 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_11_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_11_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_11_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_11_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_11_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_11_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_11_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B1_12 - SW_MUX_CTL_PAD_GPIO_AD_B1_12 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_12_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_12_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_12_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_12_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_12_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_12_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_12_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B1_13 - SW_MUX_CTL_PAD_GPIO_AD_B1_13 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_13_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_13_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_13_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_13_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_13_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_13_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_13_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B1_14 - SW_MUX_CTL_PAD_GPIO_AD_B1_14 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_14_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_14_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_14_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_14_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_14_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_14_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_14_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_AD_B1_15 - SW_MUX_CTL_PAD_GPIO_AD_B1_15 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_15_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_15_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_15_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_15_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_15_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_15_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_15_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B0_00 - SW_MUX_CTL_PAD_GPIO_SD_B0_00 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B0_01 - SW_MUX_CTL_PAD_GPIO_SD_B0_01 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B0_02 - SW_MUX_CTL_PAD_GPIO_SD_B0_02 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B0_03 - SW_MUX_CTL_PAD_GPIO_SD_B0_03 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B0_04 - SW_MUX_CTL_PAD_GPIO_SD_B0_04 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B0_05 - SW_MUX_CTL_PAD_GPIO_SD_B0_05 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B0_06 - SW_MUX_CTL_PAD_GPIO_SD_B0_06 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_06_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_06_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_06_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_06_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_06_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_06_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_06_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B1_00 - SW_MUX_CTL_PAD_GPIO_SD_B1_00 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_00_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_00_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_00_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_00_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_00_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_00_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_00_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B1_01 - SW_MUX_CTL_PAD_GPIO_SD_B1_01 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_01_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_01_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_01_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_01_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_01_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_01_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_01_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B1_02 - SW_MUX_CTL_PAD_GPIO_SD_B1_02 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B1_03 - SW_MUX_CTL_PAD_GPIO_SD_B1_03 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_03_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_03_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_03_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_03_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_03_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_03_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_03_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B1_04 - SW_MUX_CTL_PAD_GPIO_SD_B1_04 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_04_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_04_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_04_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_04_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_04_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_04_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_04_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B1_05 - SW_MUX_CTL_PAD_GPIO_SD_B1_05 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_05_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_05_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_05_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_05_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_05_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_05_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_05_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B1_06 - SW_MUX_CTL_PAD_GPIO_SD_B1_06 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_06_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_06_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_06_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_06_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_06_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_06_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_06_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B1_07 - SW_MUX_CTL_PAD_GPIO_SD_B1_07 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_07_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_07_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_07_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_07_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_07_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_07_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_07_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B1_08 - SW_MUX_CTL_PAD_GPIO_SD_B1_08 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_08_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_08_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_08_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_08_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_08_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_08_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_08_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B1_09 - SW_MUX_CTL_PAD_GPIO_SD_B1_09 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_09_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_09_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_09_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_09_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_09_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_09_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_09_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B1_10 - SW_MUX_CTL_PAD_GPIO_SD_B1_10 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_10_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_10_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_10_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_10_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_10_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_10_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_10_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_GPIO_SD_B1_11 - SW_MUX_CTL_PAD_GPIO_SD_B1_11 SW MUX Control Register */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_11_MUX_MODE_MASK (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_11_MUX_MODE_SHIFT (0U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_11_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_11_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_11_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_11_SION_MASK (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_11_SION_SHIFT (4U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_00 - SW_PAD_CTL_PAD_GPIO_EMC_00 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_01 - SW_PAD_CTL_PAD_GPIO_EMC_01 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_02 - SW_PAD_CTL_PAD_GPIO_EMC_02 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_03 - SW_PAD_CTL_PAD_GPIO_EMC_03 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_04 - SW_PAD_CTL_PAD_GPIO_EMC_04 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_05 - SW_PAD_CTL_PAD_GPIO_EMC_05 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_06 - SW_PAD_CTL_PAD_GPIO_EMC_06 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_07 - SW_PAD_CTL_PAD_GPIO_EMC_07 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_08 - SW_PAD_CTL_PAD_GPIO_EMC_08 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_09 - SW_PAD_CTL_PAD_GPIO_EMC_09 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_10 - SW_PAD_CTL_PAD_GPIO_EMC_10 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_11 - SW_PAD_CTL_PAD_GPIO_EMC_11 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_12 - SW_PAD_CTL_PAD_GPIO_EMC_12 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_13 - SW_PAD_CTL_PAD_GPIO_EMC_13 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_14 - SW_PAD_CTL_PAD_GPIO_EMC_14 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_15 - SW_PAD_CTL_PAD_GPIO_EMC_15 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_16 - SW_PAD_CTL_PAD_GPIO_EMC_16 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_17 - SW_PAD_CTL_PAD_GPIO_EMC_17 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_18 - SW_PAD_CTL_PAD_GPIO_EMC_18 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_19 - SW_PAD_CTL_PAD_GPIO_EMC_19 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_20 - SW_PAD_CTL_PAD_GPIO_EMC_20 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_21 - SW_PAD_CTL_PAD_GPIO_EMC_21 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_22 - SW_PAD_CTL_PAD_GPIO_EMC_22 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_23 - SW_PAD_CTL_PAD_GPIO_EMC_23 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_24 - SW_PAD_CTL_PAD_GPIO_EMC_24 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_25 - SW_PAD_CTL_PAD_GPIO_EMC_25 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_26 - SW_PAD_CTL_PAD_GPIO_EMC_26 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_27 - SW_PAD_CTL_PAD_GPIO_EMC_27 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_28 - SW_PAD_CTL_PAD_GPIO_EMC_28 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_29 - SW_PAD_CTL_PAD_GPIO_EMC_29 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_30 - SW_PAD_CTL_PAD_GPIO_EMC_30 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_31 - SW_PAD_CTL_PAD_GPIO_EMC_31 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_32 - SW_PAD_CTL_PAD_GPIO_EMC_32 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_33 - SW_PAD_CTL_PAD_GPIO_EMC_33 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_34 - SW_PAD_CTL_PAD_GPIO_EMC_34 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_35 - SW_PAD_CTL_PAD_GPIO_EMC_35 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_36 - SW_PAD_CTL_PAD_GPIO_EMC_36 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_37 - SW_PAD_CTL_PAD_GPIO_EMC_37 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_38 - SW_PAD_CTL_PAD_GPIO_EMC_38 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_39 - SW_PAD_CTL_PAD_GPIO_EMC_39 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_40 - SW_PAD_CTL_PAD_GPIO_EMC_40 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_EMC_41 - SW_PAD_CTL_PAD_GPIO_EMC_41 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B0_00 - SW_PAD_CTL_PAD_GPIO_AD_B0_00 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B0_01 - SW_PAD_CTL_PAD_GPIO_AD_B0_01 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B0_02 - SW_PAD_CTL_PAD_GPIO_AD_B0_02 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B0_03 - SW_PAD_CTL_PAD_GPIO_AD_B0_03 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B0_04 - SW_PAD_CTL_PAD_GPIO_AD_B0_04 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B0_05 - SW_PAD_CTL_PAD_GPIO_AD_B0_05 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B0_06 - SW_PAD_CTL_PAD_GPIO_AD_B0_06 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B0_07 - SW_PAD_CTL_PAD_GPIO_AD_B0_07 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B0_08 - SW_PAD_CTL_PAD_GPIO_AD_B0_08 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B0_09 - SW_PAD_CTL_PAD_GPIO_AD_B0_09 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B0_10 - SW_PAD_CTL_PAD_GPIO_AD_B0_10 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B0_11 - SW_PAD_CTL_PAD_GPIO_AD_B0_11 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B0_12 - SW_PAD_CTL_PAD_GPIO_AD_B0_12 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B0_13 - SW_PAD_CTL_PAD_GPIO_AD_B0_13 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B0_14 - SW_PAD_CTL_PAD_GPIO_AD_B0_14 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B0_15 - SW_PAD_CTL_PAD_GPIO_AD_B0_15 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B1_00 - SW_PAD_CTL_PAD_GPIO_AD_B1_00 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B1_01 - SW_PAD_CTL_PAD_GPIO_AD_B1_01 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B1_02 - SW_PAD_CTL_PAD_GPIO_AD_B1_02 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B1_03 - SW_PAD_CTL_PAD_GPIO_AD_B1_03 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B1_04 - SW_PAD_CTL_PAD_GPIO_AD_B1_04 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B1_05 - SW_PAD_CTL_PAD_GPIO_AD_B1_05 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B1_06 - SW_PAD_CTL_PAD_GPIO_AD_B1_06 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B1_07 - SW_PAD_CTL_PAD_GPIO_AD_B1_07 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B1_08 - SW_PAD_CTL_PAD_GPIO_AD_B1_08 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B1_09 - SW_PAD_CTL_PAD_GPIO_AD_B1_09 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B1_10 - SW_PAD_CTL_PAD_GPIO_AD_B1_10 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B1_11 - SW_PAD_CTL_PAD_GPIO_AD_B1_11 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B1_12 - SW_PAD_CTL_PAD_GPIO_AD_B1_12 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B1_13 - SW_PAD_CTL_PAD_GPIO_AD_B1_13 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B1_14 - SW_PAD_CTL_PAD_GPIO_AD_B1_14 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_AD_B1_15 - SW_PAD_CTL_PAD_GPIO_AD_B1_15 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B0_00 - SW_PAD_CTL_PAD_GPIO_SD_B0_00 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B0_01 - SW_PAD_CTL_PAD_GPIO_SD_B0_01 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B0_02 - SW_PAD_CTL_PAD_GPIO_SD_B0_02 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B0_03 - SW_PAD_CTL_PAD_GPIO_SD_B0_03 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B0_04 - SW_PAD_CTL_PAD_GPIO_SD_B0_04 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B0_05 - SW_PAD_CTL_PAD_GPIO_SD_B0_05 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B0_06 - SW_PAD_CTL_PAD_GPIO_SD_B0_06 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B1_00 - SW_PAD_CTL_PAD_GPIO_SD_B1_00 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B1_01 - SW_PAD_CTL_PAD_GPIO_SD_B1_01 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B1_02 - SW_PAD_CTL_PAD_GPIO_SD_B1_02 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B1_03 - SW_PAD_CTL_PAD_GPIO_SD_B1_03 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B1_04 - SW_PAD_CTL_PAD_GPIO_SD_B1_04 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B1_05 - SW_PAD_CTL_PAD_GPIO_SD_B1_05 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B1_06 - SW_PAD_CTL_PAD_GPIO_SD_B1_06 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B1_07 - SW_PAD_CTL_PAD_GPIO_SD_B1_07 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B1_08 - SW_PAD_CTL_PAD_GPIO_SD_B1_08 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B1_09 - SW_PAD_CTL_PAD_GPIO_SD_B1_09 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B1_10 - SW_PAD_CTL_PAD_GPIO_SD_B1_10 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_GPIO_SD_B1_11 - SW_PAD_CTL_PAD_GPIO_SD_B1_11 SW PAD Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_SRE_MASK (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_SRE_SHIFT (0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_DSE_MASK (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_DSE_SHIFT (3U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_SPEED_MASK (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_SPEED_SHIFT (6U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_SPEED_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_SPEED_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_ODE_MASK (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_ODE_SHIFT (11U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_PKE_MASK (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_PKE_SHIFT (12U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_PUE_MASK (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_PUE_SHIFT (13U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_PUS_MASK (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_PUS_SHIFT (14U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_PUS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_PUS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_HYS_MASK (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_HYS_SHIFT (16U)

/*! @name ANATOP_USB_OTG_ID_SELECT_INPUT - ANATOP_USB_OTG_ID_SELECT_INPUT DAISY Register */
#define IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_DAISY(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_DAISY_MASK)

/*! @name CCM_PMIC_READY_SELECT_INPUT - CCM_PMIC_READY_SELECT_INPUT DAISY Register */
#define IOMUXC_CCM_PMIC_READY_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_CCM_PMIC_READY_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_CCM_PMIC_READY_SELECT_INPUT_DAISY(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_CCM_PMIC_READY_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_CCM_PMIC_READY_SELECT_INPUT_DAISY_MASK)

/*! @name ENET_RMII_SELECT_INPUT - ENET_RMII_SELECT_INPUT DAISY Register */
#define IOMUXC_ENET_RMII_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_ENET_RMII_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name ENET_MDIO_SELECT_INPUT - ENET_MDIO_SELECT_INPUT DAISY Register */
#define IOMUXC_ENET_MDIO_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_ENET_MDIO_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_ENET_MDIO_SELECT_INPUT_DAISY(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_ENET_MDIO_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_ENET_MDIO_SELECT_INPUT_DAISY_MASK)

/*! @name ENET_RX_DATA0_SELECT_INPUT - ENET_RX_DATA0_SELECT_INPUT DAISY Register */
#define IOMUXC_ENET_RX_DATA0_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_ENET_RX_DATA0_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name ENET_RX_DATA1_SELECT_INPUT - ENET_RX_DATA1_SELECT_INPUT DAISY Register */
#define IOMUXC_ENET_RX_DATA1_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_ENET_RX_DATA1_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name ENET_RX_EN_SELECT_INPUT - ENET_RX_EN_SELECT_INPUT DAISY Register */
#define IOMUXC_ENET_RX_EN_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_ENET_RX_EN_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name ENET_RX_ERR_SELECT_INPUT - ENET_RX_ERR_SELECT_INPUT DAISY Register */
#define IOMUXC_ENET_RX_ERR_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_ENET_RX_ERR_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name ENET_TX_CLK_SELECT_INPUT - ENET_TX_CLK_SELECT_INPUT DAISY Register */
#define IOMUXC_ENET_TX_CLK_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_ENET_TX_CLK_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXCAN1_RX_SELECT_INPUT - FLEXCAN1_RX_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXCAN1_RX_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_FLEXCAN1_RX_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_FLEXCAN1_RX_SELECT_INPUT_DAISY(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_FLEXCAN1_RX_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_FLEXCAN1_RX_SELECT_INPUT_DAISY_MASK)

/*! @name FLEXCAN2_RX_SELECT_INPUT - FLEXCAN2_RX_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXCAN2_RX_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_FLEXCAN2_RX_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_FLEXCAN2_RX_SELECT_INPUT_DAISY(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_FLEXCAN2_RX_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_FLEXCAN2_RX_SELECT_INPUT_DAISY_MASK)

/*! @name FLEXPWM1_PWMA0_SELECT_INPUT - FLEXPWM1_PWMA0_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXPWM1_PWMA0_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXPWM1_PWMA0_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXPWM1_PWMA1_SELECT_INPUT - FLEXPWM1_PWMA1_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXPWM1_PWMA1_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXPWM1_PWMA1_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXPWM1_PWMA2_SELECT_INPUT - FLEXPWM1_PWMA2_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXPWM1_PWMA2_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXPWM1_PWMA2_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXPWM1_PWMA3_SELECT_INPUT - FLEXPWM1_PWMA3_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXPWM1_PWMA3_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXPWM1_PWMA3_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXPWM1_PWMB0_SELECT_INPUT - FLEXPWM1_PWMB0_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXPWM1_PWMB0_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXPWM1_PWMB0_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXPWM1_PWMB1_SELECT_INPUT - FLEXPWM1_PWMB1_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXPWM1_PWMB1_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXPWM1_PWMB1_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXPWM1_PWMB2_SELECT_INPUT - FLEXPWM1_PWMB2_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXPWM1_PWMB2_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXPWM1_PWMB2_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXPWM1_PWMB3_SELECT_INPUT - FLEXPWM1_PWMB3_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXPWM1_PWMB3_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXPWM1_PWMB3_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXPWM2_PWMA0_SELECT_INPUT - FLEXPWM2_PWMA0_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXPWM2_PWMA0_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXPWM2_PWMA0_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXPWM2_PWMA1_SELECT_INPUT - FLEXPWM2_PWMA1_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXPWM2_PWMA1_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXPWM2_PWMA1_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXPWM2_PWMA2_SELECT_INPUT - FLEXPWM2_PWMA2_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXPWM2_PWMA2_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXPWM2_PWMA2_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXPWM2_PWMA3_SELECT_INPUT - FLEXPWM2_PWMA3_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXPWM2_PWMA3_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXPWM2_PWMA3_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXPWM2_PWMB0_SELECT_INPUT - FLEXPWM2_PWMB0_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXPWM2_PWMB0_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXPWM2_PWMB0_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXPWM2_PWMB1_SELECT_INPUT - FLEXPWM2_PWMB1_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXPWM2_PWMB1_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXPWM2_PWMB1_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXPWM2_PWMB2_SELECT_INPUT - FLEXPWM2_PWMB2_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXPWM2_PWMB2_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXPWM2_PWMB2_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXPWM2_PWMB3_SELECT_INPUT - FLEXPWM2_PWMB3_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXPWM2_PWMB3_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXPWM2_PWMB3_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXSPI_A_DATA0_SELECT_INPUT - FLEXSPI_A_DATA0_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXSPI_A_DATA0_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXSPI_A_DATA0_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXSPI_A_DATA1_SELECT_INPUT - FLEXSPI_A_DATA1_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXSPI_A_DATA1_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXSPI_A_DATA1_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXSPI_A_DATA2_SELECT_INPUT - FLEXSPI_A_DATA2_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXSPI_A_DATA2_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXSPI_A_DATA2_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXSPI_A_DATA3_SELECT_INPUT - FLEXSPI_A_DATA3_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXSPI_A_DATA3_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXSPI_A_DATA3_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name FLEXSPI_A_SCLK_SELECT_INPUT - FLEXSPI_A_SCLK_SELECT_INPUT DAISY Register */
#define IOMUXC_FLEXSPI_A_SCLK_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_FLEXSPI_A_SCLK_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPI2C1_SCL_SELECT_INPUT - LPI2C1_SCL_SELECT_INPUT DAISY Register */
#define IOMUXC_LPI2C1_SCL_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPI2C1_SCL_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPI2C1_SDA_SELECT_INPUT - LPI2C1_SDA_SELECT_INPUT DAISY Register */
#define IOMUXC_LPI2C1_SDA_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPI2C1_SDA_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPI2C2_SCL_SELECT_INPUT - LPI2C2_SCL_SELECT_INPUT DAISY Register */
#define IOMUXC_LPI2C2_SCL_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPI2C2_SCL_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPI2C2_SDA_SELECT_INPUT - LPI2C2_SDA_SELECT_INPUT DAISY Register */
#define IOMUXC_LPI2C2_SDA_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPI2C2_SDA_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPI2C3_SCL_SELECT_INPUT - LPI2C3_SCL_SELECT_INPUT DAISY Register */
#define IOMUXC_LPI2C3_SCL_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPI2C3_SCL_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPI2C3_SDA_SELECT_INPUT - LPI2C3_SDA_SELECT_INPUT DAISY Register */
#define IOMUXC_LPI2C3_SDA_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPI2C3_SDA_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPI2C4_SCL_SELECT_INPUT - LPI2C4_SCL_SELECT_INPUT DAISY Register */
#define IOMUXC_LPI2C4_SCL_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPI2C4_SCL_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPI2C4_SDA_SELECT_INPUT - LPI2C4_SDA_SELECT_INPUT DAISY Register */
#define IOMUXC_LPI2C4_SDA_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPI2C4_SDA_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPSPI1_PCS0_SELECT_INPUT - LPSPI1_PCS0_SELECT_INPUT DAISY Register */
#define IOMUXC_LPSPI1_PCS0_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPSPI1_PCS0_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPSPI1_SCK_SELECT_INPUT - LPSPI1_SCK_SELECT_INPUT DAISY Register */
#define IOMUXC_LPSPI1_SCK_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPSPI1_SCK_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPSPI1_SDI_SELECT_INPUT - LPSPI1_SDI_SELECT_INPUT DAISY Register */
#define IOMUXC_LPSPI1_SDI_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPSPI1_SDI_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPSPI1_SDO_SELECT_INPUT - LPSPI1_SDO_SELECT_INPUT DAISY Register */
#define IOMUXC_LPSPI1_SDO_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPSPI1_SDO_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPSPI2_PCS0_SELECT_INPUT - LPSPI2_PCS0_SELECT_INPUT DAISY Register */
#define IOMUXC_LPSPI2_PCS0_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_LPSPI2_PCS0_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_LPSPI2_PCS0_SELECT_INPUT_DAISY(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_LPSPI2_PCS0_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_LPSPI2_PCS0_SELECT_INPUT_DAISY_MASK)

/*! @name LPSPI2_SCK_SELECT_INPUT - LPSPI2_SCK_SELECT_INPUT DAISY Register */
#define IOMUXC_LPSPI2_SCK_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_LPSPI2_SCK_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_LPSPI2_SCK_SELECT_INPUT_DAISY(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_LPSPI2_SCK_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_LPSPI2_SCK_SELECT_INPUT_DAISY_MASK)

/*! @name LPSPI2_SDI_SELECT_INPUT - LPSPI2_SDI_SELECT_INPUT DAISY Register */
#define IOMUXC_LPSPI2_SDI_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_LPSPI2_SDI_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_LPSPI2_SDI_SELECT_INPUT_DAISY(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_LPSPI2_SDI_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_LPSPI2_SDI_SELECT_INPUT_DAISY_MASK)

/*! @name LPSPI2_SDO_SELECT_INPUT - LPSPI2_SDO_SELECT_INPUT DAISY Register */
#define IOMUXC_LPSPI2_SDO_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_LPSPI2_SDO_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_LPSPI2_SDO_SELECT_INPUT_DAISY(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_LPSPI2_SDO_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_LPSPI2_SDO_SELECT_INPUT_DAISY_MASK)

/*! @name LPSPI4_PCS0_SELECT_INPUT - LPSPI4_PCS0_SELECT_INPUT DAISY Register */
#define IOMUXC_LPSPI4_PCS0_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPSPI4_PCS0_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPSPI4_SCK_SELECT_INPUT - LPSPI4_SCK_SELECT_INPUT DAISY Register */
#define IOMUXC_LPSPI4_SCK_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPSPI4_SCK_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPSPI4_SDI_SELECT_INPUT - LPSPI4_SDI_SELECT_INPUT DAISY Register */
#define IOMUXC_LPSPI4_SDI_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPSPI4_SDI_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPSPI4_SDO_SELECT_INPUT - LPSPI4_SDO_SELECT_INPUT DAISY Register */
#define IOMUXC_LPSPI4_SDO_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPSPI4_SDO_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPUART2_CTS_B_SELECT_INPUT - LPUART2_CTS_B_SELECT_INPUT DAISY Register */
#define IOMUXC_LPUART2_CTS_B_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPUART2_CTS_B_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPUART2_RX_SELECT_INPUT - LPUART2_RX_SELECT_INPUT DAISY Register */
#define IOMUXC_LPUART2_RX_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPUART2_RX_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPUART2_TX_SELECT_INPUT - LPUART2_TX_SELECT_INPUT DAISY Register */
#define IOMUXC_LPUART2_TX_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPUART2_TX_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPUART3_RX_SELECT_INPUT - LPUART3_RX_SELECT_INPUT DAISY Register */
#define IOMUXC_LPUART3_RX_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPUART3_RX_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPUART3_TX_SELECT_INPUT - LPUART3_TX_SELECT_INPUT DAISY Register */
#define IOMUXC_LPUART3_TX_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPUART3_TX_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPUART4_CTS_B_SELECT_INPUT - LPUART4_CTS_B_SELECT_INPUT DAISY Register */
#define IOMUXC_LPUART4_CTS_B_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPUART4_CTS_B_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPUART4_RX_SELECT_INPUT - LPUART4_RX_SELECT_INPUT DAISY Register */
#define IOMUXC_LPUART4_RX_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_LPUART4_RX_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_LPUART4_RX_SELECT_INPUT_DAISY(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_LPUART4_RX_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_LPUART4_RX_SELECT_INPUT_DAISY_MASK)

/*! @name LPUART4_TX_SELECT_INPUT - LPUART4_TX_SELECT_INPUT DAISY Register */
#define IOMUXC_LPUART4_TX_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_LPUART4_TX_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_LPUART4_TX_SELECT_INPUT_DAISY(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_LPUART4_TX_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_LPUART4_TX_SELECT_INPUT_DAISY_MASK)

/*! @name LPUART5_RX_SELECT_INPUT - LPUART5_RX_SELECT_INPUT DAISY Register */
#define IOMUXC_LPUART5_RX_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPUART5_RX_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPUART5_TX_SELECT_INPUT - LPUART5_TX_SELECT_INPUT DAISY Register */
#define IOMUXC_LPUART5_TX_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPUART5_TX_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPUART6_RX_SELECT_INPUT - LPUART6_RX_SELECT_INPUT DAISY Register */
#define IOMUXC_LPUART6_RX_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPUART6_RX_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPUART6_TX_SELECT_INPUT - LPUART6_TX_SELECT_INPUT DAISY Register */
#define IOMUXC_LPUART6_TX_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPUART6_TX_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPUART7_RX_SELECT_INPUT - LPUART7_RX_SELECT_INPUT DAISY Register */
#define IOMUXC_LPUART7_RX_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPUART7_RX_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPUART7_TX_SELECT_INPUT - LPUART7_TX_SELECT_INPUT DAISY Register */
#define IOMUXC_LPUART7_TX_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPUART7_TX_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPUART8_RX_SELECT_INPUT - LPUART8_RX_SELECT_INPUT DAISY Register */
#define IOMUXC_LPUART8_RX_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPUART8_RX_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name LPUART8_TX_SELECT_INPUT - LPUART8_TX_SELECT_INPUT DAISY Register */
#define IOMUXC_LPUART8_TX_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_LPUART8_TX_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name NMI_SELECT_INPUT - NMI_SELECT_INPUT DAISY Register */
#define IOMUXC_NMI_SELECT_INPUT_DAISY_MASK       (0x1U)
#define IOMUXC_NMI_SELECT_INPUT_DAISY_SHIFT      (0U)

/*! @name QTIMER1_TIMER0_INPUT_SELECT_INPUT - QTIMER1_TIMER0_INPUT_SELECT_INPUT DAISY Register */
#define IOMUXC_QTIMER1_TIMER0_INPUT_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_QTIMER1_TIMER0_INPUT_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name QTIMER1_TIMER1_INPUT_SELECT_INPUT - QTIMER1_TIMER1_INPUT_SELECT_INPUT DAISY Register */
#define IOMUXC_QTIMER1_TIMER1_INPUT_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_QTIMER1_TIMER1_INPUT_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name QTIMER1_TIMER2_INPUT_SELECT_INPUT - QTIMER1_TIMER2_INPUT_SELECT_INPUT DAISY Register */
#define IOMUXC_QTIMER1_TIMER2_INPUT_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_QTIMER1_TIMER2_INPUT_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name QTIMER1_TIMER3_INPUT_SELECT_INPUT - QTIMER1_TIMER3_INPUT_SELECT_INPUT DAISY Register */
#define IOMUXC_QTIMER1_TIMER3_INPUT_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_QTIMER1_TIMER3_INPUT_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name QTIMER2_TIMER0_INPUT_SELECT_INPUT - QTIMER2_TIMER0_INPUT_SELECT_INPUT DAISY Register */
#define IOMUXC_QTIMER2_TIMER0_INPUT_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_QTIMER2_TIMER0_INPUT_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name QTIMER2_TIMER1_INPUT_SELECT_INPUT - QTIMER2_TIMER1_INPUT_SELECT_INPUT DAISY Register */
#define IOMUXC_QTIMER2_TIMER1_INPUT_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_QTIMER2_TIMER1_INPUT_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name QTIMER2_TIMER2_INPUT_SELECT_INPUT - QTIMER2_TIMER2_INPUT_SELECT_INPUT DAISY Register */
#define IOMUXC_QTIMER2_TIMER2_INPUT_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_QTIMER2_TIMER2_INPUT_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name QTIMER2_TIMER3_INPUT_SELECT_INPUT - QTIMER2_TIMER3_INPUT_SELECT_INPUT DAISY Register */
#define IOMUXC_QTIMER2_TIMER3_INPUT_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_QTIMER2_TIMER3_INPUT_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name SAI1_MCLK_SELECT_INPUT - SAI1_MCLK_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI1_MCLK_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_SAI1_MCLK_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_SAI1_MCLK_SELECT_INPUT_DAISY(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_SAI1_MCLK_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_SAI1_MCLK_SELECT_INPUT_DAISY_MASK)

/*! @name SAI1_RX_BCLK_SELECT_INPUT - SAI1_RX_BCLK_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI1_RX_BCLK_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_SAI1_RX_BCLK_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_SAI1_RX_BCLK_SELECT_INPUT_DAISY(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SAI1_RX_BCLK_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_SAI1_RX_BCLK_SELECT_INPUT_DAISY_MASK)

/*! @name SAI1_RX_DATA0_SELECT_INPUT - SAI1_RX_DATA0_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI1_RX_DATA0_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_SAI1_RX_DATA0_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_SAI1_RX_DATA0_SELECT_INPUT_DAISY(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SAI1_RX_DATA0_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_SAI1_RX_DATA0_SELECT_INPUT_DAISY_MASK)

/*! @name SAI1_RX_DATA1_SELECT_INPUT - SAI1_RX_DATA1_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI1_RX_DATA1_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_SAI1_RX_DATA1_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name SAI1_RX_DATA2_SELECT_INPUT - SAI1_RX_DATA2_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI1_RX_DATA2_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_SAI1_RX_DATA2_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name SAI1_RX_DATA3_SELECT_INPUT - SAI1_RX_DATA3_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI1_RX_DATA3_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_SAI1_RX_DATA3_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name SAI1_RX_SYNC_SELECT_INPUT - SAI1_RX_SYNC_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI1_RX_SYNC_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_SAI1_RX_SYNC_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_SAI1_RX_SYNC_SELECT_INPUT_DAISY(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SAI1_RX_SYNC_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_SAI1_RX_SYNC_SELECT_INPUT_DAISY_MASK)

/*! @name SAI1_TX_BCLK_SELECT_INPUT - SAI1_TX_BCLK_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI1_TX_BCLK_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_SAI1_TX_BCLK_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_SAI1_TX_BCLK_SELECT_INPUT_DAISY(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SAI1_TX_BCLK_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_SAI1_TX_BCLK_SELECT_INPUT_DAISY_MASK)

/*! @name SAI1_TX_SYNC_SELECT_INPUT - SAI1_TX_SYNC_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI1_TX_SYNC_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_SAI1_TX_SYNC_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_SAI1_TX_SYNC_SELECT_INPUT_DAISY(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SAI1_TX_SYNC_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_SAI1_TX_SYNC_SELECT_INPUT_DAISY_MASK)

/*! @name SAI2_MCLK_SELECT_INPUT - SAI2_MCLK_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI2_MCLK_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_SAI2_MCLK_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name SAI2_RX_BCLK_SELECT_INPUT - SAI2_RX_BCLK_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI2_RX_BCLK_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_SAI2_RX_BCLK_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name SAI2_RX_DATA0_SELECT_INPUT - SAI2_RX_DATA0_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI2_RX_DATA0_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_SAI2_RX_DATA0_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name SAI2_RX_SYNC_SELECT_INPUT - SAI2_RX_SYNC_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI2_RX_SYNC_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_SAI2_RX_SYNC_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name SAI2_TX_BCLK_SELECT_INPUT - SAI2_TX_BCLK_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI2_TX_BCLK_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_SAI2_TX_BCLK_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name SAI2_TX_SYNC_SELECT_INPUT - SAI2_TX_SYNC_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI2_TX_SYNC_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_SAI2_TX_SYNC_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name SAI3_MCLK_SELECT_INPUT - SAI3_MCLK_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI3_MCLK_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_SAI3_MCLK_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_SAI3_MCLK_SELECT_INPUT_DAISY(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_SAI3_MCLK_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_SAI3_MCLK_SELECT_INPUT_DAISY_MASK)

/*! @name SAI3_RX_BCLK_SELECT_INPUT - SAI3_RX_BCLK_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI3_RX_BCLK_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_SAI3_RX_BCLK_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name SAI3_RX_DATA0_SELECT_INPUT - SAI3_RX_DATA0_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI3_RX_DATA0_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_SAI3_RX_DATA0_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name SAI3_RX_SYNC_SELECT_INPUT - SAI3_RX_SYNC_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI3_RX_SYNC_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_SAI3_RX_SYNC_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name SAI3_TX_BCLK_SELECT_INPUT - SAI3_TX_BCLK_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI3_TX_BCLK_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_SAI3_TX_BCLK_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name SAI3_TX_SYNC_SELECT_INPUT - SAI3_TX_SYNC_SELECT_INPUT DAISY Register */
#define IOMUXC_SAI3_TX_SYNC_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_SAI3_TX_SYNC_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name SEMC_READY_SELECT_INPUT - SEMC_READY_SELECT_INPUT DAISY Register */
#define IOMUXC_SEMC_READY_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_SEMC_READY_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name SPDIF_IN_SELECT_INPUT - SPDIF_IN_SELECT_INPUT DAISY Register */
#define IOMUXC_SPDIF_IN_SELECT_INPUT_DAISY_MASK  (0x1U)
#define IOMUXC_SPDIF_IN_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name USB_OTG_OC_SELECT_INPUT - USB_OTG_OC_SELECT_INPUT DAISY Register */
#define IOMUXC_USB_OTG_OC_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_USB_OTG_OC_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_USB_OTG_OC_SELECT_INPUT_DAISY(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_USB_OTG_OC_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_USB_OTG_OC_SELECT_INPUT_DAISY_MASK)

/*! @name USDHC1_CD_B_SELECT_INPUT - USDHC1_CD_B_SELECT_INPUT DAISY Register */
#define IOMUXC_USDHC1_CD_B_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_USDHC1_CD_B_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_USDHC1_CD_B_SELECT_INPUT_DAISY(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_USDHC1_CD_B_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_USDHC1_CD_B_SELECT_INPUT_DAISY_MASK)

/*! @name USDHC1_WP_SELECT_INPUT - USDHC1_WP_SELECT_INPUT DAISY Register */
#define IOMUXC_USDHC1_WP_SELECT_INPUT_DAISY_MASK (0x7U)
#define IOMUXC_USDHC1_WP_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_USDHC1_WP_SELECT_INPUT_DAISY(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_USDHC1_WP_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_USDHC1_WP_SELECT_INPUT_DAISY_MASK)

/*! @name USDHC2_CD_B_SELECT_INPUT - USDHC2_CD_B_SELECT_INPUT DAISY Register */
#define IOMUXC_USDHC2_CD_B_SELECT_INPUT_DAISY_MASK (0x3U)
#define IOMUXC_USDHC2_CD_B_SELECT_INPUT_DAISY_SHIFT (0U)
#define IOMUXC_USDHC2_CD_B_SELECT_INPUT_DAISY(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_USDHC2_CD_B_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_USDHC2_CD_B_SELECT_INPUT_DAISY_MASK)

/*! @name USDHC2_WP_SELECT_INPUT - USDHC2_WP_SELECT_INPUT DAISY Register */
#define IOMUXC_USDHC2_WP_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_USDHC2_WP_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name XBAR1_IN14_SELECT_INPUT - XBAR1_IN14_SELECT_INPUT DAISY Register */
#define IOMUXC_XBAR1_IN14_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_XBAR1_IN14_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name XBAR1_IN15_SELECT_INPUT - XBAR1_IN15_SELECT_INPUT DAISY Register */
#define IOMUXC_XBAR1_IN15_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_XBAR1_IN15_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name XBAR1_IN16_SELECT_INPUT - XBAR1_IN16_SELECT_INPUT DAISY Register */
#define IOMUXC_XBAR1_IN16_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_XBAR1_IN16_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name XBAR1_IN17_SELECT_INPUT - XBAR1_IN17_SELECT_INPUT DAISY Register */
#define IOMUXC_XBAR1_IN17_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_XBAR1_IN17_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name XBAR1_IN10_SELECT_INPUT - XBAR1_IN10_SELECT_INPUT DAISY Register */
#define IOMUXC_XBAR1_IN10_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_XBAR1_IN10_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name XBAR1_IN12_SELECT_INPUT - XBAR1_IN12_SELECT_INPUT DAISY Register */
#define IOMUXC_XBAR1_IN12_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_XBAR1_IN12_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name XBAR1_IN13_SELECT_INPUT - XBAR1_IN13_SELECT_INPUT DAISY Register */
#define IOMUXC_XBAR1_IN13_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_XBAR1_IN13_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name XBAR1_IN18_SELECT_INPUT - XBAR1_IN18_SELECT_INPUT DAISY Register */
#define IOMUXC_XBAR1_IN18_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_XBAR1_IN18_SELECT_INPUT_DAISY_SHIFT (0U)

/*! @name XBAR1_IN19_SELECT_INPUT - XBAR1_IN19_SELECT_INPUT DAISY Register */
#define IOMUXC_XBAR1_IN19_SELECT_INPUT_DAISY_MASK (0x1U)
#define IOMUXC_XBAR1_IN19_SELECT_INPUT_DAISY_SHIFT (0U)


/*!
 * @}
 */ /* end of group IOMUXC_Register_Masks */


/* IOMUXC - Peripheral instance base addresses */
/** Peripheral IOMUXC base pointer */
#define IOMUXC_BASE_PTR                          ((IOMUXC_MemMapPtr)0x401F8000u)
/** Array initializer of IOMUXC peripheral base pointers */
#define IOMUXC_BASE_PTRS                         { IOMUXC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- IOMUXC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_Register_Accessor_Macros IOMUXC - Register accessor macros
 * @{
 */


/* IOMUXC - Register instance definitions */
/* IOMUXC */
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_00        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_00_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_01        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_01_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_02        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_02_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_03        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_03_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_04        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_04_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_05        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_05_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_06        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_06_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_07        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_07_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_08        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_08_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_09        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_09_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_10        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_10_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_11        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_11_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_12        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_12_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_13        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_13_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_14        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_14_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_15        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_15_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_16        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_16_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_17        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_17_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_18        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_18_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_19        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_19_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_20        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_20_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_21        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_21_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_30        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_30_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_31        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_31_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_32        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_32_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_33        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_33_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_34        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_34_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_35        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_35_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_36        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_36_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_37        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_37_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_38        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_38_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_39        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_39_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_41        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_41_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_00      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_00_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_01      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_01_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_03      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_03_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_04      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_04_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_05      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_05_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_06      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_06_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_07      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_07_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_08      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_08_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_09      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_09_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_10      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_10_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_11      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_11_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_12      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_12_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_13      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_13_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_14      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_14_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_15      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_15_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_00      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_00_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_01      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_01_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_02      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_02_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_03      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_03_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_04      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_04_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_05      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_05_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_06      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_06_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_07      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_07_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_08      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_08_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_09      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_09_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_10      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_10_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_11      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_11_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_12      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_12_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_13      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_13_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_14      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_14_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_15      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_15_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_06      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_06_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_00      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_00_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_01      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_01_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_03      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_03_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_04      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_04_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_05      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_05_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_06      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_06_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_07      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_07_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_08      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_08_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_09      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_09_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_10      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_10_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_11      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_11_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41        IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_06_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11_REG(IOMUXC_BASE_PTR)
#define IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT    IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_CCM_PMIC_READY_SELECT_INPUT       IOMUXC_CCM_PMIC_READY_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_ENET_RMII_SELECT_INPUT            IOMUXC_ENET_RMII_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_ENET_MDIO_SELECT_INPUT            IOMUXC_ENET_MDIO_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_ENET_RX_DATA0_SELECT_INPUT        IOMUXC_ENET_RX_DATA0_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_ENET_RX_DATA1_SELECT_INPUT        IOMUXC_ENET_RX_DATA1_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_ENET_RX_EN_SELECT_INPUT           IOMUXC_ENET_RX_EN_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_ENET_RX_ERR_SELECT_INPUT          IOMUXC_ENET_RX_ERR_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_ENET_TX_CLK_SELECT_INPUT          IOMUXC_ENET_TX_CLK_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXCAN1_RX_SELECT_INPUT          IOMUXC_FLEXCAN1_RX_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXCAN2_RX_SELECT_INPUT          IOMUXC_FLEXCAN2_RX_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXPWM1_PWMA0_SELECT_INPUT       IOMUXC_FLEXPWM1_PWMA0_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXPWM1_PWMA1_SELECT_INPUT       IOMUXC_FLEXPWM1_PWMA1_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXPWM1_PWMA2_SELECT_INPUT       IOMUXC_FLEXPWM1_PWMA2_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXPWM1_PWMA3_SELECT_INPUT       IOMUXC_FLEXPWM1_PWMA3_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXPWM1_PWMB0_SELECT_INPUT       IOMUXC_FLEXPWM1_PWMB0_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXPWM1_PWMB1_SELECT_INPUT       IOMUXC_FLEXPWM1_PWMB1_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXPWM1_PWMB2_SELECT_INPUT       IOMUXC_FLEXPWM1_PWMB2_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXPWM1_PWMB3_SELECT_INPUT       IOMUXC_FLEXPWM1_PWMB3_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXPWM2_PWMA0_SELECT_INPUT       IOMUXC_FLEXPWM2_PWMA0_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXPWM2_PWMA1_SELECT_INPUT       IOMUXC_FLEXPWM2_PWMA1_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXPWM2_PWMA2_SELECT_INPUT       IOMUXC_FLEXPWM2_PWMA2_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXPWM2_PWMA3_SELECT_INPUT       IOMUXC_FLEXPWM2_PWMA3_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXPWM2_PWMB0_SELECT_INPUT       IOMUXC_FLEXPWM2_PWMB0_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXPWM2_PWMB1_SELECT_INPUT       IOMUXC_FLEXPWM2_PWMB1_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXPWM2_PWMB2_SELECT_INPUT       IOMUXC_FLEXPWM2_PWMB2_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXPWM2_PWMB3_SELECT_INPUT       IOMUXC_FLEXPWM2_PWMB3_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXSPI_A_DATA0_SELECT_INPUT      IOMUXC_FLEXSPI_A_DATA0_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXSPI_A_DATA1_SELECT_INPUT      IOMUXC_FLEXSPI_A_DATA1_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXSPI_A_DATA2_SELECT_INPUT      IOMUXC_FLEXSPI_A_DATA2_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXSPI_A_DATA3_SELECT_INPUT      IOMUXC_FLEXSPI_A_DATA3_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_FLEXSPI_A_SCLK_SELECT_INPUT       IOMUXC_FLEXSPI_A_SCLK_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPI2C1_SCL_SELECT_INPUT           IOMUXC_LPI2C1_SCL_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPI2C1_SDA_SELECT_INPUT           IOMUXC_LPI2C1_SDA_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPI2C2_SCL_SELECT_INPUT           IOMUXC_LPI2C2_SCL_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPI2C2_SDA_SELECT_INPUT           IOMUXC_LPI2C2_SDA_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPI2C3_SCL_SELECT_INPUT           IOMUXC_LPI2C3_SCL_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPI2C3_SDA_SELECT_INPUT           IOMUXC_LPI2C3_SDA_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPI2C4_SCL_SELECT_INPUT           IOMUXC_LPI2C4_SCL_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPI2C4_SDA_SELECT_INPUT           IOMUXC_LPI2C4_SDA_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPSPI1_PCS0_SELECT_INPUT          IOMUXC_LPSPI1_PCS0_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPSPI1_SCK_SELECT_INPUT           IOMUXC_LPSPI1_SCK_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPSPI1_SDI_SELECT_INPUT           IOMUXC_LPSPI1_SDI_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPSPI1_SDO_SELECT_INPUT           IOMUXC_LPSPI1_SDO_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPSPI2_PCS0_SELECT_INPUT          IOMUXC_LPSPI2_PCS0_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPSPI2_SCK_SELECT_INPUT           IOMUXC_LPSPI2_SCK_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPSPI2_SDI_SELECT_INPUT           IOMUXC_LPSPI2_SDI_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPSPI2_SDO_SELECT_INPUT           IOMUXC_LPSPI2_SDO_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPSPI4_PCS0_SELECT_INPUT          IOMUXC_LPSPI4_PCS0_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPSPI4_SCK_SELECT_INPUT           IOMUXC_LPSPI4_SCK_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPSPI4_SDI_SELECT_INPUT           IOMUXC_LPSPI4_SDI_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPSPI4_SDO_SELECT_INPUT           IOMUXC_LPSPI4_SDO_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPUART2_CTS_B_SELECT_INPUT        IOMUXC_LPUART2_CTS_B_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPUART2_RX_SELECT_INPUT           IOMUXC_LPUART2_RX_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPUART2_TX_SELECT_INPUT           IOMUXC_LPUART2_TX_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPUART3_RX_SELECT_INPUT           IOMUXC_LPUART3_RX_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPUART3_TX_SELECT_INPUT           IOMUXC_LPUART3_TX_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPUART4_CTS_B_SELECT_INPUT        IOMUXC_LPUART4_CTS_B_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPUART4_RX_SELECT_INPUT           IOMUXC_LPUART4_RX_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPUART4_TX_SELECT_INPUT           IOMUXC_LPUART4_TX_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPUART5_RX_SELECT_INPUT           IOMUXC_LPUART5_RX_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPUART5_TX_SELECT_INPUT           IOMUXC_LPUART5_TX_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPUART6_RX_SELECT_INPUT           IOMUXC_LPUART6_RX_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPUART6_TX_SELECT_INPUT           IOMUXC_LPUART6_TX_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPUART7_RX_SELECT_INPUT           IOMUXC_LPUART7_RX_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPUART7_TX_SELECT_INPUT           IOMUXC_LPUART7_TX_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPUART8_RX_SELECT_INPUT           IOMUXC_LPUART8_RX_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_LPUART8_TX_SELECT_INPUT           IOMUXC_LPUART8_TX_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_NMI_SELECT_INPUT                  IOMUXC_NMI_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_QTIMER1_TIMER0_INPUT_SELECT_INPUT IOMUXC_QTIMER1_TIMER0_INPUT_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_QTIMER1_TIMER1_INPUT_SELECT_INPUT IOMUXC_QTIMER1_TIMER1_INPUT_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_QTIMER1_TIMER2_INPUT_SELECT_INPUT IOMUXC_QTIMER1_TIMER2_INPUT_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_QTIMER1_TIMER3_INPUT_SELECT_INPUT IOMUXC_QTIMER1_TIMER3_INPUT_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_QTIMER2_TIMER0_INPUT_SELECT_INPUT IOMUXC_QTIMER2_TIMER0_INPUT_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_QTIMER2_TIMER1_INPUT_SELECT_INPUT IOMUXC_QTIMER2_TIMER1_INPUT_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_QTIMER2_TIMER2_INPUT_SELECT_INPUT IOMUXC_QTIMER2_TIMER2_INPUT_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_QTIMER2_TIMER3_INPUT_SELECT_INPUT IOMUXC_QTIMER2_TIMER3_INPUT_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI1_MCLK_SELECT_INPUT            IOMUXC_SAI1_MCLK_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI1_RX_BCLK_SELECT_INPUT         IOMUXC_SAI1_RX_BCLK_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI1_RX_DATA0_SELECT_INPUT        IOMUXC_SAI1_RX_DATA0_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI1_RX_DATA1_SELECT_INPUT        IOMUXC_SAI1_RX_DATA1_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI1_RX_DATA2_SELECT_INPUT        IOMUXC_SAI1_RX_DATA2_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI1_RX_DATA3_SELECT_INPUT        IOMUXC_SAI1_RX_DATA3_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI1_RX_SYNC_SELECT_INPUT         IOMUXC_SAI1_RX_SYNC_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI1_TX_BCLK_SELECT_INPUT         IOMUXC_SAI1_TX_BCLK_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI1_TX_SYNC_SELECT_INPUT         IOMUXC_SAI1_TX_SYNC_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI2_MCLK_SELECT_INPUT            IOMUXC_SAI2_MCLK_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI2_RX_BCLK_SELECT_INPUT         IOMUXC_SAI2_RX_BCLK_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI2_RX_DATA0_SELECT_INPUT        IOMUXC_SAI2_RX_DATA0_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI2_RX_SYNC_SELECT_INPUT         IOMUXC_SAI2_RX_SYNC_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI2_TX_BCLK_SELECT_INPUT         IOMUXC_SAI2_TX_BCLK_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI2_TX_SYNC_SELECT_INPUT         IOMUXC_SAI2_TX_SYNC_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI3_MCLK_SELECT_INPUT            IOMUXC_SAI3_MCLK_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI3_RX_BCLK_SELECT_INPUT         IOMUXC_SAI3_RX_BCLK_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI3_RX_DATA0_SELECT_INPUT        IOMUXC_SAI3_RX_DATA0_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI3_RX_SYNC_SELECT_INPUT         IOMUXC_SAI3_RX_SYNC_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI3_TX_BCLK_SELECT_INPUT         IOMUXC_SAI3_TX_BCLK_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SAI3_TX_SYNC_SELECT_INPUT         IOMUXC_SAI3_TX_SYNC_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SEMC_READY_SELECT_INPUT           IOMUXC_SEMC_READY_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SPDIF_IN_SELECT_INPUT             IOMUXC_SPDIF_IN_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_USB_OTG_OC_SELECT_INPUT           IOMUXC_USB_OTG_OC_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_USDHC1_CD_B_SELECT_INPUT          IOMUXC_USDHC1_CD_B_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_USDHC1_WP_SELECT_INPUT            IOMUXC_USDHC1_WP_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_USDHC2_CD_B_SELECT_INPUT          IOMUXC_USDHC2_CD_B_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_USDHC2_WP_SELECT_INPUT            IOMUXC_USDHC2_WP_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_XBAR1_IN14_SELECT_INPUT           IOMUXC_XBAR1_IN14_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_XBAR1_IN15_SELECT_INPUT           IOMUXC_XBAR1_IN15_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_XBAR1_IN16_SELECT_INPUT           IOMUXC_XBAR1_IN16_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_XBAR1_IN17_SELECT_INPUT           IOMUXC_XBAR1_IN17_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_XBAR1_IN10_SELECT_INPUT           IOMUXC_XBAR1_IN10_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_XBAR1_IN12_SELECT_INPUT           IOMUXC_XBAR1_IN12_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_XBAR1_IN13_SELECT_INPUT           IOMUXC_XBAR1_IN13_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_XBAR1_IN18_SELECT_INPUT           IOMUXC_XBAR1_IN18_SELECT_INPUT_REG(IOMUXC_BASE_PTR)
#define IOMUXC_XBAR1_IN19_SELECT_INPUT           IOMUXC_XBAR1_IN19_SELECT_INPUT_REG(IOMUXC_BASE_PTR)

/*!
 * @}
 */ /* end of group IOMUXC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group IOMUXC_Peripheral */


/* ----------------------------------------------------------------------------
   -- IOMUXC_GPR
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_GPR_Peripheral IOMUXC_GPR
 * @{
 */

/** IOMUXC_GPR - Peripheral register structure */
typedef struct IOMUXC_GPR_MemMap {
  uint32_t GPR0;                                   /**< GPR0 General Purpose Register, offset: 0x0 */
  uint32_t GPR1;                                   /**< GPR1 General Purpose Register, offset: 0x4 */
  uint32_t GPR2;                                   /**< GPR2 General Purpose Register, offset: 0x8 */
  uint32_t GPR3;                                   /**< GPR3 General Purpose Register, offset: 0xC */
  uint32_t GPR4;                                   /**< GPR4 General Purpose Register, offset: 0x10 */
  uint32_t GPR5;                                   /**< GPR5 General Purpose Register, offset: 0x14 */
  uint32_t GPR6;                                   /**< GPR6 General Purpose Register, offset: 0x18 */
  uint32_t GPR7;                                   /**< GPR7 General Purpose Register, offset: 0x1C */
  uint32_t GPR8;                                   /**< GPR8 General Purpose Register, offset: 0x20 */
  uint32_t GPR9;                                   /**< GPR9 General Purpose Register, offset: 0x24 */
  uint32_t GPR10;                                  /**< GPR10 General Purpose Register, offset: 0x28 */
  uint32_t GPR11;                                  /**< GPR11 General Purpose Register, offset: 0x2C */
  uint32_t GPR12;                                  /**< GPR12 General Purpose Register, offset: 0x30 */
  uint32_t GPR13;                                  /**< GPR13 General Purpose Register, offset: 0x34 */
  uint32_t GPR14;                                  /**< GPR14 General Purpose Register, offset: 0x38 */
  uint32_t GPR15;                                  /**< GPR15 General Purpose Register, offset: 0x3C */
  uint32_t GPR16;                                  /**< GPR16 General Purpose Register, offset: 0x40 */
  uint32_t GPR17;                                  /**< GPR17 General Purpose Register, offset: 0x44 */
  uint32_t GPR18;                                  /**< GPR18 General Purpose Register, offset: 0x48 */
  uint32_t GPR19;                                  /**< GPR19 General Purpose Register, offset: 0x4C */
  uint32_t GPR20;                                  /**< GPR20 General Purpose Register, offset: 0x50 */
  uint32_t GPR21;                                  /**< GPR21 General Purpose Register, offset: 0x54 */
  uint32_t GPR22;                                  /**< GPR22 General Purpose Register, offset: 0x58 */
  uint32_t GPR23;                                  /**< GPR23 General Purpose Register, offset: 0x5C */
  uint32_t GPR24;                                  /**< GPR24 General Purpose Register, offset: 0x60 */
  uint32_t GPR25;                                  /**< GPR25 General Purpose Register, offset: 0x64 */
} volatile *IOMUXC_GPR_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- IOMUXC_GPR - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_GPR_Register_Accessor_Macros IOMUXC_GPR - Register accessor macros
 * @{
 */


/* IOMUXC_GPR - Register accessors */
#define IOMUXC_GPR_GPR0_REG(base)                ((base)->GPR0)
#define IOMUXC_GPR_GPR1_REG(base)                ((base)->GPR1)
#define IOMUXC_GPR_GPR2_REG(base)                ((base)->GPR2)
#define IOMUXC_GPR_GPR3_REG(base)                ((base)->GPR3)
#define IOMUXC_GPR_GPR4_REG(base)                ((base)->GPR4)
#define IOMUXC_GPR_GPR5_REG(base)                ((base)->GPR5)
#define IOMUXC_GPR_GPR6_REG(base)                ((base)->GPR6)
#define IOMUXC_GPR_GPR7_REG(base)                ((base)->GPR7)
#define IOMUXC_GPR_GPR8_REG(base)                ((base)->GPR8)
#define IOMUXC_GPR_GPR9_REG(base)                ((base)->GPR9)
#define IOMUXC_GPR_GPR10_REG(base)               ((base)->GPR10)
#define IOMUXC_GPR_GPR11_REG(base)               ((base)->GPR11)
#define IOMUXC_GPR_GPR12_REG(base)               ((base)->GPR12)
#define IOMUXC_GPR_GPR13_REG(base)               ((base)->GPR13)
#define IOMUXC_GPR_GPR14_REG(base)               ((base)->GPR14)
#define IOMUXC_GPR_GPR15_REG(base)               ((base)->GPR15)
#define IOMUXC_GPR_GPR16_REG(base)               ((base)->GPR16)
#define IOMUXC_GPR_GPR17_REG(base)               ((base)->GPR17)
#define IOMUXC_GPR_GPR18_REG(base)               ((base)->GPR18)
#define IOMUXC_GPR_GPR19_REG(base)               ((base)->GPR19)
#define IOMUXC_GPR_GPR20_REG(base)               ((base)->GPR20)
#define IOMUXC_GPR_GPR21_REG(base)               ((base)->GPR21)
#define IOMUXC_GPR_GPR22_REG(base)               ((base)->GPR22)
#define IOMUXC_GPR_GPR23_REG(base)               ((base)->GPR23)
#define IOMUXC_GPR_GPR24_REG(base)               ((base)->GPR24)
#define IOMUXC_GPR_GPR25_REG(base)               ((base)->GPR25)

/*!
 * @}
 */ /* end of group IOMUXC_GPR_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- IOMUXC_GPR Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_GPR_Register_Masks IOMUXC_GPR Register Masks
 * @{
 */

/*! @name GPR0 - GPR0 General Purpose Register */
#define IOMUXC_GPR_GPR0_GPR_MASK                 (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR0_GPR_SHIFT                (0U)
#define IOMUXC_GPR_GPR0_GPR(x)                   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR0_GPR_SHIFT)) & IOMUXC_GPR_GPR0_GPR_MASK)

/*! @name GPR1 - GPR1 General Purpose Register */
#define IOMUXC_GPR_GPR1_GPR_MASK                 (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR1_GPR_SHIFT                (0U)
#define IOMUXC_GPR_GPR1_GPR(x)                   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR1_GPR_SHIFT)) & IOMUXC_GPR_GPR1_GPR_MASK)

/*! @name GPR2 - GPR2 General Purpose Register */
#define IOMUXC_GPR_GPR2_GPR_MASK                 (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR2_GPR_SHIFT                (0U)
#define IOMUXC_GPR_GPR2_GPR(x)                   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR2_GPR_SHIFT)) & IOMUXC_GPR_GPR2_GPR_MASK)

/*! @name GPR3 - GPR3 General Purpose Register */
#define IOMUXC_GPR_GPR3_FIELD_0_MASK             (0xFFFFU)
#define IOMUXC_GPR_GPR3_FIELD_0_SHIFT            (0U)
#define IOMUXC_GPR_GPR3_FIELD_0(x)               (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR3_FIELD_0_SHIFT)) & IOMUXC_GPR_GPR3_FIELD_0_MASK)
#define IOMUXC_GPR_GPR3_FIELD_1_MASK             (0xFFFF0000U)
#define IOMUXC_GPR_GPR3_FIELD_1_SHIFT            (16U)
#define IOMUXC_GPR_GPR3_FIELD_1(x)               (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR3_FIELD_1_SHIFT)) & IOMUXC_GPR_GPR3_FIELD_1_MASK)

/*! @name GPR4 - GPR4 General Purpose Register */
#define IOMUXC_GPR_GPR4_FIELD_0_MASK             (0xFFFFU)
#define IOMUXC_GPR_GPR4_FIELD_0_SHIFT            (0U)
#define IOMUXC_GPR_GPR4_FIELD_0(x)               (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR4_FIELD_0_SHIFT)) & IOMUXC_GPR_GPR4_FIELD_0_MASK)
#define IOMUXC_GPR_GPR4_FIELD_1_MASK             (0xFFFF0000U)
#define IOMUXC_GPR_GPR4_FIELD_1_SHIFT            (16U)
#define IOMUXC_GPR_GPR4_FIELD_1(x)               (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR4_FIELD_1_SHIFT)) & IOMUXC_GPR_GPR4_FIELD_1_MASK)

/*! @name GPR5 - GPR5 General Purpose Register */
#define IOMUXC_GPR_GPR5_GPR_MASK                 (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR5_GPR_SHIFT                (0U)
#define IOMUXC_GPR_GPR5_GPR(x)                   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR5_GPR_SHIFT)) & IOMUXC_GPR_GPR5_GPR_MASK)

/*! @name GPR6 - GPR6 General Purpose Register */
#define IOMUXC_GPR_GPR6_GPR_MASK                 (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR6_GPR_SHIFT                (0U)
#define IOMUXC_GPR_GPR6_GPR(x)                   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR6_GPR_SHIFT)) & IOMUXC_GPR_GPR6_GPR_MASK)

/*! @name GPR7 - GPR7 General Purpose Register */
#define IOMUXC_GPR_GPR7_FIELD_0_MASK             (0xFFFFU)
#define IOMUXC_GPR_GPR7_FIELD_0_SHIFT            (0U)
#define IOMUXC_GPR_GPR7_FIELD_0(x)               (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR7_FIELD_0_SHIFT)) & IOMUXC_GPR_GPR7_FIELD_0_MASK)
#define IOMUXC_GPR_GPR7_FIELD_1_MASK             (0xFFFF0000U)
#define IOMUXC_GPR_GPR7_FIELD_1_SHIFT            (16U)
#define IOMUXC_GPR_GPR7_FIELD_1(x)               (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR7_FIELD_1_SHIFT)) & IOMUXC_GPR_GPR7_FIELD_1_MASK)

/*! @name GPR8 - GPR8 General Purpose Register */
#define IOMUXC_GPR_GPR8_GPR_MASK                 (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR8_GPR_SHIFT                (0U)
#define IOMUXC_GPR_GPR8_GPR(x)                   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR8_GPR_SHIFT)) & IOMUXC_GPR_GPR8_GPR_MASK)

/*! @name GPR9 - GPR9 General Purpose Register */
#define IOMUXC_GPR_GPR9_GPR_MASK                 (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR9_GPR_SHIFT                (0U)
#define IOMUXC_GPR_GPR9_GPR(x)                   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR9_GPR_SHIFT)) & IOMUXC_GPR_GPR9_GPR_MASK)

/*! @name GPR10 - GPR10 General Purpose Register */
#define IOMUXC_GPR_GPR10_GPR_MASK                (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR10_GPR_SHIFT               (0U)
#define IOMUXC_GPR_GPR10_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR10_GPR_SHIFT)) & IOMUXC_GPR_GPR10_GPR_MASK)

/*! @name GPR11 - GPR11 General Purpose Register */
#define IOMUXC_GPR_GPR11_GPR_MASK                (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR11_GPR_SHIFT               (0U)
#define IOMUXC_GPR_GPR11_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR11_GPR_SHIFT)) & IOMUXC_GPR_GPR11_GPR_MASK)

/*! @name GPR12 - GPR12 General Purpose Register */
#define IOMUXC_GPR_GPR12_GPR_MASK                (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR12_GPR_SHIFT               (0U)
#define IOMUXC_GPR_GPR12_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR12_GPR_SHIFT)) & IOMUXC_GPR_GPR12_GPR_MASK)

/*! @name GPR13 - GPR13 General Purpose Register */
#define IOMUXC_GPR_GPR13_FIELD_0_MASK            (0xFFFFU)
#define IOMUXC_GPR_GPR13_FIELD_0_SHIFT           (0U)
#define IOMUXC_GPR_GPR13_FIELD_0(x)              (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR13_FIELD_0_SHIFT)) & IOMUXC_GPR_GPR13_FIELD_0_MASK)
#define IOMUXC_GPR_GPR13_FIELD_1_MASK            (0xFFFF0000U)
#define IOMUXC_GPR_GPR13_FIELD_1_SHIFT           (16U)
#define IOMUXC_GPR_GPR13_FIELD_1(x)              (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR13_FIELD_1_SHIFT)) & IOMUXC_GPR_GPR13_FIELD_1_MASK)

/*! @name GPR14 - GPR14 General Purpose Register */
#define IOMUXC_GPR_GPR14_GPR_MASK                (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR14_GPR_SHIFT               (0U)
#define IOMUXC_GPR_GPR14_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR14_GPR_SHIFT)) & IOMUXC_GPR_GPR14_GPR_MASK)

/*! @name GPR15 - GPR15 General Purpose Register */
#define IOMUXC_GPR_GPR15_GPR_MASK                (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR15_GPR_SHIFT               (0U)
#define IOMUXC_GPR_GPR15_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR15_GPR_SHIFT)) & IOMUXC_GPR_GPR15_GPR_MASK)

/*! @name GPR16 - GPR16 General Purpose Register */
#define IOMUXC_GPR_GPR16_GPR_MASK                (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR16_GPR_SHIFT               (0U)
#define IOMUXC_GPR_GPR16_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR16_GPR_SHIFT)) & IOMUXC_GPR_GPR16_GPR_MASK)

/*! @name GPR17 - GPR17 General Purpose Register */
#define IOMUXC_GPR_GPR17_GPR_MASK                (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR17_GPR_SHIFT               (0U)
#define IOMUXC_GPR_GPR17_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR17_GPR_SHIFT)) & IOMUXC_GPR_GPR17_GPR_MASK)

/*! @name GPR18 - GPR18 General Purpose Register */
#define IOMUXC_GPR_GPR18_GPR_MASK                (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR18_GPR_SHIFT               (0U)
#define IOMUXC_GPR_GPR18_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR18_GPR_SHIFT)) & IOMUXC_GPR_GPR18_GPR_MASK)

/*! @name GPR19 - GPR19 General Purpose Register */
#define IOMUXC_GPR_GPR19_GPR_MASK                (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR19_GPR_SHIFT               (0U)
#define IOMUXC_GPR_GPR19_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR19_GPR_SHIFT)) & IOMUXC_GPR_GPR19_GPR_MASK)

/*! @name GPR20 - GPR20 General Purpose Register */
#define IOMUXC_GPR_GPR20_GPR_MASK                (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR20_GPR_SHIFT               (0U)
#define IOMUXC_GPR_GPR20_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR20_GPR_SHIFT)) & IOMUXC_GPR_GPR20_GPR_MASK)

/*! @name GPR21 - GPR21 General Purpose Register */
#define IOMUXC_GPR_GPR21_GPR_MASK                (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR21_GPR_SHIFT               (0U)
#define IOMUXC_GPR_GPR21_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR21_GPR_SHIFT)) & IOMUXC_GPR_GPR21_GPR_MASK)

/*! @name GPR22 - GPR22 General Purpose Register */
#define IOMUXC_GPR_GPR22_GPR_MASK                (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR22_GPR_SHIFT               (0U)
#define IOMUXC_GPR_GPR22_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR22_GPR_SHIFT)) & IOMUXC_GPR_GPR22_GPR_MASK)

/*! @name GPR23 - GPR23 General Purpose Register */
#define IOMUXC_GPR_GPR23_GPR_MASK                (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR23_GPR_SHIFT               (0U)
#define IOMUXC_GPR_GPR23_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR23_GPR_SHIFT)) & IOMUXC_GPR_GPR23_GPR_MASK)

/*! @name GPR24 - GPR24 General Purpose Register */
#define IOMUXC_GPR_GPR24_GPR_MASK                (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR24_GPR_SHIFT               (0U)
#define IOMUXC_GPR_GPR24_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR24_GPR_SHIFT)) & IOMUXC_GPR_GPR24_GPR_MASK)

/*! @name GPR25 - GPR25 General Purpose Register */
#define IOMUXC_GPR_GPR25_GPR_MASK                (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR25_GPR_SHIFT               (0U)
#define IOMUXC_GPR_GPR25_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR25_GPR_SHIFT)) & IOMUXC_GPR_GPR25_GPR_MASK)


/*!
 * @}
 */ /* end of group IOMUXC_GPR_Register_Masks */


/* IOMUXC_GPR - Peripheral instance base addresses */
/** Peripheral IOMUXC_GPR base pointer */
#define IOMUXC_GPR_BASE_PTR                      ((IOMUXC_GPR_MemMapPtr)0x400AC000u)
/** Array initializer of IOMUXC_GPR peripheral base pointers */
#define IOMUXC_GPR_BASE_PTRS                     { IOMUXC_GPR_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- IOMUXC_GPR - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_GPR_Register_Accessor_Macros IOMUXC_GPR - Register accessor macros
 * @{
 */


/* IOMUXC_GPR - Register instance definitions */
/* IOMUXC_GPR */
#define IOMUXC_GPR_GPR0                          IOMUXC_GPR_GPR0_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR1                          IOMUXC_GPR_GPR1_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR2                          IOMUXC_GPR_GPR2_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR3                          IOMUXC_GPR_GPR3_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR4                          IOMUXC_GPR_GPR4_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR5                          IOMUXC_GPR_GPR5_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR6                          IOMUXC_GPR_GPR6_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR7                          IOMUXC_GPR_GPR7_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR8                          IOMUXC_GPR_GPR8_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR9                          IOMUXC_GPR_GPR9_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR10                         IOMUXC_GPR_GPR10_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR11                         IOMUXC_GPR_GPR11_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR12                         IOMUXC_GPR_GPR12_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR13                         IOMUXC_GPR_GPR13_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR14                         IOMUXC_GPR_GPR14_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR15                         IOMUXC_GPR_GPR15_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR16                         IOMUXC_GPR_GPR16_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR17                         IOMUXC_GPR_GPR17_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR18                         IOMUXC_GPR_GPR18_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR19                         IOMUXC_GPR_GPR19_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR20                         IOMUXC_GPR_GPR20_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR21                         IOMUXC_GPR_GPR21_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR22                         IOMUXC_GPR_GPR22_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR23                         IOMUXC_GPR_GPR23_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR24                         IOMUXC_GPR_GPR24_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR25                         IOMUXC_GPR_GPR25_REG(IOMUXC_GPR_BASE_PTR)

/*!
 * @}
 */ /* end of group IOMUXC_GPR_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group IOMUXC_GPR_Peripheral */


/* ----------------------------------------------------------------------------
   -- IOMUXC_SNVS
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_SNVS_Peripheral IOMUXC_SNVS
 * @{
 */

/** IOMUXC_SNVS - Peripheral register structure */
typedef struct IOMUXC_SNVS_MemMap {
  uint32_t SW_MUX_CTL_PAD_WAKEUP;                  /**< SW_MUX_CTL_PAD_WAKEUP SW MUX Control Register, offset: 0x0 */
  uint32_t SW_MUX_CTL_PAD_PMIC_ON_REQ;             /**< SW_MUX_CTL_PAD_PMIC_ON_REQ SW MUX Control Register, offset: 0x4 */
  uint32_t SW_MUX_CTL_PAD_PMIC_STBY_REQ;           /**< SW_MUX_CTL_PAD_PMIC_STBY_REQ SW MUX Control Register, offset: 0x8 */
  uint32_t SW_PAD_CTL_PAD_TEST_MODE;               /**< SW_PAD_CTL_PAD_TEST_MODE SW PAD Control Register, offset: 0xC */
  uint32_t SW_PAD_CTL_PAD_POR_B;                   /**< SW_PAD_CTL_PAD_POR_B SW PAD Control Register, offset: 0x10 */
  uint32_t SW_PAD_CTL_PAD_ONOFF;                   /**< SW_PAD_CTL_PAD_ONOFF SW PAD Control Register, offset: 0x14 */
  uint32_t SW_PAD_CTL_PAD_WAKEUP;                  /**< SW_PAD_CTL_PAD_WAKEUP SW PAD Control Register, offset: 0x18 */
  uint32_t SW_PAD_CTL_PAD_PMIC_ON_REQ;             /**< SW_PAD_CTL_PAD_PMIC_ON_REQ SW PAD Control Register, offset: 0x1C */
  uint32_t SW_PAD_CTL_PAD_PMIC_STBY_REQ;           /**< SW_PAD_CTL_PAD_PMIC_STBY_REQ SW PAD Control Register, offset: 0x20 */
} volatile *IOMUXC_SNVS_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- IOMUXC_SNVS - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_SNVS_Register_Accessor_Macros IOMUXC_SNVS - Register accessor macros
 * @{
 */


/* IOMUXC_SNVS - Register accessors */
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP_REG(base) ((base)->SW_MUX_CTL_PAD_WAKEUP)
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_ON_REQ_REG(base) ((base)->SW_MUX_CTL_PAD_PMIC_ON_REQ)
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_STBY_REQ_REG(base) ((base)->SW_MUX_CTL_PAD_PMIC_STBY_REQ)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_REG(base) ((base)->SW_PAD_CTL_PAD_TEST_MODE)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_REG(base) ((base)->SW_PAD_CTL_PAD_POR_B)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_REG(base) ((base)->SW_PAD_CTL_PAD_ONOFF)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_REG(base) ((base)->SW_PAD_CTL_PAD_WAKEUP)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_REG(base) ((base)->SW_PAD_CTL_PAD_PMIC_ON_REQ)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_REG(base) ((base)->SW_PAD_CTL_PAD_PMIC_STBY_REQ)

/*!
 * @}
 */ /* end of group IOMUXC_SNVS_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- IOMUXC_SNVS Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_SNVS_Register_Masks IOMUXC_SNVS Register Masks
 * @{
 */

/*! @name SW_MUX_CTL_PAD_WAKEUP - SW_MUX_CTL_PAD_WAKEUP SW MUX Control Register */
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP_MUX_MODE_MASK (0x7U)
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP_MUX_MODE_SHIFT (0U)
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP_MUX_MODE_SHIFT)) & IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP_MUX_MODE_MASK)
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP_SION_MASK (0x10U)
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_PMIC_ON_REQ - SW_MUX_CTL_PAD_PMIC_ON_REQ SW MUX Control Register */
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_ON_REQ_MUX_MODE_MASK (0x7U)
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_ON_REQ_MUX_MODE_SHIFT (0U)
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_ON_REQ_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_ON_REQ_MUX_MODE_SHIFT)) & IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_ON_REQ_MUX_MODE_MASK)
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_ON_REQ_SION_MASK (0x10U)
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_ON_REQ_SION_SHIFT (4U)

/*! @name SW_MUX_CTL_PAD_PMIC_STBY_REQ - SW_MUX_CTL_PAD_PMIC_STBY_REQ SW MUX Control Register */
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_STBY_REQ_MUX_MODE_MASK (0x7U)
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_STBY_REQ_MUX_MODE_SHIFT (0U)
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_STBY_REQ_MUX_MODE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_STBY_REQ_MUX_MODE_SHIFT)) & IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_STBY_REQ_MUX_MODE_MASK)
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_STBY_REQ_SION_MASK (0x10U)
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_STBY_REQ_SION_SHIFT (4U)

/*! @name SW_PAD_CTL_PAD_TEST_MODE - SW_PAD_CTL_PAD_TEST_MODE SW PAD Control Register */
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_SRE_MASK (0x1U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_SRE_SHIFT (0U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DSE_MASK (0x38U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DSE_SHIFT (3U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DSE_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DSE_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_SPEED_MASK (0xC0U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_SPEED_SHIFT (6U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_SPEED_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_SPEED_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_ODE_MASK (0x800U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_ODE_SHIFT (11U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_PKE_MASK (0x1000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_PKE_SHIFT (12U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_PUE_MASK (0x2000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_PUE_SHIFT (13U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_PUS_MASK (0xC000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_PUS_SHIFT (14U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_PUS_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_PUS_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_HYS_MASK (0x10000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_POR_B - SW_PAD_CTL_PAD_POR_B SW PAD Control Register */
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_SRE_MASK (0x1U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_SRE_SHIFT (0U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DSE_MASK (0x38U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DSE_SHIFT (3U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DSE(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DSE_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DSE_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_SPEED_MASK (0xC0U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_SPEED_SHIFT (6U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_SPEED_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_SPEED_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_ODE_MASK (0x800U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_ODE_SHIFT (11U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_PKE_MASK (0x1000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_PKE_SHIFT (12U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_PUE_MASK (0x2000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_PUE_SHIFT (13U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_PUS_MASK (0xC000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_PUS_SHIFT (14U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_PUS(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_PUS_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_PUS_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_HYS_MASK (0x10000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_ONOFF - SW_PAD_CTL_PAD_ONOFF SW PAD Control Register */
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_SRE_MASK (0x1U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_SRE_SHIFT (0U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DSE_MASK (0x38U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DSE_SHIFT (3U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DSE(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DSE_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DSE_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_SPEED_MASK (0xC0U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_SPEED_SHIFT (6U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_SPEED_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_SPEED_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_ODE_MASK (0x800U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_ODE_SHIFT (11U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_PKE_MASK (0x1000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_PKE_SHIFT (12U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_PUE_MASK (0x2000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_PUE_SHIFT (13U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_PUS_MASK (0xC000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_PUS_SHIFT (14U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_PUS(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_PUS_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_PUS_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_HYS_MASK (0x10000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_WAKEUP - SW_PAD_CTL_PAD_WAKEUP SW PAD Control Register */
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_SRE_MASK (0x1U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_SRE_SHIFT (0U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DSE_MASK (0x38U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DSE_SHIFT (3U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DSE_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DSE_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_SPEED_MASK (0xC0U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_SPEED_SHIFT (6U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_SPEED_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_SPEED_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_ODE_MASK (0x800U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_ODE_SHIFT (11U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_PKE_MASK (0x1000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_PKE_SHIFT (12U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_PUE_MASK (0x2000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_PUE_SHIFT (13U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_PUS_MASK (0xC000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_PUS_SHIFT (14U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_PUS_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_PUS_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_HYS_MASK (0x10000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_PMIC_ON_REQ - SW_PAD_CTL_PAD_PMIC_ON_REQ SW PAD Control Register */
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_SRE_MASK (0x1U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_SRE_SHIFT (0U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DSE_MASK (0x38U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DSE_SHIFT (3U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DSE_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DSE_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_SPEED_MASK (0xC0U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_SPEED_SHIFT (6U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_SPEED_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_SPEED_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_ODE_MASK (0x800U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_ODE_SHIFT (11U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_PKE_MASK (0x1000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_PKE_SHIFT (12U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_PUE_MASK (0x2000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_PUE_SHIFT (13U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_PUS_MASK (0xC000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_PUS_SHIFT (14U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_PUS_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_PUS_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_HYS_MASK (0x10000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_HYS_SHIFT (16U)

/*! @name SW_PAD_CTL_PAD_PMIC_STBY_REQ - SW_PAD_CTL_PAD_PMIC_STBY_REQ SW PAD Control Register */
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_SRE_MASK (0x1U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_SRE_SHIFT (0U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DSE_MASK (0x38U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DSE_SHIFT (3U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DSE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DSE_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DSE_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_SPEED_MASK (0xC0U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_SPEED_SHIFT (6U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_SPEED(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_SPEED_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_SPEED_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_ODE_MASK (0x800U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_ODE_SHIFT (11U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_PKE_MASK (0x1000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_PKE_SHIFT (12U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_PUE_MASK (0x2000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_PUE_SHIFT (13U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_PUS_MASK (0xC000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_PUS_SHIFT (14U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_PUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_PUS_SHIFT)) & IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_PUS_MASK)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_HYS_MASK (0x10000U)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_HYS_SHIFT (16U)


/*!
 * @}
 */ /* end of group IOMUXC_SNVS_Register_Masks */


/* IOMUXC_SNVS - Peripheral instance base addresses */
/** Peripheral IOMUXC_SNVS base pointer */
#define IOMUXC_SNVS_BASE_PTR                     ((IOMUXC_SNVS_MemMapPtr)0x400A8000u)
/** Array initializer of IOMUXC_SNVS peripheral base pointers */
#define IOMUXC_SNVS_BASE_PTRS                    { IOMUXC_SNVS_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- IOMUXC_SNVS - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_SNVS_Register_Accessor_Macros IOMUXC_SNVS - Register accessor macros
 * @{
 */


/* IOMUXC_SNVS - Register instance definitions */
/* IOMUXC_SNVS */
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP        IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP_REG(IOMUXC_SNVS_BASE_PTR)
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_ON_REQ   IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_ON_REQ_REG(IOMUXC_SNVS_BASE_PTR)
#define IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_STBY_REQ IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_STBY_REQ_REG(IOMUXC_SNVS_BASE_PTR)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE     IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_REG(IOMUXC_SNVS_BASE_PTR)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B         IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_REG(IOMUXC_SNVS_BASE_PTR)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF         IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_REG(IOMUXC_SNVS_BASE_PTR)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP        IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_REG(IOMUXC_SNVS_BASE_PTR)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ   IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_REG(IOMUXC_SNVS_BASE_PTR)
#define IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_REG(IOMUXC_SNVS_BASE_PTR)

/*!
 * @}
 */ /* end of group IOMUXC_SNVS_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group IOMUXC_SNVS_Peripheral */


/* ----------------------------------------------------------------------------
   -- IOMUXC_SNVS_GPR
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_SNVS_GPR_Peripheral IOMUXC_SNVS_GPR
 * @{
 */

/** IOMUXC_SNVS_GPR - Peripheral register structure */
typedef struct IOMUXC_SNVS_GPR_MemMap {
  uint32_t GPR0;                                   /**< GPR0 General Purpose Register, offset: 0x0 */
  uint32_t GPR1;                                   /**< GPR1 General Purpose Register, offset: 0x4 */
  uint32_t GPR2;                                   /**< GPR2 General Purpose Register, offset: 0x8 */
  uint32_t GPR3;                                   /**< GPR3 General Purpose Register, offset: 0xC */
} volatile *IOMUXC_SNVS_GPR_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- IOMUXC_SNVS_GPR - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_SNVS_GPR_Register_Accessor_Macros IOMUXC_SNVS_GPR - Register accessor macros
 * @{
 */


/* IOMUXC_SNVS_GPR - Register accessors */
#define IOMUXC_SNVS_GPR_GPR0_REG(base)           ((base)->GPR0)
#define IOMUXC_SNVS_GPR_GPR1_REG(base)           ((base)->GPR1)
#define IOMUXC_SNVS_GPR_GPR2_REG(base)           ((base)->GPR2)
#define IOMUXC_SNVS_GPR_GPR3_REG(base)           ((base)->GPR3)

/*!
 * @}
 */ /* end of group IOMUXC_SNVS_GPR_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- IOMUXC_SNVS_GPR Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_SNVS_GPR_Register_Masks IOMUXC_SNVS_GPR Register Masks
 * @{
 */

/*! @name GPR3 - GPR3 General Purpose Register */
#define IOMUXC_SNVS_GPR_GPR3_LPSR_MODE_ENABLE_MASK (0x1U)
#define IOMUXC_SNVS_GPR_GPR3_LPSR_MODE_ENABLE_SHIFT (0U)
#define IOMUXC_SNVS_GPR_GPR3_DCDC_STATUS_CAPT_CLR_MASK (0x2U)
#define IOMUXC_SNVS_GPR_GPR3_DCDC_STATUS_CAPT_CLR_SHIFT (1U)
#define IOMUXC_SNVS_GPR_GPR3_POR_PULL_TYPE_MASK  (0xCU)
#define IOMUXC_SNVS_GPR_GPR3_POR_PULL_TYPE_SHIFT (2U)
#define IOMUXC_SNVS_GPR_GPR3_POR_PULL_TYPE(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_SNVS_GPR_GPR3_POR_PULL_TYPE_SHIFT)) & IOMUXC_SNVS_GPR_GPR3_POR_PULL_TYPE_MASK)
#define IOMUXC_SNVS_GPR_GPR3_DCDC_LOW_BAT_MASK   (0x10000U)
#define IOMUXC_SNVS_GPR_GPR3_DCDC_LOW_BAT_SHIFT  (16U)
#define IOMUXC_SNVS_GPR_GPR3_DCDC_OVER_CUR_MASK  (0x20000U)
#define IOMUXC_SNVS_GPR_GPR3_DCDC_OVER_CUR_SHIFT (17U)
#define IOMUXC_SNVS_GPR_GPR3_DCDC_OVER_VOL_MASK  (0x40000U)
#define IOMUXC_SNVS_GPR_GPR3_DCDC_OVER_VOL_SHIFT (18U)
#define IOMUXC_SNVS_GPR_GPR3_DCDC_STS_DC_OK_MASK (0x80000U)
#define IOMUXC_SNVS_GPR_GPR3_DCDC_STS_DC_OK_SHIFT (19U)


/*!
 * @}
 */ /* end of group IOMUXC_SNVS_GPR_Register_Masks */


/* IOMUXC_SNVS_GPR - Peripheral instance base addresses */
/** Peripheral IOMUXC_SNVS_GPR base pointer */
#define IOMUXC_SNVS_GPR_BASE_PTR                 ((IOMUXC_SNVS_GPR_MemMapPtr)0x400A4000u)
/** Array initializer of IOMUXC_SNVS_GPR peripheral base pointers */
#define IOMUXC_SNVS_GPR_BASE_PTRS                { IOMUXC_SNVS_GPR_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- IOMUXC_SNVS_GPR - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_SNVS_GPR_Register_Accessor_Macros IOMUXC_SNVS_GPR - Register accessor macros
 * @{
 */


/* IOMUXC_SNVS_GPR - Register instance definitions */
/* IOMUXC_SNVS_GPR */
#define IOMUXC_SNVS_GPR_GPR0                     IOMUXC_SNVS_GPR_GPR0_REG(IOMUXC_SNVS_GPR_BASE_PTR)
#define IOMUXC_SNVS_GPR_GPR1                     IOMUXC_SNVS_GPR_GPR1_REG(IOMUXC_SNVS_GPR_BASE_PTR)
#define IOMUXC_SNVS_GPR_GPR2                     IOMUXC_SNVS_GPR_GPR2_REG(IOMUXC_SNVS_GPR_BASE_PTR)
#define IOMUXC_SNVS_GPR_GPR3                     IOMUXC_SNVS_GPR_GPR3_REG(IOMUXC_SNVS_GPR_BASE_PTR)

/*!
 * @}
 */ /* end of group IOMUXC_SNVS_GPR_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group IOMUXC_SNVS_GPR_Peripheral */


/* ----------------------------------------------------------------------------
   -- KPP
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup KPP_Peripheral KPP
 * @{
 */

/** KPP - Peripheral register structure */
typedef struct KPP_MemMap {
  uint16_t KPCR;                                   /**< Keypad Control Register, offset: 0x0 */
  uint16_t KPSR;                                   /**< Keypad Status Register, offset: 0x2 */
  uint16_t KDDR;                                   /**< Keypad Data Direction Register, offset: 0x4 */
  uint16_t KPDR;                                   /**< Keypad Data Register, offset: 0x6 */
} volatile *KPP_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- KPP - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup KPP_Register_Accessor_Macros KPP - Register accessor macros
 * @{
 */


/* KPP - Register accessors */
#define KPP_KPCR_REG(base)                       ((base)->KPCR)
#define KPP_KPSR_REG(base)                       ((base)->KPSR)
#define KPP_KDDR_REG(base)                       ((base)->KDDR)
#define KPP_KPDR_REG(base)                       ((base)->KPDR)

/*!
 * @}
 */ /* end of group KPP_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- KPP Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup KPP_Register_Masks KPP Register Masks
 * @{
 */

/*! @name KPCR - Keypad Control Register */
#define KPP_KPCR_KRE_MASK                        (0xFFU)
#define KPP_KPCR_KRE_SHIFT                       (0U)
#define KPP_KPCR_KRE(x)                          (((uint16_t)(((uint16_t)(x)) << KPP_KPCR_KRE_SHIFT)) & KPP_KPCR_KRE_MASK)
#define KPP_KPCR_KCO_MASK                        (0xFF00U)
#define KPP_KPCR_KCO_SHIFT                       (8U)
#define KPP_KPCR_KCO(x)                          (((uint16_t)(((uint16_t)(x)) << KPP_KPCR_KCO_SHIFT)) & KPP_KPCR_KCO_MASK)

/*! @name KPSR - Keypad Status Register */
#define KPP_KPSR_KPKD_MASK                       (0x1U)
#define KPP_KPSR_KPKD_SHIFT                      (0U)
#define KPP_KPSR_KPKR_MASK                       (0x2U)
#define KPP_KPSR_KPKR_SHIFT                      (1U)
#define KPP_KPSR_KDSC_MASK                       (0x4U)
#define KPP_KPSR_KDSC_SHIFT                      (2U)
#define KPP_KPSR_KRSS_MASK                       (0x8U)
#define KPP_KPSR_KRSS_SHIFT                      (3U)
#define KPP_KPSR_KDIE_MASK                       (0x100U)
#define KPP_KPSR_KDIE_SHIFT                      (8U)
#define KPP_KPSR_KRIE_MASK                       (0x200U)
#define KPP_KPSR_KRIE_SHIFT                      (9U)

/*! @name KDDR - Keypad Data Direction Register */
#define KPP_KDDR_KRDD_MASK                       (0xFFU)
#define KPP_KDDR_KRDD_SHIFT                      (0U)
#define KPP_KDDR_KRDD(x)                         (((uint16_t)(((uint16_t)(x)) << KPP_KDDR_KRDD_SHIFT)) & KPP_KDDR_KRDD_MASK)
#define KPP_KDDR_KCDD_MASK                       (0xFF00U)
#define KPP_KDDR_KCDD_SHIFT                      (8U)
#define KPP_KDDR_KCDD(x)                         (((uint16_t)(((uint16_t)(x)) << KPP_KDDR_KCDD_SHIFT)) & KPP_KDDR_KCDD_MASK)

/*! @name KPDR - Keypad Data Register */
#define KPP_KPDR_KRD_MASK                        (0xFFU)
#define KPP_KPDR_KRD_SHIFT                       (0U)
#define KPP_KPDR_KRD(x)                          (((uint16_t)(((uint16_t)(x)) << KPP_KPDR_KRD_SHIFT)) & KPP_KPDR_KRD_MASK)
#define KPP_KPDR_KCD_MASK                        (0xFF00U)
#define KPP_KPDR_KCD_SHIFT                       (8U)
#define KPP_KPDR_KCD(x)                          (((uint16_t)(((uint16_t)(x)) << KPP_KPDR_KCD_SHIFT)) & KPP_KPDR_KCD_MASK)


/*!
 * @}
 */ /* end of group KPP_Register_Masks */


/* KPP - Peripheral instance base addresses */
/** Peripheral KPP base pointer */
#define KPP_BASE_PTR                             ((KPP_MemMapPtr)0x401FC000u)
/** Array initializer of KPP peripheral base pointers */
#define KPP_BASE_PTRS                            { KPP_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- KPP - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup KPP_Register_Accessor_Macros KPP - Register accessor macros
 * @{
 */


/* KPP - Register instance definitions */
/* KPP */
#define KPP_KPCR                                 KPP_KPCR_REG(KPP_BASE_PTR)
#define KPP_KPSR                                 KPP_KPSR_REG(KPP_BASE_PTR)
#define KPP_KDDR                                 KPP_KDDR_REG(KPP_BASE_PTR)
#define KPP_KPDR                                 KPP_KPDR_REG(KPP_BASE_PTR)

/*!
 * @}
 */ /* end of group KPP_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group KPP_Peripheral */


/* ----------------------------------------------------------------------------
   -- LPI2C
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LPI2C_Peripheral LPI2C
 * @{
 */

/** LPI2C - Peripheral register structure */
typedef struct LPI2C_MemMap {
  uint32_t VERID;                                  /**< Version ID Register, offset: 0x0 */
  uint32_t PARAM;                                  /**< Parameter Register, offset: 0x4 */
  uint8_t RESERVED_0[8];
  uint32_t MCR;                                    /**< Master Control Register, offset: 0x10 */
  uint32_t MSR;                                    /**< Master Status Register, offset: 0x14 */
  uint32_t MIER;                                   /**< Master Interrupt Enable Register, offset: 0x18 */
  uint32_t MDER;                                   /**< Master DMA Enable Register, offset: 0x1C */
  uint32_t MCFGR0;                                 /**< Master Configuration Register 0, offset: 0x20 */
  uint32_t MCFGR1;                                 /**< Master Configuration Register 1, offset: 0x24 */
  uint32_t MCFGR2;                                 /**< Master Configuration Register 2, offset: 0x28 */
  uint32_t MCFGR3;                                 /**< Master Configuration Register 3, offset: 0x2C */
  uint8_t RESERVED_1[16];
  uint32_t MDMR;                                   /**< Master Data Match Register, offset: 0x40 */
  uint8_t RESERVED_2[4];
  uint32_t MCCR0;                                  /**< Master Clock Configuration Register 0, offset: 0x48 */
  uint8_t RESERVED_3[4];
  uint32_t MCCR1;                                  /**< Master Clock Configuration Register 1, offset: 0x50 */
  uint8_t RESERVED_4[4];
  uint32_t MFCR;                                   /**< Master FIFO Control Register, offset: 0x58 */
  uint32_t MFSR;                                   /**< Master FIFO Status Register, offset: 0x5C */
  uint32_t MTDR;                                   /**< Master Transmit Data Register, offset: 0x60 */
  uint8_t RESERVED_5[12];
  uint32_t MRDR;                                   /**< Master Receive Data Register, offset: 0x70 */
  uint8_t RESERVED_6[156];
  uint32_t SCR;                                    /**< Slave Control Register, offset: 0x110 */
  uint32_t SSR;                                    /**< Slave Status Register, offset: 0x114 */
  uint32_t SIER;                                   /**< Slave Interrupt Enable Register, offset: 0x118 */
  uint32_t SDER;                                   /**< Slave DMA Enable Register, offset: 0x11C */
  uint8_t RESERVED_7[4];
  uint32_t SCFGR1;                                 /**< Slave Configuration Register 1, offset: 0x124 */
  uint32_t SCFGR2;                                 /**< Slave Configuration Register 2, offset: 0x128 */
  uint8_t RESERVED_8[20];
  uint32_t SAMR;                                   /**< Slave Address Match Register, offset: 0x140 */
  uint8_t RESERVED_9[12];
  uint32_t SASR;                                   /**< Slave Address Status Register, offset: 0x150 */
  uint32_t STAR;                                   /**< Slave Transmit ACK Register, offset: 0x154 */
  uint8_t RESERVED_10[8];
  uint32_t STDR;                                   /**< Slave Transmit Data Register, offset: 0x160 */
  uint8_t RESERVED_11[12];
  uint32_t SRDR;                                   /**< Slave Receive Data Register, offset: 0x170 */
} volatile *LPI2C_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- LPI2C - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LPI2C_Register_Accessor_Macros LPI2C - Register accessor macros
 * @{
 */


/* LPI2C - Register accessors */
#define LPI2C_VERID_REG(base)                    ((base)->VERID)
#define LPI2C_PARAM_REG(base)                    ((base)->PARAM)
#define LPI2C_MCR_REG(base)                      ((base)->MCR)
#define LPI2C_MSR_REG(base)                      ((base)->MSR)
#define LPI2C_MIER_REG(base)                     ((base)->MIER)
#define LPI2C_MDER_REG(base)                     ((base)->MDER)
#define LPI2C_MCFGR0_REG(base)                   ((base)->MCFGR0)
#define LPI2C_MCFGR1_REG(base)                   ((base)->MCFGR1)
#define LPI2C_MCFGR2_REG(base)                   ((base)->MCFGR2)
#define LPI2C_MCFGR3_REG(base)                   ((base)->MCFGR3)
#define LPI2C_MDMR_REG(base)                     ((base)->MDMR)
#define LPI2C_MCCR0_REG(base)                    ((base)->MCCR0)
#define LPI2C_MCCR1_REG(base)                    ((base)->MCCR1)
#define LPI2C_MFCR_REG(base)                     ((base)->MFCR)
#define LPI2C_MFSR_REG(base)                     ((base)->MFSR)
#define LPI2C_MTDR_REG(base)                     ((base)->MTDR)
#define LPI2C_MRDR_REG(base)                     ((base)->MRDR)
#define LPI2C_SCR_REG(base)                      ((base)->SCR)
#define LPI2C_SSR_REG(base)                      ((base)->SSR)
#define LPI2C_SIER_REG(base)                     ((base)->SIER)
#define LPI2C_SDER_REG(base)                     ((base)->SDER)
#define LPI2C_SCFGR1_REG(base)                   ((base)->SCFGR1)
#define LPI2C_SCFGR2_REG(base)                   ((base)->SCFGR2)
#define LPI2C_SAMR_REG(base)                     ((base)->SAMR)
#define LPI2C_SASR_REG(base)                     ((base)->SASR)
#define LPI2C_STAR_REG(base)                     ((base)->STAR)
#define LPI2C_STDR_REG(base)                     ((base)->STDR)
#define LPI2C_SRDR_REG(base)                     ((base)->SRDR)

/*!
 * @}
 */ /* end of group LPI2C_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- LPI2C Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LPI2C_Register_Masks LPI2C Register Masks
 * @{
 */

/*! @name VERID - Version ID Register */
#define LPI2C_VERID_FEATURE_MASK                 (0xFFFFU)
#define LPI2C_VERID_FEATURE_SHIFT                (0U)
#define LPI2C_VERID_FEATURE(x)                   (((uint32_t)(((uint32_t)(x)) << LPI2C_VERID_FEATURE_SHIFT)) & LPI2C_VERID_FEATURE_MASK)
#define LPI2C_VERID_MINOR_MASK                   (0xFF0000U)
#define LPI2C_VERID_MINOR_SHIFT                  (16U)
#define LPI2C_VERID_MINOR(x)                     (((uint32_t)(((uint32_t)(x)) << LPI2C_VERID_MINOR_SHIFT)) & LPI2C_VERID_MINOR_MASK)
#define LPI2C_VERID_MAJOR_MASK                   (0xFF000000U)
#define LPI2C_VERID_MAJOR_SHIFT                  (24U)
#define LPI2C_VERID_MAJOR(x)                     (((uint32_t)(((uint32_t)(x)) << LPI2C_VERID_MAJOR_SHIFT)) & LPI2C_VERID_MAJOR_MASK)

/*! @name PARAM - Parameter Register */
#define LPI2C_PARAM_MTXFIFO_MASK                 (0xFU)
#define LPI2C_PARAM_MTXFIFO_SHIFT                (0U)
#define LPI2C_PARAM_MTXFIFO(x)                   (((uint32_t)(((uint32_t)(x)) << LPI2C_PARAM_MTXFIFO_SHIFT)) & LPI2C_PARAM_MTXFIFO_MASK)
#define LPI2C_PARAM_MRXFIFO_MASK                 (0xF00U)
#define LPI2C_PARAM_MRXFIFO_SHIFT                (8U)
#define LPI2C_PARAM_MRXFIFO(x)                   (((uint32_t)(((uint32_t)(x)) << LPI2C_PARAM_MRXFIFO_SHIFT)) & LPI2C_PARAM_MRXFIFO_MASK)

/*! @name MCR - Master Control Register */
#define LPI2C_MCR_MEN_MASK                       (0x1U)
#define LPI2C_MCR_MEN_SHIFT                      (0U)
#define LPI2C_MCR_RST_MASK                       (0x2U)
#define LPI2C_MCR_RST_SHIFT                      (1U)
#define LPI2C_MCR_DOZEN_MASK                     (0x4U)
#define LPI2C_MCR_DOZEN_SHIFT                    (2U)
#define LPI2C_MCR_DBGEN_MASK                     (0x8U)
#define LPI2C_MCR_DBGEN_SHIFT                    (3U)
#define LPI2C_MCR_RTF_MASK                       (0x100U)
#define LPI2C_MCR_RTF_SHIFT                      (8U)
#define LPI2C_MCR_RRF_MASK                       (0x200U)
#define LPI2C_MCR_RRF_SHIFT                      (9U)

/*! @name MSR - Master Status Register */
#define LPI2C_MSR_TDF_MASK                       (0x1U)
#define LPI2C_MSR_TDF_SHIFT                      (0U)
#define LPI2C_MSR_RDF_MASK                       (0x2U)
#define LPI2C_MSR_RDF_SHIFT                      (1U)
#define LPI2C_MSR_EPF_MASK                       (0x100U)
#define LPI2C_MSR_EPF_SHIFT                      (8U)
#define LPI2C_MSR_SDF_MASK                       (0x200U)
#define LPI2C_MSR_SDF_SHIFT                      (9U)
#define LPI2C_MSR_NDF_MASK                       (0x400U)
#define LPI2C_MSR_NDF_SHIFT                      (10U)
#define LPI2C_MSR_ALF_MASK                       (0x800U)
#define LPI2C_MSR_ALF_SHIFT                      (11U)
#define LPI2C_MSR_FEF_MASK                       (0x1000U)
#define LPI2C_MSR_FEF_SHIFT                      (12U)
#define LPI2C_MSR_PLTF_MASK                      (0x2000U)
#define LPI2C_MSR_PLTF_SHIFT                     (13U)
#define LPI2C_MSR_DMF_MASK                       (0x4000U)
#define LPI2C_MSR_DMF_SHIFT                      (14U)
#define LPI2C_MSR_MBF_MASK                       (0x1000000U)
#define LPI2C_MSR_MBF_SHIFT                      (24U)
#define LPI2C_MSR_BBF_MASK                       (0x2000000U)
#define LPI2C_MSR_BBF_SHIFT                      (25U)

/*! @name MIER - Master Interrupt Enable Register */
#define LPI2C_MIER_TDIE_MASK                     (0x1U)
#define LPI2C_MIER_TDIE_SHIFT                    (0U)
#define LPI2C_MIER_RDIE_MASK                     (0x2U)
#define LPI2C_MIER_RDIE_SHIFT                    (1U)
#define LPI2C_MIER_EPIE_MASK                     (0x100U)
#define LPI2C_MIER_EPIE_SHIFT                    (8U)
#define LPI2C_MIER_SDIE_MASK                     (0x200U)
#define LPI2C_MIER_SDIE_SHIFT                    (9U)
#define LPI2C_MIER_NDIE_MASK                     (0x400U)
#define LPI2C_MIER_NDIE_SHIFT                    (10U)
#define LPI2C_MIER_ALIE_MASK                     (0x800U)
#define LPI2C_MIER_ALIE_SHIFT                    (11U)
#define LPI2C_MIER_FEIE_MASK                     (0x1000U)
#define LPI2C_MIER_FEIE_SHIFT                    (12U)
#define LPI2C_MIER_PLTIE_MASK                    (0x2000U)
#define LPI2C_MIER_PLTIE_SHIFT                   (13U)
#define LPI2C_MIER_DMIE_MASK                     (0x4000U)
#define LPI2C_MIER_DMIE_SHIFT                    (14U)

/*! @name MDER - Master DMA Enable Register */
#define LPI2C_MDER_TDDE_MASK                     (0x1U)
#define LPI2C_MDER_TDDE_SHIFT                    (0U)
#define LPI2C_MDER_RDDE_MASK                     (0x2U)
#define LPI2C_MDER_RDDE_SHIFT                    (1U)

/*! @name MCFGR0 - Master Configuration Register 0 */
#define LPI2C_MCFGR0_HREN_MASK                   (0x1U)
#define LPI2C_MCFGR0_HREN_SHIFT                  (0U)
#define LPI2C_MCFGR0_HRPOL_MASK                  (0x2U)
#define LPI2C_MCFGR0_HRPOL_SHIFT                 (1U)
#define LPI2C_MCFGR0_HRSEL_MASK                  (0x4U)
#define LPI2C_MCFGR0_HRSEL_SHIFT                 (2U)
#define LPI2C_MCFGR0_CIRFIFO_MASK                (0x100U)
#define LPI2C_MCFGR0_CIRFIFO_SHIFT               (8U)
#define LPI2C_MCFGR0_RDMO_MASK                   (0x200U)
#define LPI2C_MCFGR0_RDMO_SHIFT                  (9U)

/*! @name MCFGR1 - Master Configuration Register 1 */
#define LPI2C_MCFGR1_PRESCALE_MASK               (0x7U)
#define LPI2C_MCFGR1_PRESCALE_SHIFT              (0U)
#define LPI2C_MCFGR1_PRESCALE(x)                 (((uint32_t)(((uint32_t)(x)) << LPI2C_MCFGR1_PRESCALE_SHIFT)) & LPI2C_MCFGR1_PRESCALE_MASK)
#define LPI2C_MCFGR1_AUTOSTOP_MASK               (0x100U)
#define LPI2C_MCFGR1_AUTOSTOP_SHIFT              (8U)
#define LPI2C_MCFGR1_IGNACK_MASK                 (0x200U)
#define LPI2C_MCFGR1_IGNACK_SHIFT                (9U)
#define LPI2C_MCFGR1_TIMECFG_MASK                (0x400U)
#define LPI2C_MCFGR1_TIMECFG_SHIFT               (10U)
#define LPI2C_MCFGR1_MATCFG_MASK                 (0x70000U)
#define LPI2C_MCFGR1_MATCFG_SHIFT                (16U)
#define LPI2C_MCFGR1_MATCFG(x)                   (((uint32_t)(((uint32_t)(x)) << LPI2C_MCFGR1_MATCFG_SHIFT)) & LPI2C_MCFGR1_MATCFG_MASK)
#define LPI2C_MCFGR1_PINCFG_MASK                 (0x7000000U)
#define LPI2C_MCFGR1_PINCFG_SHIFT                (24U)
#define LPI2C_MCFGR1_PINCFG(x)                   (((uint32_t)(((uint32_t)(x)) << LPI2C_MCFGR1_PINCFG_SHIFT)) & LPI2C_MCFGR1_PINCFG_MASK)

/*! @name MCFGR2 - Master Configuration Register 2 */
#define LPI2C_MCFGR2_BUSIDLE_MASK                (0xFFFU)
#define LPI2C_MCFGR2_BUSIDLE_SHIFT               (0U)
#define LPI2C_MCFGR2_BUSIDLE(x)                  (((uint32_t)(((uint32_t)(x)) << LPI2C_MCFGR2_BUSIDLE_SHIFT)) & LPI2C_MCFGR2_BUSIDLE_MASK)
#define LPI2C_MCFGR2_FILTSCL_MASK                (0xF0000U)
#define LPI2C_MCFGR2_FILTSCL_SHIFT               (16U)
#define LPI2C_MCFGR2_FILTSCL(x)                  (((uint32_t)(((uint32_t)(x)) << LPI2C_MCFGR2_FILTSCL_SHIFT)) & LPI2C_MCFGR2_FILTSCL_MASK)
#define LPI2C_MCFGR2_FILTSDA_MASK                (0xF000000U)
#define LPI2C_MCFGR2_FILTSDA_SHIFT               (24U)
#define LPI2C_MCFGR2_FILTSDA(x)                  (((uint32_t)(((uint32_t)(x)) << LPI2C_MCFGR2_FILTSDA_SHIFT)) & LPI2C_MCFGR2_FILTSDA_MASK)

/*! @name MCFGR3 - Master Configuration Register 3 */
#define LPI2C_MCFGR3_PINLOW_MASK                 (0xFFF00U)
#define LPI2C_MCFGR3_PINLOW_SHIFT                (8U)
#define LPI2C_MCFGR3_PINLOW(x)                   (((uint32_t)(((uint32_t)(x)) << LPI2C_MCFGR3_PINLOW_SHIFT)) & LPI2C_MCFGR3_PINLOW_MASK)

/*! @name MDMR - Master Data Match Register */
#define LPI2C_MDMR_MATCH0_MASK                   (0xFFU)
#define LPI2C_MDMR_MATCH0_SHIFT                  (0U)
#define LPI2C_MDMR_MATCH0(x)                     (((uint32_t)(((uint32_t)(x)) << LPI2C_MDMR_MATCH0_SHIFT)) & LPI2C_MDMR_MATCH0_MASK)
#define LPI2C_MDMR_MATCH1_MASK                   (0xFF0000U)
#define LPI2C_MDMR_MATCH1_SHIFT                  (16U)
#define LPI2C_MDMR_MATCH1(x)                     (((uint32_t)(((uint32_t)(x)) << LPI2C_MDMR_MATCH1_SHIFT)) & LPI2C_MDMR_MATCH1_MASK)

/*! @name MCCR0 - Master Clock Configuration Register 0 */
#define LPI2C_MCCR0_CLKLO_MASK                   (0x3FU)
#define LPI2C_MCCR0_CLKLO_SHIFT                  (0U)
#define LPI2C_MCCR0_CLKLO(x)                     (((uint32_t)(((uint32_t)(x)) << LPI2C_MCCR0_CLKLO_SHIFT)) & LPI2C_MCCR0_CLKLO_MASK)
#define LPI2C_MCCR0_CLKHI_MASK                   (0x3F00U)
#define LPI2C_MCCR0_CLKHI_SHIFT                  (8U)
#define LPI2C_MCCR0_CLKHI(x)                     (((uint32_t)(((uint32_t)(x)) << LPI2C_MCCR0_CLKHI_SHIFT)) & LPI2C_MCCR0_CLKHI_MASK)
#define LPI2C_MCCR0_SETHOLD_MASK                 (0x3F0000U)
#define LPI2C_MCCR0_SETHOLD_SHIFT                (16U)
#define LPI2C_MCCR0_SETHOLD(x)                   (((uint32_t)(((uint32_t)(x)) << LPI2C_MCCR0_SETHOLD_SHIFT)) & LPI2C_MCCR0_SETHOLD_MASK)
#define LPI2C_MCCR0_DATAVD_MASK                  (0x3F000000U)
#define LPI2C_MCCR0_DATAVD_SHIFT                 (24U)
#define LPI2C_MCCR0_DATAVD(x)                    (((uint32_t)(((uint32_t)(x)) << LPI2C_MCCR0_DATAVD_SHIFT)) & LPI2C_MCCR0_DATAVD_MASK)

/*! @name MCCR1 - Master Clock Configuration Register 1 */
#define LPI2C_MCCR1_CLKLO_MASK                   (0x3FU)
#define LPI2C_MCCR1_CLKLO_SHIFT                  (0U)
#define LPI2C_MCCR1_CLKLO(x)                     (((uint32_t)(((uint32_t)(x)) << LPI2C_MCCR1_CLKLO_SHIFT)) & LPI2C_MCCR1_CLKLO_MASK)
#define LPI2C_MCCR1_CLKHI_MASK                   (0x3F00U)
#define LPI2C_MCCR1_CLKHI_SHIFT                  (8U)
#define LPI2C_MCCR1_CLKHI(x)                     (((uint32_t)(((uint32_t)(x)) << LPI2C_MCCR1_CLKHI_SHIFT)) & LPI2C_MCCR1_CLKHI_MASK)
#define LPI2C_MCCR1_SETHOLD_MASK                 (0x3F0000U)
#define LPI2C_MCCR1_SETHOLD_SHIFT                (16U)
#define LPI2C_MCCR1_SETHOLD(x)                   (((uint32_t)(((uint32_t)(x)) << LPI2C_MCCR1_SETHOLD_SHIFT)) & LPI2C_MCCR1_SETHOLD_MASK)
#define LPI2C_MCCR1_DATAVD_MASK                  (0x3F000000U)
#define LPI2C_MCCR1_DATAVD_SHIFT                 (24U)
#define LPI2C_MCCR1_DATAVD(x)                    (((uint32_t)(((uint32_t)(x)) << LPI2C_MCCR1_DATAVD_SHIFT)) & LPI2C_MCCR1_DATAVD_MASK)

/*! @name MFCR - Master FIFO Control Register */
#define LPI2C_MFCR_TXWATER_MASK                  (0x3U)
#define LPI2C_MFCR_TXWATER_SHIFT                 (0U)
#define LPI2C_MFCR_TXWATER(x)                    (((uint32_t)(((uint32_t)(x)) << LPI2C_MFCR_TXWATER_SHIFT)) & LPI2C_MFCR_TXWATER_MASK)
#define LPI2C_MFCR_RXWATER_MASK                  (0x30000U)
#define LPI2C_MFCR_RXWATER_SHIFT                 (16U)
#define LPI2C_MFCR_RXWATER(x)                    (((uint32_t)(((uint32_t)(x)) << LPI2C_MFCR_RXWATER_SHIFT)) & LPI2C_MFCR_RXWATER_MASK)

/*! @name MFSR - Master FIFO Status Register */
#define LPI2C_MFSR_TXCOUNT_MASK                  (0x7U)
#define LPI2C_MFSR_TXCOUNT_SHIFT                 (0U)
#define LPI2C_MFSR_TXCOUNT(x)                    (((uint32_t)(((uint32_t)(x)) << LPI2C_MFSR_TXCOUNT_SHIFT)) & LPI2C_MFSR_TXCOUNT_MASK)
#define LPI2C_MFSR_RXCOUNT_MASK                  (0x70000U)
#define LPI2C_MFSR_RXCOUNT_SHIFT                 (16U)
#define LPI2C_MFSR_RXCOUNT(x)                    (((uint32_t)(((uint32_t)(x)) << LPI2C_MFSR_RXCOUNT_SHIFT)) & LPI2C_MFSR_RXCOUNT_MASK)

/*! @name MTDR - Master Transmit Data Register */
#define LPI2C_MTDR_DATA_MASK                     (0xFFU)
#define LPI2C_MTDR_DATA_SHIFT                    (0U)
#define LPI2C_MTDR_DATA(x)                       (((uint32_t)(((uint32_t)(x)) << LPI2C_MTDR_DATA_SHIFT)) & LPI2C_MTDR_DATA_MASK)
#define LPI2C_MTDR_CMD_MASK                      (0x700U)
#define LPI2C_MTDR_CMD_SHIFT                     (8U)
#define LPI2C_MTDR_CMD(x)                        (((uint32_t)(((uint32_t)(x)) << LPI2C_MTDR_CMD_SHIFT)) & LPI2C_MTDR_CMD_MASK)

/*! @name MRDR - Master Receive Data Register */
#define LPI2C_MRDR_DATA_MASK                     (0xFFU)
#define LPI2C_MRDR_DATA_SHIFT                    (0U)
#define LPI2C_MRDR_DATA(x)                       (((uint32_t)(((uint32_t)(x)) << LPI2C_MRDR_DATA_SHIFT)) & LPI2C_MRDR_DATA_MASK)
#define LPI2C_MRDR_RXEMPTY_MASK                  (0x4000U)
#define LPI2C_MRDR_RXEMPTY_SHIFT                 (14U)

/*! @name SCR - Slave Control Register */
#define LPI2C_SCR_SEN_MASK                       (0x1U)
#define LPI2C_SCR_SEN_SHIFT                      (0U)
#define LPI2C_SCR_RST_MASK                       (0x2U)
#define LPI2C_SCR_RST_SHIFT                      (1U)
#define LPI2C_SCR_FILTEN_MASK                    (0x10U)
#define LPI2C_SCR_FILTEN_SHIFT                   (4U)
#define LPI2C_SCR_FILTDZ_MASK                    (0x20U)
#define LPI2C_SCR_FILTDZ_SHIFT                   (5U)
#define LPI2C_SCR_RTF_MASK                       (0x100U)
#define LPI2C_SCR_RTF_SHIFT                      (8U)
#define LPI2C_SCR_RRF_MASK                       (0x200U)
#define LPI2C_SCR_RRF_SHIFT                      (9U)

/*! @name SSR - Slave Status Register */
#define LPI2C_SSR_TDF_MASK                       (0x1U)
#define LPI2C_SSR_TDF_SHIFT                      (0U)
#define LPI2C_SSR_RDF_MASK                       (0x2U)
#define LPI2C_SSR_RDF_SHIFT                      (1U)
#define LPI2C_SSR_AVF_MASK                       (0x4U)
#define LPI2C_SSR_AVF_SHIFT                      (2U)
#define LPI2C_SSR_TAF_MASK                       (0x8U)
#define LPI2C_SSR_TAF_SHIFT                      (3U)
#define LPI2C_SSR_RSF_MASK                       (0x100U)
#define LPI2C_SSR_RSF_SHIFT                      (8U)
#define LPI2C_SSR_SDF_MASK                       (0x200U)
#define LPI2C_SSR_SDF_SHIFT                      (9U)
#define LPI2C_SSR_BEF_MASK                       (0x400U)
#define LPI2C_SSR_BEF_SHIFT                      (10U)
#define LPI2C_SSR_FEF_MASK                       (0x800U)
#define LPI2C_SSR_FEF_SHIFT                      (11U)
#define LPI2C_SSR_AM0F_MASK                      (0x1000U)
#define LPI2C_SSR_AM0F_SHIFT                     (12U)
#define LPI2C_SSR_AM1F_MASK                      (0x2000U)
#define LPI2C_SSR_AM1F_SHIFT                     (13U)
#define LPI2C_SSR_GCF_MASK                       (0x4000U)
#define LPI2C_SSR_GCF_SHIFT                      (14U)
#define LPI2C_SSR_SARF_MASK                      (0x8000U)
#define LPI2C_SSR_SARF_SHIFT                     (15U)
#define LPI2C_SSR_SBF_MASK                       (0x1000000U)
#define LPI2C_SSR_SBF_SHIFT                      (24U)
#define LPI2C_SSR_BBF_MASK                       (0x2000000U)
#define LPI2C_SSR_BBF_SHIFT                      (25U)

/*! @name SIER - Slave Interrupt Enable Register */
#define LPI2C_SIER_TDIE_MASK                     (0x1U)
#define LPI2C_SIER_TDIE_SHIFT                    (0U)
#define LPI2C_SIER_RDIE_MASK                     (0x2U)
#define LPI2C_SIER_RDIE_SHIFT                    (1U)
#define LPI2C_SIER_AVIE_MASK                     (0x4U)
#define LPI2C_SIER_AVIE_SHIFT                    (2U)
#define LPI2C_SIER_TAIE_MASK                     (0x8U)
#define LPI2C_SIER_TAIE_SHIFT                    (3U)
#define LPI2C_SIER_RSIE_MASK                     (0x100U)
#define LPI2C_SIER_RSIE_SHIFT                    (8U)
#define LPI2C_SIER_SDIE_MASK                     (0x200U)
#define LPI2C_SIER_SDIE_SHIFT                    (9U)
#define LPI2C_SIER_BEIE_MASK                     (0x400U)
#define LPI2C_SIER_BEIE_SHIFT                    (10U)
#define LPI2C_SIER_FEIE_MASK                     (0x800U)
#define LPI2C_SIER_FEIE_SHIFT                    (11U)
#define LPI2C_SIER_AM0IE_MASK                    (0x1000U)
#define LPI2C_SIER_AM0IE_SHIFT                   (12U)
#define LPI2C_SIER_AM1F_MASK                     (0x2000U)
#define LPI2C_SIER_AM1F_SHIFT                    (13U)
#define LPI2C_SIER_GCIE_MASK                     (0x4000U)
#define LPI2C_SIER_GCIE_SHIFT                    (14U)
#define LPI2C_SIER_SARIE_MASK                    (0x8000U)
#define LPI2C_SIER_SARIE_SHIFT                   (15U)

/*! @name SDER - Slave DMA Enable Register */
#define LPI2C_SDER_TDDE_MASK                     (0x1U)
#define LPI2C_SDER_TDDE_SHIFT                    (0U)
#define LPI2C_SDER_RDDE_MASK                     (0x2U)
#define LPI2C_SDER_RDDE_SHIFT                    (1U)
#define LPI2C_SDER_AVDE_MASK                     (0x4U)
#define LPI2C_SDER_AVDE_SHIFT                    (2U)

/*! @name SCFGR1 - Slave Configuration Register 1 */
#define LPI2C_SCFGR1_ADRSTALL_MASK               (0x1U)
#define LPI2C_SCFGR1_ADRSTALL_SHIFT              (0U)
#define LPI2C_SCFGR1_RXSTALL_MASK                (0x2U)
#define LPI2C_SCFGR1_RXSTALL_SHIFT               (1U)
#define LPI2C_SCFGR1_TXDSTALL_MASK               (0x4U)
#define LPI2C_SCFGR1_TXDSTALL_SHIFT              (2U)
#define LPI2C_SCFGR1_ACKSTALL_MASK               (0x8U)
#define LPI2C_SCFGR1_ACKSTALL_SHIFT              (3U)
#define LPI2C_SCFGR1_GCEN_MASK                   (0x100U)
#define LPI2C_SCFGR1_GCEN_SHIFT                  (8U)
#define LPI2C_SCFGR1_SAEN_MASK                   (0x200U)
#define LPI2C_SCFGR1_SAEN_SHIFT                  (9U)
#define LPI2C_SCFGR1_TXCFG_MASK                  (0x400U)
#define LPI2C_SCFGR1_TXCFG_SHIFT                 (10U)
#define LPI2C_SCFGR1_RXCFG_MASK                  (0x800U)
#define LPI2C_SCFGR1_RXCFG_SHIFT                 (11U)
#define LPI2C_SCFGR1_IGNACK_MASK                 (0x1000U)
#define LPI2C_SCFGR1_IGNACK_SHIFT                (12U)
#define LPI2C_SCFGR1_HSMEN_MASK                  (0x2000U)
#define LPI2C_SCFGR1_HSMEN_SHIFT                 (13U)
#define LPI2C_SCFGR1_ADDRCFG_MASK                (0x70000U)
#define LPI2C_SCFGR1_ADDRCFG_SHIFT               (16U)
#define LPI2C_SCFGR1_ADDRCFG(x)                  (((uint32_t)(((uint32_t)(x)) << LPI2C_SCFGR1_ADDRCFG_SHIFT)) & LPI2C_SCFGR1_ADDRCFG_MASK)

/*! @name SCFGR2 - Slave Configuration Register 2 */
#define LPI2C_SCFGR2_CLKHOLD_MASK                (0xFU)
#define LPI2C_SCFGR2_CLKHOLD_SHIFT               (0U)
#define LPI2C_SCFGR2_CLKHOLD(x)                  (((uint32_t)(((uint32_t)(x)) << LPI2C_SCFGR2_CLKHOLD_SHIFT)) & LPI2C_SCFGR2_CLKHOLD_MASK)
#define LPI2C_SCFGR2_DATAVD_MASK                 (0x3F00U)
#define LPI2C_SCFGR2_DATAVD_SHIFT                (8U)
#define LPI2C_SCFGR2_DATAVD(x)                   (((uint32_t)(((uint32_t)(x)) << LPI2C_SCFGR2_DATAVD_SHIFT)) & LPI2C_SCFGR2_DATAVD_MASK)
#define LPI2C_SCFGR2_FILTSCL_MASK                (0xF0000U)
#define LPI2C_SCFGR2_FILTSCL_SHIFT               (16U)
#define LPI2C_SCFGR2_FILTSCL(x)                  (((uint32_t)(((uint32_t)(x)) << LPI2C_SCFGR2_FILTSCL_SHIFT)) & LPI2C_SCFGR2_FILTSCL_MASK)
#define LPI2C_SCFGR2_FILTSDA_MASK                (0xF000000U)
#define LPI2C_SCFGR2_FILTSDA_SHIFT               (24U)
#define LPI2C_SCFGR2_FILTSDA(x)                  (((uint32_t)(((uint32_t)(x)) << LPI2C_SCFGR2_FILTSDA_SHIFT)) & LPI2C_SCFGR2_FILTSDA_MASK)

/*! @name SAMR - Slave Address Match Register */
#define LPI2C_SAMR_ADDR0_MASK                    (0x7FEU)
#define LPI2C_SAMR_ADDR0_SHIFT                   (1U)
#define LPI2C_SAMR_ADDR0(x)                      (((uint32_t)(((uint32_t)(x)) << LPI2C_SAMR_ADDR0_SHIFT)) & LPI2C_SAMR_ADDR0_MASK)
#define LPI2C_SAMR_ADDR1_MASK                    (0x7FE0000U)
#define LPI2C_SAMR_ADDR1_SHIFT                   (17U)
#define LPI2C_SAMR_ADDR1(x)                      (((uint32_t)(((uint32_t)(x)) << LPI2C_SAMR_ADDR1_SHIFT)) & LPI2C_SAMR_ADDR1_MASK)

/*! @name SASR - Slave Address Status Register */
#define LPI2C_SASR_RADDR_MASK                    (0x7FFU)
#define LPI2C_SASR_RADDR_SHIFT                   (0U)
#define LPI2C_SASR_RADDR(x)                      (((uint32_t)(((uint32_t)(x)) << LPI2C_SASR_RADDR_SHIFT)) & LPI2C_SASR_RADDR_MASK)
#define LPI2C_SASR_ANV_MASK                      (0x4000U)
#define LPI2C_SASR_ANV_SHIFT                     (14U)

/*! @name STAR - Slave Transmit ACK Register */
#define LPI2C_STAR_TXNACK_MASK                   (0x1U)
#define LPI2C_STAR_TXNACK_SHIFT                  (0U)

/*! @name STDR - Slave Transmit Data Register */
#define LPI2C_STDR_DATA_MASK                     (0xFFU)
#define LPI2C_STDR_DATA_SHIFT                    (0U)
#define LPI2C_STDR_DATA(x)                       (((uint32_t)(((uint32_t)(x)) << LPI2C_STDR_DATA_SHIFT)) & LPI2C_STDR_DATA_MASK)

/*! @name SRDR - Slave Receive Data Register */
#define LPI2C_SRDR_DATA_MASK                     (0xFFU)
#define LPI2C_SRDR_DATA_SHIFT                    (0U)
#define LPI2C_SRDR_DATA(x)                       (((uint32_t)(((uint32_t)(x)) << LPI2C_SRDR_DATA_SHIFT)) & LPI2C_SRDR_DATA_MASK)
#define LPI2C_SRDR_RXEMPTY_MASK                  (0x4000U)
#define LPI2C_SRDR_RXEMPTY_SHIFT                 (14U)
#define LPI2C_SRDR_SOF_MASK                      (0x8000U)
#define LPI2C_SRDR_SOF_SHIFT                     (15U)


/*!
 * @}
 */ /* end of group LPI2C_Register_Masks */


/* LPI2C - Peripheral instance base addresses */
/** Peripheral LPI2C1 base pointer */
#define LPI2C1_BASE_PTR                          ((LPI2C_MemMapPtr)0x403F0000u)
/** Peripheral LPI2C2 base pointer */
#define LPI2C2_BASE_PTR                          ((LPI2C_MemMapPtr)0x403F4000u)
/** Peripheral LPI2C3 base pointer */
#define LPI2C3_BASE_PTR                          ((LPI2C_MemMapPtr)0x403F8000u)
/** Peripheral LPI2C4 base pointer */
#define LPI2C4_BASE_PTR                          ((LPI2C_MemMapPtr)0x403FC000u)
/** Array initializer of LPI2C peripheral base pointers */
#define LPI2C_BASE_PTRS                          { LPI2C1_BASE_PTR, LPI2C2_BASE_PTR, LPI2C3_BASE_PTR, LPI2C4_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- LPI2C - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LPI2C_Register_Accessor_Macros LPI2C - Register accessor macros
 * @{
 */


/* LPI2C - Register instance definitions */
/* LPI2C1 */
#define LPI2C1_VERID                             LPI2C_VERID_REG(LPI2C1_BASE_PTR)
#define LPI2C1_PARAM                             LPI2C_PARAM_REG(LPI2C1_BASE_PTR)
#define LPI2C1_MCR                               LPI2C_MCR_REG(LPI2C1_BASE_PTR)
#define LPI2C1_MSR                               LPI2C_MSR_REG(LPI2C1_BASE_PTR)
#define LPI2C1_MIER                              LPI2C_MIER_REG(LPI2C1_BASE_PTR)
#define LPI2C1_MDER                              LPI2C_MDER_REG(LPI2C1_BASE_PTR)
#define LPI2C1_MCFGR0                            LPI2C_MCFGR0_REG(LPI2C1_BASE_PTR)
#define LPI2C1_MCFGR1                            LPI2C_MCFGR1_REG(LPI2C1_BASE_PTR)
#define LPI2C1_MCFGR2                            LPI2C_MCFGR2_REG(LPI2C1_BASE_PTR)
#define LPI2C1_MCFGR3                            LPI2C_MCFGR3_REG(LPI2C1_BASE_PTR)
#define LPI2C1_MDMR                              LPI2C_MDMR_REG(LPI2C1_BASE_PTR)
#define LPI2C1_MCCR0                             LPI2C_MCCR0_REG(LPI2C1_BASE_PTR)
#define LPI2C1_MCCR1                             LPI2C_MCCR1_REG(LPI2C1_BASE_PTR)
#define LPI2C1_MFCR                              LPI2C_MFCR_REG(LPI2C1_BASE_PTR)
#define LPI2C1_MFSR                              LPI2C_MFSR_REG(LPI2C1_BASE_PTR)
#define LPI2C1_MTDR                              LPI2C_MTDR_REG(LPI2C1_BASE_PTR)
#define LPI2C1_MRDR                              LPI2C_MRDR_REG(LPI2C1_BASE_PTR)
#define LPI2C1_SCR                               LPI2C_SCR_REG(LPI2C1_BASE_PTR)
#define LPI2C1_SSR                               LPI2C_SSR_REG(LPI2C1_BASE_PTR)
#define LPI2C1_SIER                              LPI2C_SIER_REG(LPI2C1_BASE_PTR)
#define LPI2C1_SDER                              LPI2C_SDER_REG(LPI2C1_BASE_PTR)
#define LPI2C1_SCFGR1                            LPI2C_SCFGR1_REG(LPI2C1_BASE_PTR)
#define LPI2C1_SCFGR2                            LPI2C_SCFGR2_REG(LPI2C1_BASE_PTR)
#define LPI2C1_SAMR                              LPI2C_SAMR_REG(LPI2C1_BASE_PTR)
#define LPI2C1_SASR                              LPI2C_SASR_REG(LPI2C1_BASE_PTR)
#define LPI2C1_STAR                              LPI2C_STAR_REG(LPI2C1_BASE_PTR)
#define LPI2C1_STDR                              LPI2C_STDR_REG(LPI2C1_BASE_PTR)
#define LPI2C1_SRDR                              LPI2C_SRDR_REG(LPI2C1_BASE_PTR)
/* LPI2C2 */
#define LPI2C2_VERID                             LPI2C_VERID_REG(LPI2C2_BASE_PTR)
#define LPI2C2_PARAM                             LPI2C_PARAM_REG(LPI2C2_BASE_PTR)
#define LPI2C2_MCR                               LPI2C_MCR_REG(LPI2C2_BASE_PTR)
#define LPI2C2_MSR                               LPI2C_MSR_REG(LPI2C2_BASE_PTR)
#define LPI2C2_MIER                              LPI2C_MIER_REG(LPI2C2_BASE_PTR)
#define LPI2C2_MDER                              LPI2C_MDER_REG(LPI2C2_BASE_PTR)
#define LPI2C2_MCFGR0                            LPI2C_MCFGR0_REG(LPI2C2_BASE_PTR)
#define LPI2C2_MCFGR1                            LPI2C_MCFGR1_REG(LPI2C2_BASE_PTR)
#define LPI2C2_MCFGR2                            LPI2C_MCFGR2_REG(LPI2C2_BASE_PTR)
#define LPI2C2_MCFGR3                            LPI2C_MCFGR3_REG(LPI2C2_BASE_PTR)
#define LPI2C2_MDMR                              LPI2C_MDMR_REG(LPI2C2_BASE_PTR)
#define LPI2C2_MCCR0                             LPI2C_MCCR0_REG(LPI2C2_BASE_PTR)
#define LPI2C2_MCCR1                             LPI2C_MCCR1_REG(LPI2C2_BASE_PTR)
#define LPI2C2_MFCR                              LPI2C_MFCR_REG(LPI2C2_BASE_PTR)
#define LPI2C2_MFSR                              LPI2C_MFSR_REG(LPI2C2_BASE_PTR)
#define LPI2C2_MTDR                              LPI2C_MTDR_REG(LPI2C2_BASE_PTR)
#define LPI2C2_MRDR                              LPI2C_MRDR_REG(LPI2C2_BASE_PTR)
#define LPI2C2_SCR                               LPI2C_SCR_REG(LPI2C2_BASE_PTR)
#define LPI2C2_SSR                               LPI2C_SSR_REG(LPI2C2_BASE_PTR)
#define LPI2C2_SIER                              LPI2C_SIER_REG(LPI2C2_BASE_PTR)
#define LPI2C2_SDER                              LPI2C_SDER_REG(LPI2C2_BASE_PTR)
#define LPI2C2_SCFGR1                            LPI2C_SCFGR1_REG(LPI2C2_BASE_PTR)
#define LPI2C2_SCFGR2                            LPI2C_SCFGR2_REG(LPI2C2_BASE_PTR)
#define LPI2C2_SAMR                              LPI2C_SAMR_REG(LPI2C2_BASE_PTR)
#define LPI2C2_SASR                              LPI2C_SASR_REG(LPI2C2_BASE_PTR)
#define LPI2C2_STAR                              LPI2C_STAR_REG(LPI2C2_BASE_PTR)
#define LPI2C2_STDR                              LPI2C_STDR_REG(LPI2C2_BASE_PTR)
#define LPI2C2_SRDR                              LPI2C_SRDR_REG(LPI2C2_BASE_PTR)
/* LPI2C3 */
#define LPI2C3_VERID                             LPI2C_VERID_REG(LPI2C3_BASE_PTR)
#define LPI2C3_PARAM                             LPI2C_PARAM_REG(LPI2C3_BASE_PTR)
#define LPI2C3_MCR                               LPI2C_MCR_REG(LPI2C3_BASE_PTR)
#define LPI2C3_MSR                               LPI2C_MSR_REG(LPI2C3_BASE_PTR)
#define LPI2C3_MIER                              LPI2C_MIER_REG(LPI2C3_BASE_PTR)
#define LPI2C3_MDER                              LPI2C_MDER_REG(LPI2C3_BASE_PTR)
#define LPI2C3_MCFGR0                            LPI2C_MCFGR0_REG(LPI2C3_BASE_PTR)
#define LPI2C3_MCFGR1                            LPI2C_MCFGR1_REG(LPI2C3_BASE_PTR)
#define LPI2C3_MCFGR2                            LPI2C_MCFGR2_REG(LPI2C3_BASE_PTR)
#define LPI2C3_MCFGR3                            LPI2C_MCFGR3_REG(LPI2C3_BASE_PTR)
#define LPI2C3_MDMR                              LPI2C_MDMR_REG(LPI2C3_BASE_PTR)
#define LPI2C3_MCCR0                             LPI2C_MCCR0_REG(LPI2C3_BASE_PTR)
#define LPI2C3_MCCR1                             LPI2C_MCCR1_REG(LPI2C3_BASE_PTR)
#define LPI2C3_MFCR                              LPI2C_MFCR_REG(LPI2C3_BASE_PTR)
#define LPI2C3_MFSR                              LPI2C_MFSR_REG(LPI2C3_BASE_PTR)
#define LPI2C3_MTDR                              LPI2C_MTDR_REG(LPI2C3_BASE_PTR)
#define LPI2C3_MRDR                              LPI2C_MRDR_REG(LPI2C3_BASE_PTR)
#define LPI2C3_SCR                               LPI2C_SCR_REG(LPI2C3_BASE_PTR)
#define LPI2C3_SSR                               LPI2C_SSR_REG(LPI2C3_BASE_PTR)
#define LPI2C3_SIER                              LPI2C_SIER_REG(LPI2C3_BASE_PTR)
#define LPI2C3_SDER                              LPI2C_SDER_REG(LPI2C3_BASE_PTR)
#define LPI2C3_SCFGR1                            LPI2C_SCFGR1_REG(LPI2C3_BASE_PTR)
#define LPI2C3_SCFGR2                            LPI2C_SCFGR2_REG(LPI2C3_BASE_PTR)
#define LPI2C3_SAMR                              LPI2C_SAMR_REG(LPI2C3_BASE_PTR)
#define LPI2C3_SASR                              LPI2C_SASR_REG(LPI2C3_BASE_PTR)
#define LPI2C3_STAR                              LPI2C_STAR_REG(LPI2C3_BASE_PTR)
#define LPI2C3_STDR                              LPI2C_STDR_REG(LPI2C3_BASE_PTR)
#define LPI2C3_SRDR                              LPI2C_SRDR_REG(LPI2C3_BASE_PTR)
/* LPI2C4 */
#define LPI2C4_VERID                             LPI2C_VERID_REG(LPI2C4_BASE_PTR)
#define LPI2C4_PARAM                             LPI2C_PARAM_REG(LPI2C4_BASE_PTR)
#define LPI2C4_MCR                               LPI2C_MCR_REG(LPI2C4_BASE_PTR)
#define LPI2C4_MSR                               LPI2C_MSR_REG(LPI2C4_BASE_PTR)
#define LPI2C4_MIER                              LPI2C_MIER_REG(LPI2C4_BASE_PTR)
#define LPI2C4_MDER                              LPI2C_MDER_REG(LPI2C4_BASE_PTR)
#define LPI2C4_MCFGR0                            LPI2C_MCFGR0_REG(LPI2C4_BASE_PTR)
#define LPI2C4_MCFGR1                            LPI2C_MCFGR1_REG(LPI2C4_BASE_PTR)
#define LPI2C4_MCFGR2                            LPI2C_MCFGR2_REG(LPI2C4_BASE_PTR)
#define LPI2C4_MCFGR3                            LPI2C_MCFGR3_REG(LPI2C4_BASE_PTR)
#define LPI2C4_MDMR                              LPI2C_MDMR_REG(LPI2C4_BASE_PTR)
#define LPI2C4_MCCR0                             LPI2C_MCCR0_REG(LPI2C4_BASE_PTR)
#define LPI2C4_MCCR1                             LPI2C_MCCR1_REG(LPI2C4_BASE_PTR)
#define LPI2C4_MFCR                              LPI2C_MFCR_REG(LPI2C4_BASE_PTR)
#define LPI2C4_MFSR                              LPI2C_MFSR_REG(LPI2C4_BASE_PTR)
#define LPI2C4_MTDR                              LPI2C_MTDR_REG(LPI2C4_BASE_PTR)
#define LPI2C4_MRDR                              LPI2C_MRDR_REG(LPI2C4_BASE_PTR)
#define LPI2C4_SCR                               LPI2C_SCR_REG(LPI2C4_BASE_PTR)
#define LPI2C4_SSR                               LPI2C_SSR_REG(LPI2C4_BASE_PTR)
#define LPI2C4_SIER                              LPI2C_SIER_REG(LPI2C4_BASE_PTR)
#define LPI2C4_SDER                              LPI2C_SDER_REG(LPI2C4_BASE_PTR)
#define LPI2C4_SCFGR1                            LPI2C_SCFGR1_REG(LPI2C4_BASE_PTR)
#define LPI2C4_SCFGR2                            LPI2C_SCFGR2_REG(LPI2C4_BASE_PTR)
#define LPI2C4_SAMR                              LPI2C_SAMR_REG(LPI2C4_BASE_PTR)
#define LPI2C4_SASR                              LPI2C_SASR_REG(LPI2C4_BASE_PTR)
#define LPI2C4_STAR                              LPI2C_STAR_REG(LPI2C4_BASE_PTR)
#define LPI2C4_STDR                              LPI2C_STDR_REG(LPI2C4_BASE_PTR)
#define LPI2C4_SRDR                              LPI2C_SRDR_REG(LPI2C4_BASE_PTR)

/*!
 * @}
 */ /* end of group LPI2C_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group LPI2C_Peripheral */


/* ----------------------------------------------------------------------------
   -- LPSPI
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LPSPI_Peripheral LPSPI
 * @{
 */

/** LPSPI - Peripheral register structure */
typedef struct LPSPI_MemMap {
  uint32_t VERID;                                  /**< Version ID Register, offset: 0x0 */
  uint32_t PARAM;                                  /**< Parameter Register, offset: 0x4 */
  uint8_t RESERVED_0[8];
  uint32_t CR;                                     /**< Control Register, offset: 0x10 */
  uint32_t SR;                                     /**< Status Register, offset: 0x14 */
  uint32_t IER;                                    /**< Interrupt Enable Register, offset: 0x18 */
  uint32_t DER;                                    /**< DMA Enable Register, offset: 0x1C */
  uint32_t CFGR0;                                  /**< Configuration Register 0, offset: 0x20 */
  uint32_t CFGR1;                                  /**< Configuration Register 1, offset: 0x24 */
  uint8_t RESERVED_1[8];
  uint32_t DMR0;                                   /**< Data Match Register 0, offset: 0x30 */
  uint32_t DMR1;                                   /**< Data Match Register 1, offset: 0x34 */
  uint8_t RESERVED_2[8];
  uint32_t CCR;                                    /**< Clock Configuration Register, offset: 0x40 */
  uint8_t RESERVED_3[20];
  uint32_t FCR;                                    /**< FIFO Control Register, offset: 0x58 */
  uint32_t FSR;                                    /**< FIFO Status Register, offset: 0x5C */
  uint32_t TCR;                                    /**< Transmit Command Register, offset: 0x60 */
  uint32_t TDR;                                    /**< Transmit Data Register, offset: 0x64 */
  uint8_t RESERVED_4[8];
  uint32_t RSR;                                    /**< Receive Status Register, offset: 0x70 */
  uint32_t RDR;                                    /**< Receive Data Register, offset: 0x74 */
} volatile *LPSPI_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- LPSPI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LPSPI_Register_Accessor_Macros LPSPI - Register accessor macros
 * @{
 */


/* LPSPI - Register accessors */
#define LPSPI_VERID_REG(base)                    ((base)->VERID)
#define LPSPI_PARAM_REG(base)                    ((base)->PARAM)
#define LPSPI_CR_REG(base)                       ((base)->CR)
#define LPSPI_SR_REG(base)                       ((base)->SR)
#define LPSPI_IER_REG(base)                      ((base)->IER)
#define LPSPI_DER_REG(base)                      ((base)->DER)
#define LPSPI_CFGR0_REG(base)                    ((base)->CFGR0)
#define LPSPI_CFGR1_REG(base)                    ((base)->CFGR1)
#define LPSPI_DMR0_REG(base)                     ((base)->DMR0)
#define LPSPI_DMR1_REG(base)                     ((base)->DMR1)
#define LPSPI_CCR_REG(base)                      ((base)->CCR)
#define LPSPI_FCR_REG(base)                      ((base)->FCR)
#define LPSPI_FSR_REG(base)                      ((base)->FSR)
#define LPSPI_TCR_REG(base)                      ((base)->TCR)
#define LPSPI_TDR_REG(base)                      ((base)->TDR)
#define LPSPI_RSR_REG(base)                      ((base)->RSR)
#define LPSPI_RDR_REG(base)                      ((base)->RDR)

/*!
 * @}
 */ /* end of group LPSPI_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- LPSPI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LPSPI_Register_Masks LPSPI Register Masks
 * @{
 */

/*! @name VERID - Version ID Register */
#define LPSPI_VERID_FEATURE_MASK                 (0xFFFFU)
#define LPSPI_VERID_FEATURE_SHIFT                (0U)
#define LPSPI_VERID_FEATURE(x)                   (((uint32_t)(((uint32_t)(x)) << LPSPI_VERID_FEATURE_SHIFT)) & LPSPI_VERID_FEATURE_MASK)
#define LPSPI_VERID_MINOR_MASK                   (0xFF0000U)
#define LPSPI_VERID_MINOR_SHIFT                  (16U)
#define LPSPI_VERID_MINOR(x)                     (((uint32_t)(((uint32_t)(x)) << LPSPI_VERID_MINOR_SHIFT)) & LPSPI_VERID_MINOR_MASK)
#define LPSPI_VERID_MAJOR_MASK                   (0xFF000000U)
#define LPSPI_VERID_MAJOR_SHIFT                  (24U)
#define LPSPI_VERID_MAJOR(x)                     (((uint32_t)(((uint32_t)(x)) << LPSPI_VERID_MAJOR_SHIFT)) & LPSPI_VERID_MAJOR_MASK)

/*! @name PARAM - Parameter Register */
#define LPSPI_PARAM_TXFIFO_MASK                  (0xFFU)
#define LPSPI_PARAM_TXFIFO_SHIFT                 (0U)
#define LPSPI_PARAM_TXFIFO(x)                    (((uint32_t)(((uint32_t)(x)) << LPSPI_PARAM_TXFIFO_SHIFT)) & LPSPI_PARAM_TXFIFO_MASK)
#define LPSPI_PARAM_RXFIFO_MASK                  (0xFF00U)
#define LPSPI_PARAM_RXFIFO_SHIFT                 (8U)
#define LPSPI_PARAM_RXFIFO(x)                    (((uint32_t)(((uint32_t)(x)) << LPSPI_PARAM_RXFIFO_SHIFT)) & LPSPI_PARAM_RXFIFO_MASK)
#define LPSPI_PARAM_PCSNUM_MASK                  (0xFF0000U)
#define LPSPI_PARAM_PCSNUM_SHIFT                 (16U)
#define LPSPI_PARAM_PCSNUM(x)                    (((uint32_t)(((uint32_t)(x)) << LPSPI_PARAM_PCSNUM_SHIFT)) & LPSPI_PARAM_PCSNUM_MASK)

/*! @name CR - Control Register */
#define LPSPI_CR_MEN_MASK                        (0x1U)
#define LPSPI_CR_MEN_SHIFT                       (0U)
#define LPSPI_CR_RST_MASK                        (0x2U)
#define LPSPI_CR_RST_SHIFT                       (1U)
#define LPSPI_CR_DOZEN_MASK                      (0x4U)
#define LPSPI_CR_DOZEN_SHIFT                     (2U)
#define LPSPI_CR_DBGEN_MASK                      (0x8U)
#define LPSPI_CR_DBGEN_SHIFT                     (3U)
#define LPSPI_CR_RTF_MASK                        (0x100U)
#define LPSPI_CR_RTF_SHIFT                       (8U)
#define LPSPI_CR_RRF_MASK                        (0x200U)
#define LPSPI_CR_RRF_SHIFT                       (9U)

/*! @name SR - Status Register */
#define LPSPI_SR_TDF_MASK                        (0x1U)
#define LPSPI_SR_TDF_SHIFT                       (0U)
#define LPSPI_SR_RDF_MASK                        (0x2U)
#define LPSPI_SR_RDF_SHIFT                       (1U)
#define LPSPI_SR_WCF_MASK                        (0x100U)
#define LPSPI_SR_WCF_SHIFT                       (8U)
#define LPSPI_SR_FCF_MASK                        (0x200U)
#define LPSPI_SR_FCF_SHIFT                       (9U)
#define LPSPI_SR_TCF_MASK                        (0x400U)
#define LPSPI_SR_TCF_SHIFT                       (10U)
#define LPSPI_SR_TEF_MASK                        (0x800U)
#define LPSPI_SR_TEF_SHIFT                       (11U)
#define LPSPI_SR_REF_MASK                        (0x1000U)
#define LPSPI_SR_REF_SHIFT                       (12U)
#define LPSPI_SR_DMF_MASK                        (0x2000U)
#define LPSPI_SR_DMF_SHIFT                       (13U)
#define LPSPI_SR_MBF_MASK                        (0x1000000U)
#define LPSPI_SR_MBF_SHIFT                       (24U)

/*! @name IER - Interrupt Enable Register */
#define LPSPI_IER_TDIE_MASK                      (0x1U)
#define LPSPI_IER_TDIE_SHIFT                     (0U)
#define LPSPI_IER_RDIE_MASK                      (0x2U)
#define LPSPI_IER_RDIE_SHIFT                     (1U)
#define LPSPI_IER_WCIE_MASK                      (0x100U)
#define LPSPI_IER_WCIE_SHIFT                     (8U)
#define LPSPI_IER_FCIE_MASK                      (0x200U)
#define LPSPI_IER_FCIE_SHIFT                     (9U)
#define LPSPI_IER_TCIE_MASK                      (0x400U)
#define LPSPI_IER_TCIE_SHIFT                     (10U)
#define LPSPI_IER_TEIE_MASK                      (0x800U)
#define LPSPI_IER_TEIE_SHIFT                     (11U)
#define LPSPI_IER_REIE_MASK                      (0x1000U)
#define LPSPI_IER_REIE_SHIFT                     (12U)
#define LPSPI_IER_DMIE_MASK                      (0x2000U)
#define LPSPI_IER_DMIE_SHIFT                     (13U)

/*! @name DER - DMA Enable Register */
#define LPSPI_DER_TDDE_MASK                      (0x1U)
#define LPSPI_DER_TDDE_SHIFT                     (0U)
#define LPSPI_DER_RDDE_MASK                      (0x2U)
#define LPSPI_DER_RDDE_SHIFT                     (1U)

/*! @name CFGR0 - Configuration Register 0 */
#define LPSPI_CFGR0_HREN_MASK                    (0x1U)
#define LPSPI_CFGR0_HREN_SHIFT                   (0U)
#define LPSPI_CFGR0_HRPOL_MASK                   (0x2U)
#define LPSPI_CFGR0_HRPOL_SHIFT                  (1U)
#define LPSPI_CFGR0_HRSEL_MASK                   (0x4U)
#define LPSPI_CFGR0_HRSEL_SHIFT                  (2U)
#define LPSPI_CFGR0_CIRFIFO_MASK                 (0x100U)
#define LPSPI_CFGR0_CIRFIFO_SHIFT                (8U)
#define LPSPI_CFGR0_RDMO_MASK                    (0x200U)
#define LPSPI_CFGR0_RDMO_SHIFT                   (9U)

/*! @name CFGR1 - Configuration Register 1 */
#define LPSPI_CFGR1_MASTER_MASK                  (0x1U)
#define LPSPI_CFGR1_MASTER_SHIFT                 (0U)
#define LPSPI_CFGR1_SAMPLE_MASK                  (0x2U)
#define LPSPI_CFGR1_SAMPLE_SHIFT                 (1U)
#define LPSPI_CFGR1_AUTOPCS_MASK                 (0x4U)
#define LPSPI_CFGR1_AUTOPCS_SHIFT                (2U)
#define LPSPI_CFGR1_NOSTALL_MASK                 (0x8U)
#define LPSPI_CFGR1_NOSTALL_SHIFT                (3U)
#define LPSPI_CFGR1_PCSPOL_MASK                  (0xF00U)
#define LPSPI_CFGR1_PCSPOL_SHIFT                 (8U)
#define LPSPI_CFGR1_PCSPOL(x)                    (((uint32_t)(((uint32_t)(x)) << LPSPI_CFGR1_PCSPOL_SHIFT)) & LPSPI_CFGR1_PCSPOL_MASK)
#define LPSPI_CFGR1_MATCFG_MASK                  (0x70000U)
#define LPSPI_CFGR1_MATCFG_SHIFT                 (16U)
#define LPSPI_CFGR1_MATCFG(x)                    (((uint32_t)(((uint32_t)(x)) << LPSPI_CFGR1_MATCFG_SHIFT)) & LPSPI_CFGR1_MATCFG_MASK)
#define LPSPI_CFGR1_PINCFG_MASK                  (0x3000000U)
#define LPSPI_CFGR1_PINCFG_SHIFT                 (24U)
#define LPSPI_CFGR1_PINCFG(x)                    (((uint32_t)(((uint32_t)(x)) << LPSPI_CFGR1_PINCFG_SHIFT)) & LPSPI_CFGR1_PINCFG_MASK)
#define LPSPI_CFGR1_OUTCFG_MASK                  (0x4000000U)
#define LPSPI_CFGR1_OUTCFG_SHIFT                 (26U)
#define LPSPI_CFGR1_PCSCFG_MASK                  (0x8000000U)
#define LPSPI_CFGR1_PCSCFG_SHIFT                 (27U)

/*! @name DMR0 - Data Match Register 0 */
#define LPSPI_DMR0_MATCH0_MASK                   (0xFFFFFFFFU)
#define LPSPI_DMR0_MATCH0_SHIFT                  (0U)
#define LPSPI_DMR0_MATCH0(x)                     (((uint32_t)(((uint32_t)(x)) << LPSPI_DMR0_MATCH0_SHIFT)) & LPSPI_DMR0_MATCH0_MASK)

/*! @name DMR1 - Data Match Register 1 */
#define LPSPI_DMR1_MATCH1_MASK                   (0xFFFFFFFFU)
#define LPSPI_DMR1_MATCH1_SHIFT                  (0U)
#define LPSPI_DMR1_MATCH1(x)                     (((uint32_t)(((uint32_t)(x)) << LPSPI_DMR1_MATCH1_SHIFT)) & LPSPI_DMR1_MATCH1_MASK)

/*! @name CCR - Clock Configuration Register */
#define LPSPI_CCR_SCKDIV_MASK                    (0xFFU)
#define LPSPI_CCR_SCKDIV_SHIFT                   (0U)
#define LPSPI_CCR_SCKDIV(x)                      (((uint32_t)(((uint32_t)(x)) << LPSPI_CCR_SCKDIV_SHIFT)) & LPSPI_CCR_SCKDIV_MASK)
#define LPSPI_CCR_DBT_MASK                       (0xFF00U)
#define LPSPI_CCR_DBT_SHIFT                      (8U)
#define LPSPI_CCR_DBT(x)                         (((uint32_t)(((uint32_t)(x)) << LPSPI_CCR_DBT_SHIFT)) & LPSPI_CCR_DBT_MASK)
#define LPSPI_CCR_PCSSCK_MASK                    (0xFF0000U)
#define LPSPI_CCR_PCSSCK_SHIFT                   (16U)
#define LPSPI_CCR_PCSSCK(x)                      (((uint32_t)(((uint32_t)(x)) << LPSPI_CCR_PCSSCK_SHIFT)) & LPSPI_CCR_PCSSCK_MASK)
#define LPSPI_CCR_SCKPCS_MASK                    (0xFF000000U)
#define LPSPI_CCR_SCKPCS_SHIFT                   (24U)
#define LPSPI_CCR_SCKPCS(x)                      (((uint32_t)(((uint32_t)(x)) << LPSPI_CCR_SCKPCS_SHIFT)) & LPSPI_CCR_SCKPCS_MASK)

/*! @name FCR - FIFO Control Register */
#define LPSPI_FCR_TXWATER_MASK                   (0xFU)
#define LPSPI_FCR_TXWATER_SHIFT                  (0U)
#define LPSPI_FCR_TXWATER(x)                     (((uint32_t)(((uint32_t)(x)) << LPSPI_FCR_TXWATER_SHIFT)) & LPSPI_FCR_TXWATER_MASK)
#define LPSPI_FCR_RXWATER_MASK                   (0xF0000U)
#define LPSPI_FCR_RXWATER_SHIFT                  (16U)
#define LPSPI_FCR_RXWATER(x)                     (((uint32_t)(((uint32_t)(x)) << LPSPI_FCR_RXWATER_SHIFT)) & LPSPI_FCR_RXWATER_MASK)

/*! @name FSR - FIFO Status Register */
#define LPSPI_FSR_TXCOUNT_MASK                   (0x1FU)
#define LPSPI_FSR_TXCOUNT_SHIFT                  (0U)
#define LPSPI_FSR_TXCOUNT(x)                     (((uint32_t)(((uint32_t)(x)) << LPSPI_FSR_TXCOUNT_SHIFT)) & LPSPI_FSR_TXCOUNT_MASK)
#define LPSPI_FSR_RXCOUNT_MASK                   (0x1F0000U)
#define LPSPI_FSR_RXCOUNT_SHIFT                  (16U)
#define LPSPI_FSR_RXCOUNT(x)                     (((uint32_t)(((uint32_t)(x)) << LPSPI_FSR_RXCOUNT_SHIFT)) & LPSPI_FSR_RXCOUNT_MASK)

/*! @name TCR - Transmit Command Register */
#define LPSPI_TCR_FRAMESZ_MASK                   (0xFFFU)
#define LPSPI_TCR_FRAMESZ_SHIFT                  (0U)
#define LPSPI_TCR_FRAMESZ(x)                     (((uint32_t)(((uint32_t)(x)) << LPSPI_TCR_FRAMESZ_SHIFT)) & LPSPI_TCR_FRAMESZ_MASK)
#define LPSPI_TCR_WIDTH_MASK                     (0x30000U)
#define LPSPI_TCR_WIDTH_SHIFT                    (16U)
#define LPSPI_TCR_WIDTH(x)                       (((uint32_t)(((uint32_t)(x)) << LPSPI_TCR_WIDTH_SHIFT)) & LPSPI_TCR_WIDTH_MASK)
#define LPSPI_TCR_TXMSK_MASK                     (0x40000U)
#define LPSPI_TCR_TXMSK_SHIFT                    (18U)
#define LPSPI_TCR_RXMSK_MASK                     (0x80000U)
#define LPSPI_TCR_RXMSK_SHIFT                    (19U)
#define LPSPI_TCR_CONTC_MASK                     (0x100000U)
#define LPSPI_TCR_CONTC_SHIFT                    (20U)
#define LPSPI_TCR_CONT_MASK                      (0x200000U)
#define LPSPI_TCR_CONT_SHIFT                     (21U)
#define LPSPI_TCR_BYSW_MASK                      (0x400000U)
#define LPSPI_TCR_BYSW_SHIFT                     (22U)
#define LPSPI_TCR_LSBF_MASK                      (0x800000U)
#define LPSPI_TCR_LSBF_SHIFT                     (23U)
#define LPSPI_TCR_PCS_MASK                       (0x3000000U)
#define LPSPI_TCR_PCS_SHIFT                      (24U)
#define LPSPI_TCR_PCS(x)                         (((uint32_t)(((uint32_t)(x)) << LPSPI_TCR_PCS_SHIFT)) & LPSPI_TCR_PCS_MASK)
#define LPSPI_TCR_PRESCALE_MASK                  (0x38000000U)
#define LPSPI_TCR_PRESCALE_SHIFT                 (27U)
#define LPSPI_TCR_PRESCALE(x)                    (((uint32_t)(((uint32_t)(x)) << LPSPI_TCR_PRESCALE_SHIFT)) & LPSPI_TCR_PRESCALE_MASK)
#define LPSPI_TCR_CPHA_MASK                      (0x40000000U)
#define LPSPI_TCR_CPHA_SHIFT                     (30U)
#define LPSPI_TCR_CPOL_MASK                      (0x80000000U)
#define LPSPI_TCR_CPOL_SHIFT                     (31U)

/*! @name TDR - Transmit Data Register */
#define LPSPI_TDR_DATA_MASK                      (0xFFFFFFFFU)
#define LPSPI_TDR_DATA_SHIFT                     (0U)
#define LPSPI_TDR_DATA(x)                        (((uint32_t)(((uint32_t)(x)) << LPSPI_TDR_DATA_SHIFT)) & LPSPI_TDR_DATA_MASK)

/*! @name RSR - Receive Status Register */
#define LPSPI_RSR_SOF_MASK                       (0x1U)
#define LPSPI_RSR_SOF_SHIFT                      (0U)
#define LPSPI_RSR_RXEMPTY_MASK                   (0x2U)
#define LPSPI_RSR_RXEMPTY_SHIFT                  (1U)

/*! @name RDR - Receive Data Register */
#define LPSPI_RDR_DATA_MASK                      (0xFFFFFFFFU)
#define LPSPI_RDR_DATA_SHIFT                     (0U)
#define LPSPI_RDR_DATA(x)                        (((uint32_t)(((uint32_t)(x)) << LPSPI_RDR_DATA_SHIFT)) & LPSPI_RDR_DATA_MASK)


/*!
 * @}
 */ /* end of group LPSPI_Register_Masks */


/* LPSPI - Peripheral instance base addresses */
/** Peripheral LPSPI1 base pointer */
#define LPSPI1_BASE_PTR                          ((LPSPI_MemMapPtr)0x40394000u)
/** Peripheral LPSPI2 base pointer */
#define LPSPI2_BASE_PTR                          ((LPSPI_MemMapPtr)0x40398000u)
/** Peripheral LPSPI3 base pointer */
#define LPSPI3_BASE_PTR                          ((LPSPI_MemMapPtr)0x4039C000u)
/** Peripheral LPSPI4 base pointer */
#define LPSPI4_BASE_PTR                          ((LPSPI_MemMapPtr)0x403A0000u)
/** Array initializer of LPSPI peripheral base pointers */
#define LPSPI_BASE_PTRS                          { LPSPI1_BASE_PTR, LPSPI2_BASE_PTR, LPSPI3_BASE_PTR, LPSPI4_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- LPSPI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LPSPI_Register_Accessor_Macros LPSPI - Register accessor macros
 * @{
 */


/* LPSPI - Register instance definitions */
/* LPSPI1 */
#define LPSPI1_VERID                             LPSPI_VERID_REG(LPSPI1_BASE_PTR)
#define LPSPI1_PARAM                             LPSPI_PARAM_REG(LPSPI1_BASE_PTR)
#define LPSPI1_CR                                LPSPI_CR_REG(LPSPI1_BASE_PTR)
#define LPSPI1_SR                                LPSPI_SR_REG(LPSPI1_BASE_PTR)
#define LPSPI1_IER                               LPSPI_IER_REG(LPSPI1_BASE_PTR)
#define LPSPI1_DER                               LPSPI_DER_REG(LPSPI1_BASE_PTR)
#define LPSPI1_CFGR0                             LPSPI_CFGR0_REG(LPSPI1_BASE_PTR)
#define LPSPI1_CFGR1                             LPSPI_CFGR1_REG(LPSPI1_BASE_PTR)
#define LPSPI1_DMR0                              LPSPI_DMR0_REG(LPSPI1_BASE_PTR)
#define LPSPI1_DMR1                              LPSPI_DMR1_REG(LPSPI1_BASE_PTR)
#define LPSPI1_CCR                               LPSPI_CCR_REG(LPSPI1_BASE_PTR)
#define LPSPI1_FCR                               LPSPI_FCR_REG(LPSPI1_BASE_PTR)
#define LPSPI1_FSR                               LPSPI_FSR_REG(LPSPI1_BASE_PTR)
#define LPSPI1_TCR                               LPSPI_TCR_REG(LPSPI1_BASE_PTR)
#define LPSPI1_TDR                               LPSPI_TDR_REG(LPSPI1_BASE_PTR)
#define LPSPI1_RSR                               LPSPI_RSR_REG(LPSPI1_BASE_PTR)
#define LPSPI1_RDR                               LPSPI_RDR_REG(LPSPI1_BASE_PTR)
/* LPSPI2 */
#define LPSPI2_VERID                             LPSPI_VERID_REG(LPSPI2_BASE_PTR)
#define LPSPI2_PARAM                             LPSPI_PARAM_REG(LPSPI2_BASE_PTR)
#define LPSPI2_CR                                LPSPI_CR_REG(LPSPI2_BASE_PTR)
#define LPSPI2_SR                                LPSPI_SR_REG(LPSPI2_BASE_PTR)
#define LPSPI2_IER                               LPSPI_IER_REG(LPSPI2_BASE_PTR)
#define LPSPI2_DER                               LPSPI_DER_REG(LPSPI2_BASE_PTR)
#define LPSPI2_CFGR0                             LPSPI_CFGR0_REG(LPSPI2_BASE_PTR)
#define LPSPI2_CFGR1                             LPSPI_CFGR1_REG(LPSPI2_BASE_PTR)
#define LPSPI2_DMR0                              LPSPI_DMR0_REG(LPSPI2_BASE_PTR)
#define LPSPI2_DMR1                              LPSPI_DMR1_REG(LPSPI2_BASE_PTR)
#define LPSPI2_CCR                               LPSPI_CCR_REG(LPSPI2_BASE_PTR)
#define LPSPI2_FCR                               LPSPI_FCR_REG(LPSPI2_BASE_PTR)
#define LPSPI2_FSR                               LPSPI_FSR_REG(LPSPI2_BASE_PTR)
#define LPSPI2_TCR                               LPSPI_TCR_REG(LPSPI2_BASE_PTR)
#define LPSPI2_TDR                               LPSPI_TDR_REG(LPSPI2_BASE_PTR)
#define LPSPI2_RSR                               LPSPI_RSR_REG(LPSPI2_BASE_PTR)
#define LPSPI2_RDR                               LPSPI_RDR_REG(LPSPI2_BASE_PTR)
/* LPSPI3 */
#define LPSPI3_VERID                             LPSPI_VERID_REG(LPSPI3_BASE_PTR)
#define LPSPI3_PARAM                             LPSPI_PARAM_REG(LPSPI3_BASE_PTR)
#define LPSPI3_CR                                LPSPI_CR_REG(LPSPI3_BASE_PTR)
#define LPSPI3_SR                                LPSPI_SR_REG(LPSPI3_BASE_PTR)
#define LPSPI3_IER                               LPSPI_IER_REG(LPSPI3_BASE_PTR)
#define LPSPI3_DER                               LPSPI_DER_REG(LPSPI3_BASE_PTR)
#define LPSPI3_CFGR0                             LPSPI_CFGR0_REG(LPSPI3_BASE_PTR)
#define LPSPI3_CFGR1                             LPSPI_CFGR1_REG(LPSPI3_BASE_PTR)
#define LPSPI3_DMR0                              LPSPI_DMR0_REG(LPSPI3_BASE_PTR)
#define LPSPI3_DMR1                              LPSPI_DMR1_REG(LPSPI3_BASE_PTR)
#define LPSPI3_CCR                               LPSPI_CCR_REG(LPSPI3_BASE_PTR)
#define LPSPI3_FCR                               LPSPI_FCR_REG(LPSPI3_BASE_PTR)
#define LPSPI3_FSR                               LPSPI_FSR_REG(LPSPI3_BASE_PTR)
#define LPSPI3_TCR                               LPSPI_TCR_REG(LPSPI3_BASE_PTR)
#define LPSPI3_TDR                               LPSPI_TDR_REG(LPSPI3_BASE_PTR)
#define LPSPI3_RSR                               LPSPI_RSR_REG(LPSPI3_BASE_PTR)
#define LPSPI3_RDR                               LPSPI_RDR_REG(LPSPI3_BASE_PTR)
/* LPSPI4 */
#define LPSPI4_VERID                             LPSPI_VERID_REG(LPSPI4_BASE_PTR)
#define LPSPI4_PARAM                             LPSPI_PARAM_REG(LPSPI4_BASE_PTR)
#define LPSPI4_CR                                LPSPI_CR_REG(LPSPI4_BASE_PTR)
#define LPSPI4_SR                                LPSPI_SR_REG(LPSPI4_BASE_PTR)
#define LPSPI4_IER                               LPSPI_IER_REG(LPSPI4_BASE_PTR)
#define LPSPI4_DER                               LPSPI_DER_REG(LPSPI4_BASE_PTR)
#define LPSPI4_CFGR0                             LPSPI_CFGR0_REG(LPSPI4_BASE_PTR)
#define LPSPI4_CFGR1                             LPSPI_CFGR1_REG(LPSPI4_BASE_PTR)
#define LPSPI4_DMR0                              LPSPI_DMR0_REG(LPSPI4_BASE_PTR)
#define LPSPI4_DMR1                              LPSPI_DMR1_REG(LPSPI4_BASE_PTR)
#define LPSPI4_CCR                               LPSPI_CCR_REG(LPSPI4_BASE_PTR)
#define LPSPI4_FCR                               LPSPI_FCR_REG(LPSPI4_BASE_PTR)
#define LPSPI4_FSR                               LPSPI_FSR_REG(LPSPI4_BASE_PTR)
#define LPSPI4_TCR                               LPSPI_TCR_REG(LPSPI4_BASE_PTR)
#define LPSPI4_TDR                               LPSPI_TDR_REG(LPSPI4_BASE_PTR)
#define LPSPI4_RSR                               LPSPI_RSR_REG(LPSPI4_BASE_PTR)
#define LPSPI4_RDR                               LPSPI_RDR_REG(LPSPI4_BASE_PTR)

/*!
 * @}
 */ /* end of group LPSPI_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group LPSPI_Peripheral */


/* ----------------------------------------------------------------------------
   -- LPUART
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LPUART_Peripheral LPUART
 * @{
 */

/** LPUART - Peripheral register structure */
typedef struct LPUART_MemMap {
  uint32_t VERID;                                  /**< Version ID Register, offset: 0x0 */
  uint32_t PARAM;                                  /**< Parameter Register, offset: 0x4 */
  uint32_t GLOBAL;                                 /**< LPUART Global Register, offset: 0x8 */
  uint32_t PINCFG;                                 /**< LPUART Pin Configuration Register, offset: 0xC */
  uint32_t BAUD;                                   /**< LPUART Baud Rate Register, offset: 0x10 */
  uint32_t STAT;                                   /**< LPUART Status Register, offset: 0x14 */
  uint32_t CTRL;                                   /**< LPUART Control Register, offset: 0x18 */
  uint32_t DATA;                                   /**< LPUART Data Register, offset: 0x1C */
  uint32_t MATCH;                                  /**< LPUART Match Address Register, offset: 0x20 */
  uint32_t MODIR;                                  /**< LPUART Modem IrDA Register, offset: 0x24 */
  uint32_t FIFO;                                   /**< LPUART FIFO Register, offset: 0x28 */
  uint32_t WATER;                                  /**< LPUART Watermark Register, offset: 0x2C */
} volatile *LPUART_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- LPUART - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LPUART_Register_Accessor_Macros LPUART - Register accessor macros
 * @{
 */


/* LPUART - Register accessors */
#define LPUART_VERID_REG(base)                   ((base)->VERID)
#define LPUART_PARAM_REG(base)                   ((base)->PARAM)
#define LPUART_GLOBAL_REG(base)                  ((base)->GLOBAL)
#define LPUART_PINCFG_REG(base)                  ((base)->PINCFG)
#define LPUART_BAUD_REG(base)                    ((base)->BAUD)
#define LPUART_STAT_REG(base)                    ((base)->STAT)
#define LPUART_CTRL_REG(base)                    ((base)->CTRL)
#define LPUART_DATA_REG(base)                    ((base)->DATA)
#define LPUART_MATCH_REG(base)                   ((base)->MATCH)
#define LPUART_MODIR_REG(base)                   ((base)->MODIR)
#define LPUART_FIFO_REG(base)                    ((base)->FIFO)
#define LPUART_WATER_REG(base)                   ((base)->WATER)

/*!
 * @}
 */ /* end of group LPUART_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- LPUART Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LPUART_Register_Masks LPUART Register Masks
 * @{
 */

/*! @name VERID - Version ID Register */
#define LPUART_VERID_FEATURE_MASK                (0xFFFFU)
#define LPUART_VERID_FEATURE_SHIFT               (0U)
#define LPUART_VERID_FEATURE(x)                  (((uint32_t)(((uint32_t)(x)) << LPUART_VERID_FEATURE_SHIFT)) & LPUART_VERID_FEATURE_MASK)
#define LPUART_VERID_MINOR_MASK                  (0xFF0000U)
#define LPUART_VERID_MINOR_SHIFT                 (16U)
#define LPUART_VERID_MINOR(x)                    (((uint32_t)(((uint32_t)(x)) << LPUART_VERID_MINOR_SHIFT)) & LPUART_VERID_MINOR_MASK)
#define LPUART_VERID_MAJOR_MASK                  (0xFF000000U)
#define LPUART_VERID_MAJOR_SHIFT                 (24U)
#define LPUART_VERID_MAJOR(x)                    (((uint32_t)(((uint32_t)(x)) << LPUART_VERID_MAJOR_SHIFT)) & LPUART_VERID_MAJOR_MASK)

/*! @name PARAM - Parameter Register */
#define LPUART_PARAM_TXFIFO_MASK                 (0xFFU)
#define LPUART_PARAM_TXFIFO_SHIFT                (0U)
#define LPUART_PARAM_TXFIFO(x)                   (((uint32_t)(((uint32_t)(x)) << LPUART_PARAM_TXFIFO_SHIFT)) & LPUART_PARAM_TXFIFO_MASK)
#define LPUART_PARAM_RXFIFO_MASK                 (0xFF00U)
#define LPUART_PARAM_RXFIFO_SHIFT                (8U)
#define LPUART_PARAM_RXFIFO(x)                   (((uint32_t)(((uint32_t)(x)) << LPUART_PARAM_RXFIFO_SHIFT)) & LPUART_PARAM_RXFIFO_MASK)

/*! @name GLOBAL - LPUART Global Register */
#define LPUART_GLOBAL_RST_MASK                   (0x2U)
#define LPUART_GLOBAL_RST_SHIFT                  (1U)

/*! @name PINCFG - LPUART Pin Configuration Register */
#define LPUART_PINCFG_TRGSEL_MASK                (0x3U)
#define LPUART_PINCFG_TRGSEL_SHIFT               (0U)
#define LPUART_PINCFG_TRGSEL(x)                  (((uint32_t)(((uint32_t)(x)) << LPUART_PINCFG_TRGSEL_SHIFT)) & LPUART_PINCFG_TRGSEL_MASK)

/*! @name BAUD - LPUART Baud Rate Register */
#define LPUART_BAUD_SBR_MASK                     (0x1FFFU)
#define LPUART_BAUD_SBR_SHIFT                    (0U)
#define LPUART_BAUD_SBR(x)                       (((uint32_t)(((uint32_t)(x)) << LPUART_BAUD_SBR_SHIFT)) & LPUART_BAUD_SBR_MASK)
#define LPUART_BAUD_SBNS_MASK                    (0x2000U)
#define LPUART_BAUD_SBNS_SHIFT                   (13U)
#define LPUART_BAUD_RXEDGIE_MASK                 (0x4000U)
#define LPUART_BAUD_RXEDGIE_SHIFT                (14U)
#define LPUART_BAUD_LBKDIE_MASK                  (0x8000U)
#define LPUART_BAUD_LBKDIE_SHIFT                 (15U)
#define LPUART_BAUD_RESYNCDIS_MASK               (0x10000U)
#define LPUART_BAUD_RESYNCDIS_SHIFT              (16U)
#define LPUART_BAUD_BOTHEDGE_MASK                (0x20000U)
#define LPUART_BAUD_BOTHEDGE_SHIFT               (17U)
#define LPUART_BAUD_MATCFG_MASK                  (0xC0000U)
#define LPUART_BAUD_MATCFG_SHIFT                 (18U)
#define LPUART_BAUD_MATCFG(x)                    (((uint32_t)(((uint32_t)(x)) << LPUART_BAUD_MATCFG_SHIFT)) & LPUART_BAUD_MATCFG_MASK)
#define LPUART_BAUD_RIDMAE_MASK                  (0x100000U)
#define LPUART_BAUD_RIDMAE_SHIFT                 (20U)
#define LPUART_BAUD_RDMAE_MASK                   (0x200000U)
#define LPUART_BAUD_RDMAE_SHIFT                  (21U)
#define LPUART_BAUD_TDMAE_MASK                   (0x800000U)
#define LPUART_BAUD_TDMAE_SHIFT                  (23U)
#define LPUART_BAUD_OSR_MASK                     (0x1F000000U)
#define LPUART_BAUD_OSR_SHIFT                    (24U)
#define LPUART_BAUD_OSR(x)                       (((uint32_t)(((uint32_t)(x)) << LPUART_BAUD_OSR_SHIFT)) & LPUART_BAUD_OSR_MASK)
#define LPUART_BAUD_M10_MASK                     (0x20000000U)
#define LPUART_BAUD_M10_SHIFT                    (29U)
#define LPUART_BAUD_MAEN2_MASK                   (0x40000000U)
#define LPUART_BAUD_MAEN2_SHIFT                  (30U)
#define LPUART_BAUD_MAEN1_MASK                   (0x80000000U)
#define LPUART_BAUD_MAEN1_SHIFT                  (31U)

/*! @name STAT - LPUART Status Register */
#define LPUART_STAT_MA2F_MASK                    (0x4000U)
#define LPUART_STAT_MA2F_SHIFT                   (14U)
#define LPUART_STAT_MA1F_MASK                    (0x8000U)
#define LPUART_STAT_MA1F_SHIFT                   (15U)
#define LPUART_STAT_PF_MASK                      (0x10000U)
#define LPUART_STAT_PF_SHIFT                     (16U)
#define LPUART_STAT_FE_MASK                      (0x20000U)
#define LPUART_STAT_FE_SHIFT                     (17U)
#define LPUART_STAT_NF_MASK                      (0x40000U)
#define LPUART_STAT_NF_SHIFT                     (18U)
#define LPUART_STAT_OR_MASK                      (0x80000U)
#define LPUART_STAT_OR_SHIFT                     (19U)
#define LPUART_STAT_IDLE_MASK                    (0x100000U)
#define LPUART_STAT_IDLE_SHIFT                   (20U)
#define LPUART_STAT_RDRF_MASK                    (0x200000U)
#define LPUART_STAT_RDRF_SHIFT                   (21U)
#define LPUART_STAT_TC_MASK                      (0x400000U)
#define LPUART_STAT_TC_SHIFT                     (22U)
#define LPUART_STAT_TDRE_MASK                    (0x800000U)
#define LPUART_STAT_TDRE_SHIFT                   (23U)
#define LPUART_STAT_RAF_MASK                     (0x1000000U)
#define LPUART_STAT_RAF_SHIFT                    (24U)
#define LPUART_STAT_LBKDE_MASK                   (0x2000000U)
#define LPUART_STAT_LBKDE_SHIFT                  (25U)
#define LPUART_STAT_BRK13_MASK                   (0x4000000U)
#define LPUART_STAT_BRK13_SHIFT                  (26U)
#define LPUART_STAT_RWUID_MASK                   (0x8000000U)
#define LPUART_STAT_RWUID_SHIFT                  (27U)
#define LPUART_STAT_RXINV_MASK                   (0x10000000U)
#define LPUART_STAT_RXINV_SHIFT                  (28U)
#define LPUART_STAT_MSBF_MASK                    (0x20000000U)
#define LPUART_STAT_MSBF_SHIFT                   (29U)
#define LPUART_STAT_RXEDGIF_MASK                 (0x40000000U)
#define LPUART_STAT_RXEDGIF_SHIFT                (30U)
#define LPUART_STAT_LBKDIF_MASK                  (0x80000000U)
#define LPUART_STAT_LBKDIF_SHIFT                 (31U)

/*! @name CTRL - LPUART Control Register */
#define LPUART_CTRL_PT_MASK                      (0x1U)
#define LPUART_CTRL_PT_SHIFT                     (0U)
#define LPUART_CTRL_PE_MASK                      (0x2U)
#define LPUART_CTRL_PE_SHIFT                     (1U)
#define LPUART_CTRL_ILT_MASK                     (0x4U)
#define LPUART_CTRL_ILT_SHIFT                    (2U)
#define LPUART_CTRL_WAKE_MASK                    (0x8U)
#define LPUART_CTRL_WAKE_SHIFT                   (3U)
#define LPUART_CTRL_M_MASK                       (0x10U)
#define LPUART_CTRL_M_SHIFT                      (4U)
#define LPUART_CTRL_RSRC_MASK                    (0x20U)
#define LPUART_CTRL_RSRC_SHIFT                   (5U)
#define LPUART_CTRL_DOZEEN_MASK                  (0x40U)
#define LPUART_CTRL_DOZEEN_SHIFT                 (6U)
#define LPUART_CTRL_LOOPS_MASK                   (0x80U)
#define LPUART_CTRL_LOOPS_SHIFT                  (7U)
#define LPUART_CTRL_IDLECFG_MASK                 (0x700U)
#define LPUART_CTRL_IDLECFG_SHIFT                (8U)
#define LPUART_CTRL_IDLECFG(x)                   (((uint32_t)(((uint32_t)(x)) << LPUART_CTRL_IDLECFG_SHIFT)) & LPUART_CTRL_IDLECFG_MASK)
#define LPUART_CTRL_M7_MASK                      (0x800U)
#define LPUART_CTRL_M7_SHIFT                     (11U)
#define LPUART_CTRL_MA2IE_MASK                   (0x4000U)
#define LPUART_CTRL_MA2IE_SHIFT                  (14U)
#define LPUART_CTRL_MA1IE_MASK                   (0x8000U)
#define LPUART_CTRL_MA1IE_SHIFT                  (15U)
#define LPUART_CTRL_SBK_MASK                     (0x10000U)
#define LPUART_CTRL_SBK_SHIFT                    (16U)
#define LPUART_CTRL_RWU_MASK                     (0x20000U)
#define LPUART_CTRL_RWU_SHIFT                    (17U)
#define LPUART_CTRL_RE_MASK                      (0x40000U)
#define LPUART_CTRL_RE_SHIFT                     (18U)
#define LPUART_CTRL_TE_MASK                      (0x80000U)
#define LPUART_CTRL_TE_SHIFT                     (19U)
#define LPUART_CTRL_ILIE_MASK                    (0x100000U)
#define LPUART_CTRL_ILIE_SHIFT                   (20U)
#define LPUART_CTRL_RIE_MASK                     (0x200000U)
#define LPUART_CTRL_RIE_SHIFT                    (21U)
#define LPUART_CTRL_TCIE_MASK                    (0x400000U)
#define LPUART_CTRL_TCIE_SHIFT                   (22U)
#define LPUART_CTRL_TIE_MASK                     (0x800000U)
#define LPUART_CTRL_TIE_SHIFT                    (23U)
#define LPUART_CTRL_PEIE_MASK                    (0x1000000U)
#define LPUART_CTRL_PEIE_SHIFT                   (24U)
#define LPUART_CTRL_FEIE_MASK                    (0x2000000U)
#define LPUART_CTRL_FEIE_SHIFT                   (25U)
#define LPUART_CTRL_NEIE_MASK                    (0x4000000U)
#define LPUART_CTRL_NEIE_SHIFT                   (26U)
#define LPUART_CTRL_ORIE_MASK                    (0x8000000U)
#define LPUART_CTRL_ORIE_SHIFT                   (27U)
#define LPUART_CTRL_TXINV_MASK                   (0x10000000U)
#define LPUART_CTRL_TXINV_SHIFT                  (28U)
#define LPUART_CTRL_TXDIR_MASK                   (0x20000000U)
#define LPUART_CTRL_TXDIR_SHIFT                  (29U)
#define LPUART_CTRL_R9T8_MASK                    (0x40000000U)
#define LPUART_CTRL_R9T8_SHIFT                   (30U)
#define LPUART_CTRL_R8T9_MASK                    (0x80000000U)
#define LPUART_CTRL_R8T9_SHIFT                   (31U)

/*! @name DATA - LPUART Data Register */
#define LPUART_DATA_R0T0_MASK                    (0x1U)
#define LPUART_DATA_R0T0_SHIFT                   (0U)
#define LPUART_DATA_R1T1_MASK                    (0x2U)
#define LPUART_DATA_R1T1_SHIFT                   (1U)
#define LPUART_DATA_R2T2_MASK                    (0x4U)
#define LPUART_DATA_R2T2_SHIFT                   (2U)
#define LPUART_DATA_R3T3_MASK                    (0x8U)
#define LPUART_DATA_R3T3_SHIFT                   (3U)
#define LPUART_DATA_R4T4_MASK                    (0x10U)
#define LPUART_DATA_R4T4_SHIFT                   (4U)
#define LPUART_DATA_R5T5_MASK                    (0x20U)
#define LPUART_DATA_R5T5_SHIFT                   (5U)
#define LPUART_DATA_R6T6_MASK                    (0x40U)
#define LPUART_DATA_R6T6_SHIFT                   (6U)
#define LPUART_DATA_R7T7_MASK                    (0x80U)
#define LPUART_DATA_R7T7_SHIFT                   (7U)
#define LPUART_DATA_R8T8_MASK                    (0x100U)
#define LPUART_DATA_R8T8_SHIFT                   (8U)
#define LPUART_DATA_R9T9_MASK                    (0x200U)
#define LPUART_DATA_R9T9_SHIFT                   (9U)
#define LPUART_DATA_IDLINE_MASK                  (0x800U)
#define LPUART_DATA_IDLINE_SHIFT                 (11U)
#define LPUART_DATA_RXEMPT_MASK                  (0x1000U)
#define LPUART_DATA_RXEMPT_SHIFT                 (12U)
#define LPUART_DATA_FRETSC_MASK                  (0x2000U)
#define LPUART_DATA_FRETSC_SHIFT                 (13U)
#define LPUART_DATA_PARITYE_MASK                 (0x4000U)
#define LPUART_DATA_PARITYE_SHIFT                (14U)
#define LPUART_DATA_NOISY_MASK                   (0x8000U)
#define LPUART_DATA_NOISY_SHIFT                  (15U)

/*! @name MATCH - LPUART Match Address Register */
#define LPUART_MATCH_MA1_MASK                    (0x3FFU)
#define LPUART_MATCH_MA1_SHIFT                   (0U)
#define LPUART_MATCH_MA1(x)                      (((uint32_t)(((uint32_t)(x)) << LPUART_MATCH_MA1_SHIFT)) & LPUART_MATCH_MA1_MASK)
#define LPUART_MATCH_MA2_MASK                    (0x3FF0000U)
#define LPUART_MATCH_MA2_SHIFT                   (16U)
#define LPUART_MATCH_MA2(x)                      (((uint32_t)(((uint32_t)(x)) << LPUART_MATCH_MA2_SHIFT)) & LPUART_MATCH_MA2_MASK)

/*! @name MODIR - LPUART Modem IrDA Register */
#define LPUART_MODIR_TXCTSE_MASK                 (0x1U)
#define LPUART_MODIR_TXCTSE_SHIFT                (0U)
#define LPUART_MODIR_TXRTSE_MASK                 (0x2U)
#define LPUART_MODIR_TXRTSE_SHIFT                (1U)
#define LPUART_MODIR_TXRTSPOL_MASK               (0x4U)
#define LPUART_MODIR_TXRTSPOL_SHIFT              (2U)
#define LPUART_MODIR_RXRTSE_MASK                 (0x8U)
#define LPUART_MODIR_RXRTSE_SHIFT                (3U)
#define LPUART_MODIR_TXCTSC_MASK                 (0x10U)
#define LPUART_MODIR_TXCTSC_SHIFT                (4U)
#define LPUART_MODIR_TXCTSSRC_MASK               (0x20U)
#define LPUART_MODIR_TXCTSSRC_SHIFT              (5U)
#define LPUART_MODIR_RTSWATER_MASK               (0x300U)
#define LPUART_MODIR_RTSWATER_SHIFT              (8U)
#define LPUART_MODIR_RTSWATER(x)                 (((uint32_t)(((uint32_t)(x)) << LPUART_MODIR_RTSWATER_SHIFT)) & LPUART_MODIR_RTSWATER_MASK)
#define LPUART_MODIR_TNP_MASK                    (0x30000U)
#define LPUART_MODIR_TNP_SHIFT                   (16U)
#define LPUART_MODIR_TNP(x)                      (((uint32_t)(((uint32_t)(x)) << LPUART_MODIR_TNP_SHIFT)) & LPUART_MODIR_TNP_MASK)
#define LPUART_MODIR_IREN_MASK                   (0x40000U)
#define LPUART_MODIR_IREN_SHIFT                  (18U)

/*! @name FIFO - LPUART FIFO Register */
#define LPUART_FIFO_RXFIFOSIZE_MASK              (0x7U)
#define LPUART_FIFO_RXFIFOSIZE_SHIFT             (0U)
#define LPUART_FIFO_RXFIFOSIZE(x)                (((uint32_t)(((uint32_t)(x)) << LPUART_FIFO_RXFIFOSIZE_SHIFT)) & LPUART_FIFO_RXFIFOSIZE_MASK)
#define LPUART_FIFO_RXFE_MASK                    (0x8U)
#define LPUART_FIFO_RXFE_SHIFT                   (3U)
#define LPUART_FIFO_TXFIFOSIZE_MASK              (0x70U)
#define LPUART_FIFO_TXFIFOSIZE_SHIFT             (4U)
#define LPUART_FIFO_TXFIFOSIZE(x)                (((uint32_t)(((uint32_t)(x)) << LPUART_FIFO_TXFIFOSIZE_SHIFT)) & LPUART_FIFO_TXFIFOSIZE_MASK)
#define LPUART_FIFO_TXFE_MASK                    (0x80U)
#define LPUART_FIFO_TXFE_SHIFT                   (7U)
#define LPUART_FIFO_RXUFE_MASK                   (0x100U)
#define LPUART_FIFO_RXUFE_SHIFT                  (8U)
#define LPUART_FIFO_TXOFE_MASK                   (0x200U)
#define LPUART_FIFO_TXOFE_SHIFT                  (9U)
#define LPUART_FIFO_RXIDEN_MASK                  (0x1C00U)
#define LPUART_FIFO_RXIDEN_SHIFT                 (10U)
#define LPUART_FIFO_RXIDEN(x)                    (((uint32_t)(((uint32_t)(x)) << LPUART_FIFO_RXIDEN_SHIFT)) & LPUART_FIFO_RXIDEN_MASK)
#define LPUART_FIFO_RXFLUSH_MASK                 (0x4000U)
#define LPUART_FIFO_RXFLUSH_SHIFT                (14U)
#define LPUART_FIFO_TXFLUSH_MASK                 (0x8000U)
#define LPUART_FIFO_TXFLUSH_SHIFT                (15U)
#define LPUART_FIFO_RXUF_MASK                    (0x10000U)
#define LPUART_FIFO_RXUF_SHIFT                   (16U)
#define LPUART_FIFO_TXOF_MASK                    (0x20000U)
#define LPUART_FIFO_TXOF_SHIFT                   (17U)
#define LPUART_FIFO_RXEMPT_MASK                  (0x400000U)
#define LPUART_FIFO_RXEMPT_SHIFT                 (22U)
#define LPUART_FIFO_TXEMPT_MASK                  (0x800000U)
#define LPUART_FIFO_TXEMPT_SHIFT                 (23U)

/*! @name WATER - LPUART Watermark Register */
#define LPUART_WATER_TXWATER_MASK                (0x3U)
#define LPUART_WATER_TXWATER_SHIFT               (0U)
#define LPUART_WATER_TXWATER(x)                  (((uint32_t)(((uint32_t)(x)) << LPUART_WATER_TXWATER_SHIFT)) & LPUART_WATER_TXWATER_MASK)
#define LPUART_WATER_TXCOUNT_MASK                (0x700U)
#define LPUART_WATER_TXCOUNT_SHIFT               (8U)
#define LPUART_WATER_TXCOUNT(x)                  (((uint32_t)(((uint32_t)(x)) << LPUART_WATER_TXCOUNT_SHIFT)) & LPUART_WATER_TXCOUNT_MASK)
#define LPUART_WATER_RXWATER_MASK                (0x30000U)
#define LPUART_WATER_RXWATER_SHIFT               (16U)
#define LPUART_WATER_RXWATER(x)                  (((uint32_t)(((uint32_t)(x)) << LPUART_WATER_RXWATER_SHIFT)) & LPUART_WATER_RXWATER_MASK)
#define LPUART_WATER_RXCOUNT_MASK                (0x7000000U)
#define LPUART_WATER_RXCOUNT_SHIFT               (24U)
#define LPUART_WATER_RXCOUNT(x)                  (((uint32_t)(((uint32_t)(x)) << LPUART_WATER_RXCOUNT_SHIFT)) & LPUART_WATER_RXCOUNT_MASK)


/*!
 * @}
 */ /* end of group LPUART_Register_Masks */


/* LPUART - Peripheral instance base addresses */
/** Peripheral LPUART1 base pointer */
#define LPUART1_BASE_PTR                         ((LPUART_MemMapPtr)0x40184000u)
/** Peripheral LPUART2 base pointer */
#define LPUART2_BASE_PTR                         ((LPUART_MemMapPtr)0x40188000u)
/** Peripheral LPUART3 base pointer */
#define LPUART3_BASE_PTR                         ((LPUART_MemMapPtr)0x4018C000u)
/** Peripheral LPUART4 base pointer */
#define LPUART4_BASE_PTR                         ((LPUART_MemMapPtr)0x40190000u)
/** Peripheral LPUART5 base pointer */
#define LPUART5_BASE_PTR                         ((LPUART_MemMapPtr)0x40194000u)
/** Peripheral LPUART6 base pointer */
#define LPUART6_BASE_PTR                         ((LPUART_MemMapPtr)0x40198000u)
/** Peripheral LPUART7 base pointer */
#define LPUART7_BASE_PTR                         ((LPUART_MemMapPtr)0x4019C000u)
/** Peripheral LPUART8 base pointer */
#define LPUART8_BASE_PTR                         ((LPUART_MemMapPtr)0x401A0000u)
/** Array initializer of LPUART peripheral base pointers */
#define LPUART_BASE_PTRS                         { LPUART1_BASE_PTR, LPUART2_BASE_PTR, LPUART3_BASE_PTR, LPUART4_BASE_PTR, LPUART5_BASE_PTR, LPUART6_BASE_PTR, LPUART7_BASE_PTR, LPUART8_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- LPUART - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LPUART_Register_Accessor_Macros LPUART - Register accessor macros
 * @{
 */


/* LPUART - Register instance definitions */
/* LPUART1 */
#define LPUART1_VERID                            LPUART_VERID_REG(LPUART1_BASE_PTR)
#define LPUART1_PARAM                            LPUART_PARAM_REG(LPUART1_BASE_PTR)
#define LPUART1_GLOBAL                           LPUART_GLOBAL_REG(LPUART1_BASE_PTR)
#define LPUART1_PINCFG                           LPUART_PINCFG_REG(LPUART1_BASE_PTR)
#define LPUART1_BAUD                             LPUART_BAUD_REG(LPUART1_BASE_PTR)
#define LPUART1_STAT                             LPUART_STAT_REG(LPUART1_BASE_PTR)
#define LPUART1_CTRL                             LPUART_CTRL_REG(LPUART1_BASE_PTR)
#define LPUART1_DATA                             LPUART_DATA_REG(LPUART1_BASE_PTR)
#define LPUART1_MATCH                            LPUART_MATCH_REG(LPUART1_BASE_PTR)
#define LPUART1_MODIR                            LPUART_MODIR_REG(LPUART1_BASE_PTR)
#define LPUART1_FIFO                             LPUART_FIFO_REG(LPUART1_BASE_PTR)
#define LPUART1_WATER                            LPUART_WATER_REG(LPUART1_BASE_PTR)
/* LPUART2 */
#define LPUART2_VERID                            LPUART_VERID_REG(LPUART2_BASE_PTR)
#define LPUART2_PARAM                            LPUART_PARAM_REG(LPUART2_BASE_PTR)
#define LPUART2_GLOBAL                           LPUART_GLOBAL_REG(LPUART2_BASE_PTR)
#define LPUART2_PINCFG                           LPUART_PINCFG_REG(LPUART2_BASE_PTR)
#define LPUART2_BAUD                             LPUART_BAUD_REG(LPUART2_BASE_PTR)
#define LPUART2_STAT                             LPUART_STAT_REG(LPUART2_BASE_PTR)
#define LPUART2_CTRL                             LPUART_CTRL_REG(LPUART2_BASE_PTR)
#define LPUART2_DATA                             LPUART_DATA_REG(LPUART2_BASE_PTR)
#define LPUART2_MATCH                            LPUART_MATCH_REG(LPUART2_BASE_PTR)
#define LPUART2_MODIR                            LPUART_MODIR_REG(LPUART2_BASE_PTR)
#define LPUART2_FIFO                             LPUART_FIFO_REG(LPUART2_BASE_PTR)
#define LPUART2_WATER                            LPUART_WATER_REG(LPUART2_BASE_PTR)
/* LPUART3 */
#define LPUART3_VERID                            LPUART_VERID_REG(LPUART3_BASE_PTR)
#define LPUART3_PARAM                            LPUART_PARAM_REG(LPUART3_BASE_PTR)
#define LPUART3_GLOBAL                           LPUART_GLOBAL_REG(LPUART3_BASE_PTR)
#define LPUART3_PINCFG                           LPUART_PINCFG_REG(LPUART3_BASE_PTR)
#define LPUART3_BAUD                             LPUART_BAUD_REG(LPUART3_BASE_PTR)
#define LPUART3_STAT                             LPUART_STAT_REG(LPUART3_BASE_PTR)
#define LPUART3_CTRL                             LPUART_CTRL_REG(LPUART3_BASE_PTR)
#define LPUART3_DATA                             LPUART_DATA_REG(LPUART3_BASE_PTR)
#define LPUART3_MATCH                            LPUART_MATCH_REG(LPUART3_BASE_PTR)
#define LPUART3_MODIR                            LPUART_MODIR_REG(LPUART3_BASE_PTR)
#define LPUART3_FIFO                             LPUART_FIFO_REG(LPUART3_BASE_PTR)
#define LPUART3_WATER                            LPUART_WATER_REG(LPUART3_BASE_PTR)
/* LPUART4 */
#define LPUART4_VERID                            LPUART_VERID_REG(LPUART4_BASE_PTR)
#define LPUART4_PARAM                            LPUART_PARAM_REG(LPUART4_BASE_PTR)
#define LPUART4_GLOBAL                           LPUART_GLOBAL_REG(LPUART4_BASE_PTR)
#define LPUART4_PINCFG                           LPUART_PINCFG_REG(LPUART4_BASE_PTR)
#define LPUART4_BAUD                             LPUART_BAUD_REG(LPUART4_BASE_PTR)
#define LPUART4_STAT                             LPUART_STAT_REG(LPUART4_BASE_PTR)
#define LPUART4_CTRL                             LPUART_CTRL_REG(LPUART4_BASE_PTR)
#define LPUART4_DATA                             LPUART_DATA_REG(LPUART4_BASE_PTR)
#define LPUART4_MATCH                            LPUART_MATCH_REG(LPUART4_BASE_PTR)
#define LPUART4_MODIR                            LPUART_MODIR_REG(LPUART4_BASE_PTR)
#define LPUART4_FIFO                             LPUART_FIFO_REG(LPUART4_BASE_PTR)
#define LPUART4_WATER                            LPUART_WATER_REG(LPUART4_BASE_PTR)
/* LPUART5 */
#define LPUART5_VERID                            LPUART_VERID_REG(LPUART5_BASE_PTR)
#define LPUART5_PARAM                            LPUART_PARAM_REG(LPUART5_BASE_PTR)
#define LPUART5_GLOBAL                           LPUART_GLOBAL_REG(LPUART5_BASE_PTR)
#define LPUART5_PINCFG                           LPUART_PINCFG_REG(LPUART5_BASE_PTR)
#define LPUART5_BAUD                             LPUART_BAUD_REG(LPUART5_BASE_PTR)
#define LPUART5_STAT                             LPUART_STAT_REG(LPUART5_BASE_PTR)
#define LPUART5_CTRL                             LPUART_CTRL_REG(LPUART5_BASE_PTR)
#define LPUART5_DATA                             LPUART_DATA_REG(LPUART5_BASE_PTR)
#define LPUART5_MATCH                            LPUART_MATCH_REG(LPUART5_BASE_PTR)
#define LPUART5_MODIR                            LPUART_MODIR_REG(LPUART5_BASE_PTR)
#define LPUART5_FIFO                             LPUART_FIFO_REG(LPUART5_BASE_PTR)
#define LPUART5_WATER                            LPUART_WATER_REG(LPUART5_BASE_PTR)
/* LPUART6 */
#define LPUART6_VERID                            LPUART_VERID_REG(LPUART6_BASE_PTR)
#define LPUART6_PARAM                            LPUART_PARAM_REG(LPUART6_BASE_PTR)
#define LPUART6_GLOBAL                           LPUART_GLOBAL_REG(LPUART6_BASE_PTR)
#define LPUART6_PINCFG                           LPUART_PINCFG_REG(LPUART6_BASE_PTR)
#define LPUART6_BAUD                             LPUART_BAUD_REG(LPUART6_BASE_PTR)
#define LPUART6_STAT                             LPUART_STAT_REG(LPUART6_BASE_PTR)
#define LPUART6_CTRL                             LPUART_CTRL_REG(LPUART6_BASE_PTR)
#define LPUART6_DATA                             LPUART_DATA_REG(LPUART6_BASE_PTR)
#define LPUART6_MATCH                            LPUART_MATCH_REG(LPUART6_BASE_PTR)
#define LPUART6_MODIR                            LPUART_MODIR_REG(LPUART6_BASE_PTR)
#define LPUART6_FIFO                             LPUART_FIFO_REG(LPUART6_BASE_PTR)
#define LPUART6_WATER                            LPUART_WATER_REG(LPUART6_BASE_PTR)
/* LPUART7 */
#define LPUART7_VERID                            LPUART_VERID_REG(LPUART7_BASE_PTR)
#define LPUART7_PARAM                            LPUART_PARAM_REG(LPUART7_BASE_PTR)
#define LPUART7_GLOBAL                           LPUART_GLOBAL_REG(LPUART7_BASE_PTR)
#define LPUART7_PINCFG                           LPUART_PINCFG_REG(LPUART7_BASE_PTR)
#define LPUART7_BAUD                             LPUART_BAUD_REG(LPUART7_BASE_PTR)
#define LPUART7_STAT                             LPUART_STAT_REG(LPUART7_BASE_PTR)
#define LPUART7_CTRL                             LPUART_CTRL_REG(LPUART7_BASE_PTR)
#define LPUART7_DATA                             LPUART_DATA_REG(LPUART7_BASE_PTR)
#define LPUART7_MATCH                            LPUART_MATCH_REG(LPUART7_BASE_PTR)
#define LPUART7_MODIR                            LPUART_MODIR_REG(LPUART7_BASE_PTR)
#define LPUART7_FIFO                             LPUART_FIFO_REG(LPUART7_BASE_PTR)
#define LPUART7_WATER                            LPUART_WATER_REG(LPUART7_BASE_PTR)
/* LPUART8 */
#define LPUART8_VERID                            LPUART_VERID_REG(LPUART8_BASE_PTR)
#define LPUART8_PARAM                            LPUART_PARAM_REG(LPUART8_BASE_PTR)
#define LPUART8_GLOBAL                           LPUART_GLOBAL_REG(LPUART8_BASE_PTR)
#define LPUART8_PINCFG                           LPUART_PINCFG_REG(LPUART8_BASE_PTR)
#define LPUART8_BAUD                             LPUART_BAUD_REG(LPUART8_BASE_PTR)
#define LPUART8_STAT                             LPUART_STAT_REG(LPUART8_BASE_PTR)
#define LPUART8_CTRL                             LPUART_CTRL_REG(LPUART8_BASE_PTR)
#define LPUART8_DATA                             LPUART_DATA_REG(LPUART8_BASE_PTR)
#define LPUART8_MATCH                            LPUART_MATCH_REG(LPUART8_BASE_PTR)
#define LPUART8_MODIR                            LPUART_MODIR_REG(LPUART8_BASE_PTR)
#define LPUART8_FIFO                             LPUART_FIFO_REG(LPUART8_BASE_PTR)
#define LPUART8_WATER                            LPUART_WATER_REG(LPUART8_BASE_PTR)

/*!
 * @}
 */ /* end of group LPUART_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group LPUART_Peripheral */


/* ----------------------------------------------------------------------------
   -- NVIC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup NVIC_Peripheral NVIC
 * @{
 */

/** NVIC - Peripheral register structure */
typedef struct NVIC_MemMap {
  uint32_t ISER[5];                                /**< Interrupt Set Enable Register n, array offset: 0x0, array step: 0x4 */
  uint8_t RESERVED_0[108];
  uint32_t ICER[5];                                /**< Interrupt Clear Enable Register n, array offset: 0x80, array step: 0x4 */
  uint8_t RESERVED_1[108];
  uint32_t ISPR[5];                                /**< Interrupt Set Pending Register n, array offset: 0x100, array step: 0x4 */
  uint8_t RESERVED_2[108];
  uint32_t ICPR[5];                                /**< Interrupt Clear Pending Register n, array offset: 0x180, array step: 0x4 */
  uint8_t RESERVED_3[108];
  uint32_t IABR[5];                                /**< Interrupt Active bit Register n, array offset: 0x200, array step: 0x4 */
  uint8_t RESERVED_4[236];
  uint8_t IP[142];                                 /**< Interrupt Priority Register 0..Interrupt Priority Register 141, array offset: 0x300, array step: 0x1 */
  uint8_t RESERVED_5[2674];
  uint32_t STIR[1];                                /**< Software Trigger Interrupt Register, array offset: 0xE00, array step: 0x4 */
} volatile *NVIC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- NVIC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup NVIC_Register_Accessor_Macros NVIC - Register accessor macros
 * @{
 */


/* NVIC - Register accessors */
#define NVIC_ISER_REG(base,index)                ((base)->ISER[index])
#define NVIC_ICER_REG(base,index)                ((base)->ICER[index])
#define NVIC_ISPR_REG(base,index)                ((base)->ISPR[index])
#define NVIC_ICPR_REG(base,index)                ((base)->ICPR[index])
#define NVIC_IABR_REG(base,index)                ((base)->IABR[index])
#define NVIC_IP_REG(base,index)                  ((base)->IP[index])
#define NVIC_STIR_REG(base,index)                ((base)->STIR[index])

/*!
 * @}
 */ /* end of group NVIC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- NVIC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup NVIC_Register_Masks NVIC Register Masks
 * @{
 */

/*! @name ISER - Interrupt Set Enable Register n */
#define NVIC_ISER_SETENA_MASK                    (0xFFFFFFFFU)
#define NVIC_ISER_SETENA_SHIFT                   (0U)
#define NVIC_ISER_SETENA(x)                      (((uint32_t)(((uint32_t)(x)) << NVIC_ISER_SETENA_SHIFT)) & NVIC_ISER_SETENA_MASK)

/* The count of NVIC_ISER */
#define NVIC_ISER_COUNT                          (5U)

/*! @name ICER - Interrupt Clear Enable Register n */
#define NVIC_ICER_CLRENA_MASK                    (0xFFFFFFFFU)
#define NVIC_ICER_CLRENA_SHIFT                   (0U)
#define NVIC_ICER_CLRENA(x)                      (((uint32_t)(((uint32_t)(x)) << NVIC_ICER_CLRENA_SHIFT)) & NVIC_ICER_CLRENA_MASK)

/* The count of NVIC_ICER */
#define NVIC_ICER_COUNT                          (5U)

/*! @name ISPR - Interrupt Set Pending Register n */
#define NVIC_ISPR_SETPEND_MASK                   (0xFFFFFFFFU)
#define NVIC_ISPR_SETPEND_SHIFT                  (0U)
#define NVIC_ISPR_SETPEND(x)                     (((uint32_t)(((uint32_t)(x)) << NVIC_ISPR_SETPEND_SHIFT)) & NVIC_ISPR_SETPEND_MASK)

/* The count of NVIC_ISPR */
#define NVIC_ISPR_COUNT                          (5U)

/*! @name ICPR - Interrupt Clear Pending Register n */
#define NVIC_ICPR_CLRPEND_MASK                   (0xFFFFFFFFU)
#define NVIC_ICPR_CLRPEND_SHIFT                  (0U)
#define NVIC_ICPR_CLRPEND(x)                     (((uint32_t)(((uint32_t)(x)) << NVIC_ICPR_CLRPEND_SHIFT)) & NVIC_ICPR_CLRPEND_MASK)

/* The count of NVIC_ICPR */
#define NVIC_ICPR_COUNT                          (5U)

/*! @name IABR - Interrupt Active bit Register n */
#define NVIC_IABR_ACTIVE_MASK                    (0xFFFFFFFFU)
#define NVIC_IABR_ACTIVE_SHIFT                   (0U)
#define NVIC_IABR_ACTIVE(x)                      (((uint32_t)(((uint32_t)(x)) << NVIC_IABR_ACTIVE_SHIFT)) & NVIC_IABR_ACTIVE_MASK)

/* The count of NVIC_IABR */
#define NVIC_IABR_COUNT                          (5U)

/*! @name IP - Interrupt Priority Register 0..Interrupt Priority Register 141 */
#define NVIC_IP_PRI0_MASK                        (0xF0U)
#define NVIC_IP_PRI0_SHIFT                       (4U)
#define NVIC_IP_PRI0(x)                          (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI0_SHIFT)) & NVIC_IP_PRI0_MASK)
#define NVIC_IP_PRI1_MASK                        (0xF0U)
#define NVIC_IP_PRI1_SHIFT                       (4U)
#define NVIC_IP_PRI1(x)                          (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI1_SHIFT)) & NVIC_IP_PRI1_MASK)
#define NVIC_IP_PRI2_MASK                        (0xF0U)
#define NVIC_IP_PRI2_SHIFT                       (4U)
#define NVIC_IP_PRI2(x)                          (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI2_SHIFT)) & NVIC_IP_PRI2_MASK)
#define NVIC_IP_PRI3_MASK                        (0xF0U)
#define NVIC_IP_PRI3_SHIFT                       (4U)
#define NVIC_IP_PRI3(x)                          (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI3_SHIFT)) & NVIC_IP_PRI3_MASK)
#define NVIC_IP_PRI4_MASK                        (0xF0U)
#define NVIC_IP_PRI4_SHIFT                       (4U)
#define NVIC_IP_PRI4(x)                          (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI4_SHIFT)) & NVIC_IP_PRI4_MASK)
#define NVIC_IP_PRI5_MASK                        (0xF0U)
#define NVIC_IP_PRI5_SHIFT                       (4U)
#define NVIC_IP_PRI5(x)                          (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI5_SHIFT)) & NVIC_IP_PRI5_MASK)
#define NVIC_IP_PRI6_MASK                        (0xF0U)
#define NVIC_IP_PRI6_SHIFT                       (4U)
#define NVIC_IP_PRI6(x)                          (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI6_SHIFT)) & NVIC_IP_PRI6_MASK)
#define NVIC_IP_PRI7_MASK                        (0xF0U)
#define NVIC_IP_PRI7_SHIFT                       (4U)
#define NVIC_IP_PRI7(x)                          (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI7_SHIFT)) & NVIC_IP_PRI7_MASK)
#define NVIC_IP_PRI8_MASK                        (0xF0U)
#define NVIC_IP_PRI8_SHIFT                       (4U)
#define NVIC_IP_PRI8(x)                          (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI8_SHIFT)) & NVIC_IP_PRI8_MASK)
#define NVIC_IP_PRI9_MASK                        (0xF0U)
#define NVIC_IP_PRI9_SHIFT                       (4U)
#define NVIC_IP_PRI9(x)                          (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI9_SHIFT)) & NVIC_IP_PRI9_MASK)
#define NVIC_IP_PRI10_MASK                       (0xF0U)
#define NVIC_IP_PRI10_SHIFT                      (4U)
#define NVIC_IP_PRI10(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI10_SHIFT)) & NVIC_IP_PRI10_MASK)
#define NVIC_IP_PRI11_MASK                       (0xF0U)
#define NVIC_IP_PRI11_SHIFT                      (4U)
#define NVIC_IP_PRI11(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI11_SHIFT)) & NVIC_IP_PRI11_MASK)
#define NVIC_IP_PRI12_MASK                       (0xF0U)
#define NVIC_IP_PRI12_SHIFT                      (4U)
#define NVIC_IP_PRI12(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI12_SHIFT)) & NVIC_IP_PRI12_MASK)
#define NVIC_IP_PRI13_MASK                       (0xF0U)
#define NVIC_IP_PRI13_SHIFT                      (4U)
#define NVIC_IP_PRI13(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI13_SHIFT)) & NVIC_IP_PRI13_MASK)
#define NVIC_IP_PRI14_MASK                       (0xF0U)
#define NVIC_IP_PRI14_SHIFT                      (4U)
#define NVIC_IP_PRI14(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI14_SHIFT)) & NVIC_IP_PRI14_MASK)
#define NVIC_IP_PRI15_MASK                       (0xF0U)
#define NVIC_IP_PRI15_SHIFT                      (4U)
#define NVIC_IP_PRI15(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI15_SHIFT)) & NVIC_IP_PRI15_MASK)
#define NVIC_IP_PRI16_MASK                       (0xF0U)
#define NVIC_IP_PRI16_SHIFT                      (4U)
#define NVIC_IP_PRI16(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI16_SHIFT)) & NVIC_IP_PRI16_MASK)
#define NVIC_IP_PRI17_MASK                       (0xF0U)
#define NVIC_IP_PRI17_SHIFT                      (4U)
#define NVIC_IP_PRI17(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI17_SHIFT)) & NVIC_IP_PRI17_MASK)
#define NVIC_IP_PRI18_MASK                       (0xF0U)
#define NVIC_IP_PRI18_SHIFT                      (4U)
#define NVIC_IP_PRI18(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI18_SHIFT)) & NVIC_IP_PRI18_MASK)
#define NVIC_IP_PRI19_MASK                       (0xF0U)
#define NVIC_IP_PRI19_SHIFT                      (4U)
#define NVIC_IP_PRI19(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI19_SHIFT)) & NVIC_IP_PRI19_MASK)
#define NVIC_IP_PRI20_MASK                       (0xF0U)
#define NVIC_IP_PRI20_SHIFT                      (4U)
#define NVIC_IP_PRI20(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI20_SHIFT)) & NVIC_IP_PRI20_MASK)
#define NVIC_IP_PRI21_MASK                       (0xF0U)
#define NVIC_IP_PRI21_SHIFT                      (4U)
#define NVIC_IP_PRI21(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI21_SHIFT)) & NVIC_IP_PRI21_MASK)
#define NVIC_IP_PRI22_MASK                       (0xF0U)
#define NVIC_IP_PRI22_SHIFT                      (4U)
#define NVIC_IP_PRI22(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI22_SHIFT)) & NVIC_IP_PRI22_MASK)
#define NVIC_IP_PRI23_MASK                       (0xF0U)
#define NVIC_IP_PRI23_SHIFT                      (4U)
#define NVIC_IP_PRI23(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI23_SHIFT)) & NVIC_IP_PRI23_MASK)
#define NVIC_IP_PRI24_MASK                       (0xF0U)
#define NVIC_IP_PRI24_SHIFT                      (4U)
#define NVIC_IP_PRI24(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI24_SHIFT)) & NVIC_IP_PRI24_MASK)
#define NVIC_IP_PRI25_MASK                       (0xF0U)
#define NVIC_IP_PRI25_SHIFT                      (4U)
#define NVIC_IP_PRI25(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI25_SHIFT)) & NVIC_IP_PRI25_MASK)
#define NVIC_IP_PRI26_MASK                       (0xF0U)
#define NVIC_IP_PRI26_SHIFT                      (4U)
#define NVIC_IP_PRI26(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI26_SHIFT)) & NVIC_IP_PRI26_MASK)
#define NVIC_IP_PRI27_MASK                       (0xF0U)
#define NVIC_IP_PRI27_SHIFT                      (4U)
#define NVIC_IP_PRI27(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI27_SHIFT)) & NVIC_IP_PRI27_MASK)
#define NVIC_IP_PRI28_MASK                       (0xF0U)
#define NVIC_IP_PRI28_SHIFT                      (4U)
#define NVIC_IP_PRI28(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI28_SHIFT)) & NVIC_IP_PRI28_MASK)
#define NVIC_IP_PRI29_MASK                       (0xF0U)
#define NVIC_IP_PRI29_SHIFT                      (4U)
#define NVIC_IP_PRI29(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI29_SHIFT)) & NVIC_IP_PRI29_MASK)
#define NVIC_IP_PRI30_MASK                       (0xF0U)
#define NVIC_IP_PRI30_SHIFT                      (4U)
#define NVIC_IP_PRI30(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI30_SHIFT)) & NVIC_IP_PRI30_MASK)
#define NVIC_IP_PRI31_MASK                       (0xF0U)
#define NVIC_IP_PRI31_SHIFT                      (4U)
#define NVIC_IP_PRI31(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI31_SHIFT)) & NVIC_IP_PRI31_MASK)
#define NVIC_IP_PRI32_MASK                       (0xF0U)
#define NVIC_IP_PRI32_SHIFT                      (4U)
#define NVIC_IP_PRI32(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI32_SHIFT)) & NVIC_IP_PRI32_MASK)
#define NVIC_IP_PRI33_MASK                       (0xF0U)
#define NVIC_IP_PRI33_SHIFT                      (4U)
#define NVIC_IP_PRI33(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI33_SHIFT)) & NVIC_IP_PRI33_MASK)
#define NVIC_IP_PRI34_MASK                       (0xF0U)
#define NVIC_IP_PRI34_SHIFT                      (4U)
#define NVIC_IP_PRI34(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI34_SHIFT)) & NVIC_IP_PRI34_MASK)
#define NVIC_IP_PRI35_MASK                       (0xF0U)
#define NVIC_IP_PRI35_SHIFT                      (4U)
#define NVIC_IP_PRI35(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI35_SHIFT)) & NVIC_IP_PRI35_MASK)
#define NVIC_IP_PRI36_MASK                       (0xF0U)
#define NVIC_IP_PRI36_SHIFT                      (4U)
#define NVIC_IP_PRI36(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI36_SHIFT)) & NVIC_IP_PRI36_MASK)
#define NVIC_IP_PRI37_MASK                       (0xF0U)
#define NVIC_IP_PRI37_SHIFT                      (4U)
#define NVIC_IP_PRI37(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI37_SHIFT)) & NVIC_IP_PRI37_MASK)
#define NVIC_IP_PRI38_MASK                       (0xF0U)
#define NVIC_IP_PRI38_SHIFT                      (4U)
#define NVIC_IP_PRI38(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI38_SHIFT)) & NVIC_IP_PRI38_MASK)
#define NVIC_IP_PRI39_MASK                       (0xF0U)
#define NVIC_IP_PRI39_SHIFT                      (4U)
#define NVIC_IP_PRI39(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI39_SHIFT)) & NVIC_IP_PRI39_MASK)
#define NVIC_IP_PRI40_MASK                       (0xF0U)
#define NVIC_IP_PRI40_SHIFT                      (4U)
#define NVIC_IP_PRI40(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI40_SHIFT)) & NVIC_IP_PRI40_MASK)
#define NVIC_IP_PRI41_MASK                       (0xF0U)
#define NVIC_IP_PRI41_SHIFT                      (4U)
#define NVIC_IP_PRI41(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI41_SHIFT)) & NVIC_IP_PRI41_MASK)
#define NVIC_IP_PRI42_MASK                       (0xF0U)
#define NVIC_IP_PRI42_SHIFT                      (4U)
#define NVIC_IP_PRI42(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI42_SHIFT)) & NVIC_IP_PRI42_MASK)
#define NVIC_IP_PRI43_MASK                       (0xF0U)
#define NVIC_IP_PRI43_SHIFT                      (4U)
#define NVIC_IP_PRI43(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI43_SHIFT)) & NVIC_IP_PRI43_MASK)
#define NVIC_IP_PRI44_MASK                       (0xF0U)
#define NVIC_IP_PRI44_SHIFT                      (4U)
#define NVIC_IP_PRI44(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI44_SHIFT)) & NVIC_IP_PRI44_MASK)
#define NVIC_IP_PRI45_MASK                       (0xF0U)
#define NVIC_IP_PRI45_SHIFT                      (4U)
#define NVIC_IP_PRI45(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI45_SHIFT)) & NVIC_IP_PRI45_MASK)
#define NVIC_IP_PRI46_MASK                       (0xF0U)
#define NVIC_IP_PRI46_SHIFT                      (4U)
#define NVIC_IP_PRI46(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI46_SHIFT)) & NVIC_IP_PRI46_MASK)
#define NVIC_IP_PRI47_MASK                       (0xF0U)
#define NVIC_IP_PRI47_SHIFT                      (4U)
#define NVIC_IP_PRI47(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI47_SHIFT)) & NVIC_IP_PRI47_MASK)
#define NVIC_IP_PRI48_MASK                       (0xF0U)
#define NVIC_IP_PRI48_SHIFT                      (4U)
#define NVIC_IP_PRI48(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI48_SHIFT)) & NVIC_IP_PRI48_MASK)
#define NVIC_IP_PRI49_MASK                       (0xF0U)
#define NVIC_IP_PRI49_SHIFT                      (4U)
#define NVIC_IP_PRI49(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI49_SHIFT)) & NVIC_IP_PRI49_MASK)
#define NVIC_IP_PRI50_MASK                       (0xF0U)
#define NVIC_IP_PRI50_SHIFT                      (4U)
#define NVIC_IP_PRI50(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI50_SHIFT)) & NVIC_IP_PRI50_MASK)
#define NVIC_IP_PRI51_MASK                       (0xF0U)
#define NVIC_IP_PRI51_SHIFT                      (4U)
#define NVIC_IP_PRI51(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI51_SHIFT)) & NVIC_IP_PRI51_MASK)
#define NVIC_IP_PRI52_MASK                       (0xF0U)
#define NVIC_IP_PRI52_SHIFT                      (4U)
#define NVIC_IP_PRI52(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI52_SHIFT)) & NVIC_IP_PRI52_MASK)
#define NVIC_IP_PRI53_MASK                       (0xF0U)
#define NVIC_IP_PRI53_SHIFT                      (4U)
#define NVIC_IP_PRI53(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI53_SHIFT)) & NVIC_IP_PRI53_MASK)
#define NVIC_IP_PRI54_MASK                       (0xF0U)
#define NVIC_IP_PRI54_SHIFT                      (4U)
#define NVIC_IP_PRI54(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI54_SHIFT)) & NVIC_IP_PRI54_MASK)
#define NVIC_IP_PRI55_MASK                       (0xF0U)
#define NVIC_IP_PRI55_SHIFT                      (4U)
#define NVIC_IP_PRI55(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI55_SHIFT)) & NVIC_IP_PRI55_MASK)
#define NVIC_IP_PRI56_MASK                       (0xF0U)
#define NVIC_IP_PRI56_SHIFT                      (4U)
#define NVIC_IP_PRI56(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI56_SHIFT)) & NVIC_IP_PRI56_MASK)
#define NVIC_IP_PRI57_MASK                       (0xF0U)
#define NVIC_IP_PRI57_SHIFT                      (4U)
#define NVIC_IP_PRI57(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI57_SHIFT)) & NVIC_IP_PRI57_MASK)
#define NVIC_IP_PRI58_MASK                       (0xF0U)
#define NVIC_IP_PRI58_SHIFT                      (4U)
#define NVIC_IP_PRI58(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI58_SHIFT)) & NVIC_IP_PRI58_MASK)
#define NVIC_IP_PRI59_MASK                       (0xF0U)
#define NVIC_IP_PRI59_SHIFT                      (4U)
#define NVIC_IP_PRI59(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI59_SHIFT)) & NVIC_IP_PRI59_MASK)
#define NVIC_IP_PRI60_MASK                       (0xF0U)
#define NVIC_IP_PRI60_SHIFT                      (4U)
#define NVIC_IP_PRI60(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI60_SHIFT)) & NVIC_IP_PRI60_MASK)
#define NVIC_IP_PRI61_MASK                       (0xF0U)
#define NVIC_IP_PRI61_SHIFT                      (4U)
#define NVIC_IP_PRI61(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI61_SHIFT)) & NVIC_IP_PRI61_MASK)
#define NVIC_IP_PRI62_MASK                       (0xF0U)
#define NVIC_IP_PRI62_SHIFT                      (4U)
#define NVIC_IP_PRI62(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI62_SHIFT)) & NVIC_IP_PRI62_MASK)
#define NVIC_IP_PRI63_MASK                       (0xF0U)
#define NVIC_IP_PRI63_SHIFT                      (4U)
#define NVIC_IP_PRI63(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI63_SHIFT)) & NVIC_IP_PRI63_MASK)
#define NVIC_IP_PRI64_MASK                       (0xF0U)
#define NVIC_IP_PRI64_SHIFT                      (4U)
#define NVIC_IP_PRI64(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI64_SHIFT)) & NVIC_IP_PRI64_MASK)
#define NVIC_IP_PRI65_MASK                       (0xF0U)
#define NVIC_IP_PRI65_SHIFT                      (4U)
#define NVIC_IP_PRI65(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI65_SHIFT)) & NVIC_IP_PRI65_MASK)
#define NVIC_IP_PRI66_MASK                       (0xF0U)
#define NVIC_IP_PRI66_SHIFT                      (4U)
#define NVIC_IP_PRI66(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI66_SHIFT)) & NVIC_IP_PRI66_MASK)
#define NVIC_IP_PRI67_MASK                       (0xF0U)
#define NVIC_IP_PRI67_SHIFT                      (4U)
#define NVIC_IP_PRI67(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI67_SHIFT)) & NVIC_IP_PRI67_MASK)
#define NVIC_IP_PRI68_MASK                       (0xF0U)
#define NVIC_IP_PRI68_SHIFT                      (4U)
#define NVIC_IP_PRI68(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI68_SHIFT)) & NVIC_IP_PRI68_MASK)
#define NVIC_IP_PRI69_MASK                       (0xF0U)
#define NVIC_IP_PRI69_SHIFT                      (4U)
#define NVIC_IP_PRI69(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI69_SHIFT)) & NVIC_IP_PRI69_MASK)
#define NVIC_IP_PRI70_MASK                       (0xF0U)
#define NVIC_IP_PRI70_SHIFT                      (4U)
#define NVIC_IP_PRI70(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI70_SHIFT)) & NVIC_IP_PRI70_MASK)
#define NVIC_IP_PRI71_MASK                       (0xF0U)
#define NVIC_IP_PRI71_SHIFT                      (4U)
#define NVIC_IP_PRI71(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI71_SHIFT)) & NVIC_IP_PRI71_MASK)
#define NVIC_IP_PRI72_MASK                       (0xF0U)
#define NVIC_IP_PRI72_SHIFT                      (4U)
#define NVIC_IP_PRI72(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI72_SHIFT)) & NVIC_IP_PRI72_MASK)
#define NVIC_IP_PRI73_MASK                       (0xF0U)
#define NVIC_IP_PRI73_SHIFT                      (4U)
#define NVIC_IP_PRI73(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI73_SHIFT)) & NVIC_IP_PRI73_MASK)
#define NVIC_IP_PRI74_MASK                       (0xF0U)
#define NVIC_IP_PRI74_SHIFT                      (4U)
#define NVIC_IP_PRI74(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI74_SHIFT)) & NVIC_IP_PRI74_MASK)
#define NVIC_IP_PRI75_MASK                       (0xF0U)
#define NVIC_IP_PRI75_SHIFT                      (4U)
#define NVIC_IP_PRI75(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI75_SHIFT)) & NVIC_IP_PRI75_MASK)
#define NVIC_IP_PRI76_MASK                       (0xF0U)
#define NVIC_IP_PRI76_SHIFT                      (4U)
#define NVIC_IP_PRI76(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI76_SHIFT)) & NVIC_IP_PRI76_MASK)
#define NVIC_IP_PRI77_MASK                       (0xF0U)
#define NVIC_IP_PRI77_SHIFT                      (4U)
#define NVIC_IP_PRI77(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI77_SHIFT)) & NVIC_IP_PRI77_MASK)
#define NVIC_IP_PRI78_MASK                       (0xF0U)
#define NVIC_IP_PRI78_SHIFT                      (4U)
#define NVIC_IP_PRI78(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI78_SHIFT)) & NVIC_IP_PRI78_MASK)
#define NVIC_IP_PRI79_MASK                       (0xF0U)
#define NVIC_IP_PRI79_SHIFT                      (4U)
#define NVIC_IP_PRI79(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI79_SHIFT)) & NVIC_IP_PRI79_MASK)
#define NVIC_IP_PRI80_MASK                       (0xF0U)
#define NVIC_IP_PRI80_SHIFT                      (4U)
#define NVIC_IP_PRI80(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI80_SHIFT)) & NVIC_IP_PRI80_MASK)
#define NVIC_IP_PRI81_MASK                       (0xF0U)
#define NVIC_IP_PRI81_SHIFT                      (4U)
#define NVIC_IP_PRI81(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI81_SHIFT)) & NVIC_IP_PRI81_MASK)
#define NVIC_IP_PRI82_MASK                       (0xF0U)
#define NVIC_IP_PRI82_SHIFT                      (4U)
#define NVIC_IP_PRI82(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI82_SHIFT)) & NVIC_IP_PRI82_MASK)
#define NVIC_IP_PRI83_MASK                       (0xF0U)
#define NVIC_IP_PRI83_SHIFT                      (4U)
#define NVIC_IP_PRI83(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI83_SHIFT)) & NVIC_IP_PRI83_MASK)
#define NVIC_IP_PRI84_MASK                       (0xF0U)
#define NVIC_IP_PRI84_SHIFT                      (4U)
#define NVIC_IP_PRI84(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI84_SHIFT)) & NVIC_IP_PRI84_MASK)
#define NVIC_IP_PRI85_MASK                       (0xF0U)
#define NVIC_IP_PRI85_SHIFT                      (4U)
#define NVIC_IP_PRI85(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI85_SHIFT)) & NVIC_IP_PRI85_MASK)
#define NVIC_IP_PRI86_MASK                       (0xF0U)
#define NVIC_IP_PRI86_SHIFT                      (4U)
#define NVIC_IP_PRI86(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI86_SHIFT)) & NVIC_IP_PRI86_MASK)
#define NVIC_IP_PRI87_MASK                       (0xF0U)
#define NVIC_IP_PRI87_SHIFT                      (4U)
#define NVIC_IP_PRI87(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI87_SHIFT)) & NVIC_IP_PRI87_MASK)
#define NVIC_IP_PRI88_MASK                       (0xF0U)
#define NVIC_IP_PRI88_SHIFT                      (4U)
#define NVIC_IP_PRI88(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI88_SHIFT)) & NVIC_IP_PRI88_MASK)
#define NVIC_IP_PRI89_MASK                       (0xF0U)
#define NVIC_IP_PRI89_SHIFT                      (4U)
#define NVIC_IP_PRI89(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI89_SHIFT)) & NVIC_IP_PRI89_MASK)
#define NVIC_IP_PRI90_MASK                       (0xF0U)
#define NVIC_IP_PRI90_SHIFT                      (4U)
#define NVIC_IP_PRI90(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI90_SHIFT)) & NVIC_IP_PRI90_MASK)
#define NVIC_IP_PRI91_MASK                       (0xF0U)
#define NVIC_IP_PRI91_SHIFT                      (4U)
#define NVIC_IP_PRI91(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI91_SHIFT)) & NVIC_IP_PRI91_MASK)
#define NVIC_IP_PRI92_MASK                       (0xF0U)
#define NVIC_IP_PRI92_SHIFT                      (4U)
#define NVIC_IP_PRI92(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI92_SHIFT)) & NVIC_IP_PRI92_MASK)
#define NVIC_IP_PRI93_MASK                       (0xF0U)
#define NVIC_IP_PRI93_SHIFT                      (4U)
#define NVIC_IP_PRI93(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI93_SHIFT)) & NVIC_IP_PRI93_MASK)
#define NVIC_IP_PRI94_MASK                       (0xF0U)
#define NVIC_IP_PRI94_SHIFT                      (4U)
#define NVIC_IP_PRI94(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI94_SHIFT)) & NVIC_IP_PRI94_MASK)
#define NVIC_IP_PRI95_MASK                       (0xF0U)
#define NVIC_IP_PRI95_SHIFT                      (4U)
#define NVIC_IP_PRI95(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI95_SHIFT)) & NVIC_IP_PRI95_MASK)
#define NVIC_IP_PRI96_MASK                       (0xF0U)
#define NVIC_IP_PRI96_SHIFT                      (4U)
#define NVIC_IP_PRI96(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI96_SHIFT)) & NVIC_IP_PRI96_MASK)
#define NVIC_IP_PRI97_MASK                       (0xF0U)
#define NVIC_IP_PRI97_SHIFT                      (4U)
#define NVIC_IP_PRI97(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI97_SHIFT)) & NVIC_IP_PRI97_MASK)
#define NVIC_IP_PRI98_MASK                       (0xF0U)
#define NVIC_IP_PRI98_SHIFT                      (4U)
#define NVIC_IP_PRI98(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI98_SHIFT)) & NVIC_IP_PRI98_MASK)
#define NVIC_IP_PRI99_MASK                       (0xF0U)
#define NVIC_IP_PRI99_SHIFT                      (4U)
#define NVIC_IP_PRI99(x)                         (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI99_SHIFT)) & NVIC_IP_PRI99_MASK)
#define NVIC_IP_PRI100_MASK                      (0xF0U)
#define NVIC_IP_PRI100_SHIFT                     (4U)
#define NVIC_IP_PRI100(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI100_SHIFT)) & NVIC_IP_PRI100_MASK)
#define NVIC_IP_PRI101_MASK                      (0xF0U)
#define NVIC_IP_PRI101_SHIFT                     (4U)
#define NVIC_IP_PRI101(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI101_SHIFT)) & NVIC_IP_PRI101_MASK)
#define NVIC_IP_PRI102_MASK                      (0xF0U)
#define NVIC_IP_PRI102_SHIFT                     (4U)
#define NVIC_IP_PRI102(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI102_SHIFT)) & NVIC_IP_PRI102_MASK)
#define NVIC_IP_PRI103_MASK                      (0xF0U)
#define NVIC_IP_PRI103_SHIFT                     (4U)
#define NVIC_IP_PRI103(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI103_SHIFT)) & NVIC_IP_PRI103_MASK)
#define NVIC_IP_PRI104_MASK                      (0xF0U)
#define NVIC_IP_PRI104_SHIFT                     (4U)
#define NVIC_IP_PRI104(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI104_SHIFT)) & NVIC_IP_PRI104_MASK)
#define NVIC_IP_PRI105_MASK                      (0xF0U)
#define NVIC_IP_PRI105_SHIFT                     (4U)
#define NVIC_IP_PRI105(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI105_SHIFT)) & NVIC_IP_PRI105_MASK)
#define NVIC_IP_PRI106_MASK                      (0xF0U)
#define NVIC_IP_PRI106_SHIFT                     (4U)
#define NVIC_IP_PRI106(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI106_SHIFT)) & NVIC_IP_PRI106_MASK)
#define NVIC_IP_PRI107_MASK                      (0xF0U)
#define NVIC_IP_PRI107_SHIFT                     (4U)
#define NVIC_IP_PRI107(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI107_SHIFT)) & NVIC_IP_PRI107_MASK)
#define NVIC_IP_PRI108_MASK                      (0xF0U)
#define NVIC_IP_PRI108_SHIFT                     (4U)
#define NVIC_IP_PRI108(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI108_SHIFT)) & NVIC_IP_PRI108_MASK)
#define NVIC_IP_PRI109_MASK                      (0xF0U)
#define NVIC_IP_PRI109_SHIFT                     (4U)
#define NVIC_IP_PRI109(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI109_SHIFT)) & NVIC_IP_PRI109_MASK)
#define NVIC_IP_PRI110_MASK                      (0xF0U)
#define NVIC_IP_PRI110_SHIFT                     (4U)
#define NVIC_IP_PRI110(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI110_SHIFT)) & NVIC_IP_PRI110_MASK)
#define NVIC_IP_PRI111_MASK                      (0xF0U)
#define NVIC_IP_PRI111_SHIFT                     (4U)
#define NVIC_IP_PRI111(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI111_SHIFT)) & NVIC_IP_PRI111_MASK)
#define NVIC_IP_PRI112_MASK                      (0xF0U)
#define NVIC_IP_PRI112_SHIFT                     (4U)
#define NVIC_IP_PRI112(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI112_SHIFT)) & NVIC_IP_PRI112_MASK)
#define NVIC_IP_PRI113_MASK                      (0xF0U)
#define NVIC_IP_PRI113_SHIFT                     (4U)
#define NVIC_IP_PRI113(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI113_SHIFT)) & NVIC_IP_PRI113_MASK)
#define NVIC_IP_PRI114_MASK                      (0xF0U)
#define NVIC_IP_PRI114_SHIFT                     (4U)
#define NVIC_IP_PRI114(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI114_SHIFT)) & NVIC_IP_PRI114_MASK)
#define NVIC_IP_PRI115_MASK                      (0xF0U)
#define NVIC_IP_PRI115_SHIFT                     (4U)
#define NVIC_IP_PRI115(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI115_SHIFT)) & NVIC_IP_PRI115_MASK)
#define NVIC_IP_PRI116_MASK                      (0xF0U)
#define NVIC_IP_PRI116_SHIFT                     (4U)
#define NVIC_IP_PRI116(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI116_SHIFT)) & NVIC_IP_PRI116_MASK)
#define NVIC_IP_PRI117_MASK                      (0xF0U)
#define NVIC_IP_PRI117_SHIFT                     (4U)
#define NVIC_IP_PRI117(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI117_SHIFT)) & NVIC_IP_PRI117_MASK)
#define NVIC_IP_PRI118_MASK                      (0xF0U)
#define NVIC_IP_PRI118_SHIFT                     (4U)
#define NVIC_IP_PRI118(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI118_SHIFT)) & NVIC_IP_PRI118_MASK)
#define NVIC_IP_PRI119_MASK                      (0xF0U)
#define NVIC_IP_PRI119_SHIFT                     (4U)
#define NVIC_IP_PRI119(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI119_SHIFT)) & NVIC_IP_PRI119_MASK)
#define NVIC_IP_PRI120_MASK                      (0xF0U)
#define NVIC_IP_PRI120_SHIFT                     (4U)
#define NVIC_IP_PRI120(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI120_SHIFT)) & NVIC_IP_PRI120_MASK)
#define NVIC_IP_PRI121_MASK                      (0xF0U)
#define NVIC_IP_PRI121_SHIFT                     (4U)
#define NVIC_IP_PRI121(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI121_SHIFT)) & NVIC_IP_PRI121_MASK)
#define NVIC_IP_PRI122_MASK                      (0xF0U)
#define NVIC_IP_PRI122_SHIFT                     (4U)
#define NVIC_IP_PRI122(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI122_SHIFT)) & NVIC_IP_PRI122_MASK)
#define NVIC_IP_PRI123_MASK                      (0xF0U)
#define NVIC_IP_PRI123_SHIFT                     (4U)
#define NVIC_IP_PRI123(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI123_SHIFT)) & NVIC_IP_PRI123_MASK)
#define NVIC_IP_PRI124_MASK                      (0xF0U)
#define NVIC_IP_PRI124_SHIFT                     (4U)
#define NVIC_IP_PRI124(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI124_SHIFT)) & NVIC_IP_PRI124_MASK)
#define NVIC_IP_PRI125_MASK                      (0xF0U)
#define NVIC_IP_PRI125_SHIFT                     (4U)
#define NVIC_IP_PRI125(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI125_SHIFT)) & NVIC_IP_PRI125_MASK)
#define NVIC_IP_PRI126_MASK                      (0xF0U)
#define NVIC_IP_PRI126_SHIFT                     (4U)
#define NVIC_IP_PRI126(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI126_SHIFT)) & NVIC_IP_PRI126_MASK)
#define NVIC_IP_PRI127_MASK                      (0xF0U)
#define NVIC_IP_PRI127_SHIFT                     (4U)
#define NVIC_IP_PRI127(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI127_SHIFT)) & NVIC_IP_PRI127_MASK)
#define NVIC_IP_PRI128_MASK                      (0xF0U)
#define NVIC_IP_PRI128_SHIFT                     (4U)
#define NVIC_IP_PRI128(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI128_SHIFT)) & NVIC_IP_PRI128_MASK)
#define NVIC_IP_PRI129_MASK                      (0xF0U)
#define NVIC_IP_PRI129_SHIFT                     (4U)
#define NVIC_IP_PRI129(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI129_SHIFT)) & NVIC_IP_PRI129_MASK)
#define NVIC_IP_PRI130_MASK                      (0xF0U)
#define NVIC_IP_PRI130_SHIFT                     (4U)
#define NVIC_IP_PRI130(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI130_SHIFT)) & NVIC_IP_PRI130_MASK)
#define NVIC_IP_PRI131_MASK                      (0xF0U)
#define NVIC_IP_PRI131_SHIFT                     (4U)
#define NVIC_IP_PRI131(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI131_SHIFT)) & NVIC_IP_PRI131_MASK)
#define NVIC_IP_PRI132_MASK                      (0xF0U)
#define NVIC_IP_PRI132_SHIFT                     (4U)
#define NVIC_IP_PRI132(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI132_SHIFT)) & NVIC_IP_PRI132_MASK)
#define NVIC_IP_PRI133_MASK                      (0xF0U)
#define NVIC_IP_PRI133_SHIFT                     (4U)
#define NVIC_IP_PRI133(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI133_SHIFT)) & NVIC_IP_PRI133_MASK)
#define NVIC_IP_PRI134_MASK                      (0xF0U)
#define NVIC_IP_PRI134_SHIFT                     (4U)
#define NVIC_IP_PRI134(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI134_SHIFT)) & NVIC_IP_PRI134_MASK)
#define NVIC_IP_PRI135_MASK                      (0xF0U)
#define NVIC_IP_PRI135_SHIFT                     (4U)
#define NVIC_IP_PRI135(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI135_SHIFT)) & NVIC_IP_PRI135_MASK)
#define NVIC_IP_PRI136_MASK                      (0xF0U)
#define NVIC_IP_PRI136_SHIFT                     (4U)
#define NVIC_IP_PRI136(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI136_SHIFT)) & NVIC_IP_PRI136_MASK)
#define NVIC_IP_PRI137_MASK                      (0xF0U)
#define NVIC_IP_PRI137_SHIFT                     (4U)
#define NVIC_IP_PRI137(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI137_SHIFT)) & NVIC_IP_PRI137_MASK)
#define NVIC_IP_PRI138_MASK                      (0xF0U)
#define NVIC_IP_PRI138_SHIFT                     (4U)
#define NVIC_IP_PRI138(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI138_SHIFT)) & NVIC_IP_PRI138_MASK)
#define NVIC_IP_PRI139_MASK                      (0xF0U)
#define NVIC_IP_PRI139_SHIFT                     (4U)
#define NVIC_IP_PRI139(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI139_SHIFT)) & NVIC_IP_PRI139_MASK)
#define NVIC_IP_PRI140_MASK                      (0xF0U)
#define NVIC_IP_PRI140_SHIFT                     (4U)
#define NVIC_IP_PRI140(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI140_SHIFT)) & NVIC_IP_PRI140_MASK)
#define NVIC_IP_PRI141_MASK                      (0xF0U)
#define NVIC_IP_PRI141_SHIFT                     (4U)
#define NVIC_IP_PRI141(x)                        (((uint8_t)(((uint8_t)(x)) << NVIC_IP_PRI141_SHIFT)) & NVIC_IP_PRI141_MASK)

/* The count of NVIC_IP */
#define NVIC_IP_COUNT                            (142U)

/*! @name STIR - Software Trigger Interrupt Register */
#define NVIC_STIR_INTID_MASK                     (0x1FFU)
#define NVIC_STIR_INTID_SHIFT                    (0U)
#define NVIC_STIR_INTID(x)                       (((uint32_t)(((uint32_t)(x)) << NVIC_STIR_INTID_SHIFT)) & NVIC_STIR_INTID_MASK)

/* The count of NVIC_STIR */
#define NVIC_STIR_COUNT                          (1U)


/*!
 * @}
 */ /* end of group NVIC_Register_Masks */


/* NVIC - Peripheral instance base addresses */
/** Peripheral NVIC base pointer */
#define NVIC_BASE_PTR                            ((NVIC_MemMapPtr)0xE000E100u)
/** Array initializer of NVIC peripheral base pointers */
#define NVIC_BASE_PTRS                           { NVIC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- NVIC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup NVIC_Register_Accessor_Macros NVIC - Register accessor macros
 * @{
 */


/* NVIC - Register instance definitions */
/* NVIC */
#define NVICISER0                                NVIC_ISER_REG(NVIC_BASE_PTR,0)
#define NVICISER1                                NVIC_ISER_REG(NVIC_BASE_PTR,1)
#define NVICISER2                                NVIC_ISER_REG(NVIC_BASE_PTR,2)
#define NVICISER3                                NVIC_ISER_REG(NVIC_BASE_PTR,3)
#define NVICISER4                                NVIC_ISER_REG(NVIC_BASE_PTR,4)
#define NVICICER0                                NVIC_ICER_REG(NVIC_BASE_PTR,0)
#define NVICICER1                                NVIC_ICER_REG(NVIC_BASE_PTR,1)
#define NVICICER2                                NVIC_ICER_REG(NVIC_BASE_PTR,2)
#define NVICICER3                                NVIC_ICER_REG(NVIC_BASE_PTR,3)
#define NVICICER4                                NVIC_ICER_REG(NVIC_BASE_PTR,4)
#define NVICISPR0                                NVIC_ISPR_REG(NVIC_BASE_PTR,0)
#define NVICISPR1                                NVIC_ISPR_REG(NVIC_BASE_PTR,1)
#define NVICISPR2                                NVIC_ISPR_REG(NVIC_BASE_PTR,2)
#define NVICISPR3                                NVIC_ISPR_REG(NVIC_BASE_PTR,3)
#define NVICISPR4                                NVIC_ISPR_REG(NVIC_BASE_PTR,4)
#define NVICICPR0                                NVIC_ICPR_REG(NVIC_BASE_PTR,0)
#define NVICICPR1                                NVIC_ICPR_REG(NVIC_BASE_PTR,1)
#define NVICICPR2                                NVIC_ICPR_REG(NVIC_BASE_PTR,2)
#define NVICICPR3                                NVIC_ICPR_REG(NVIC_BASE_PTR,3)
#define NVICICPR4                                NVIC_ICPR_REG(NVIC_BASE_PTR,4)
#define NVICIABR0                                NVIC_IABR_REG(NVIC_BASE_PTR,0)
#define NVICIABR1                                NVIC_IABR_REG(NVIC_BASE_PTR,1)
#define NVICIABR2                                NVIC_IABR_REG(NVIC_BASE_PTR,2)
#define NVICIABR3                                NVIC_IABR_REG(NVIC_BASE_PTR,3)
#define NVICIABR4                                NVIC_IABR_REG(NVIC_BASE_PTR,4)
#define NVICIP0                                  NVIC_IP_REG(NVIC_BASE_PTR,0)
#define NVICIP1                                  NVIC_IP_REG(NVIC_BASE_PTR,1)
#define NVICIP2                                  NVIC_IP_REG(NVIC_BASE_PTR,2)
#define NVICIP3                                  NVIC_IP_REG(NVIC_BASE_PTR,3)
#define NVICIP4                                  NVIC_IP_REG(NVIC_BASE_PTR,4)
#define NVICIP5                                  NVIC_IP_REG(NVIC_BASE_PTR,5)
#define NVICIP6                                  NVIC_IP_REG(NVIC_BASE_PTR,6)
#define NVICIP7                                  NVIC_IP_REG(NVIC_BASE_PTR,7)
#define NVICIP8                                  NVIC_IP_REG(NVIC_BASE_PTR,8)
#define NVICIP9                                  NVIC_IP_REG(NVIC_BASE_PTR,9)
#define NVICIP10                                 NVIC_IP_REG(NVIC_BASE_PTR,10)
#define NVICIP11                                 NVIC_IP_REG(NVIC_BASE_PTR,11)
#define NVICIP12                                 NVIC_IP_REG(NVIC_BASE_PTR,12)
#define NVICIP13                                 NVIC_IP_REG(NVIC_BASE_PTR,13)
#define NVICIP14                                 NVIC_IP_REG(NVIC_BASE_PTR,14)
#define NVICIP15                                 NVIC_IP_REG(NVIC_BASE_PTR,15)
#define NVICIP16                                 NVIC_IP_REG(NVIC_BASE_PTR,16)
#define NVICIP17                                 NVIC_IP_REG(NVIC_BASE_PTR,17)
#define NVICIP18                                 NVIC_IP_REG(NVIC_BASE_PTR,18)
#define NVICIP19                                 NVIC_IP_REG(NVIC_BASE_PTR,19)
#define NVICIP20                                 NVIC_IP_REG(NVIC_BASE_PTR,20)
#define NVICIP21                                 NVIC_IP_REG(NVIC_BASE_PTR,21)
#define NVICIP22                                 NVIC_IP_REG(NVIC_BASE_PTR,22)
#define NVICIP23                                 NVIC_IP_REG(NVIC_BASE_PTR,23)
#define NVICIP24                                 NVIC_IP_REG(NVIC_BASE_PTR,24)
#define NVICIP25                                 NVIC_IP_REG(NVIC_BASE_PTR,25)
#define NVICIP26                                 NVIC_IP_REG(NVIC_BASE_PTR,26)
#define NVICIP27                                 NVIC_IP_REG(NVIC_BASE_PTR,27)
#define NVICIP28                                 NVIC_IP_REG(NVIC_BASE_PTR,28)
#define NVICIP29                                 NVIC_IP_REG(NVIC_BASE_PTR,29)
#define NVICIP30                                 NVIC_IP_REG(NVIC_BASE_PTR,30)
#define NVICIP31                                 NVIC_IP_REG(NVIC_BASE_PTR,31)
#define NVICIP32                                 NVIC_IP_REG(NVIC_BASE_PTR,32)
#define NVICIP33                                 NVIC_IP_REG(NVIC_BASE_PTR,33)
#define NVICIP34                                 NVIC_IP_REG(NVIC_BASE_PTR,34)
#define NVICIP35                                 NVIC_IP_REG(NVIC_BASE_PTR,35)
#define NVICIP36                                 NVIC_IP_REG(NVIC_BASE_PTR,36)
#define NVICIP37                                 NVIC_IP_REG(NVIC_BASE_PTR,37)
#define NVICIP38                                 NVIC_IP_REG(NVIC_BASE_PTR,38)
#define NVICIP39                                 NVIC_IP_REG(NVIC_BASE_PTR,39)
#define NVICIP40                                 NVIC_IP_REG(NVIC_BASE_PTR,40)
#define NVICIP41                                 NVIC_IP_REG(NVIC_BASE_PTR,41)
#define NVICIP42                                 NVIC_IP_REG(NVIC_BASE_PTR,42)
#define NVICIP43                                 NVIC_IP_REG(NVIC_BASE_PTR,43)
#define NVICIP44                                 NVIC_IP_REG(NVIC_BASE_PTR,44)
#define NVICIP45                                 NVIC_IP_REG(NVIC_BASE_PTR,45)
#define NVICIP46                                 NVIC_IP_REG(NVIC_BASE_PTR,46)
#define NVICIP47                                 NVIC_IP_REG(NVIC_BASE_PTR,47)
#define NVICIP48                                 NVIC_IP_REG(NVIC_BASE_PTR,48)
#define NVICIP49                                 NVIC_IP_REG(NVIC_BASE_PTR,49)
#define NVICIP50                                 NVIC_IP_REG(NVIC_BASE_PTR,50)
#define NVICIP51                                 NVIC_IP_REG(NVIC_BASE_PTR,51)
#define NVICIP52                                 NVIC_IP_REG(NVIC_BASE_PTR,52)
#define NVICIP53                                 NVIC_IP_REG(NVIC_BASE_PTR,53)
#define NVICIP54                                 NVIC_IP_REG(NVIC_BASE_PTR,54)
#define NVICIP55                                 NVIC_IP_REG(NVIC_BASE_PTR,55)
#define NVICIP56                                 NVIC_IP_REG(NVIC_BASE_PTR,56)
#define NVICIP57                                 NVIC_IP_REG(NVIC_BASE_PTR,57)
#define NVICIP58                                 NVIC_IP_REG(NVIC_BASE_PTR,58)
#define NVICIP59                                 NVIC_IP_REG(NVIC_BASE_PTR,59)
#define NVICIP60                                 NVIC_IP_REG(NVIC_BASE_PTR,60)
#define NVICIP61                                 NVIC_IP_REG(NVIC_BASE_PTR,61)
#define NVICIP62                                 NVIC_IP_REG(NVIC_BASE_PTR,62)
#define NVICIP63                                 NVIC_IP_REG(NVIC_BASE_PTR,63)
#define NVICIP64                                 NVIC_IP_REG(NVIC_BASE_PTR,64)
#define NVICIP65                                 NVIC_IP_REG(NVIC_BASE_PTR,65)
#define NVICIP66                                 NVIC_IP_REG(NVIC_BASE_PTR,66)
#define NVICIP67                                 NVIC_IP_REG(NVIC_BASE_PTR,67)
#define NVICIP68                                 NVIC_IP_REG(NVIC_BASE_PTR,68)
#define NVICIP69                                 NVIC_IP_REG(NVIC_BASE_PTR,69)
#define NVICIP70                                 NVIC_IP_REG(NVIC_BASE_PTR,70)
#define NVICIP71                                 NVIC_IP_REG(NVIC_BASE_PTR,71)
#define NVICIP72                                 NVIC_IP_REG(NVIC_BASE_PTR,72)
#define NVICIP73                                 NVIC_IP_REG(NVIC_BASE_PTR,73)
#define NVICIP74                                 NVIC_IP_REG(NVIC_BASE_PTR,74)
#define NVICIP75                                 NVIC_IP_REG(NVIC_BASE_PTR,75)
#define NVICIP76                                 NVIC_IP_REG(NVIC_BASE_PTR,76)
#define NVICIP77                                 NVIC_IP_REG(NVIC_BASE_PTR,77)
#define NVICIP78                                 NVIC_IP_REG(NVIC_BASE_PTR,78)
#define NVICIP79                                 NVIC_IP_REG(NVIC_BASE_PTR,79)
#define NVICIP80                                 NVIC_IP_REG(NVIC_BASE_PTR,80)
#define NVICIP81                                 NVIC_IP_REG(NVIC_BASE_PTR,81)
#define NVICIP82                                 NVIC_IP_REG(NVIC_BASE_PTR,82)
#define NVICIP83                                 NVIC_IP_REG(NVIC_BASE_PTR,83)
#define NVICIP84                                 NVIC_IP_REG(NVIC_BASE_PTR,84)
#define NVICIP85                                 NVIC_IP_REG(NVIC_BASE_PTR,85)
#define NVICIP86                                 NVIC_IP_REG(NVIC_BASE_PTR,86)
#define NVICIP87                                 NVIC_IP_REG(NVIC_BASE_PTR,87)
#define NVICIP88                                 NVIC_IP_REG(NVIC_BASE_PTR,88)
#define NVICIP89                                 NVIC_IP_REG(NVIC_BASE_PTR,89)
#define NVICIP90                                 NVIC_IP_REG(NVIC_BASE_PTR,90)
#define NVICIP91                                 NVIC_IP_REG(NVIC_BASE_PTR,91)
#define NVICIP92                                 NVIC_IP_REG(NVIC_BASE_PTR,92)
#define NVICIP93                                 NVIC_IP_REG(NVIC_BASE_PTR,93)
#define NVICIP94                                 NVIC_IP_REG(NVIC_BASE_PTR,94)
#define NVICIP95                                 NVIC_IP_REG(NVIC_BASE_PTR,95)
#define NVICIP96                                 NVIC_IP_REG(NVIC_BASE_PTR,96)
#define NVICIP97                                 NVIC_IP_REG(NVIC_BASE_PTR,97)
#define NVICIP98                                 NVIC_IP_REG(NVIC_BASE_PTR,98)
#define NVICIP99                                 NVIC_IP_REG(NVIC_BASE_PTR,99)
#define NVICIP100                                NVIC_IP_REG(NVIC_BASE_PTR,100)
#define NVICIP101                                NVIC_IP_REG(NVIC_BASE_PTR,101)
#define NVICIP102                                NVIC_IP_REG(NVIC_BASE_PTR,102)
#define NVICIP103                                NVIC_IP_REG(NVIC_BASE_PTR,103)
#define NVICIP104                                NVIC_IP_REG(NVIC_BASE_PTR,104)
#define NVICIP105                                NVIC_IP_REG(NVIC_BASE_PTR,105)
#define NVICIP106                                NVIC_IP_REG(NVIC_BASE_PTR,106)
#define NVICIP107                                NVIC_IP_REG(NVIC_BASE_PTR,107)
#define NVICIP108                                NVIC_IP_REG(NVIC_BASE_PTR,108)
#define NVICIP109                                NVIC_IP_REG(NVIC_BASE_PTR,109)
#define NVICIP110                                NVIC_IP_REG(NVIC_BASE_PTR,110)
#define NVICIP111                                NVIC_IP_REG(NVIC_BASE_PTR,111)
#define NVICIP112                                NVIC_IP_REG(NVIC_BASE_PTR,112)
#define NVICIP113                                NVIC_IP_REG(NVIC_BASE_PTR,113)
#define NVICIP114                                NVIC_IP_REG(NVIC_BASE_PTR,114)
#define NVICIP115                                NVIC_IP_REG(NVIC_BASE_PTR,115)
#define NVICIP116                                NVIC_IP_REG(NVIC_BASE_PTR,116)
#define NVICIP117                                NVIC_IP_REG(NVIC_BASE_PTR,117)
#define NVICIP118                                NVIC_IP_REG(NVIC_BASE_PTR,118)
#define NVICIP119                                NVIC_IP_REG(NVIC_BASE_PTR,119)
#define NVICIP120                                NVIC_IP_REG(NVIC_BASE_PTR,120)
#define NVICIP121                                NVIC_IP_REG(NVIC_BASE_PTR,121)
#define NVICIP122                                NVIC_IP_REG(NVIC_BASE_PTR,122)
#define NVICIP123                                NVIC_IP_REG(NVIC_BASE_PTR,123)
#define NVICIP124                                NVIC_IP_REG(NVIC_BASE_PTR,124)
#define NVICIP125                                NVIC_IP_REG(NVIC_BASE_PTR,125)
#define NVICIP126                                NVIC_IP_REG(NVIC_BASE_PTR,126)
#define NVICIP127                                NVIC_IP_REG(NVIC_BASE_PTR,127)
#define NVICIP128                                NVIC_IP_REG(NVIC_BASE_PTR,128)
#define NVICIP129                                NVIC_IP_REG(NVIC_BASE_PTR,129)
#define NVICIP130                                NVIC_IP_REG(NVIC_BASE_PTR,130)
#define NVICIP131                                NVIC_IP_REG(NVIC_BASE_PTR,131)
#define NVICIP132                                NVIC_IP_REG(NVIC_BASE_PTR,132)
#define NVICIP133                                NVIC_IP_REG(NVIC_BASE_PTR,133)
#define NVICIP134                                NVIC_IP_REG(NVIC_BASE_PTR,134)
#define NVICIP135                                NVIC_IP_REG(NVIC_BASE_PTR,135)
#define NVICIP136                                NVIC_IP_REG(NVIC_BASE_PTR,136)
#define NVICIP137                                NVIC_IP_REG(NVIC_BASE_PTR,137)
#define NVICIP138                                NVIC_IP_REG(NVIC_BASE_PTR,138)
#define NVICIP139                                NVIC_IP_REG(NVIC_BASE_PTR,139)
#define NVICIP140                                NVIC_IP_REG(NVIC_BASE_PTR,140)
#define NVICIP141                                NVIC_IP_REG(NVIC_BASE_PTR,141)
#define NVICSTIR                                 NVIC_STIR_REG(NVIC_BASE_PTR,0)

/* NVIC - Register array accessors */
#define NVIC_ISER(index)                         NVIC_ISER_REG(NVIC_BASE_PTR,index)
#define NVIC_ICER(index)                         NVIC_ICER_REG(NVIC_BASE_PTR,index)
#define NVIC_ISPR(index)                         NVIC_ISPR_REG(NVIC_BASE_PTR,index)
#define NVIC_ICPR(index)                         NVIC_ICPR_REG(NVIC_BASE_PTR,index)
#define NVIC_IABR(index)                         NVIC_IABR_REG(NVIC_BASE_PTR,index)
#define NVIC_IP(index)                           NVIC_IP_REG(NVIC_BASE_PTR,index)

/*!
 * @}
 */ /* end of group NVIC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group NVIC_Peripheral */


/* ----------------------------------------------------------------------------
   -- OCOTP
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Peripheral OCOTP
 * @{
 */

/** OCOTP - Peripheral register structure */
typedef struct OCOTP_MemMap {
  uint32_t CTRL;                                   /**< OTP Controller Control Register, offset: 0x0 */
  uint32_t CTRL_SET;                               /**< OTP Controller Control Register, offset: 0x4 */
  uint32_t CTRL_CLR;                               /**< OTP Controller Control Register, offset: 0x8 */
  uint32_t CTRL_TOG;                               /**< OTP Controller Control Register, offset: 0xC */
  uint32_t TIMING;                                 /**< OTP Controller Timing Register, offset: 0x10 */
  uint8_t RESERVED_0[12];
  uint32_t DATA;                                   /**< OTP Controller Write Data Register, offset: 0x20 */
  uint8_t RESERVED_1[12];
  uint32_t READ_CTRL;                              /**< OTP Controller Write Data Register, offset: 0x30 */
  uint8_t RESERVED_2[12];
  uint32_t READ_FUSE_DATA;                         /**< OTP Controller Read Data Register, offset: 0x40 */
  uint8_t RESERVED_3[12];
  uint32_t SW_STICKY;                              /**< Sticky bit Register, offset: 0x50 */
  uint8_t RESERVED_4[12];
  uint32_t SCS;                                    /**< Software Controllable Signals Register, offset: 0x60 */
  uint32_t SCS_SET;                                /**< Software Controllable Signals Register, offset: 0x64 */
  uint32_t SCS_CLR;                                /**< Software Controllable Signals Register, offset: 0x68 */
  uint32_t SCS_TOG;                                /**< Software Controllable Signals Register, offset: 0x6C */
  uint8_t RESERVED_5[32];
  uint32_t VERSION;                                /**< OTP Controller Version Register, offset: 0x90 */
  uint8_t RESERVED_6[108];
  uint32_t TIMING2;                                /**< OTP Controller Timing Register 2, offset: 0x100 */
  uint8_t RESERVED_7[764];
  uint32_t LOCK;                                   /**< Value of OTP Bank0 Word0 (Lock controls), offset: 0x400 */
  uint8_t RESERVED_8[12];
  uint32_t CFG0;                                   /**< Value of OTP Bank0 Word1 (Configuration and Manufacturing Info.), offset: 0x410 */
  uint8_t RESERVED_9[12];
  uint32_t CFG1;                                   /**< Value of OTP Bank0 Word2 (Configuration and Manufacturing Info.), offset: 0x420 */
  uint8_t RESERVED_10[12];
  uint32_t CFG2;                                   /**< Value of OTP Bank0 Word3 (Configuration and Manufacturing Info.), offset: 0x430 */
  uint8_t RESERVED_11[12];
  uint32_t CFG3;                                   /**< Value of OTP Bank0 Word4 (Configuration and Manufacturing Info.), offset: 0x440 */
  uint8_t RESERVED_12[12];
  uint32_t CFG4;                                   /**< Value of OTP Bank0 Word5 (Configuration and Manufacturing Info.), offset: 0x450 */
  uint8_t RESERVED_13[12];
  uint32_t CFG5;                                   /**< Value of OTP Bank0 Word6 (Configuration and Manufacturing Info.), offset: 0x460 */
  uint8_t RESERVED_14[12];
  uint32_t CFG6;                                   /**< Value of OTP Bank0 Word7 (Configuration and Manufacturing Info.), offset: 0x470 */
  uint8_t RESERVED_15[12];
  uint32_t MEM0;                                   /**< Value of OTP Bank1 Word0 (Memory Related Info.), offset: 0x480 */
  uint8_t RESERVED_16[12];
  uint32_t MEM1;                                   /**< Value of OTP Bank1 Word1 (Memory Related Info.), offset: 0x490 */
  uint8_t RESERVED_17[12];
  uint32_t MEM2;                                   /**< Value of OTP Bank1 Word2 (Memory Related Info.), offset: 0x4A0 */
  uint8_t RESERVED_18[12];
  uint32_t MEM3;                                   /**< Value of OTP Bank1 Word3 (Memory Related Info.), offset: 0x4B0 */
  uint8_t RESERVED_19[12];
  uint32_t MEM4;                                   /**< Value of OTP Bank1 Word4 (Memory Related Info.), offset: 0x4C0 */
  uint8_t RESERVED_20[12];
  uint32_t ANA0;                                   /**< Value of OTP Bank1 Word5 (Analog Info.), offset: 0x4D0 */
  uint8_t RESERVED_21[12];
  uint32_t ANA1;                                   /**< Value of OTP Bank1 Word6 (Analog Info.), offset: 0x4E0 */
  uint8_t RESERVED_22[12];
  uint32_t ANA2;                                   /**< Value of OTP Bank1 Word7 (Analog Info.), offset: 0x4F0 */
  uint8_t RESERVED_23[140];
  uint32_t SRK0;                                   /**< Shadow Register for OTP Bank3 Word0 (SRK Hash), offset: 0x580 */
  uint8_t RESERVED_24[12];
  uint32_t SRK1;                                   /**< Shadow Register for OTP Bank3 Word1 (SRK Hash), offset: 0x590 */
  uint8_t RESERVED_25[12];
  uint32_t SRK2;                                   /**< Shadow Register for OTP Bank3 Word2 (SRK Hash), offset: 0x5A0 */
  uint8_t RESERVED_26[12];
  uint32_t SRK3;                                   /**< Shadow Register for OTP Bank3 Word3 (SRK Hash), offset: 0x5B0 */
  uint8_t RESERVED_27[12];
  uint32_t SRK4;                                   /**< Shadow Register for OTP Bank3 Word4 (SRK Hash), offset: 0x5C0 */
  uint8_t RESERVED_28[12];
  uint32_t SRK5;                                   /**< Shadow Register for OTP Bank3 Word5 (SRK Hash), offset: 0x5D0 */
  uint8_t RESERVED_29[12];
  uint32_t SRK6;                                   /**< Shadow Register for OTP Bank3 Word6 (SRK Hash), offset: 0x5E0 */
  uint8_t RESERVED_30[12];
  uint32_t SRK7;                                   /**< Shadow Register for OTP Bank3 Word7 (SRK Hash), offset: 0x5F0 */
  uint8_t RESERVED_31[12];
  uint32_t SJC_RESP0;                              /**< Value of OTP Bank4 Word0 (Secure JTAG Response Field), offset: 0x600 */
  uint8_t RESERVED_32[12];
  uint32_t SJC_RESP1;                              /**< Value of OTP Bank4 Word1 (Secure JTAG Response Field), offset: 0x610 */
  uint8_t RESERVED_33[12];
  uint32_t MAC0;                                   /**< Value of OTP Bank4 Word2 (MAC Address), offset: 0x620 */
  uint8_t RESERVED_34[12];
  uint32_t MAC1;                                   /**< Value of OTP Bank4 Word3 (MAC Address), offset: 0x630 */
  uint8_t RESERVED_35[12];
  uint32_t GP3;                                    /**< Value of OTP Bank4 Word4 (MAC Address), offset: 0x640 */
  uint8_t RESERVED_36[28];
  uint32_t GP1;                                    /**< Value of OTP Bank4 Word6 (General Purpose Customer Defined Info), offset: 0x660 */
  uint8_t RESERVED_37[12];
  uint32_t GP2;                                    /**< Value of OTP Bank4 Word7 (General Purpose Customer Defined Info), offset: 0x670 */
  uint8_t RESERVED_38[12];
  uint32_t SW_GP1;                                 /**< Value of OTP Bank5 Word0 (SW GP1), offset: 0x680 */
  uint8_t RESERVED_39[12];
  uint32_t SW_GP20;                                /**< Value of OTP Bank5 Word1 (SW GP2), offset: 0x690 */
  uint8_t RESERVED_40[12];
  uint32_t SW_GP21;                                /**< Value of OTP Bank5 Word2 (SW GP2), offset: 0x6A0 */
  uint8_t RESERVED_41[12];
  uint32_t SW_GP22;                                /**< Value of OTP Bank5 Word3 (SW GP2), offset: 0x6B0 */
  uint8_t RESERVED_42[12];
  uint32_t SW_GP23;                                /**< Value of OTP Bank5 Word4 (SW GP2), offset: 0x6C0 */
  uint8_t RESERVED_43[12];
  uint32_t MISC_CONF0;                             /**< Value of OTP Bank5 Word5 (Misc Conf), offset: 0x6D0 */
  uint8_t RESERVED_44[12];
  uint32_t MISC_CONF1;                             /**< Value of OTP Bank5 Word6 (Misc Conf), offset: 0x6E0 */
  uint8_t RESERVED_45[12];
  uint32_t SRK_REVOKE;                             /**< Value of OTP Bank5 Word7 (SRK Revoke), offset: 0x6F0 */
} volatile *OCOTP_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- OCOTP - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Register_Accessor_Macros OCOTP - Register accessor macros
 * @{
 */


/* OCOTP - Register accessors */
#define OCOTP_CTRL_REG(base)                     ((base)->CTRL)
#define OCOTP_CTRL_SET_REG(base)                 ((base)->CTRL_SET)
#define OCOTP_CTRL_CLR_REG(base)                 ((base)->CTRL_CLR)
#define OCOTP_CTRL_TOG_REG(base)                 ((base)->CTRL_TOG)
#define OCOTP_TIMING_REG(base)                   ((base)->TIMING)
#define OCOTP_DATA_REG(base)                     ((base)->DATA)
#define OCOTP_READ_CTRL_REG(base)                ((base)->READ_CTRL)
#define OCOTP_READ_FUSE_DATA_REG(base)           ((base)->READ_FUSE_DATA)
#define OCOTP_SW_STICKY_REG(base)                ((base)->SW_STICKY)
#define OCOTP_SCS_REG(base)                      ((base)->SCS)
#define OCOTP_SCS_SET_REG(base)                  ((base)->SCS_SET)
#define OCOTP_SCS_CLR_REG(base)                  ((base)->SCS_CLR)
#define OCOTP_SCS_TOG_REG(base)                  ((base)->SCS_TOG)
#define OCOTP_VERSION_REG(base)                  ((base)->VERSION)
#define OCOTP_TIMING2_REG(base)                  ((base)->TIMING2)
#define OCOTP_LOCK_REG(base)                     ((base)->LOCK)
#define OCOTP_CFG0_REG(base)                     ((base)->CFG0)
#define OCOTP_CFG1_REG(base)                     ((base)->CFG1)
#define OCOTP_CFG2_REG(base)                     ((base)->CFG2)
#define OCOTP_CFG3_REG(base)                     ((base)->CFG3)
#define OCOTP_CFG4_REG(base)                     ((base)->CFG4)
#define OCOTP_CFG5_REG(base)                     ((base)->CFG5)
#define OCOTP_CFG6_REG(base)                     ((base)->CFG6)
#define OCOTP_MEM0_REG(base)                     ((base)->MEM0)
#define OCOTP_MEM1_REG(base)                     ((base)->MEM1)
#define OCOTP_MEM2_REG(base)                     ((base)->MEM2)
#define OCOTP_MEM3_REG(base)                     ((base)->MEM3)
#define OCOTP_MEM4_REG(base)                     ((base)->MEM4)
#define OCOTP_ANA0_REG(base)                     ((base)->ANA0)
#define OCOTP_ANA1_REG(base)                     ((base)->ANA1)
#define OCOTP_ANA2_REG(base)                     ((base)->ANA2)
#define OCOTP_SRK0_REG(base)                     ((base)->SRK0)
#define OCOTP_SRK1_REG(base)                     ((base)->SRK1)
#define OCOTP_SRK2_REG(base)                     ((base)->SRK2)
#define OCOTP_SRK3_REG(base)                     ((base)->SRK3)
#define OCOTP_SRK4_REG(base)                     ((base)->SRK4)
#define OCOTP_SRK5_REG(base)                     ((base)->SRK5)
#define OCOTP_SRK6_REG(base)                     ((base)->SRK6)
#define OCOTP_SRK7_REG(base)                     ((base)->SRK7)
#define OCOTP_SJC_RESP0_REG(base)                ((base)->SJC_RESP0)
#define OCOTP_SJC_RESP1_REG(base)                ((base)->SJC_RESP1)
#define OCOTP_MAC0_REG(base)                     ((base)->MAC0)
#define OCOTP_MAC1_REG(base)                     ((base)->MAC1)
#define OCOTP_GP3_REG(base)                      ((base)->GP3)
#define OCOTP_GP1_REG(base)                      ((base)->GP1)
#define OCOTP_GP2_REG(base)                      ((base)->GP2)
#define OCOTP_SW_GP1_REG(base)                   ((base)->SW_GP1)
#define OCOTP_SW_GP20_REG(base)                  ((base)->SW_GP20)
#define OCOTP_SW_GP21_REG(base)                  ((base)->SW_GP21)
#define OCOTP_SW_GP22_REG(base)                  ((base)->SW_GP22)
#define OCOTP_SW_GP23_REG(base)                  ((base)->SW_GP23)
#define OCOTP_MISC_CONF0_REG(base)               ((base)->MISC_CONF0)
#define OCOTP_MISC_CONF1_REG(base)               ((base)->MISC_CONF1)
#define OCOTP_SRK_REVOKE_REG(base)               ((base)->SRK_REVOKE)

/*!
 * @}
 */ /* end of group OCOTP_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- OCOTP Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Register_Masks OCOTP Register Masks
 * @{
 */

/*! @name CTRL - OTP Controller Control Register */
#define OCOTP_CTRL_ADDR_MASK                     (0x3FU)
#define OCOTP_CTRL_ADDR_SHIFT                    (0U)
#define OCOTP_CTRL_ADDR(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_CTRL_ADDR_SHIFT)) & OCOTP_CTRL_ADDR_MASK)
#define OCOTP_CTRL_BUSY_MASK                     (0x100U)
#define OCOTP_CTRL_BUSY_SHIFT                    (8U)
#define OCOTP_CTRL_ERROR_MASK                    (0x200U)
#define OCOTP_CTRL_ERROR_SHIFT                   (9U)
#define OCOTP_CTRL_RELOAD_SHADOWS_MASK           (0x400U)
#define OCOTP_CTRL_RELOAD_SHADOWS_SHIFT          (10U)
#define OCOTP_CTRL_WR_UNLOCK_MASK                (0xFFFF0000U)
#define OCOTP_CTRL_WR_UNLOCK_SHIFT               (16U)
#define OCOTP_CTRL_WR_UNLOCK(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_CTRL_WR_UNLOCK_SHIFT)) & OCOTP_CTRL_WR_UNLOCK_MASK)

/*! @name CTRL_SET - OTP Controller Control Register */
#define OCOTP_CTRL_SET_ADDR_MASK                 (0x3FU)
#define OCOTP_CTRL_SET_ADDR_SHIFT                (0U)
#define OCOTP_CTRL_SET_ADDR(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_CTRL_SET_ADDR_SHIFT)) & OCOTP_CTRL_SET_ADDR_MASK)
#define OCOTP_CTRL_SET_BUSY_MASK                 (0x100U)
#define OCOTP_CTRL_SET_BUSY_SHIFT                (8U)
#define OCOTP_CTRL_SET_ERROR_MASK                (0x200U)
#define OCOTP_CTRL_SET_ERROR_SHIFT               (9U)
#define OCOTP_CTRL_SET_RELOAD_SHADOWS_MASK       (0x400U)
#define OCOTP_CTRL_SET_RELOAD_SHADOWS_SHIFT      (10U)
#define OCOTP_CTRL_SET_WR_UNLOCK_MASK            (0xFFFF0000U)
#define OCOTP_CTRL_SET_WR_UNLOCK_SHIFT           (16U)
#define OCOTP_CTRL_SET_WR_UNLOCK(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_CTRL_SET_WR_UNLOCK_SHIFT)) & OCOTP_CTRL_SET_WR_UNLOCK_MASK)

/*! @name CTRL_CLR - OTP Controller Control Register */
#define OCOTP_CTRL_CLR_ADDR_MASK                 (0x3FU)
#define OCOTP_CTRL_CLR_ADDR_SHIFT                (0U)
#define OCOTP_CTRL_CLR_ADDR(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_CTRL_CLR_ADDR_SHIFT)) & OCOTP_CTRL_CLR_ADDR_MASK)
#define OCOTP_CTRL_CLR_BUSY_MASK                 (0x100U)
#define OCOTP_CTRL_CLR_BUSY_SHIFT                (8U)
#define OCOTP_CTRL_CLR_ERROR_MASK                (0x200U)
#define OCOTP_CTRL_CLR_ERROR_SHIFT               (9U)
#define OCOTP_CTRL_CLR_RELOAD_SHADOWS_MASK       (0x400U)
#define OCOTP_CTRL_CLR_RELOAD_SHADOWS_SHIFT      (10U)
#define OCOTP_CTRL_CLR_WR_UNLOCK_MASK            (0xFFFF0000U)
#define OCOTP_CTRL_CLR_WR_UNLOCK_SHIFT           (16U)
#define OCOTP_CTRL_CLR_WR_UNLOCK(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_CTRL_CLR_WR_UNLOCK_SHIFT)) & OCOTP_CTRL_CLR_WR_UNLOCK_MASK)

/*! @name CTRL_TOG - OTP Controller Control Register */
#define OCOTP_CTRL_TOG_ADDR_MASK                 (0x3FU)
#define OCOTP_CTRL_TOG_ADDR_SHIFT                (0U)
#define OCOTP_CTRL_TOG_ADDR(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_CTRL_TOG_ADDR_SHIFT)) & OCOTP_CTRL_TOG_ADDR_MASK)
#define OCOTP_CTRL_TOG_BUSY_MASK                 (0x100U)
#define OCOTP_CTRL_TOG_BUSY_SHIFT                (8U)
#define OCOTP_CTRL_TOG_ERROR_MASK                (0x200U)
#define OCOTP_CTRL_TOG_ERROR_SHIFT               (9U)
#define OCOTP_CTRL_TOG_RELOAD_SHADOWS_MASK       (0x400U)
#define OCOTP_CTRL_TOG_RELOAD_SHADOWS_SHIFT      (10U)
#define OCOTP_CTRL_TOG_WR_UNLOCK_MASK            (0xFFFF0000U)
#define OCOTP_CTRL_TOG_WR_UNLOCK_SHIFT           (16U)
#define OCOTP_CTRL_TOG_WR_UNLOCK(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_CTRL_TOG_WR_UNLOCK_SHIFT)) & OCOTP_CTRL_TOG_WR_UNLOCK_MASK)

/*! @name TIMING - OTP Controller Timing Register */
#define OCOTP_TIMING_STROBE_PROG_MASK            (0xFFFU)
#define OCOTP_TIMING_STROBE_PROG_SHIFT           (0U)
#define OCOTP_TIMING_STROBE_PROG(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_TIMING_STROBE_PROG_SHIFT)) & OCOTP_TIMING_STROBE_PROG_MASK)
#define OCOTP_TIMING_RELAX_MASK                  (0xF000U)
#define OCOTP_TIMING_RELAX_SHIFT                 (12U)
#define OCOTP_TIMING_RELAX(x)                    (((uint32_t)(((uint32_t)(x)) << OCOTP_TIMING_RELAX_SHIFT)) & OCOTP_TIMING_RELAX_MASK)
#define OCOTP_TIMING_STROBE_READ_MASK            (0x3F0000U)
#define OCOTP_TIMING_STROBE_READ_SHIFT           (16U)
#define OCOTP_TIMING_STROBE_READ(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_TIMING_STROBE_READ_SHIFT)) & OCOTP_TIMING_STROBE_READ_MASK)
#define OCOTP_TIMING_WAIT_MASK                   (0xFC00000U)
#define OCOTP_TIMING_WAIT_SHIFT                  (22U)
#define OCOTP_TIMING_WAIT(x)                     (((uint32_t)(((uint32_t)(x)) << OCOTP_TIMING_WAIT_SHIFT)) & OCOTP_TIMING_WAIT_MASK)

/*! @name DATA - OTP Controller Write Data Register */
#define OCOTP_DATA_DATA_MASK                     (0xFFFFFFFFU)
#define OCOTP_DATA_DATA_SHIFT                    (0U)
#define OCOTP_DATA_DATA(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_DATA_DATA_SHIFT)) & OCOTP_DATA_DATA_MASK)

/*! @name READ_CTRL - OTP Controller Write Data Register */
#define OCOTP_READ_CTRL_READ_FUSE_MASK           (0x1U)
#define OCOTP_READ_CTRL_READ_FUSE_SHIFT          (0U)

/*! @name READ_FUSE_DATA - OTP Controller Read Data Register */
#define OCOTP_READ_FUSE_DATA_DATA_MASK           (0xFFFFFFFFU)
#define OCOTP_READ_FUSE_DATA_DATA_SHIFT          (0U)
#define OCOTP_READ_FUSE_DATA_DATA(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_READ_FUSE_DATA_DATA_SHIFT)) & OCOTP_READ_FUSE_DATA_DATA_MASK)

/*! @name SW_STICKY - Sticky bit Register */
#define OCOTP_SW_STICKY_BLOCK_DTCP_KEY_MASK      (0x1U)
#define OCOTP_SW_STICKY_BLOCK_DTCP_KEY_SHIFT     (0U)
#define OCOTP_SW_STICKY_SRK_REVOKE_LOCK_MASK     (0x2U)
#define OCOTP_SW_STICKY_SRK_REVOKE_LOCK_SHIFT    (1U)
#define OCOTP_SW_STICKY_FIELD_RETURN_LOCK_MASK   (0x4U)
#define OCOTP_SW_STICKY_FIELD_RETURN_LOCK_SHIFT  (2U)
#define OCOTP_SW_STICKY_BLOCK_ROM_PART_MASK      (0x8U)
#define OCOTP_SW_STICKY_BLOCK_ROM_PART_SHIFT     (3U)
#define OCOTP_SW_STICKY_JTAG_BLOCK_RELEASE_MASK  (0x10U)
#define OCOTP_SW_STICKY_JTAG_BLOCK_RELEASE_SHIFT (4U)

/*! @name SCS - Software Controllable Signals Register */
#define OCOTP_SCS_HAB_JDE_MASK                   (0x1U)
#define OCOTP_SCS_HAB_JDE_SHIFT                  (0U)
#define OCOTP_SCS_SPARE_MASK                     (0x7FFFFFFEU)
#define OCOTP_SCS_SPARE_SHIFT                    (1U)
#define OCOTP_SCS_SPARE(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SCS_SPARE_SHIFT)) & OCOTP_SCS_SPARE_MASK)
#define OCOTP_SCS_LOCK_MASK                      (0x80000000U)
#define OCOTP_SCS_LOCK_SHIFT                     (31U)

/*! @name SCS_SET - Software Controllable Signals Register */
#define OCOTP_SCS_SET_HAB_JDE_MASK               (0x1U)
#define OCOTP_SCS_SET_HAB_JDE_SHIFT              (0U)
#define OCOTP_SCS_SET_SPARE_MASK                 (0x7FFFFFFEU)
#define OCOTP_SCS_SET_SPARE_SHIFT                (1U)
#define OCOTP_SCS_SET_SPARE(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_SCS_SET_SPARE_SHIFT)) & OCOTP_SCS_SET_SPARE_MASK)
#define OCOTP_SCS_SET_LOCK_MASK                  (0x80000000U)
#define OCOTP_SCS_SET_LOCK_SHIFT                 (31U)

/*! @name SCS_CLR - Software Controllable Signals Register */
#define OCOTP_SCS_CLR_HAB_JDE_MASK               (0x1U)
#define OCOTP_SCS_CLR_HAB_JDE_SHIFT              (0U)
#define OCOTP_SCS_CLR_SPARE_MASK                 (0x7FFFFFFEU)
#define OCOTP_SCS_CLR_SPARE_SHIFT                (1U)
#define OCOTP_SCS_CLR_SPARE(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_SCS_CLR_SPARE_SHIFT)) & OCOTP_SCS_CLR_SPARE_MASK)
#define OCOTP_SCS_CLR_LOCK_MASK                  (0x80000000U)
#define OCOTP_SCS_CLR_LOCK_SHIFT                 (31U)

/*! @name SCS_TOG - Software Controllable Signals Register */
#define OCOTP_SCS_TOG_HAB_JDE_MASK               (0x1U)
#define OCOTP_SCS_TOG_HAB_JDE_SHIFT              (0U)
#define OCOTP_SCS_TOG_SPARE_MASK                 (0x7FFFFFFEU)
#define OCOTP_SCS_TOG_SPARE_SHIFT                (1U)
#define OCOTP_SCS_TOG_SPARE(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_SCS_TOG_SPARE_SHIFT)) & OCOTP_SCS_TOG_SPARE_MASK)
#define OCOTP_SCS_TOG_LOCK_MASK                  (0x80000000U)
#define OCOTP_SCS_TOG_LOCK_SHIFT                 (31U)

/*! @name VERSION - OTP Controller Version Register */
#define OCOTP_VERSION_STEP_MASK                  (0xFFFFU)
#define OCOTP_VERSION_STEP_SHIFT                 (0U)
#define OCOTP_VERSION_STEP(x)                    (((uint32_t)(((uint32_t)(x)) << OCOTP_VERSION_STEP_SHIFT)) & OCOTP_VERSION_STEP_MASK)
#define OCOTP_VERSION_MINOR_MASK                 (0xFF0000U)
#define OCOTP_VERSION_MINOR_SHIFT                (16U)
#define OCOTP_VERSION_MINOR(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_VERSION_MINOR_SHIFT)) & OCOTP_VERSION_MINOR_MASK)
#define OCOTP_VERSION_MAJOR_MASK                 (0xFF000000U)
#define OCOTP_VERSION_MAJOR_SHIFT                (24U)
#define OCOTP_VERSION_MAJOR(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_VERSION_MAJOR_SHIFT)) & OCOTP_VERSION_MAJOR_MASK)

/*! @name TIMING2 - OTP Controller Timing Register 2 */
#define OCOTP_TIMING2_RELAX_PROG_MASK            (0xFFFU)
#define OCOTP_TIMING2_RELAX_PROG_SHIFT           (0U)
#define OCOTP_TIMING2_RELAX_PROG(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_TIMING2_RELAX_PROG_SHIFT)) & OCOTP_TIMING2_RELAX_PROG_MASK)
#define OCOTP_TIMING2_RELAX_READ_MASK            (0x3F0000U)
#define OCOTP_TIMING2_RELAX_READ_SHIFT           (16U)
#define OCOTP_TIMING2_RELAX_READ(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_TIMING2_RELAX_READ_SHIFT)) & OCOTP_TIMING2_RELAX_READ_MASK)
#define OCOTP_TIMING2_RELAX1_MASK                (0x1FC00000U)
#define OCOTP_TIMING2_RELAX1_SHIFT               (22U)
#define OCOTP_TIMING2_RELAX1(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_TIMING2_RELAX1_SHIFT)) & OCOTP_TIMING2_RELAX1_MASK)

/*! @name LOCK - Value of OTP Bank0 Word0 (Lock controls) */
#define OCOTP_LOCK_TESTER_MASK                   (0x3U)
#define OCOTP_LOCK_TESTER_SHIFT                  (0U)
#define OCOTP_LOCK_TESTER(x)                     (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_TESTER_SHIFT)) & OCOTP_LOCK_TESTER_MASK)
#define OCOTP_LOCK_BOOT_CFG_MASK                 (0xCU)
#define OCOTP_LOCK_BOOT_CFG_SHIFT                (2U)
#define OCOTP_LOCK_BOOT_CFG(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_BOOT_CFG_SHIFT)) & OCOTP_LOCK_BOOT_CFG_MASK)
#define OCOTP_LOCK_MEM_TRIM_MASK                 (0x30U)
#define OCOTP_LOCK_MEM_TRIM_SHIFT                (4U)
#define OCOTP_LOCK_MEM_TRIM(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_MEM_TRIM_SHIFT)) & OCOTP_LOCK_MEM_TRIM_MASK)
#define OCOTP_LOCK_SJC_RESP_MASK                 (0x40U)
#define OCOTP_LOCK_SJC_RESP_SHIFT                (6U)
#define OCOTP_LOCK_MAC_ADDR_MASK                 (0x300U)
#define OCOTP_LOCK_MAC_ADDR_SHIFT                (8U)
#define OCOTP_LOCK_MAC_ADDR(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_MAC_ADDR_SHIFT)) & OCOTP_LOCK_MAC_ADDR_MASK)
#define OCOTP_LOCK_GP1_MASK                      (0xC00U)
#define OCOTP_LOCK_GP1_SHIFT                     (10U)
#define OCOTP_LOCK_GP1(x)                        (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_GP1_SHIFT)) & OCOTP_LOCK_GP1_MASK)
#define OCOTP_LOCK_GP2_MASK                      (0x3000U)
#define OCOTP_LOCK_GP2_SHIFT                     (12U)
#define OCOTP_LOCK_GP2(x)                        (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_GP2_SHIFT)) & OCOTP_LOCK_GP2_MASK)
#define OCOTP_LOCK_SRK_MASK                      (0x4000U)
#define OCOTP_LOCK_SRK_SHIFT                     (14U)
#define OCOTP_LOCK_OTPMK_MSB_MASK                (0x8000U)
#define OCOTP_LOCK_OTPMK_MSB_SHIFT               (15U)
#define OCOTP_LOCK_SW_GP1_MASK                   (0x10000U)
#define OCOTP_LOCK_SW_GP1_SHIFT                  (16U)
#define OCOTP_LOCK_OTPMK_LSB_MASK                (0x20000U)
#define OCOTP_LOCK_OTPMK_LSB_SHIFT               (17U)
#define OCOTP_LOCK_ANALOG_MASK                   (0xC0000U)
#define OCOTP_LOCK_ANALOG_SHIFT                  (18U)
#define OCOTP_LOCK_ANALOG(x)                     (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_ANALOG_SHIFT)) & OCOTP_LOCK_ANALOG_MASK)
#define OCOTP_LOCK_OTPMK_CRC_MASK                (0x100000U)
#define OCOTP_LOCK_OTPMK_CRC_SHIFT               (20U)
#define OCOTP_LOCK_SW_GP2_LOCK_MASK              (0x200000U)
#define OCOTP_LOCK_SW_GP2_LOCK_SHIFT             (21U)
#define OCOTP_LOCK_MISC_CONF_MASK                (0x400000U)
#define OCOTP_LOCK_MISC_CONF_SHIFT               (22U)
#define OCOTP_LOCK_SW_GP2_RLOCK_MASK             (0x800000U)
#define OCOTP_LOCK_SW_GP2_RLOCK_SHIFT            (23U)
#define OCOTP_LOCK_GP3_MASK                      (0xC000000U)
#define OCOTP_LOCK_GP3_SHIFT                     (26U)
#define OCOTP_LOCK_GP3(x)                        (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_GP3_SHIFT)) & OCOTP_LOCK_GP3_MASK)
#define OCOTP_LOCK_FIELD_RETURN_MASK             (0xF0000000U)
#define OCOTP_LOCK_FIELD_RETURN_SHIFT            (28U)
#define OCOTP_LOCK_FIELD_RETURN(x)               (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_FIELD_RETURN_SHIFT)) & OCOTP_LOCK_FIELD_RETURN_MASK)

/*! @name CFG0 - Value of OTP Bank0 Word1 (Configuration and Manufacturing Info.) */
#define OCOTP_CFG0_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_CFG0_BITS_SHIFT                    (0U)
#define OCOTP_CFG0_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_CFG0_BITS_SHIFT)) & OCOTP_CFG0_BITS_MASK)

/*! @name CFG1 - Value of OTP Bank0 Word2 (Configuration and Manufacturing Info.) */
#define OCOTP_CFG1_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_CFG1_BITS_SHIFT                    (0U)
#define OCOTP_CFG1_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_CFG1_BITS_SHIFT)) & OCOTP_CFG1_BITS_MASK)

/*! @name CFG2 - Value of OTP Bank0 Word3 (Configuration and Manufacturing Info.) */
#define OCOTP_CFG2_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_CFG2_BITS_SHIFT                    (0U)
#define OCOTP_CFG2_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_CFG2_BITS_SHIFT)) & OCOTP_CFG2_BITS_MASK)

/*! @name CFG3 - Value of OTP Bank0 Word4 (Configuration and Manufacturing Info.) */
#define OCOTP_CFG3_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_CFG3_BITS_SHIFT                    (0U)
#define OCOTP_CFG3_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_CFG3_BITS_SHIFT)) & OCOTP_CFG3_BITS_MASK)

/*! @name CFG4 - Value of OTP Bank0 Word5 (Configuration and Manufacturing Info.) */
#define OCOTP_CFG4_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_CFG4_BITS_SHIFT                    (0U)
#define OCOTP_CFG4_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_CFG4_BITS_SHIFT)) & OCOTP_CFG4_BITS_MASK)

/*! @name CFG5 - Value of OTP Bank0 Word6 (Configuration and Manufacturing Info.) */
#define OCOTP_CFG5_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_CFG5_BITS_SHIFT                    (0U)
#define OCOTP_CFG5_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_CFG5_BITS_SHIFT)) & OCOTP_CFG5_BITS_MASK)

/*! @name CFG6 - Value of OTP Bank0 Word7 (Configuration and Manufacturing Info.) */
#define OCOTP_CFG6_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_CFG6_BITS_SHIFT                    (0U)
#define OCOTP_CFG6_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_CFG6_BITS_SHIFT)) & OCOTP_CFG6_BITS_MASK)

/*! @name MEM0 - Value of OTP Bank1 Word0 (Memory Related Info.) */
#define OCOTP_MEM0_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_MEM0_BITS_SHIFT                    (0U)
#define OCOTP_MEM0_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_MEM0_BITS_SHIFT)) & OCOTP_MEM0_BITS_MASK)

/*! @name MEM1 - Value of OTP Bank1 Word1 (Memory Related Info.) */
#define OCOTP_MEM1_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_MEM1_BITS_SHIFT                    (0U)
#define OCOTP_MEM1_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_MEM1_BITS_SHIFT)) & OCOTP_MEM1_BITS_MASK)

/*! @name MEM2 - Value of OTP Bank1 Word2 (Memory Related Info.) */
#define OCOTP_MEM2_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_MEM2_BITS_SHIFT                    (0U)
#define OCOTP_MEM2_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_MEM2_BITS_SHIFT)) & OCOTP_MEM2_BITS_MASK)

/*! @name MEM3 - Value of OTP Bank1 Word3 (Memory Related Info.) */
#define OCOTP_MEM3_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_MEM3_BITS_SHIFT                    (0U)
#define OCOTP_MEM3_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_MEM3_BITS_SHIFT)) & OCOTP_MEM3_BITS_MASK)

/*! @name MEM4 - Value of OTP Bank1 Word4 (Memory Related Info.) */
#define OCOTP_MEM4_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_MEM4_BITS_SHIFT                    (0U)
#define OCOTP_MEM4_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_MEM4_BITS_SHIFT)) & OCOTP_MEM4_BITS_MASK)

/*! @name ANA0 - Value of OTP Bank1 Word5 (Analog Info.) */
#define OCOTP_ANA0_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_ANA0_BITS_SHIFT                    (0U)
#define OCOTP_ANA0_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_ANA0_BITS_SHIFT)) & OCOTP_ANA0_BITS_MASK)

/*! @name ANA1 - Value of OTP Bank1 Word6 (Analog Info.) */
#define OCOTP_ANA1_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_ANA1_BITS_SHIFT                    (0U)
#define OCOTP_ANA1_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_ANA1_BITS_SHIFT)) & OCOTP_ANA1_BITS_MASK)

/*! @name ANA2 - Value of OTP Bank1 Word7 (Analog Info.) */
#define OCOTP_ANA2_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_ANA2_BITS_SHIFT                    (0U)
#define OCOTP_ANA2_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_ANA2_BITS_SHIFT)) & OCOTP_ANA2_BITS_MASK)

/*! @name SRK0 - Shadow Register for OTP Bank3 Word0 (SRK Hash) */
#define OCOTP_SRK0_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_SRK0_BITS_SHIFT                    (0U)
#define OCOTP_SRK0_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK0_BITS_SHIFT)) & OCOTP_SRK0_BITS_MASK)

/*! @name SRK1 - Shadow Register for OTP Bank3 Word1 (SRK Hash) */
#define OCOTP_SRK1_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_SRK1_BITS_SHIFT                    (0U)
#define OCOTP_SRK1_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK1_BITS_SHIFT)) & OCOTP_SRK1_BITS_MASK)

/*! @name SRK2 - Shadow Register for OTP Bank3 Word2 (SRK Hash) */
#define OCOTP_SRK2_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_SRK2_BITS_SHIFT                    (0U)
#define OCOTP_SRK2_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK2_BITS_SHIFT)) & OCOTP_SRK2_BITS_MASK)

/*! @name SRK3 - Shadow Register for OTP Bank3 Word3 (SRK Hash) */
#define OCOTP_SRK3_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_SRK3_BITS_SHIFT                    (0U)
#define OCOTP_SRK3_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK3_BITS_SHIFT)) & OCOTP_SRK3_BITS_MASK)

/*! @name SRK4 - Shadow Register for OTP Bank3 Word4 (SRK Hash) */
#define OCOTP_SRK4_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_SRK4_BITS_SHIFT                    (0U)
#define OCOTP_SRK4_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK4_BITS_SHIFT)) & OCOTP_SRK4_BITS_MASK)

/*! @name SRK5 - Shadow Register for OTP Bank3 Word5 (SRK Hash) */
#define OCOTP_SRK5_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_SRK5_BITS_SHIFT                    (0U)
#define OCOTP_SRK5_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK5_BITS_SHIFT)) & OCOTP_SRK5_BITS_MASK)

/*! @name SRK6 - Shadow Register for OTP Bank3 Word6 (SRK Hash) */
#define OCOTP_SRK6_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_SRK6_BITS_SHIFT                    (0U)
#define OCOTP_SRK6_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK6_BITS_SHIFT)) & OCOTP_SRK6_BITS_MASK)

/*! @name SRK7 - Shadow Register for OTP Bank3 Word7 (SRK Hash) */
#define OCOTP_SRK7_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_SRK7_BITS_SHIFT                    (0U)
#define OCOTP_SRK7_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK7_BITS_SHIFT)) & OCOTP_SRK7_BITS_MASK)

/*! @name SJC_RESP0 - Value of OTP Bank4 Word0 (Secure JTAG Response Field) */
#define OCOTP_SJC_RESP0_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_SJC_RESP0_BITS_SHIFT               (0U)
#define OCOTP_SJC_RESP0_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_SJC_RESP0_BITS_SHIFT)) & OCOTP_SJC_RESP0_BITS_MASK)

/*! @name SJC_RESP1 - Value of OTP Bank4 Word1 (Secure JTAG Response Field) */
#define OCOTP_SJC_RESP1_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_SJC_RESP1_BITS_SHIFT               (0U)
#define OCOTP_SJC_RESP1_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_SJC_RESP1_BITS_SHIFT)) & OCOTP_SJC_RESP1_BITS_MASK)

/*! @name MAC0 - Value of OTP Bank4 Word2 (MAC Address) */
#define OCOTP_MAC0_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_MAC0_BITS_SHIFT                    (0U)
#define OCOTP_MAC0_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_MAC0_BITS_SHIFT)) & OCOTP_MAC0_BITS_MASK)

/*! @name MAC1 - Value of OTP Bank4 Word3 (MAC Address) */
#define OCOTP_MAC1_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_MAC1_BITS_SHIFT                    (0U)
#define OCOTP_MAC1_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_MAC1_BITS_SHIFT)) & OCOTP_MAC1_BITS_MASK)

/*! @name GP3 - Value of OTP Bank4 Word4 (MAC Address) */
#define OCOTP_GP3_BITS_MASK                      (0xFFFFFFFFU)
#define OCOTP_GP3_BITS_SHIFT                     (0U)
#define OCOTP_GP3_BITS(x)                        (((uint32_t)(((uint32_t)(x)) << OCOTP_GP3_BITS_SHIFT)) & OCOTP_GP3_BITS_MASK)

/*! @name GP1 - Value of OTP Bank4 Word6 (General Purpose Customer Defined Info) */
#define OCOTP_GP1_BITS_MASK                      (0xFFFFFFFFU)
#define OCOTP_GP1_BITS_SHIFT                     (0U)
#define OCOTP_GP1_BITS(x)                        (((uint32_t)(((uint32_t)(x)) << OCOTP_GP1_BITS_SHIFT)) & OCOTP_GP1_BITS_MASK)

/*! @name GP2 - Value of OTP Bank4 Word7 (General Purpose Customer Defined Info) */
#define OCOTP_GP2_BITS_MASK                      (0xFFFFFFFFU)
#define OCOTP_GP2_BITS_SHIFT                     (0U)
#define OCOTP_GP2_BITS(x)                        (((uint32_t)(((uint32_t)(x)) << OCOTP_GP2_BITS_SHIFT)) & OCOTP_GP2_BITS_MASK)

/*! @name SW_GP1 - Value of OTP Bank5 Word0 (SW GP1) */
#define OCOTP_SW_GP1_BITS_MASK                   (0xFFFFFFFFU)
#define OCOTP_SW_GP1_BITS_SHIFT                  (0U)
#define OCOTP_SW_GP1_BITS(x)                     (((uint32_t)(((uint32_t)(x)) << OCOTP_SW_GP1_BITS_SHIFT)) & OCOTP_SW_GP1_BITS_MASK)

/*! @name SW_GP20 - Value of OTP Bank5 Word1 (SW GP2) */
#define OCOTP_SW_GP20_BITS_MASK                  (0xFFFFFFFFU)
#define OCOTP_SW_GP20_BITS_SHIFT                 (0U)
#define OCOTP_SW_GP20_BITS(x)                    (((uint32_t)(((uint32_t)(x)) << OCOTP_SW_GP20_BITS_SHIFT)) & OCOTP_SW_GP20_BITS_MASK)

/*! @name SW_GP21 - Value of OTP Bank5 Word2 (SW GP2) */
#define OCOTP_SW_GP21_BITS_MASK                  (0xFFFFFFFFU)
#define OCOTP_SW_GP21_BITS_SHIFT                 (0U)
#define OCOTP_SW_GP21_BITS(x)                    (((uint32_t)(((uint32_t)(x)) << OCOTP_SW_GP21_BITS_SHIFT)) & OCOTP_SW_GP21_BITS_MASK)

/*! @name SW_GP22 - Value of OTP Bank5 Word3 (SW GP2) */
#define OCOTP_SW_GP22_BITS_MASK                  (0xFFFFFFFFU)
#define OCOTP_SW_GP22_BITS_SHIFT                 (0U)
#define OCOTP_SW_GP22_BITS(x)                    (((uint32_t)(((uint32_t)(x)) << OCOTP_SW_GP22_BITS_SHIFT)) & OCOTP_SW_GP22_BITS_MASK)

/*! @name SW_GP23 - Value of OTP Bank5 Word4 (SW GP2) */
#define OCOTP_SW_GP23_BITS_MASK                  (0xFFFFFFFFU)
#define OCOTP_SW_GP23_BITS_SHIFT                 (0U)
#define OCOTP_SW_GP23_BITS(x)                    (((uint32_t)(((uint32_t)(x)) << OCOTP_SW_GP23_BITS_SHIFT)) & OCOTP_SW_GP23_BITS_MASK)

/*! @name MISC_CONF0 - Value of OTP Bank5 Word5 (Misc Conf) */
#define OCOTP_MISC_CONF0_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_MISC_CONF0_BITS_SHIFT              (0U)
#define OCOTP_MISC_CONF0_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_MISC_CONF0_BITS_SHIFT)) & OCOTP_MISC_CONF0_BITS_MASK)

/*! @name MISC_CONF1 - Value of OTP Bank5 Word6 (Misc Conf) */
#define OCOTP_MISC_CONF1_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_MISC_CONF1_BITS_SHIFT              (0U)
#define OCOTP_MISC_CONF1_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_MISC_CONF1_BITS_SHIFT)) & OCOTP_MISC_CONF1_BITS_MASK)

/*! @name SRK_REVOKE - Value of OTP Bank5 Word7 (SRK Revoke) */
#define OCOTP_SRK_REVOKE_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_SRK_REVOKE_BITS_SHIFT              (0U)
#define OCOTP_SRK_REVOKE_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK_REVOKE_BITS_SHIFT)) & OCOTP_SRK_REVOKE_BITS_MASK)


/*!
 * @}
 */ /* end of group OCOTP_Register_Masks */


/* OCOTP - Peripheral instance base addresses */
/** Peripheral OCOTP base pointer */
#define OCOTP_BASE_PTR                           ((OCOTP_MemMapPtr)0x401F4000u)
/** Array initializer of OCOTP peripheral base pointers */
#define OCOTP_BASE_PTRS                          { OCOTP_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- OCOTP - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Register_Accessor_Macros OCOTP - Register accessor macros
 * @{
 */


/* OCOTP - Register instance definitions */
/* OCOTP */
#define OCOTP_HW_OCOTP_CTRL                      OCOTP_CTRL_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_CTRL_SET                  OCOTP_CTRL_SET_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_CTRL_CLR                  OCOTP_CTRL_CLR_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_CTRL_TOG                  OCOTP_CTRL_TOG_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_TIMING                    OCOTP_TIMING_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_DATA                      OCOTP_DATA_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_READ_CTRL                 OCOTP_READ_CTRL_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_READ_FUSE_DATA            OCOTP_READ_FUSE_DATA_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SW_STICKY                 OCOTP_SW_STICKY_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SCS                       OCOTP_SCS_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SCS_SET                   OCOTP_SCS_SET_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SCS_CLR                   OCOTP_SCS_CLR_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SCS_TOG                   OCOTP_SCS_TOG_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_VERSION                   OCOTP_VERSION_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_TIMING2                   OCOTP_TIMING2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_LOCK                      OCOTP_LOCK_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_CFG0                      OCOTP_CFG0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_CFG1                      OCOTP_CFG1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_CFG2                      OCOTP_CFG2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_CFG3                      OCOTP_CFG3_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_CFG4                      OCOTP_CFG4_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_CFG5                      OCOTP_CFG5_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_CFG6                      OCOTP_CFG6_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MEM0                      OCOTP_MEM0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MEM1                      OCOTP_MEM1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MEM2                      OCOTP_MEM2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MEM3                      OCOTP_MEM3_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MEM4                      OCOTP_MEM4_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_ANA0                      OCOTP_ANA0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_ANA1                      OCOTP_ANA1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_ANA2                      OCOTP_ANA2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK0                      OCOTP_SRK0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK1                      OCOTP_SRK1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK2                      OCOTP_SRK2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK3                      OCOTP_SRK3_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK4                      OCOTP_SRK4_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK5                      OCOTP_SRK5_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK6                      OCOTP_SRK6_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK7                      OCOTP_SRK7_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SJC_RESP0                 OCOTP_SJC_RESP0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SJC_RESP1                 OCOTP_SJC_RESP1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAC0                      OCOTP_MAC0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAC1                      OCOTP_MAC1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_GP3                       OCOTP_GP3_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_GP1                       OCOTP_GP1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_GP2                       OCOTP_GP2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SW_GP1                    OCOTP_SW_GP1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SW_GP20                   OCOTP_SW_GP20_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SW_GP21                   OCOTP_SW_GP21_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SW_GP22                   OCOTP_SW_GP22_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SW_GP23                   OCOTP_SW_GP23_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MISC_CONF0                OCOTP_MISC_CONF0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MISC_CONF1                OCOTP_MISC_CONF1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK_REVOKE                OCOTP_SRK_REVOKE_REG(OCOTP_BASE_PTR)

/*!
 * @}
 */ /* end of group OCOTP_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group OCOTP_Peripheral */


/* ----------------------------------------------------------------------------
   -- PGC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PGC_Peripheral PGC
 * @{
 */

/** PGC - Peripheral register structure */
typedef struct PGC_MemMap {
  uint8_t RESERVED_0[544];
  uint32_t MEGA_CTRL;                              /**< PGC Mega Control Register, offset: 0x220 */
  uint32_t MEGA_PUPSCR;                            /**< PGC Mega Power Up Sequence Control Register, offset: 0x224 */
  uint32_t MEGA_PDNSCR;                            /**< PGC Mega Pull Down Sequence Control Register, offset: 0x228 */
  uint32_t MEGA_SR;                                /**< PGC Mega Power Gating Controller Status Register, offset: 0x22C */
  uint8_t RESERVED_1[112];
  uint32_t CPU_CTRL;                               /**< PGC CPU Control Register, offset: 0x2A0 */
  uint32_t CPU_PUPSCR;                             /**< PGC CPU Power Up Sequence Control Register, offset: 0x2A4 */
  uint32_t CPU_PDNSCR;                             /**< PGC CPU Pull Down Sequence Control Register, offset: 0x2A8 */
  uint32_t CPU_SR;                                 /**< PGC CPU Power Gating Controller Status Register, offset: 0x2AC */
} volatile *PGC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- PGC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PGC_Register_Accessor_Macros PGC - Register accessor macros
 * @{
 */


/* PGC - Register accessors */
#define PGC_MEGA_CTRL_REG(base)                  ((base)->MEGA_CTRL)
#define PGC_MEGA_PUPSCR_REG(base)                ((base)->MEGA_PUPSCR)
#define PGC_MEGA_PDNSCR_REG(base)                ((base)->MEGA_PDNSCR)
#define PGC_MEGA_SR_REG(base)                    ((base)->MEGA_SR)
#define PGC_CPU_CTRL_REG(base)                   ((base)->CPU_CTRL)
#define PGC_CPU_PUPSCR_REG(base)                 ((base)->CPU_PUPSCR)
#define PGC_CPU_PDNSCR_REG(base)                 ((base)->CPU_PDNSCR)
#define PGC_CPU_SR_REG(base)                     ((base)->CPU_SR)

/*!
 * @}
 */ /* end of group PGC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- PGC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PGC_Register_Masks PGC Register Masks
 * @{
 */

/*! @name MEGA_CTRL - PGC Mega Control Register */
#define PGC_MEGA_CTRL_PCR_MASK                   (0x1U)
#define PGC_MEGA_CTRL_PCR_SHIFT                  (0U)

/*! @name MEGA_PUPSCR - PGC Mega Power Up Sequence Control Register */
#define PGC_MEGA_PUPSCR_SW_MASK                  (0x3FU)
#define PGC_MEGA_PUPSCR_SW_SHIFT                 (0U)
#define PGC_MEGA_PUPSCR_SW(x)                    (((uint32_t)(((uint32_t)(x)) << PGC_MEGA_PUPSCR_SW_SHIFT)) & PGC_MEGA_PUPSCR_SW_MASK)
#define PGC_MEGA_PUPSCR_SW2ISO_MASK              (0x3F00U)
#define PGC_MEGA_PUPSCR_SW2ISO_SHIFT             (8U)
#define PGC_MEGA_PUPSCR_SW2ISO(x)                (((uint32_t)(((uint32_t)(x)) << PGC_MEGA_PUPSCR_SW2ISO_SHIFT)) & PGC_MEGA_PUPSCR_SW2ISO_MASK)

/*! @name MEGA_PDNSCR - PGC Mega Pull Down Sequence Control Register */
#define PGC_MEGA_PDNSCR_ISO_MASK                 (0x3FU)
#define PGC_MEGA_PDNSCR_ISO_SHIFT                (0U)
#define PGC_MEGA_PDNSCR_ISO(x)                   (((uint32_t)(((uint32_t)(x)) << PGC_MEGA_PDNSCR_ISO_SHIFT)) & PGC_MEGA_PDNSCR_ISO_MASK)
#define PGC_MEGA_PDNSCR_ISO2SW_MASK              (0x3F00U)
#define PGC_MEGA_PDNSCR_ISO2SW_SHIFT             (8U)
#define PGC_MEGA_PDNSCR_ISO2SW(x)                (((uint32_t)(((uint32_t)(x)) << PGC_MEGA_PDNSCR_ISO2SW_SHIFT)) & PGC_MEGA_PDNSCR_ISO2SW_MASK)

/*! @name MEGA_SR - PGC Mega Power Gating Controller Status Register */
#define PGC_MEGA_SR_PSR_MASK                     (0x1U)
#define PGC_MEGA_SR_PSR_SHIFT                    (0U)

/*! @name CPU_CTRL - PGC CPU Control Register */
#define PGC_CPU_CTRL_PCR_MASK                    (0x1U)
#define PGC_CPU_CTRL_PCR_SHIFT                   (0U)

/*! @name CPU_PUPSCR - PGC CPU Power Up Sequence Control Register */
#define PGC_CPU_PUPSCR_SW_MASK                   (0x3FU)
#define PGC_CPU_PUPSCR_SW_SHIFT                  (0U)
#define PGC_CPU_PUPSCR_SW(x)                     (((uint32_t)(((uint32_t)(x)) << PGC_CPU_PUPSCR_SW_SHIFT)) & PGC_CPU_PUPSCR_SW_MASK)
#define PGC_CPU_PUPSCR_SW2ISO_MASK               (0x3F00U)
#define PGC_CPU_PUPSCR_SW2ISO_SHIFT              (8U)
#define PGC_CPU_PUPSCR_SW2ISO(x)                 (((uint32_t)(((uint32_t)(x)) << PGC_CPU_PUPSCR_SW2ISO_SHIFT)) & PGC_CPU_PUPSCR_SW2ISO_MASK)

/*! @name CPU_PDNSCR - PGC CPU Pull Down Sequence Control Register */
#define PGC_CPU_PDNSCR_ISO_MASK                  (0x3FU)
#define PGC_CPU_PDNSCR_ISO_SHIFT                 (0U)
#define PGC_CPU_PDNSCR_ISO(x)                    (((uint32_t)(((uint32_t)(x)) << PGC_CPU_PDNSCR_ISO_SHIFT)) & PGC_CPU_PDNSCR_ISO_MASK)
#define PGC_CPU_PDNSCR_ISO2SW_MASK               (0x3F00U)
#define PGC_CPU_PDNSCR_ISO2SW_SHIFT              (8U)
#define PGC_CPU_PDNSCR_ISO2SW(x)                 (((uint32_t)(((uint32_t)(x)) << PGC_CPU_PDNSCR_ISO2SW_SHIFT)) & PGC_CPU_PDNSCR_ISO2SW_MASK)

/*! @name CPU_SR - PGC CPU Power Gating Controller Status Register */
#define PGC_CPU_SR_PSR_MASK                      (0x1U)
#define PGC_CPU_SR_PSR_SHIFT                     (0U)


/*!
 * @}
 */ /* end of group PGC_Register_Masks */


/* PGC - Peripheral instance base addresses */
/** Peripheral PGC base pointer */
#define PGC_BASE_PTR                             ((PGC_MemMapPtr)0x400F4000u)
/** Array initializer of PGC peripheral base pointers */
#define PGC_BASE_PTRS                            { PGC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- PGC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PGC_Register_Accessor_Macros PGC - Register accessor macros
 * @{
 */


/* PGC - Register instance definitions */
/* PGC */
#define PGC_MEGA_CTRL                            PGC_MEGA_CTRL_REG(PGC_BASE_PTR)
#define PGC_MEGA_PUPSCR                          PGC_MEGA_PUPSCR_REG(PGC_BASE_PTR)
#define PGC_MEGA_PDNSCR                          PGC_MEGA_PDNSCR_REG(PGC_BASE_PTR)
#define PGC_MEGA_SR                              PGC_MEGA_SR_REG(PGC_BASE_PTR)
#define PGC_CPU_CTRL                             PGC_CPU_CTRL_REG(PGC_BASE_PTR)
#define PGC_CPU_PUPSCR                           PGC_CPU_PUPSCR_REG(PGC_BASE_PTR)
#define PGC_CPU_PDNSCR                           PGC_CPU_PDNSCR_REG(PGC_BASE_PTR)
#define PGC_CPU_SR                               PGC_CPU_SR_REG(PGC_BASE_PTR)

/*!
 * @}
 */ /* end of group PGC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group PGC_Peripheral */


/* ----------------------------------------------------------------------------
   -- PIT
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PIT_Peripheral PIT
 * @{
 */

/** PIT - Peripheral register structure */
typedef struct PIT_MemMap {
  uint32_t MCR;                                    /**< PIT Module Control Register, offset: 0x0 */
  uint8_t RESERVED_0[220];
  uint32_t LTMR64H;                                /**< PIT Upper Lifetime Timer Register, offset: 0xE0 */
  uint32_t LTMR64L;                                /**< PIT Lower Lifetime Timer Register, offset: 0xE4 */
  uint8_t RESERVED_1[24];
  struct {                                         /* offset: 0x100, array step: 0x10 */
    uint32_t LDVAL;                                  /**< Timer Load Value Register, array offset: 0x100, array step: 0x10 */
    uint32_t CVAL;                                   /**< Current Timer Value Register, array offset: 0x104, array step: 0x10 */
    uint32_t TCTRL;                                  /**< Timer Control Register, array offset: 0x108, array step: 0x10 */
    uint32_t TFLG;                                   /**< Timer Flag Register, array offset: 0x10C, array step: 0x10 */
  } CHANNEL[4];
} volatile *PIT_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- PIT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PIT_Register_Accessor_Macros PIT - Register accessor macros
 * @{
 */


/* PIT - Register accessors */
#define PIT_MCR_REG(base)                        ((base)->MCR)
#define PIT_LTMR64H_REG(base)                    ((base)->LTMR64H)
#define PIT_LTMR64L_REG(base)                    ((base)->LTMR64L)
#define PIT_LDVAL_REG(base,index)                ((base)->CHANNEL[index].LDVAL)
#define PIT_CVAL_REG(base,index)                 ((base)->CHANNEL[index].CVAL)
#define PIT_TCTRL_REG(base,index)                ((base)->CHANNEL[index].TCTRL)
#define PIT_TFLG_REG(base,index)                 ((base)->CHANNEL[index].TFLG)

/*!
 * @}
 */ /* end of group PIT_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- PIT Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PIT_Register_Masks PIT Register Masks
 * @{
 */

/*! @name MCR - PIT Module Control Register */
#define PIT_MCR_FRZ_MASK                         (0x1U)
#define PIT_MCR_FRZ_SHIFT                        (0U)
#define PIT_MCR_MDIS_MASK                        (0x2U)
#define PIT_MCR_MDIS_SHIFT                       (1U)

/*! @name LTMR64H - PIT Upper Lifetime Timer Register */
#define PIT_LTMR64H_LTH_MASK                     (0xFFFFFFFFU)
#define PIT_LTMR64H_LTH_SHIFT                    (0U)
#define PIT_LTMR64H_LTH(x)                       (((uint32_t)(((uint32_t)(x)) << PIT_LTMR64H_LTH_SHIFT)) & PIT_LTMR64H_LTH_MASK)

/*! @name LTMR64L - PIT Lower Lifetime Timer Register */
#define PIT_LTMR64L_LTL_MASK                     (0xFFFFFFFFU)
#define PIT_LTMR64L_LTL_SHIFT                    (0U)
#define PIT_LTMR64L_LTL(x)                       (((uint32_t)(((uint32_t)(x)) << PIT_LTMR64L_LTL_SHIFT)) & PIT_LTMR64L_LTL_MASK)

/*! @name LDVAL - Timer Load Value Register */
#define PIT_LDVAL_TSV_MASK                       (0xFFFFFFU)
#define PIT_LDVAL_TSV_SHIFT                      (0U)
#define PIT_LDVAL_TSV(x)                         (((uint32_t)(((uint32_t)(x)) << PIT_LDVAL_TSV_SHIFT)) & PIT_LDVAL_TSV_MASK)

/* The count of PIT_LDVAL */
#define PIT_LDVAL_COUNT                          (4U)

/*! @name CVAL - Current Timer Value Register */
#define PIT_CVAL_TVL_MASK                        (0xFFFFFFFFU)
#define PIT_CVAL_TVL_SHIFT                       (0U)
#define PIT_CVAL_TVL(x)                          (((uint32_t)(((uint32_t)(x)) << PIT_CVAL_TVL_SHIFT)) & PIT_CVAL_TVL_MASK)

/* The count of PIT_CVAL */
#define PIT_CVAL_COUNT                           (4U)

/*! @name TCTRL - Timer Control Register */
#define PIT_TCTRL_TEN_MASK                       (0x1U)
#define PIT_TCTRL_TEN_SHIFT                      (0U)
#define PIT_TCTRL_TIE_MASK                       (0x2U)
#define PIT_TCTRL_TIE_SHIFT                      (1U)
#define PIT_TCTRL_CHN_MASK                       (0x4U)
#define PIT_TCTRL_CHN_SHIFT                      (2U)

/* The count of PIT_TCTRL */
#define PIT_TCTRL_COUNT                          (4U)

/*! @name TFLG - Timer Flag Register */
#define PIT_TFLG_TIF_MASK                        (0x1U)
#define PIT_TFLG_TIF_SHIFT                       (0U)

/* The count of PIT_TFLG */
#define PIT_TFLG_COUNT                           (4U)


/*!
 * @}
 */ /* end of group PIT_Register_Masks */


/* PIT - Peripheral instance base addresses */
/** Peripheral PIT base pointer */
#define PIT_BASE_PTR                             ((PIT_MemMapPtr)0x40084000u)
/** Array initializer of PIT peripheral base pointers */
#define PIT_BASE_PTRS                            { PIT_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- PIT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PIT_Register_Accessor_Macros PIT - Register accessor macros
 * @{
 */


/* PIT - Register instance definitions */
/* PIT */
#define PIT_MCR                                  PIT_MCR_REG(PIT_BASE_PTR)
#define PIT_LTMR64H                              PIT_LTMR64H_REG(PIT_BASE_PTR)
#define PIT_LTMR64L                              PIT_LTMR64L_REG(PIT_BASE_PTR)
#define PIT_LDVAL0                               PIT_LDVAL_REG(PIT_BASE_PTR,0)
#define PIT_CVAL0                                PIT_CVAL_REG(PIT_BASE_PTR,0)
#define PIT_TCTRL0                               PIT_TCTRL_REG(PIT_BASE_PTR,0)
#define PIT_TFLG0                                PIT_TFLG_REG(PIT_BASE_PTR,0)
#define PIT_LDVAL1                               PIT_LDVAL_REG(PIT_BASE_PTR,1)
#define PIT_CVAL1                                PIT_CVAL_REG(PIT_BASE_PTR,1)
#define PIT_TCTRL1                               PIT_TCTRL_REG(PIT_BASE_PTR,1)
#define PIT_TFLG1                                PIT_TFLG_REG(PIT_BASE_PTR,1)
#define PIT_LDVAL2                               PIT_LDVAL_REG(PIT_BASE_PTR,2)
#define PIT_CVAL2                                PIT_CVAL_REG(PIT_BASE_PTR,2)
#define PIT_TCTRL2                               PIT_TCTRL_REG(PIT_BASE_PTR,2)
#define PIT_TFLG2                                PIT_TFLG_REG(PIT_BASE_PTR,2)
#define PIT_LDVAL3                               PIT_LDVAL_REG(PIT_BASE_PTR,3)
#define PIT_CVAL3                                PIT_CVAL_REG(PIT_BASE_PTR,3)
#define PIT_TCTRL3                               PIT_TCTRL_REG(PIT_BASE_PTR,3)
#define PIT_TFLG3                                PIT_TFLG_REG(PIT_BASE_PTR,3)

/* PIT - Register array accessors */
#define PIT_LDVAL(index)                         PIT_LDVAL_REG(PIT_BASE_PTR,index)
#define PIT_CVAL(index)                          PIT_CVAL_REG(PIT_BASE_PTR,index)
#define PIT_TCTRL(index)                         PIT_TCTRL_REG(PIT_BASE_PTR,index)
#define PIT_TFLG(index)                          PIT_TFLG_REG(PIT_BASE_PTR,index)

/*!
 * @}
 */ /* end of group PIT_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group PIT_Peripheral */


/* ----------------------------------------------------------------------------
   -- PMU
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PMU_Peripheral PMU
 * @{
 */

/** PMU - Peripheral register structure */
typedef struct PMU_MemMap {
  uint8_t RESERVED_0[272];
  uint32_t REG_1P1;                                /**< Regulator 1P1 Register, offset: 0x110 */
  uint32_t REG_1P1_SET;                            /**< Regulator 1P1 Register, offset: 0x114 */
  uint32_t REG_1P1_CLR;                            /**< Regulator 1P1 Register, offset: 0x118 */
  uint32_t REG_1P1_TOG;                            /**< Regulator 1P1 Register, offset: 0x11C */
  uint32_t REG_3P0;                                /**< Regulator 3P0 Register, offset: 0x120 */
  uint32_t REG_3P0_SET;                            /**< Regulator 3P0 Register, offset: 0x124 */
  uint32_t REG_3P0_CLR;                            /**< Regulator 3P0 Register, offset: 0x128 */
  uint32_t REG_3P0_TOG;                            /**< Regulator 3P0 Register, offset: 0x12C */
  uint32_t REG_2P5;                                /**< Regulator 2P5 Register, offset: 0x130 */
  uint32_t REG_2P5_SET;                            /**< Regulator 2P5 Register, offset: 0x134 */
  uint32_t REG_2P5_CLR;                            /**< Regulator 2P5 Register, offset: 0x138 */
  uint32_t REG_2P5_TOG;                            /**< Regulator 2P5 Register, offset: 0x13C */
  uint32_t REG_CORE;                               /**< Digital Regulator Core Register, offset: 0x140 */
  uint32_t REG_CORE_SET;                           /**< Digital Regulator Core Register, offset: 0x144 */
  uint32_t REG_CORE_CLR;                           /**< Digital Regulator Core Register, offset: 0x148 */
  uint32_t REG_CORE_TOG;                           /**< Digital Regulator Core Register, offset: 0x14C */
  uint32_t MISC0;                                  /**< Miscellaneous Register 0, offset: 0x150 */
  uint32_t MISC0_SET;                              /**< Miscellaneous Register 0, offset: 0x154 */
  uint32_t MISC0_CLR;                              /**< Miscellaneous Register 0, offset: 0x158 */
  uint32_t MISC0_TOG;                              /**< Miscellaneous Register 0, offset: 0x15C */
  uint32_t MISC1;                                  /**< Miscellaneous Register 1, offset: 0x160 */
  uint32_t MISC1_SET;                              /**< Miscellaneous Register 1, offset: 0x164 */
  uint32_t MISC1_CLR;                              /**< Miscellaneous Register 1, offset: 0x168 */
  uint32_t MISC1_TOG;                              /**< Miscellaneous Register 1, offset: 0x16C */
  uint32_t MISC2;                                  /**< Miscellaneous Control Register, offset: 0x170 */
  uint32_t MISC2_SET;                              /**< Miscellaneous Control Register, offset: 0x174 */
  uint32_t MISC2_CLR;                              /**< Miscellaneous Control Register, offset: 0x178 */
  uint32_t MISC2_TOG;                              /**< Miscellaneous Control Register, offset: 0x17C */
} volatile *PMU_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- PMU - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PMU_Register_Accessor_Macros PMU - Register accessor macros
 * @{
 */


/* PMU - Register accessors */
#define PMU_REG_1P1_REG(base)                    ((base)->REG_1P1)
#define PMU_REG_1P1_SET_REG(base)                ((base)->REG_1P1_SET)
#define PMU_REG_1P1_CLR_REG(base)                ((base)->REG_1P1_CLR)
#define PMU_REG_1P1_TOG_REG(base)                ((base)->REG_1P1_TOG)
#define PMU_REG_3P0_REG(base)                    ((base)->REG_3P0)
#define PMU_REG_3P0_SET_REG(base)                ((base)->REG_3P0_SET)
#define PMU_REG_3P0_CLR_REG(base)                ((base)->REG_3P0_CLR)
#define PMU_REG_3P0_TOG_REG(base)                ((base)->REG_3P0_TOG)
#define PMU_REG_2P5_REG(base)                    ((base)->REG_2P5)
#define PMU_REG_2P5_SET_REG(base)                ((base)->REG_2P5_SET)
#define PMU_REG_2P5_CLR_REG(base)                ((base)->REG_2P5_CLR)
#define PMU_REG_2P5_TOG_REG(base)                ((base)->REG_2P5_TOG)
#define PMU_REG_CORE_REG(base)                   ((base)->REG_CORE)
#define PMU_REG_CORE_SET_REG(base)               ((base)->REG_CORE_SET)
#define PMU_REG_CORE_CLR_REG(base)               ((base)->REG_CORE_CLR)
#define PMU_REG_CORE_TOG_REG(base)               ((base)->REG_CORE_TOG)
#define PMU_MISC0_REG(base)                      ((base)->MISC0)
#define PMU_MISC0_SET_REG(base)                  ((base)->MISC0_SET)
#define PMU_MISC0_CLR_REG(base)                  ((base)->MISC0_CLR)
#define PMU_MISC0_TOG_REG(base)                  ((base)->MISC0_TOG)
#define PMU_MISC1_REG(base)                      ((base)->MISC1)
#define PMU_MISC1_SET_REG(base)                  ((base)->MISC1_SET)
#define PMU_MISC1_CLR_REG(base)                  ((base)->MISC1_CLR)
#define PMU_MISC1_TOG_REG(base)                  ((base)->MISC1_TOG)
#define PMU_MISC2_REG(base)                      ((base)->MISC2)
#define PMU_MISC2_SET_REG(base)                  ((base)->MISC2_SET)
#define PMU_MISC2_CLR_REG(base)                  ((base)->MISC2_CLR)
#define PMU_MISC2_TOG_REG(base)                  ((base)->MISC2_TOG)

/*!
 * @}
 */ /* end of group PMU_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- PMU Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PMU_Register_Masks PMU Register Masks
 * @{
 */

/*! @name REG_1P1 - Regulator 1P1 Register */
#define PMU_REG_1P1_ENABLE_LINREG_MASK           (0x1U)
#define PMU_REG_1P1_ENABLE_LINREG_SHIFT          (0U)
#define PMU_REG_1P1_ENABLE_BO_MASK               (0x2U)
#define PMU_REG_1P1_ENABLE_BO_SHIFT              (1U)
#define PMU_REG_1P1_ENABLE_ILIMIT_MASK           (0x4U)
#define PMU_REG_1P1_ENABLE_ILIMIT_SHIFT          (2U)
#define PMU_REG_1P1_ENABLE_PULLDOWN_MASK         (0x8U)
#define PMU_REG_1P1_ENABLE_PULLDOWN_SHIFT        (3U)
#define PMU_REG_1P1_BO_OFFSET_MASK               (0x70U)
#define PMU_REG_1P1_BO_OFFSET_SHIFT              (4U)
#define PMU_REG_1P1_BO_OFFSET(x)                 (((uint32_t)(((uint32_t)(x)) << PMU_REG_1P1_BO_OFFSET_SHIFT)) & PMU_REG_1P1_BO_OFFSET_MASK)
#define PMU_REG_1P1_OUTPUT_TRG_MASK              (0x1F00U)
#define PMU_REG_1P1_OUTPUT_TRG_SHIFT             (8U)
#define PMU_REG_1P1_OUTPUT_TRG(x)                (((uint32_t)(((uint32_t)(x)) << PMU_REG_1P1_OUTPUT_TRG_SHIFT)) & PMU_REG_1P1_OUTPUT_TRG_MASK)
#define PMU_REG_1P1_BO_VDD1P1_MASK               (0x10000U)
#define PMU_REG_1P1_BO_VDD1P1_SHIFT              (16U)
#define PMU_REG_1P1_OK_VDD1P1_MASK               (0x20000U)
#define PMU_REG_1P1_OK_VDD1P1_SHIFT              (17U)
#define PMU_REG_1P1_ENABLE_WEAK_LINREG_MASK      (0x40000U)
#define PMU_REG_1P1_ENABLE_WEAK_LINREG_SHIFT     (18U)
#define PMU_REG_1P1_SELREF_WEAK_LINREG_MASK      (0x80000U)
#define PMU_REG_1P1_SELREF_WEAK_LINREG_SHIFT     (19U)

/*! @name REG_1P1_SET - Regulator 1P1 Register */
#define PMU_REG_1P1_SET_ENABLE_LINREG_MASK       (0x1U)
#define PMU_REG_1P1_SET_ENABLE_LINREG_SHIFT      (0U)
#define PMU_REG_1P1_SET_ENABLE_BO_MASK           (0x2U)
#define PMU_REG_1P1_SET_ENABLE_BO_SHIFT          (1U)
#define PMU_REG_1P1_SET_ENABLE_ILIMIT_MASK       (0x4U)
#define PMU_REG_1P1_SET_ENABLE_ILIMIT_SHIFT      (2U)
#define PMU_REG_1P1_SET_ENABLE_PULLDOWN_MASK     (0x8U)
#define PMU_REG_1P1_SET_ENABLE_PULLDOWN_SHIFT    (3U)
#define PMU_REG_1P1_SET_BO_OFFSET_MASK           (0x70U)
#define PMU_REG_1P1_SET_BO_OFFSET_SHIFT          (4U)
#define PMU_REG_1P1_SET_BO_OFFSET(x)             (((uint32_t)(((uint32_t)(x)) << PMU_REG_1P1_SET_BO_OFFSET_SHIFT)) & PMU_REG_1P1_SET_BO_OFFSET_MASK)
#define PMU_REG_1P1_SET_OUTPUT_TRG_MASK          (0x1F00U)
#define PMU_REG_1P1_SET_OUTPUT_TRG_SHIFT         (8U)
#define PMU_REG_1P1_SET_OUTPUT_TRG(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_1P1_SET_OUTPUT_TRG_SHIFT)) & PMU_REG_1P1_SET_OUTPUT_TRG_MASK)
#define PMU_REG_1P1_SET_BO_VDD1P1_MASK           (0x10000U)
#define PMU_REG_1P1_SET_BO_VDD1P1_SHIFT          (16U)
#define PMU_REG_1P1_SET_OK_VDD1P1_MASK           (0x20000U)
#define PMU_REG_1P1_SET_OK_VDD1P1_SHIFT          (17U)
#define PMU_REG_1P1_SET_ENABLE_WEAK_LINREG_MASK  (0x40000U)
#define PMU_REG_1P1_SET_ENABLE_WEAK_LINREG_SHIFT (18U)
#define PMU_REG_1P1_SET_SELREF_WEAK_LINREG_MASK  (0x80000U)
#define PMU_REG_1P1_SET_SELREF_WEAK_LINREG_SHIFT (19U)

/*! @name REG_1P1_CLR - Regulator 1P1 Register */
#define PMU_REG_1P1_CLR_ENABLE_LINREG_MASK       (0x1U)
#define PMU_REG_1P1_CLR_ENABLE_LINREG_SHIFT      (0U)
#define PMU_REG_1P1_CLR_ENABLE_BO_MASK           (0x2U)
#define PMU_REG_1P1_CLR_ENABLE_BO_SHIFT          (1U)
#define PMU_REG_1P1_CLR_ENABLE_ILIMIT_MASK       (0x4U)
#define PMU_REG_1P1_CLR_ENABLE_ILIMIT_SHIFT      (2U)
#define PMU_REG_1P1_CLR_ENABLE_PULLDOWN_MASK     (0x8U)
#define PMU_REG_1P1_CLR_ENABLE_PULLDOWN_SHIFT    (3U)
#define PMU_REG_1P1_CLR_BO_OFFSET_MASK           (0x70U)
#define PMU_REG_1P1_CLR_BO_OFFSET_SHIFT          (4U)
#define PMU_REG_1P1_CLR_BO_OFFSET(x)             (((uint32_t)(((uint32_t)(x)) << PMU_REG_1P1_CLR_BO_OFFSET_SHIFT)) & PMU_REG_1P1_CLR_BO_OFFSET_MASK)
#define PMU_REG_1P1_CLR_OUTPUT_TRG_MASK          (0x1F00U)
#define PMU_REG_1P1_CLR_OUTPUT_TRG_SHIFT         (8U)
#define PMU_REG_1P1_CLR_OUTPUT_TRG(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_1P1_CLR_OUTPUT_TRG_SHIFT)) & PMU_REG_1P1_CLR_OUTPUT_TRG_MASK)
#define PMU_REG_1P1_CLR_BO_VDD1P1_MASK           (0x10000U)
#define PMU_REG_1P1_CLR_BO_VDD1P1_SHIFT          (16U)
#define PMU_REG_1P1_CLR_OK_VDD1P1_MASK           (0x20000U)
#define PMU_REG_1P1_CLR_OK_VDD1P1_SHIFT          (17U)
#define PMU_REG_1P1_CLR_ENABLE_WEAK_LINREG_MASK  (0x40000U)
#define PMU_REG_1P1_CLR_ENABLE_WEAK_LINREG_SHIFT (18U)
#define PMU_REG_1P1_CLR_SELREF_WEAK_LINREG_MASK  (0x80000U)
#define PMU_REG_1P1_CLR_SELREF_WEAK_LINREG_SHIFT (19U)

/*! @name REG_1P1_TOG - Regulator 1P1 Register */
#define PMU_REG_1P1_TOG_ENABLE_LINREG_MASK       (0x1U)
#define PMU_REG_1P1_TOG_ENABLE_LINREG_SHIFT      (0U)
#define PMU_REG_1P1_TOG_ENABLE_BO_MASK           (0x2U)
#define PMU_REG_1P1_TOG_ENABLE_BO_SHIFT          (1U)
#define PMU_REG_1P1_TOG_ENABLE_ILIMIT_MASK       (0x4U)
#define PMU_REG_1P1_TOG_ENABLE_ILIMIT_SHIFT      (2U)
#define PMU_REG_1P1_TOG_ENABLE_PULLDOWN_MASK     (0x8U)
#define PMU_REG_1P1_TOG_ENABLE_PULLDOWN_SHIFT    (3U)
#define PMU_REG_1P1_TOG_BO_OFFSET_MASK           (0x70U)
#define PMU_REG_1P1_TOG_BO_OFFSET_SHIFT          (4U)
#define PMU_REG_1P1_TOG_BO_OFFSET(x)             (((uint32_t)(((uint32_t)(x)) << PMU_REG_1P1_TOG_BO_OFFSET_SHIFT)) & PMU_REG_1P1_TOG_BO_OFFSET_MASK)
#define PMU_REG_1P1_TOG_OUTPUT_TRG_MASK          (0x1F00U)
#define PMU_REG_1P1_TOG_OUTPUT_TRG_SHIFT         (8U)
#define PMU_REG_1P1_TOG_OUTPUT_TRG(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_1P1_TOG_OUTPUT_TRG_SHIFT)) & PMU_REG_1P1_TOG_OUTPUT_TRG_MASK)
#define PMU_REG_1P1_TOG_BO_VDD1P1_MASK           (0x10000U)
#define PMU_REG_1P1_TOG_BO_VDD1P1_SHIFT          (16U)
#define PMU_REG_1P1_TOG_OK_VDD1P1_MASK           (0x20000U)
#define PMU_REG_1P1_TOG_OK_VDD1P1_SHIFT          (17U)
#define PMU_REG_1P1_TOG_ENABLE_WEAK_LINREG_MASK  (0x40000U)
#define PMU_REG_1P1_TOG_ENABLE_WEAK_LINREG_SHIFT (18U)
#define PMU_REG_1P1_TOG_SELREF_WEAK_LINREG_MASK  (0x80000U)
#define PMU_REG_1P1_TOG_SELREF_WEAK_LINREG_SHIFT (19U)

/*! @name REG_3P0 - Regulator 3P0 Register */
#define PMU_REG_3P0_ENABLE_LINREG_MASK           (0x1U)
#define PMU_REG_3P0_ENABLE_LINREG_SHIFT          (0U)
#define PMU_REG_3P0_ENABLE_BO_MASK               (0x2U)
#define PMU_REG_3P0_ENABLE_BO_SHIFT              (1U)
#define PMU_REG_3P0_ENABLE_ILIMIT_MASK           (0x4U)
#define PMU_REG_3P0_ENABLE_ILIMIT_SHIFT          (2U)
#define PMU_REG_3P0_BO_OFFSET_MASK               (0x70U)
#define PMU_REG_3P0_BO_OFFSET_SHIFT              (4U)
#define PMU_REG_3P0_BO_OFFSET(x)                 (((uint32_t)(((uint32_t)(x)) << PMU_REG_3P0_BO_OFFSET_SHIFT)) & PMU_REG_3P0_BO_OFFSET_MASK)
#define PMU_REG_3P0_VBUS_SEL_MASK                (0x80U)
#define PMU_REG_3P0_VBUS_SEL_SHIFT               (7U)
#define PMU_REG_3P0_OUTPUT_TRG_MASK              (0x1F00U)
#define PMU_REG_3P0_OUTPUT_TRG_SHIFT             (8U)
#define PMU_REG_3P0_OUTPUT_TRG(x)                (((uint32_t)(((uint32_t)(x)) << PMU_REG_3P0_OUTPUT_TRG_SHIFT)) & PMU_REG_3P0_OUTPUT_TRG_MASK)
#define PMU_REG_3P0_BO_VDD3P0_MASK               (0x10000U)
#define PMU_REG_3P0_BO_VDD3P0_SHIFT              (16U)
#define PMU_REG_3P0_OK_VDD3P0_MASK               (0x20000U)
#define PMU_REG_3P0_OK_VDD3P0_SHIFT              (17U)

/*! @name REG_3P0_SET - Regulator 3P0 Register */
#define PMU_REG_3P0_SET_ENABLE_LINREG_MASK       (0x1U)
#define PMU_REG_3P0_SET_ENABLE_LINREG_SHIFT      (0U)
#define PMU_REG_3P0_SET_ENABLE_BO_MASK           (0x2U)
#define PMU_REG_3P0_SET_ENABLE_BO_SHIFT          (1U)
#define PMU_REG_3P0_SET_ENABLE_ILIMIT_MASK       (0x4U)
#define PMU_REG_3P0_SET_ENABLE_ILIMIT_SHIFT      (2U)
#define PMU_REG_3P0_SET_BO_OFFSET_MASK           (0x70U)
#define PMU_REG_3P0_SET_BO_OFFSET_SHIFT          (4U)
#define PMU_REG_3P0_SET_BO_OFFSET(x)             (((uint32_t)(((uint32_t)(x)) << PMU_REG_3P0_SET_BO_OFFSET_SHIFT)) & PMU_REG_3P0_SET_BO_OFFSET_MASK)
#define PMU_REG_3P0_SET_VBUS_SEL_MASK            (0x80U)
#define PMU_REG_3P0_SET_VBUS_SEL_SHIFT           (7U)
#define PMU_REG_3P0_SET_OUTPUT_TRG_MASK          (0x1F00U)
#define PMU_REG_3P0_SET_OUTPUT_TRG_SHIFT         (8U)
#define PMU_REG_3P0_SET_OUTPUT_TRG(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_3P0_SET_OUTPUT_TRG_SHIFT)) & PMU_REG_3P0_SET_OUTPUT_TRG_MASK)
#define PMU_REG_3P0_SET_BO_VDD3P0_MASK           (0x10000U)
#define PMU_REG_3P0_SET_BO_VDD3P0_SHIFT          (16U)
#define PMU_REG_3P0_SET_OK_VDD3P0_MASK           (0x20000U)
#define PMU_REG_3P0_SET_OK_VDD3P0_SHIFT          (17U)

/*! @name REG_3P0_CLR - Regulator 3P0 Register */
#define PMU_REG_3P0_CLR_ENABLE_LINREG_MASK       (0x1U)
#define PMU_REG_3P0_CLR_ENABLE_LINREG_SHIFT      (0U)
#define PMU_REG_3P0_CLR_ENABLE_BO_MASK           (0x2U)
#define PMU_REG_3P0_CLR_ENABLE_BO_SHIFT          (1U)
#define PMU_REG_3P0_CLR_ENABLE_ILIMIT_MASK       (0x4U)
#define PMU_REG_3P0_CLR_ENABLE_ILIMIT_SHIFT      (2U)
#define PMU_REG_3P0_CLR_BO_OFFSET_MASK           (0x70U)
#define PMU_REG_3P0_CLR_BO_OFFSET_SHIFT          (4U)
#define PMU_REG_3P0_CLR_BO_OFFSET(x)             (((uint32_t)(((uint32_t)(x)) << PMU_REG_3P0_CLR_BO_OFFSET_SHIFT)) & PMU_REG_3P0_CLR_BO_OFFSET_MASK)
#define PMU_REG_3P0_CLR_VBUS_SEL_MASK            (0x80U)
#define PMU_REG_3P0_CLR_VBUS_SEL_SHIFT           (7U)
#define PMU_REG_3P0_CLR_OUTPUT_TRG_MASK          (0x1F00U)
#define PMU_REG_3P0_CLR_OUTPUT_TRG_SHIFT         (8U)
#define PMU_REG_3P0_CLR_OUTPUT_TRG(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_3P0_CLR_OUTPUT_TRG_SHIFT)) & PMU_REG_3P0_CLR_OUTPUT_TRG_MASK)
#define PMU_REG_3P0_CLR_BO_VDD3P0_MASK           (0x10000U)
#define PMU_REG_3P0_CLR_BO_VDD3P0_SHIFT          (16U)
#define PMU_REG_3P0_CLR_OK_VDD3P0_MASK           (0x20000U)
#define PMU_REG_3P0_CLR_OK_VDD3P0_SHIFT          (17U)

/*! @name REG_3P0_TOG - Regulator 3P0 Register */
#define PMU_REG_3P0_TOG_ENABLE_LINREG_MASK       (0x1U)
#define PMU_REG_3P0_TOG_ENABLE_LINREG_SHIFT      (0U)
#define PMU_REG_3P0_TOG_ENABLE_BO_MASK           (0x2U)
#define PMU_REG_3P0_TOG_ENABLE_BO_SHIFT          (1U)
#define PMU_REG_3P0_TOG_ENABLE_ILIMIT_MASK       (0x4U)
#define PMU_REG_3P0_TOG_ENABLE_ILIMIT_SHIFT      (2U)
#define PMU_REG_3P0_TOG_BO_OFFSET_MASK           (0x70U)
#define PMU_REG_3P0_TOG_BO_OFFSET_SHIFT          (4U)
#define PMU_REG_3P0_TOG_BO_OFFSET(x)             (((uint32_t)(((uint32_t)(x)) << PMU_REG_3P0_TOG_BO_OFFSET_SHIFT)) & PMU_REG_3P0_TOG_BO_OFFSET_MASK)
#define PMU_REG_3P0_TOG_VBUS_SEL_MASK            (0x80U)
#define PMU_REG_3P0_TOG_VBUS_SEL_SHIFT           (7U)
#define PMU_REG_3P0_TOG_OUTPUT_TRG_MASK          (0x1F00U)
#define PMU_REG_3P0_TOG_OUTPUT_TRG_SHIFT         (8U)
#define PMU_REG_3P0_TOG_OUTPUT_TRG(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_3P0_TOG_OUTPUT_TRG_SHIFT)) & PMU_REG_3P0_TOG_OUTPUT_TRG_MASK)
#define PMU_REG_3P0_TOG_BO_VDD3P0_MASK           (0x10000U)
#define PMU_REG_3P0_TOG_BO_VDD3P0_SHIFT          (16U)
#define PMU_REG_3P0_TOG_OK_VDD3P0_MASK           (0x20000U)
#define PMU_REG_3P0_TOG_OK_VDD3P0_SHIFT          (17U)

/*! @name REG_2P5 - Regulator 2P5 Register */
#define PMU_REG_2P5_ENABLE_LINREG_MASK           (0x1U)
#define PMU_REG_2P5_ENABLE_LINREG_SHIFT          (0U)
#define PMU_REG_2P5_ENABLE_BO_MASK               (0x2U)
#define PMU_REG_2P5_ENABLE_BO_SHIFT              (1U)
#define PMU_REG_2P5_ENABLE_ILIMIT_MASK           (0x4U)
#define PMU_REG_2P5_ENABLE_ILIMIT_SHIFT          (2U)
#define PMU_REG_2P5_ENABLE_PULLDOWN_MASK         (0x8U)
#define PMU_REG_2P5_ENABLE_PULLDOWN_SHIFT        (3U)
#define PMU_REG_2P5_BO_OFFSET_MASK               (0x70U)
#define PMU_REG_2P5_BO_OFFSET_SHIFT              (4U)
#define PMU_REG_2P5_BO_OFFSET(x)                 (((uint32_t)(((uint32_t)(x)) << PMU_REG_2P5_BO_OFFSET_SHIFT)) & PMU_REG_2P5_BO_OFFSET_MASK)
#define PMU_REG_2P5_OUTPUT_TRG_MASK              (0x1F00U)
#define PMU_REG_2P5_OUTPUT_TRG_SHIFT             (8U)
#define PMU_REG_2P5_OUTPUT_TRG(x)                (((uint32_t)(((uint32_t)(x)) << PMU_REG_2P5_OUTPUT_TRG_SHIFT)) & PMU_REG_2P5_OUTPUT_TRG_MASK)
#define PMU_REG_2P5_BO_VDD2P5_MASK               (0x10000U)
#define PMU_REG_2P5_BO_VDD2P5_SHIFT              (16U)
#define PMU_REG_2P5_OK_VDD2P5_MASK               (0x20000U)
#define PMU_REG_2P5_OK_VDD2P5_SHIFT              (17U)
#define PMU_REG_2P5_ENABLE_WEAK_LINREG_MASK      (0x40000U)
#define PMU_REG_2P5_ENABLE_WEAK_LINREG_SHIFT     (18U)

/*! @name REG_2P5_SET - Regulator 2P5 Register */
#define PMU_REG_2P5_SET_ENABLE_LINREG_MASK       (0x1U)
#define PMU_REG_2P5_SET_ENABLE_LINREG_SHIFT      (0U)
#define PMU_REG_2P5_SET_ENABLE_BO_MASK           (0x2U)
#define PMU_REG_2P5_SET_ENABLE_BO_SHIFT          (1U)
#define PMU_REG_2P5_SET_ENABLE_ILIMIT_MASK       (0x4U)
#define PMU_REG_2P5_SET_ENABLE_ILIMIT_SHIFT      (2U)
#define PMU_REG_2P5_SET_ENABLE_PULLDOWN_MASK     (0x8U)
#define PMU_REG_2P5_SET_ENABLE_PULLDOWN_SHIFT    (3U)
#define PMU_REG_2P5_SET_BO_OFFSET_MASK           (0x70U)
#define PMU_REG_2P5_SET_BO_OFFSET_SHIFT          (4U)
#define PMU_REG_2P5_SET_BO_OFFSET(x)             (((uint32_t)(((uint32_t)(x)) << PMU_REG_2P5_SET_BO_OFFSET_SHIFT)) & PMU_REG_2P5_SET_BO_OFFSET_MASK)
#define PMU_REG_2P5_SET_OUTPUT_TRG_MASK          (0x1F00U)
#define PMU_REG_2P5_SET_OUTPUT_TRG_SHIFT         (8U)
#define PMU_REG_2P5_SET_OUTPUT_TRG(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_2P5_SET_OUTPUT_TRG_SHIFT)) & PMU_REG_2P5_SET_OUTPUT_TRG_MASK)
#define PMU_REG_2P5_SET_BO_VDD2P5_MASK           (0x10000U)
#define PMU_REG_2P5_SET_BO_VDD2P5_SHIFT          (16U)
#define PMU_REG_2P5_SET_OK_VDD2P5_MASK           (0x20000U)
#define PMU_REG_2P5_SET_OK_VDD2P5_SHIFT          (17U)
#define PMU_REG_2P5_SET_ENABLE_WEAK_LINREG_MASK  (0x40000U)
#define PMU_REG_2P5_SET_ENABLE_WEAK_LINREG_SHIFT (18U)

/*! @name REG_2P5_CLR - Regulator 2P5 Register */
#define PMU_REG_2P5_CLR_ENABLE_LINREG_MASK       (0x1U)
#define PMU_REG_2P5_CLR_ENABLE_LINREG_SHIFT      (0U)
#define PMU_REG_2P5_CLR_ENABLE_BO_MASK           (0x2U)
#define PMU_REG_2P5_CLR_ENABLE_BO_SHIFT          (1U)
#define PMU_REG_2P5_CLR_ENABLE_ILIMIT_MASK       (0x4U)
#define PMU_REG_2P5_CLR_ENABLE_ILIMIT_SHIFT      (2U)
#define PMU_REG_2P5_CLR_ENABLE_PULLDOWN_MASK     (0x8U)
#define PMU_REG_2P5_CLR_ENABLE_PULLDOWN_SHIFT    (3U)
#define PMU_REG_2P5_CLR_BO_OFFSET_MASK           (0x70U)
#define PMU_REG_2P5_CLR_BO_OFFSET_SHIFT          (4U)
#define PMU_REG_2P5_CLR_BO_OFFSET(x)             (((uint32_t)(((uint32_t)(x)) << PMU_REG_2P5_CLR_BO_OFFSET_SHIFT)) & PMU_REG_2P5_CLR_BO_OFFSET_MASK)
#define PMU_REG_2P5_CLR_OUTPUT_TRG_MASK          (0x1F00U)
#define PMU_REG_2P5_CLR_OUTPUT_TRG_SHIFT         (8U)
#define PMU_REG_2P5_CLR_OUTPUT_TRG(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_2P5_CLR_OUTPUT_TRG_SHIFT)) & PMU_REG_2P5_CLR_OUTPUT_TRG_MASK)
#define PMU_REG_2P5_CLR_BO_VDD2P5_MASK           (0x10000U)
#define PMU_REG_2P5_CLR_BO_VDD2P5_SHIFT          (16U)
#define PMU_REG_2P5_CLR_OK_VDD2P5_MASK           (0x20000U)
#define PMU_REG_2P5_CLR_OK_VDD2P5_SHIFT          (17U)
#define PMU_REG_2P5_CLR_ENABLE_WEAK_LINREG_MASK  (0x40000U)
#define PMU_REG_2P5_CLR_ENABLE_WEAK_LINREG_SHIFT (18U)

/*! @name REG_2P5_TOG - Regulator 2P5 Register */
#define PMU_REG_2P5_TOG_ENABLE_LINREG_MASK       (0x1U)
#define PMU_REG_2P5_TOG_ENABLE_LINREG_SHIFT      (0U)
#define PMU_REG_2P5_TOG_ENABLE_BO_MASK           (0x2U)
#define PMU_REG_2P5_TOG_ENABLE_BO_SHIFT          (1U)
#define PMU_REG_2P5_TOG_ENABLE_ILIMIT_MASK       (0x4U)
#define PMU_REG_2P5_TOG_ENABLE_ILIMIT_SHIFT      (2U)
#define PMU_REG_2P5_TOG_ENABLE_PULLDOWN_MASK     (0x8U)
#define PMU_REG_2P5_TOG_ENABLE_PULLDOWN_SHIFT    (3U)
#define PMU_REG_2P5_TOG_BO_OFFSET_MASK           (0x70U)
#define PMU_REG_2P5_TOG_BO_OFFSET_SHIFT          (4U)
#define PMU_REG_2P5_TOG_BO_OFFSET(x)             (((uint32_t)(((uint32_t)(x)) << PMU_REG_2P5_TOG_BO_OFFSET_SHIFT)) & PMU_REG_2P5_TOG_BO_OFFSET_MASK)
#define PMU_REG_2P5_TOG_OUTPUT_TRG_MASK          (0x1F00U)
#define PMU_REG_2P5_TOG_OUTPUT_TRG_SHIFT         (8U)
#define PMU_REG_2P5_TOG_OUTPUT_TRG(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_2P5_TOG_OUTPUT_TRG_SHIFT)) & PMU_REG_2P5_TOG_OUTPUT_TRG_MASK)
#define PMU_REG_2P5_TOG_BO_VDD2P5_MASK           (0x10000U)
#define PMU_REG_2P5_TOG_BO_VDD2P5_SHIFT          (16U)
#define PMU_REG_2P5_TOG_OK_VDD2P5_MASK           (0x20000U)
#define PMU_REG_2P5_TOG_OK_VDD2P5_SHIFT          (17U)
#define PMU_REG_2P5_TOG_ENABLE_WEAK_LINREG_MASK  (0x40000U)
#define PMU_REG_2P5_TOG_ENABLE_WEAK_LINREG_SHIFT (18U)

/*! @name REG_CORE - Digital Regulator Core Register */
#define PMU_REG_CORE_REG0_TARG_MASK              (0x1FU)
#define PMU_REG_CORE_REG0_TARG_SHIFT             (0U)
#define PMU_REG_CORE_REG0_TARG(x)                (((uint32_t)(((uint32_t)(x)) << PMU_REG_CORE_REG0_TARG_SHIFT)) & PMU_REG_CORE_REG0_TARG_MASK)
#define PMU_REG_CORE_REG2_TARG_MASK              (0x7C0000U)
#define PMU_REG_CORE_REG2_TARG_SHIFT             (18U)
#define PMU_REG_CORE_REG2_TARG(x)                (((uint32_t)(((uint32_t)(x)) << PMU_REG_CORE_REG2_TARG_SHIFT)) & PMU_REG_CORE_REG2_TARG_MASK)
#define PMU_REG_CORE_RAMP_RATE_MASK              (0x18000000U)
#define PMU_REG_CORE_RAMP_RATE_SHIFT             (27U)
#define PMU_REG_CORE_RAMP_RATE(x)                (((uint32_t)(((uint32_t)(x)) << PMU_REG_CORE_RAMP_RATE_SHIFT)) & PMU_REG_CORE_RAMP_RATE_MASK)
#define PMU_REG_CORE_FET_ODRIVE_MASK             (0x20000000U)
#define PMU_REG_CORE_FET_ODRIVE_SHIFT            (29U)

/*! @name REG_CORE_SET - Digital Regulator Core Register */
#define PMU_REG_CORE_SET_REG0_TARG_MASK          (0x1FU)
#define PMU_REG_CORE_SET_REG0_TARG_SHIFT         (0U)
#define PMU_REG_CORE_SET_REG0_TARG(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_CORE_SET_REG0_TARG_SHIFT)) & PMU_REG_CORE_SET_REG0_TARG_MASK)
#define PMU_REG_CORE_SET_REG2_TARG_MASK          (0x7C0000U)
#define PMU_REG_CORE_SET_REG2_TARG_SHIFT         (18U)
#define PMU_REG_CORE_SET_REG2_TARG(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_CORE_SET_REG2_TARG_SHIFT)) & PMU_REG_CORE_SET_REG2_TARG_MASK)
#define PMU_REG_CORE_SET_RAMP_RATE_MASK          (0x18000000U)
#define PMU_REG_CORE_SET_RAMP_RATE_SHIFT         (27U)
#define PMU_REG_CORE_SET_RAMP_RATE(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_CORE_SET_RAMP_RATE_SHIFT)) & PMU_REG_CORE_SET_RAMP_RATE_MASK)
#define PMU_REG_CORE_SET_FET_ODRIVE_MASK         (0x20000000U)
#define PMU_REG_CORE_SET_FET_ODRIVE_SHIFT        (29U)

/*! @name REG_CORE_CLR - Digital Regulator Core Register */
#define PMU_REG_CORE_CLR_REG0_TARG_MASK          (0x1FU)
#define PMU_REG_CORE_CLR_REG0_TARG_SHIFT         (0U)
#define PMU_REG_CORE_CLR_REG0_TARG(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_CORE_CLR_REG0_TARG_SHIFT)) & PMU_REG_CORE_CLR_REG0_TARG_MASK)
#define PMU_REG_CORE_CLR_REG2_TARG_MASK          (0x7C0000U)
#define PMU_REG_CORE_CLR_REG2_TARG_SHIFT         (18U)
#define PMU_REG_CORE_CLR_REG2_TARG(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_CORE_CLR_REG2_TARG_SHIFT)) & PMU_REG_CORE_CLR_REG2_TARG_MASK)
#define PMU_REG_CORE_CLR_RAMP_RATE_MASK          (0x18000000U)
#define PMU_REG_CORE_CLR_RAMP_RATE_SHIFT         (27U)
#define PMU_REG_CORE_CLR_RAMP_RATE(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_CORE_CLR_RAMP_RATE_SHIFT)) & PMU_REG_CORE_CLR_RAMP_RATE_MASK)
#define PMU_REG_CORE_CLR_FET_ODRIVE_MASK         (0x20000000U)
#define PMU_REG_CORE_CLR_FET_ODRIVE_SHIFT        (29U)

/*! @name REG_CORE_TOG - Digital Regulator Core Register */
#define PMU_REG_CORE_TOG_REG0_TARG_MASK          (0x1FU)
#define PMU_REG_CORE_TOG_REG0_TARG_SHIFT         (0U)
#define PMU_REG_CORE_TOG_REG0_TARG(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_CORE_TOG_REG0_TARG_SHIFT)) & PMU_REG_CORE_TOG_REG0_TARG_MASK)
#define PMU_REG_CORE_TOG_REG2_TARG_MASK          (0x7C0000U)
#define PMU_REG_CORE_TOG_REG2_TARG_SHIFT         (18U)
#define PMU_REG_CORE_TOG_REG2_TARG(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_CORE_TOG_REG2_TARG_SHIFT)) & PMU_REG_CORE_TOG_REG2_TARG_MASK)
#define PMU_REG_CORE_TOG_RAMP_RATE_MASK          (0x18000000U)
#define PMU_REG_CORE_TOG_RAMP_RATE_SHIFT         (27U)
#define PMU_REG_CORE_TOG_RAMP_RATE(x)            (((uint32_t)(((uint32_t)(x)) << PMU_REG_CORE_TOG_RAMP_RATE_SHIFT)) & PMU_REG_CORE_TOG_RAMP_RATE_MASK)
#define PMU_REG_CORE_TOG_FET_ODRIVE_MASK         (0x20000000U)
#define PMU_REG_CORE_TOG_FET_ODRIVE_SHIFT        (29U)

/*! @name MISC0 - Miscellaneous Register 0 */
#define PMU_MISC0_REFTOP_PWD_MASK                (0x1U)
#define PMU_MISC0_REFTOP_PWD_SHIFT               (0U)
#define PMU_MISC0_REFTOP_SELFBIASOFF_MASK        (0x8U)
#define PMU_MISC0_REFTOP_SELFBIASOFF_SHIFT       (3U)
#define PMU_MISC0_REFTOP_VBGADJ_MASK             (0x70U)
#define PMU_MISC0_REFTOP_VBGADJ_SHIFT            (4U)
#define PMU_MISC0_REFTOP_VBGADJ(x)               (((uint32_t)(((uint32_t)(x)) << PMU_MISC0_REFTOP_VBGADJ_SHIFT)) & PMU_MISC0_REFTOP_VBGADJ_MASK)
#define PMU_MISC0_REFTOP_VBGUP_MASK              (0x80U)
#define PMU_MISC0_REFTOP_VBGUP_SHIFT             (7U)
#define PMU_MISC0_STOP_MODE_CONFIG_MASK          (0xC00U)
#define PMU_MISC0_STOP_MODE_CONFIG_SHIFT         (10U)
#define PMU_MISC0_STOP_MODE_CONFIG(x)            (((uint32_t)(((uint32_t)(x)) << PMU_MISC0_STOP_MODE_CONFIG_SHIFT)) & PMU_MISC0_STOP_MODE_CONFIG_MASK)
#define PMU_MISC0_DISCON_HIGH_SNVS_MASK          (0x1000U)
#define PMU_MISC0_DISCON_HIGH_SNVS_SHIFT         (12U)
#define PMU_MISC0_OSC_I_MASK                     (0x6000U)
#define PMU_MISC0_OSC_I_SHIFT                    (13U)
#define PMU_MISC0_OSC_I(x)                       (((uint32_t)(((uint32_t)(x)) << PMU_MISC0_OSC_I_SHIFT)) & PMU_MISC0_OSC_I_MASK)
#define PMU_MISC0_OSC_XTALOK_MASK                (0x8000U)
#define PMU_MISC0_OSC_XTALOK_SHIFT               (15U)
#define PMU_MISC0_OSC_XTALOK_EN_MASK             (0x10000U)
#define PMU_MISC0_OSC_XTALOK_EN_SHIFT            (16U)
#define PMU_MISC0_CLKGATE_CTRL_MASK              (0x2000000U)
#define PMU_MISC0_CLKGATE_CTRL_SHIFT             (25U)
#define PMU_MISC0_CLKGATE_DELAY_MASK             (0x1C000000U)
#define PMU_MISC0_CLKGATE_DELAY_SHIFT            (26U)
#define PMU_MISC0_CLKGATE_DELAY(x)               (((uint32_t)(((uint32_t)(x)) << PMU_MISC0_CLKGATE_DELAY_SHIFT)) & PMU_MISC0_CLKGATE_DELAY_MASK)
#define PMU_MISC0_RTC_XTAL_SOURCE_MASK           (0x20000000U)
#define PMU_MISC0_RTC_XTAL_SOURCE_SHIFT          (29U)
#define PMU_MISC0_XTAL_24M_PWD_MASK              (0x40000000U)
#define PMU_MISC0_XTAL_24M_PWD_SHIFT             (30U)
#define PMU_MISC0_VID_PLL_PREDIV_MASK            (0x80000000U)
#define PMU_MISC0_VID_PLL_PREDIV_SHIFT           (31U)

/*! @name MISC0_SET - Miscellaneous Register 0 */
#define PMU_MISC0_SET_REFTOP_PWD_MASK            (0x1U)
#define PMU_MISC0_SET_REFTOP_PWD_SHIFT           (0U)
#define PMU_MISC0_SET_REFTOP_SELFBIASOFF_MASK    (0x8U)
#define PMU_MISC0_SET_REFTOP_SELFBIASOFF_SHIFT   (3U)
#define PMU_MISC0_SET_REFTOP_VBGADJ_MASK         (0x70U)
#define PMU_MISC0_SET_REFTOP_VBGADJ_SHIFT        (4U)
#define PMU_MISC0_SET_REFTOP_VBGADJ(x)           (((uint32_t)(((uint32_t)(x)) << PMU_MISC0_SET_REFTOP_VBGADJ_SHIFT)) & PMU_MISC0_SET_REFTOP_VBGADJ_MASK)
#define PMU_MISC0_SET_REFTOP_VBGUP_MASK          (0x80U)
#define PMU_MISC0_SET_REFTOP_VBGUP_SHIFT         (7U)
#define PMU_MISC0_SET_STOP_MODE_CONFIG_MASK      (0xC00U)
#define PMU_MISC0_SET_STOP_MODE_CONFIG_SHIFT     (10U)
#define PMU_MISC0_SET_STOP_MODE_CONFIG(x)        (((uint32_t)(((uint32_t)(x)) << PMU_MISC0_SET_STOP_MODE_CONFIG_SHIFT)) & PMU_MISC0_SET_STOP_MODE_CONFIG_MASK)
#define PMU_MISC0_SET_DISCON_HIGH_SNVS_MASK      (0x1000U)
#define PMU_MISC0_SET_DISCON_HIGH_SNVS_SHIFT     (12U)
#define PMU_MISC0_SET_OSC_I_MASK                 (0x6000U)
#define PMU_MISC0_SET_OSC_I_SHIFT                (13U)
#define PMU_MISC0_SET_OSC_I(x)                   (((uint32_t)(((uint32_t)(x)) << PMU_MISC0_SET_OSC_I_SHIFT)) & PMU_MISC0_SET_OSC_I_MASK)
#define PMU_MISC0_SET_OSC_XTALOK_MASK            (0x8000U)
#define PMU_MISC0_SET_OSC_XTALOK_SHIFT           (15U)
#define PMU_MISC0_SET_OSC_XTALOK_EN_MASK         (0x10000U)
#define PMU_MISC0_SET_OSC_XTALOK_EN_SHIFT        (16U)
#define PMU_MISC0_SET_CLKGATE_CTRL_MASK          (0x2000000U)
#define PMU_MISC0_SET_CLKGATE_CTRL_SHIFT         (25U)
#define PMU_MISC0_SET_CLKGATE_DELAY_MASK         (0x1C000000U)
#define PMU_MISC0_SET_CLKGATE_DELAY_SHIFT        (26U)
#define PMU_MISC0_SET_CLKGATE_DELAY(x)           (((uint32_t)(((uint32_t)(x)) << PMU_MISC0_SET_CLKGATE_DELAY_SHIFT)) & PMU_MISC0_SET_CLKGATE_DELAY_MASK)
#define PMU_MISC0_SET_RTC_XTAL_SOURCE_MASK       (0x20000000U)
#define PMU_MISC0_SET_RTC_XTAL_SOURCE_SHIFT      (29U)
#define PMU_MISC0_SET_XTAL_24M_PWD_MASK          (0x40000000U)
#define PMU_MISC0_SET_XTAL_24M_PWD_SHIFT         (30U)
#define PMU_MISC0_SET_VID_PLL_PREDIV_MASK        (0x80000000U)
#define PMU_MISC0_SET_VID_PLL_PREDIV_SHIFT       (31U)

/*! @name MISC0_CLR - Miscellaneous Register 0 */
#define PMU_MISC0_CLR_REFTOP_PWD_MASK            (0x1U)
#define PMU_MISC0_CLR_REFTOP_PWD_SHIFT           (0U)
#define PMU_MISC0_CLR_REFTOP_SELFBIASOFF_MASK    (0x8U)
#define PMU_MISC0_CLR_REFTOP_SELFBIASOFF_SHIFT   (3U)
#define PMU_MISC0_CLR_REFTOP_VBGADJ_MASK         (0x70U)
#define PMU_MISC0_CLR_REFTOP_VBGADJ_SHIFT        (4U)
#define PMU_MISC0_CLR_REFTOP_VBGADJ(x)           (((uint32_t)(((uint32_t)(x)) << PMU_MISC0_CLR_REFTOP_VBGADJ_SHIFT)) & PMU_MISC0_CLR_REFTOP_VBGADJ_MASK)
#define PMU_MISC0_CLR_REFTOP_VBGUP_MASK          (0x80U)
#define PMU_MISC0_CLR_REFTOP_VBGUP_SHIFT         (7U)
#define PMU_MISC0_CLR_STOP_MODE_CONFIG_MASK      (0xC00U)
#define PMU_MISC0_CLR_STOP_MODE_CONFIG_SHIFT     (10U)
#define PMU_MISC0_CLR_STOP_MODE_CONFIG(x)        (((uint32_t)(((uint32_t)(x)) << PMU_MISC0_CLR_STOP_MODE_CONFIG_SHIFT)) & PMU_MISC0_CLR_STOP_MODE_CONFIG_MASK)
#define PMU_MISC0_CLR_DISCON_HIGH_SNVS_MASK      (0x1000U)
#define PMU_MISC0_CLR_DISCON_HIGH_SNVS_SHIFT     (12U)
#define PMU_MISC0_CLR_OSC_I_MASK                 (0x6000U)
#define PMU_MISC0_CLR_OSC_I_SHIFT                (13U)
#define PMU_MISC0_CLR_OSC_I(x)                   (((uint32_t)(((uint32_t)(x)) << PMU_MISC0_CLR_OSC_I_SHIFT)) & PMU_MISC0_CLR_OSC_I_MASK)
#define PMU_MISC0_CLR_OSC_XTALOK_MASK            (0x8000U)
#define PMU_MISC0_CLR_OSC_XTALOK_SHIFT           (15U)
#define PMU_MISC0_CLR_OSC_XTALOK_EN_MASK         (0x10000U)
#define PMU_MISC0_CLR_OSC_XTALOK_EN_SHIFT        (16U)
#define PMU_MISC0_CLR_CLKGATE_CTRL_MASK          (0x2000000U)
#define PMU_MISC0_CLR_CLKGATE_CTRL_SHIFT         (25U)
#define PMU_MISC0_CLR_CLKGATE_DELAY_MASK         (0x1C000000U)
#define PMU_MISC0_CLR_CLKGATE_DELAY_SHIFT        (26U)
#define PMU_MISC0_CLR_CLKGATE_DELAY(x)           (((uint32_t)(((uint32_t)(x)) << PMU_MISC0_CLR_CLKGATE_DELAY_SHIFT)) & PMU_MISC0_CLR_CLKGATE_DELAY_MASK)
#define PMU_MISC0_CLR_RTC_XTAL_SOURCE_MASK       (0x20000000U)
#define PMU_MISC0_CLR_RTC_XTAL_SOURCE_SHIFT      (29U)
#define PMU_MISC0_CLR_XTAL_24M_PWD_MASK          (0x40000000U)
#define PMU_MISC0_CLR_XTAL_24M_PWD_SHIFT         (30U)
#define PMU_MISC0_CLR_VID_PLL_PREDIV_MASK        (0x80000000U)
#define PMU_MISC0_CLR_VID_PLL_PREDIV_SHIFT       (31U)

/*! @name MISC0_TOG - Miscellaneous Register 0 */
#define PMU_MISC0_TOG_REFTOP_PWD_MASK            (0x1U)
#define PMU_MISC0_TOG_REFTOP_PWD_SHIFT           (0U)
#define PMU_MISC0_TOG_REFTOP_SELFBIASOFF_MASK    (0x8U)
#define PMU_MISC0_TOG_REFTOP_SELFBIASOFF_SHIFT   (3U)
#define PMU_MISC0_TOG_REFTOP_VBGADJ_MASK         (0x70U)
#define PMU_MISC0_TOG_REFTOP_VBGADJ_SHIFT        (4U)
#define PMU_MISC0_TOG_REFTOP_VBGADJ(x)           (((uint32_t)(((uint32_t)(x)) << PMU_MISC0_TOG_REFTOP_VBGADJ_SHIFT)) & PMU_MISC0_TOG_REFTOP_VBGADJ_MASK)
#define PMU_MISC0_TOG_REFTOP_VBGUP_MASK          (0x80U)
#define PMU_MISC0_TOG_REFTOP_VBGUP_SHIFT         (7U)
#define PMU_MISC0_TOG_STOP_MODE_CONFIG_MASK      (0xC00U)
#define PMU_MISC0_TOG_STOP_MODE_CONFIG_SHIFT     (10U)
#define PMU_MISC0_TOG_STOP_MODE_CONFIG(x)        (((uint32_t)(((uint32_t)(x)) << PMU_MISC0_TOG_STOP_MODE_CONFIG_SHIFT)) & PMU_MISC0_TOG_STOP_MODE_CONFIG_MASK)
#define PMU_MISC0_TOG_DISCON_HIGH_SNVS_MASK      (0x1000U)
#define PMU_MISC0_TOG_DISCON_HIGH_SNVS_SHIFT     (12U)
#define PMU_MISC0_TOG_OSC_I_MASK                 (0x6000U)
#define PMU_MISC0_TOG_OSC_I_SHIFT                (13U)
#define PMU_MISC0_TOG_OSC_I(x)                   (((uint32_t)(((uint32_t)(x)) << PMU_MISC0_TOG_OSC_I_SHIFT)) & PMU_MISC0_TOG_OSC_I_MASK)
#define PMU_MISC0_TOG_OSC_XTALOK_MASK            (0x8000U)
#define PMU_MISC0_TOG_OSC_XTALOK_SHIFT           (15U)
#define PMU_MISC0_TOG_OSC_XTALOK_EN_MASK         (0x10000U)
#define PMU_MISC0_TOG_OSC_XTALOK_EN_SHIFT        (16U)
#define PMU_MISC0_TOG_CLKGATE_CTRL_MASK          (0x2000000U)
#define PMU_MISC0_TOG_CLKGATE_CTRL_SHIFT         (25U)
#define PMU_MISC0_TOG_CLKGATE_DELAY_MASK         (0x1C000000U)
#define PMU_MISC0_TOG_CLKGATE_DELAY_SHIFT        (26U)
#define PMU_MISC0_TOG_CLKGATE_DELAY(x)           (((uint32_t)(((uint32_t)(x)) << PMU_MISC0_TOG_CLKGATE_DELAY_SHIFT)) & PMU_MISC0_TOG_CLKGATE_DELAY_MASK)
#define PMU_MISC0_TOG_RTC_XTAL_SOURCE_MASK       (0x20000000U)
#define PMU_MISC0_TOG_RTC_XTAL_SOURCE_SHIFT      (29U)
#define PMU_MISC0_TOG_XTAL_24M_PWD_MASK          (0x40000000U)
#define PMU_MISC0_TOG_XTAL_24M_PWD_SHIFT         (30U)
#define PMU_MISC0_TOG_VID_PLL_PREDIV_MASK        (0x80000000U)
#define PMU_MISC0_TOG_VID_PLL_PREDIV_SHIFT       (31U)

/*! @name MISC1 - Miscellaneous Register 1 */
#define PMU_MISC1_LVDS1_CLK_SEL_MASK             (0x1FU)
#define PMU_MISC1_LVDS1_CLK_SEL_SHIFT            (0U)
#define PMU_MISC1_LVDS1_CLK_SEL(x)               (((uint32_t)(((uint32_t)(x)) << PMU_MISC1_LVDS1_CLK_SEL_SHIFT)) & PMU_MISC1_LVDS1_CLK_SEL_MASK)
#define PMU_MISC1_LVDSCLK1_OBEN_MASK             (0x400U)
#define PMU_MISC1_LVDSCLK1_OBEN_SHIFT            (10U)
#define PMU_MISC1_LVDSCLK1_IBEN_MASK             (0x1000U)
#define PMU_MISC1_LVDSCLK1_IBEN_SHIFT            (12U)
#define PMU_MISC1_PFD_480_AUTOGATE_EN_MASK       (0x10000U)
#define PMU_MISC1_PFD_480_AUTOGATE_EN_SHIFT      (16U)
#define PMU_MISC1_PFD_528_AUTOGATE_EN_MASK       (0x20000U)
#define PMU_MISC1_PFD_528_AUTOGATE_EN_SHIFT      (17U)
#define PMU_MISC1_IRQ_TEMPPANIC_MASK             (0x8000000U)
#define PMU_MISC1_IRQ_TEMPPANIC_SHIFT            (27U)
#define PMU_MISC1_IRQ_TEMPLOW_MASK               (0x10000000U)
#define PMU_MISC1_IRQ_TEMPLOW_SHIFT              (28U)
#define PMU_MISC1_IRQ_TEMPHIGH_MASK              (0x20000000U)
#define PMU_MISC1_IRQ_TEMPHIGH_SHIFT             (29U)
#define PMU_MISC1_IRQ_ANA_BO_MASK                (0x40000000U)
#define PMU_MISC1_IRQ_ANA_BO_SHIFT               (30U)
#define PMU_MISC1_IRQ_DIG_BO_MASK                (0x80000000U)
#define PMU_MISC1_IRQ_DIG_BO_SHIFT               (31U)

/*! @name MISC1_SET - Miscellaneous Register 1 */
#define PMU_MISC1_SET_LVDS1_CLK_SEL_MASK         (0x1FU)
#define PMU_MISC1_SET_LVDS1_CLK_SEL_SHIFT        (0U)
#define PMU_MISC1_SET_LVDS1_CLK_SEL(x)           (((uint32_t)(((uint32_t)(x)) << PMU_MISC1_SET_LVDS1_CLK_SEL_SHIFT)) & PMU_MISC1_SET_LVDS1_CLK_SEL_MASK)
#define PMU_MISC1_SET_LVDSCLK1_OBEN_MASK         (0x400U)
#define PMU_MISC1_SET_LVDSCLK1_OBEN_SHIFT        (10U)
#define PMU_MISC1_SET_LVDSCLK1_IBEN_MASK         (0x1000U)
#define PMU_MISC1_SET_LVDSCLK1_IBEN_SHIFT        (12U)
#define PMU_MISC1_SET_PFD_480_AUTOGATE_EN_MASK   (0x10000U)
#define PMU_MISC1_SET_PFD_480_AUTOGATE_EN_SHIFT  (16U)
#define PMU_MISC1_SET_PFD_528_AUTOGATE_EN_MASK   (0x20000U)
#define PMU_MISC1_SET_PFD_528_AUTOGATE_EN_SHIFT  (17U)
#define PMU_MISC1_SET_IRQ_TEMPPANIC_MASK         (0x8000000U)
#define PMU_MISC1_SET_IRQ_TEMPPANIC_SHIFT        (27U)
#define PMU_MISC1_SET_IRQ_TEMPLOW_MASK           (0x10000000U)
#define PMU_MISC1_SET_IRQ_TEMPLOW_SHIFT          (28U)
#define PMU_MISC1_SET_IRQ_TEMPHIGH_MASK          (0x20000000U)
#define PMU_MISC1_SET_IRQ_TEMPHIGH_SHIFT         (29U)
#define PMU_MISC1_SET_IRQ_ANA_BO_MASK            (0x40000000U)
#define PMU_MISC1_SET_IRQ_ANA_BO_SHIFT           (30U)
#define PMU_MISC1_SET_IRQ_DIG_BO_MASK            (0x80000000U)
#define PMU_MISC1_SET_IRQ_DIG_BO_SHIFT           (31U)

/*! @name MISC1_CLR - Miscellaneous Register 1 */
#define PMU_MISC1_CLR_LVDS1_CLK_SEL_MASK         (0x1FU)
#define PMU_MISC1_CLR_LVDS1_CLK_SEL_SHIFT        (0U)
#define PMU_MISC1_CLR_LVDS1_CLK_SEL(x)           (((uint32_t)(((uint32_t)(x)) << PMU_MISC1_CLR_LVDS1_CLK_SEL_SHIFT)) & PMU_MISC1_CLR_LVDS1_CLK_SEL_MASK)
#define PMU_MISC1_CLR_LVDSCLK1_OBEN_MASK         (0x400U)
#define PMU_MISC1_CLR_LVDSCLK1_OBEN_SHIFT        (10U)
#define PMU_MISC1_CLR_LVDSCLK1_IBEN_MASK         (0x1000U)
#define PMU_MISC1_CLR_LVDSCLK1_IBEN_SHIFT        (12U)
#define PMU_MISC1_CLR_PFD_480_AUTOGATE_EN_MASK   (0x10000U)
#define PMU_MISC1_CLR_PFD_480_AUTOGATE_EN_SHIFT  (16U)
#define PMU_MISC1_CLR_PFD_528_AUTOGATE_EN_MASK   (0x20000U)
#define PMU_MISC1_CLR_PFD_528_AUTOGATE_EN_SHIFT  (17U)
#define PMU_MISC1_CLR_IRQ_TEMPPANIC_MASK         (0x8000000U)
#define PMU_MISC1_CLR_IRQ_TEMPPANIC_SHIFT        (27U)
#define PMU_MISC1_CLR_IRQ_TEMPLOW_MASK           (0x10000000U)
#define PMU_MISC1_CLR_IRQ_TEMPLOW_SHIFT          (28U)
#define PMU_MISC1_CLR_IRQ_TEMPHIGH_MASK          (0x20000000U)
#define PMU_MISC1_CLR_IRQ_TEMPHIGH_SHIFT         (29U)
#define PMU_MISC1_CLR_IRQ_ANA_BO_MASK            (0x40000000U)
#define PMU_MISC1_CLR_IRQ_ANA_BO_SHIFT           (30U)
#define PMU_MISC1_CLR_IRQ_DIG_BO_MASK            (0x80000000U)
#define PMU_MISC1_CLR_IRQ_DIG_BO_SHIFT           (31U)

/*! @name MISC1_TOG - Miscellaneous Register 1 */
#define PMU_MISC1_TOG_LVDS1_CLK_SEL_MASK         (0x1FU)
#define PMU_MISC1_TOG_LVDS1_CLK_SEL_SHIFT        (0U)
#define PMU_MISC1_TOG_LVDS1_CLK_SEL(x)           (((uint32_t)(((uint32_t)(x)) << PMU_MISC1_TOG_LVDS1_CLK_SEL_SHIFT)) & PMU_MISC1_TOG_LVDS1_CLK_SEL_MASK)
#define PMU_MISC1_TOG_LVDSCLK1_OBEN_MASK         (0x400U)
#define PMU_MISC1_TOG_LVDSCLK1_OBEN_SHIFT        (10U)
#define PMU_MISC1_TOG_LVDSCLK1_IBEN_MASK         (0x1000U)
#define PMU_MISC1_TOG_LVDSCLK1_IBEN_SHIFT        (12U)
#define PMU_MISC1_TOG_PFD_480_AUTOGATE_EN_MASK   (0x10000U)
#define PMU_MISC1_TOG_PFD_480_AUTOGATE_EN_SHIFT  (16U)
#define PMU_MISC1_TOG_PFD_528_AUTOGATE_EN_MASK   (0x20000U)
#define PMU_MISC1_TOG_PFD_528_AUTOGATE_EN_SHIFT  (17U)
#define PMU_MISC1_TOG_IRQ_TEMPPANIC_MASK         (0x8000000U)
#define PMU_MISC1_TOG_IRQ_TEMPPANIC_SHIFT        (27U)
#define PMU_MISC1_TOG_IRQ_TEMPLOW_MASK           (0x10000000U)
#define PMU_MISC1_TOG_IRQ_TEMPLOW_SHIFT          (28U)
#define PMU_MISC1_TOG_IRQ_TEMPHIGH_MASK          (0x20000000U)
#define PMU_MISC1_TOG_IRQ_TEMPHIGH_SHIFT         (29U)
#define PMU_MISC1_TOG_IRQ_ANA_BO_MASK            (0x40000000U)
#define PMU_MISC1_TOG_IRQ_ANA_BO_SHIFT           (30U)
#define PMU_MISC1_TOG_IRQ_DIG_BO_MASK            (0x80000000U)
#define PMU_MISC1_TOG_IRQ_DIG_BO_SHIFT           (31U)

/*! @name MISC2 - Miscellaneous Control Register */
#define PMU_MISC2_REG0_BO_OFFSET_MASK            (0x7U)
#define PMU_MISC2_REG0_BO_OFFSET_SHIFT           (0U)
#define PMU_MISC2_REG0_BO_OFFSET(x)              (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_REG0_BO_OFFSET_SHIFT)) & PMU_MISC2_REG0_BO_OFFSET_MASK)
#define PMU_MISC2_REG0_BO_STATUS_MASK            (0x8U)
#define PMU_MISC2_REG0_BO_STATUS_SHIFT           (3U)
#define PMU_MISC2_REG0_ENABLE_BO_MASK            (0x20U)
#define PMU_MISC2_REG0_ENABLE_BO_SHIFT           (5U)
#define PMU_MISC2_PLL3_disable_MASK              (0x80U)
#define PMU_MISC2_PLL3_disable_SHIFT             (7U)
#define PMU_MISC2_AUDIO_DIV_LSB_MASK             (0x8000U)
#define PMU_MISC2_AUDIO_DIV_LSB_SHIFT            (15U)
#define PMU_MISC2_REG2_BO_OFFSET_MASK            (0x70000U)
#define PMU_MISC2_REG2_BO_OFFSET_SHIFT           (16U)
#define PMU_MISC2_REG2_BO_OFFSET(x)              (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_REG2_BO_OFFSET_SHIFT)) & PMU_MISC2_REG2_BO_OFFSET_MASK)
#define PMU_MISC2_REG2_BO_STATUS_MASK            (0x80000U)
#define PMU_MISC2_REG2_BO_STATUS_SHIFT           (19U)
#define PMU_MISC2_REG2_ENABLE_BO_MASK            (0x200000U)
#define PMU_MISC2_REG2_ENABLE_BO_SHIFT           (21U)
#define PMU_MISC2_REG2_OK_MASK                   (0x400000U)
#define PMU_MISC2_REG2_OK_SHIFT                  (22U)
#define PMU_MISC2_AUDIO_DIV_MSB_MASK             (0x800000U)
#define PMU_MISC2_AUDIO_DIV_MSB_SHIFT            (23U)
#define PMU_MISC2_REG0_STEP_TIME_MASK            (0x3000000U)
#define PMU_MISC2_REG0_STEP_TIME_SHIFT           (24U)
#define PMU_MISC2_REG0_STEP_TIME(x)              (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_REG0_STEP_TIME_SHIFT)) & PMU_MISC2_REG0_STEP_TIME_MASK)
#define PMU_MISC2_REG2_STEP_TIME_MASK            (0x30000000U)
#define PMU_MISC2_REG2_STEP_TIME_SHIFT           (28U)
#define PMU_MISC2_REG2_STEP_TIME(x)              (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_REG2_STEP_TIME_SHIFT)) & PMU_MISC2_REG2_STEP_TIME_MASK)
#define PMU_MISC2_VIDEO_DIV_MASK                 (0xC0000000U)
#define PMU_MISC2_VIDEO_DIV_SHIFT                (30U)
#define PMU_MISC2_VIDEO_DIV(x)                   (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_VIDEO_DIV_SHIFT)) & PMU_MISC2_VIDEO_DIV_MASK)

/*! @name MISC2_SET - Miscellaneous Control Register */
#define PMU_MISC2_SET_REG0_BO_OFFSET_MASK        (0x7U)
#define PMU_MISC2_SET_REG0_BO_OFFSET_SHIFT       (0U)
#define PMU_MISC2_SET_REG0_BO_OFFSET(x)          (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_SET_REG0_BO_OFFSET_SHIFT)) & PMU_MISC2_SET_REG0_BO_OFFSET_MASK)
#define PMU_MISC2_SET_REG0_BO_STATUS_MASK        (0x8U)
#define PMU_MISC2_SET_REG0_BO_STATUS_SHIFT       (3U)
#define PMU_MISC2_SET_REG0_ENABLE_BO_MASK        (0x20U)
#define PMU_MISC2_SET_REG0_ENABLE_BO_SHIFT       (5U)
#define PMU_MISC2_SET_PLL3_disable_MASK          (0x80U)
#define PMU_MISC2_SET_PLL3_disable_SHIFT         (7U)
#define PMU_MISC2_SET_AUDIO_DIV_LSB_MASK         (0x8000U)
#define PMU_MISC2_SET_AUDIO_DIV_LSB_SHIFT        (15U)
#define PMU_MISC2_SET_REG2_BO_OFFSET_MASK        (0x70000U)
#define PMU_MISC2_SET_REG2_BO_OFFSET_SHIFT       (16U)
#define PMU_MISC2_SET_REG2_BO_OFFSET(x)          (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_SET_REG2_BO_OFFSET_SHIFT)) & PMU_MISC2_SET_REG2_BO_OFFSET_MASK)
#define PMU_MISC2_SET_REG2_BO_STATUS_MASK        (0x80000U)
#define PMU_MISC2_SET_REG2_BO_STATUS_SHIFT       (19U)
#define PMU_MISC2_SET_REG2_ENABLE_BO_MASK        (0x200000U)
#define PMU_MISC2_SET_REG2_ENABLE_BO_SHIFT       (21U)
#define PMU_MISC2_SET_REG2_OK_MASK               (0x400000U)
#define PMU_MISC2_SET_REG2_OK_SHIFT              (22U)
#define PMU_MISC2_SET_AUDIO_DIV_MSB_MASK         (0x800000U)
#define PMU_MISC2_SET_AUDIO_DIV_MSB_SHIFT        (23U)
#define PMU_MISC2_SET_REG0_STEP_TIME_MASK        (0x3000000U)
#define PMU_MISC2_SET_REG0_STEP_TIME_SHIFT       (24U)
#define PMU_MISC2_SET_REG0_STEP_TIME(x)          (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_SET_REG0_STEP_TIME_SHIFT)) & PMU_MISC2_SET_REG0_STEP_TIME_MASK)
#define PMU_MISC2_SET_REG2_STEP_TIME_MASK        (0x30000000U)
#define PMU_MISC2_SET_REG2_STEP_TIME_SHIFT       (28U)
#define PMU_MISC2_SET_REG2_STEP_TIME(x)          (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_SET_REG2_STEP_TIME_SHIFT)) & PMU_MISC2_SET_REG2_STEP_TIME_MASK)
#define PMU_MISC2_SET_VIDEO_DIV_MASK             (0xC0000000U)
#define PMU_MISC2_SET_VIDEO_DIV_SHIFT            (30U)
#define PMU_MISC2_SET_VIDEO_DIV(x)               (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_SET_VIDEO_DIV_SHIFT)) & PMU_MISC2_SET_VIDEO_DIV_MASK)

/*! @name MISC2_CLR - Miscellaneous Control Register */
#define PMU_MISC2_CLR_REG0_BO_OFFSET_MASK        (0x7U)
#define PMU_MISC2_CLR_REG0_BO_OFFSET_SHIFT       (0U)
#define PMU_MISC2_CLR_REG0_BO_OFFSET(x)          (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_CLR_REG0_BO_OFFSET_SHIFT)) & PMU_MISC2_CLR_REG0_BO_OFFSET_MASK)
#define PMU_MISC2_CLR_REG0_BO_STATUS_MASK        (0x8U)
#define PMU_MISC2_CLR_REG0_BO_STATUS_SHIFT       (3U)
#define PMU_MISC2_CLR_REG0_ENABLE_BO_MASK        (0x20U)
#define PMU_MISC2_CLR_REG0_ENABLE_BO_SHIFT       (5U)
#define PMU_MISC2_CLR_PLL3_disable_MASK          (0x80U)
#define PMU_MISC2_CLR_PLL3_disable_SHIFT         (7U)
#define PMU_MISC2_CLR_AUDIO_DIV_LSB_MASK         (0x8000U)
#define PMU_MISC2_CLR_AUDIO_DIV_LSB_SHIFT        (15U)
#define PMU_MISC2_CLR_REG2_BO_OFFSET_MASK        (0x70000U)
#define PMU_MISC2_CLR_REG2_BO_OFFSET_SHIFT       (16U)
#define PMU_MISC2_CLR_REG2_BO_OFFSET(x)          (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_CLR_REG2_BO_OFFSET_SHIFT)) & PMU_MISC2_CLR_REG2_BO_OFFSET_MASK)
#define PMU_MISC2_CLR_REG2_BO_STATUS_MASK        (0x80000U)
#define PMU_MISC2_CLR_REG2_BO_STATUS_SHIFT       (19U)
#define PMU_MISC2_CLR_REG2_ENABLE_BO_MASK        (0x200000U)
#define PMU_MISC2_CLR_REG2_ENABLE_BO_SHIFT       (21U)
#define PMU_MISC2_CLR_REG2_OK_MASK               (0x400000U)
#define PMU_MISC2_CLR_REG2_OK_SHIFT              (22U)
#define PMU_MISC2_CLR_AUDIO_DIV_MSB_MASK         (0x800000U)
#define PMU_MISC2_CLR_AUDIO_DIV_MSB_SHIFT        (23U)
#define PMU_MISC2_CLR_REG0_STEP_TIME_MASK        (0x3000000U)
#define PMU_MISC2_CLR_REG0_STEP_TIME_SHIFT       (24U)
#define PMU_MISC2_CLR_REG0_STEP_TIME(x)          (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_CLR_REG0_STEP_TIME_SHIFT)) & PMU_MISC2_CLR_REG0_STEP_TIME_MASK)
#define PMU_MISC2_CLR_REG2_STEP_TIME_MASK        (0x30000000U)
#define PMU_MISC2_CLR_REG2_STEP_TIME_SHIFT       (28U)
#define PMU_MISC2_CLR_REG2_STEP_TIME(x)          (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_CLR_REG2_STEP_TIME_SHIFT)) & PMU_MISC2_CLR_REG2_STEP_TIME_MASK)
#define PMU_MISC2_CLR_VIDEO_DIV_MASK             (0xC0000000U)
#define PMU_MISC2_CLR_VIDEO_DIV_SHIFT            (30U)
#define PMU_MISC2_CLR_VIDEO_DIV(x)               (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_CLR_VIDEO_DIV_SHIFT)) & PMU_MISC2_CLR_VIDEO_DIV_MASK)

/*! @name MISC2_TOG - Miscellaneous Control Register */
#define PMU_MISC2_TOG_REG0_BO_OFFSET_MASK        (0x7U)
#define PMU_MISC2_TOG_REG0_BO_OFFSET_SHIFT       (0U)
#define PMU_MISC2_TOG_REG0_BO_OFFSET(x)          (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_TOG_REG0_BO_OFFSET_SHIFT)) & PMU_MISC2_TOG_REG0_BO_OFFSET_MASK)
#define PMU_MISC2_TOG_REG0_BO_STATUS_MASK        (0x8U)
#define PMU_MISC2_TOG_REG0_BO_STATUS_SHIFT       (3U)
#define PMU_MISC2_TOG_REG0_ENABLE_BO_MASK        (0x20U)
#define PMU_MISC2_TOG_REG0_ENABLE_BO_SHIFT       (5U)
#define PMU_MISC2_TOG_PLL3_disable_MASK          (0x80U)
#define PMU_MISC2_TOG_PLL3_disable_SHIFT         (7U)
#define PMU_MISC2_TOG_AUDIO_DIV_LSB_MASK         (0x8000U)
#define PMU_MISC2_TOG_AUDIO_DIV_LSB_SHIFT        (15U)
#define PMU_MISC2_TOG_REG2_BO_OFFSET_MASK        (0x70000U)
#define PMU_MISC2_TOG_REG2_BO_OFFSET_SHIFT       (16U)
#define PMU_MISC2_TOG_REG2_BO_OFFSET(x)          (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_TOG_REG2_BO_OFFSET_SHIFT)) & PMU_MISC2_TOG_REG2_BO_OFFSET_MASK)
#define PMU_MISC2_TOG_REG2_BO_STATUS_MASK        (0x80000U)
#define PMU_MISC2_TOG_REG2_BO_STATUS_SHIFT       (19U)
#define PMU_MISC2_TOG_REG2_ENABLE_BO_MASK        (0x200000U)
#define PMU_MISC2_TOG_REG2_ENABLE_BO_SHIFT       (21U)
#define PMU_MISC2_TOG_REG2_OK_MASK               (0x400000U)
#define PMU_MISC2_TOG_REG2_OK_SHIFT              (22U)
#define PMU_MISC2_TOG_AUDIO_DIV_MSB_MASK         (0x800000U)
#define PMU_MISC2_TOG_AUDIO_DIV_MSB_SHIFT        (23U)
#define PMU_MISC2_TOG_REG0_STEP_TIME_MASK        (0x3000000U)
#define PMU_MISC2_TOG_REG0_STEP_TIME_SHIFT       (24U)
#define PMU_MISC2_TOG_REG0_STEP_TIME(x)          (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_TOG_REG0_STEP_TIME_SHIFT)) & PMU_MISC2_TOG_REG0_STEP_TIME_MASK)
#define PMU_MISC2_TOG_REG2_STEP_TIME_MASK        (0x30000000U)
#define PMU_MISC2_TOG_REG2_STEP_TIME_SHIFT       (28U)
#define PMU_MISC2_TOG_REG2_STEP_TIME(x)          (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_TOG_REG2_STEP_TIME_SHIFT)) & PMU_MISC2_TOG_REG2_STEP_TIME_MASK)
#define PMU_MISC2_TOG_VIDEO_DIV_MASK             (0xC0000000U)
#define PMU_MISC2_TOG_VIDEO_DIV_SHIFT            (30U)
#define PMU_MISC2_TOG_VIDEO_DIV(x)               (((uint32_t)(((uint32_t)(x)) << PMU_MISC2_TOG_VIDEO_DIV_SHIFT)) & PMU_MISC2_TOG_VIDEO_DIV_MASK)


/*!
 * @}
 */ /* end of group PMU_Register_Masks */


/* PMU - Peripheral instance base addresses */
/** Peripheral PMU base pointer */
#define PMU_BASE_PTR                             ((PMU_MemMapPtr)0x400D8000u)
/** Array initializer of PMU peripheral base pointers */
#define PMU_BASE_PTRS                            { PMU_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- PMU - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PMU_Register_Accessor_Macros PMU - Register accessor macros
 * @{
 */


/* PMU - Register instance definitions */
/* PMU */
#define PMU_REG_1P1                              PMU_REG_1P1_REG(PMU_BASE_PTR)
#define PMU_REG_1P1_SET                          PMU_REG_1P1_SET_REG(PMU_BASE_PTR)
#define PMU_REG_1P1_CLR                          PMU_REG_1P1_CLR_REG(PMU_BASE_PTR)
#define PMU_REG_1P1_TOG                          PMU_REG_1P1_TOG_REG(PMU_BASE_PTR)
#define PMU_REG_3P0                              PMU_REG_3P0_REG(PMU_BASE_PTR)
#define PMU_REG_3P0_SET                          PMU_REG_3P0_SET_REG(PMU_BASE_PTR)
#define PMU_REG_3P0_CLR                          PMU_REG_3P0_CLR_REG(PMU_BASE_PTR)
#define PMU_REG_3P0_TOG                          PMU_REG_3P0_TOG_REG(PMU_BASE_PTR)
#define PMU_REG_2P5                              PMU_REG_2P5_REG(PMU_BASE_PTR)
#define PMU_REG_2P5_SET                          PMU_REG_2P5_SET_REG(PMU_BASE_PTR)
#define PMU_REG_2P5_CLR                          PMU_REG_2P5_CLR_REG(PMU_BASE_PTR)
#define PMU_REG_2P5_TOG                          PMU_REG_2P5_TOG_REG(PMU_BASE_PTR)
#define PMU_REG_CORE                             PMU_REG_CORE_REG(PMU_BASE_PTR)
#define PMU_REG_CORE_SET                         PMU_REG_CORE_SET_REG(PMU_BASE_PTR)
#define PMU_REG_CORE_CLR                         PMU_REG_CORE_CLR_REG(PMU_BASE_PTR)
#define PMU_REG_CORE_TOG                         PMU_REG_CORE_TOG_REG(PMU_BASE_PTR)
#define PMU_MISC0                                PMU_MISC0_REG(PMU_BASE_PTR)
#define PMU_MISC0_SET                            PMU_MISC0_SET_REG(PMU_BASE_PTR)
#define PMU_MISC0_CLR                            PMU_MISC0_CLR_REG(PMU_BASE_PTR)
#define PMU_MISC0_TOG                            PMU_MISC0_TOG_REG(PMU_BASE_PTR)
#define PMU_MISC1                                PMU_MISC1_REG(PMU_BASE_PTR)
#define PMU_MISC1_SET                            PMU_MISC1_SET_REG(PMU_BASE_PTR)
#define PMU_MISC1_CLR                            PMU_MISC1_CLR_REG(PMU_BASE_PTR)
#define PMU_MISC1_TOG                            PMU_MISC1_TOG_REG(PMU_BASE_PTR)
#define PMU_MISC2                                PMU_MISC2_REG(PMU_BASE_PTR)
#define PMU_MISC2_SET                            PMU_MISC2_SET_REG(PMU_BASE_PTR)
#define PMU_MISC2_CLR                            PMU_MISC2_CLR_REG(PMU_BASE_PTR)
#define PMU_MISC2_TOG                            PMU_MISC2_TOG_REG(PMU_BASE_PTR)

/*!
 * @}
 */ /* end of group PMU_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group PMU_Peripheral */


/* ----------------------------------------------------------------------------
   -- PWM
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PWM_Peripheral PWM
 * @{
 */

/** PWM - Peripheral register structure */
typedef struct PWM_MemMap {
  struct {                                         /* offset: 0x0, array step: 0x60 */
    uint16_t CNT;                                    /**< Counter Register, array offset: 0x0, array step: 0x60 */
    uint16_t INIT;                                   /**< Initial Count Register, array offset: 0x2, array step: 0x60 */
    uint16_t CTRL2;                                  /**< Control 2 Register, array offset: 0x4, array step: 0x60 */
    uint16_t CTRL;                                   /**< Control Register, array offset: 0x6, array step: 0x60 */
    uint8_t RESERVED_0[2];
    uint16_t VAL0;                                   /**< Value Register 0, array offset: 0xA, array step: 0x60 */
    uint16_t FRACVAL1;                               /**< Fractional Value Register 1, array offset: 0xC, array step: 0x60 */
    uint16_t VAL1;                                   /**< Value Register 1, array offset: 0xE, array step: 0x60 */
    uint16_t FRACVAL2;                               /**< Fractional Value Register 2, array offset: 0x10, array step: 0x60 */
    uint16_t VAL2;                                   /**< Value Register 2, array offset: 0x12, array step: 0x60 */
    uint16_t FRACVAL3;                               /**< Fractional Value Register 3, array offset: 0x14, array step: 0x60 */
    uint16_t VAL3;                                   /**< Value Register 3, array offset: 0x16, array step: 0x60 */
    uint16_t FRACVAL4;                               /**< Fractional Value Register 4, array offset: 0x18, array step: 0x60 */
    uint16_t VAL4;                                   /**< Value Register 4, array offset: 0x1A, array step: 0x60 */
    uint16_t FRACVAL5;                               /**< Fractional Value Register 5, array offset: 0x1C, array step: 0x60 */
    uint16_t VAL5;                                   /**< Value Register 5, array offset: 0x1E, array step: 0x60 */
    uint16_t FRCTRL;                                 /**< Fractional Control Register, array offset: 0x20, array step: 0x60 */
    uint16_t OCTRL;                                  /**< Output Control Register, array offset: 0x22, array step: 0x60 */
    uint16_t STS;                                    /**< Status Register, array offset: 0x24, array step: 0x60 */
    uint16_t INTEN;                                  /**< Interrupt Enable Register, array offset: 0x26, array step: 0x60 */
    uint16_t DMAEN;                                  /**< DMA Enable Register, array offset: 0x28, array step: 0x60 */
    uint16_t TCTRL;                                  /**< Output Trigger Control Register, array offset: 0x2A, array step: 0x60 */
    uint16_t DISMAP[2];                              /**< Fault Disable Mapping Register 0..Fault Disable Mapping Register 1, array offset: 0x2C, array step: index*0x60, index2*0x2 */
    uint16_t DTCNT0;                                 /**< Deadtime Count Register 0, array offset: 0x30, array step: 0x60 */
    uint16_t DTCNT1;                                 /**< Deadtime Count Register 1, array offset: 0x32, array step: 0x60 */
    uint16_t CAPTCTRLA;                              /**< Capture Control A Register, array offset: 0x34, array step: 0x60 */
    uint16_t CAPTCOMPA;                              /**< Capture Compare A Register, array offset: 0x36, array step: 0x60 */
    uint16_t CAPTCTRLB;                              /**< Capture Control B Register, array offset: 0x38, array step: 0x60 */
    uint16_t CAPTCOMPB;                              /**< Capture Compare B Register, array offset: 0x3A, array step: 0x60 */
    uint16_t CAPTCTRLX;                              /**< Capture Control X Register, array offset: 0x3C, array step: 0x60 */
    uint16_t CAPTCOMPX;                              /**< Capture Compare X Register, array offset: 0x3E, array step: 0x60 */
    uint16_t CVAL0;                                  /**< Capture Value 0 Register, array offset: 0x40, array step: 0x60 */
    uint16_t CVAL0CYC;                               /**< Capture Value 0 Cycle Register, array offset: 0x42, array step: 0x60 */
    uint16_t CVAL1;                                  /**< Capture Value 1 Register, array offset: 0x44, array step: 0x60 */
    uint16_t CVAL1CYC;                               /**< Capture Value 1 Cycle Register, array offset: 0x46, array step: 0x60 */
    uint16_t CVAL2;                                  /**< Capture Value 2 Register, array offset: 0x48, array step: 0x60 */
    uint16_t CVAL2CYC;                               /**< Capture Value 2 Cycle Register, array offset: 0x4A, array step: 0x60 */
    uint16_t CVAL3;                                  /**< Capture Value 3 Register, array offset: 0x4C, array step: 0x60 */
    uint16_t CVAL3CYC;                               /**< Capture Value 3 Cycle Register, array offset: 0x4E, array step: 0x60 */
    uint16_t CVAL4;                                  /**< Capture Value 4 Register, array offset: 0x50, array step: 0x60 */
    uint16_t CVAL4CYC;                               /**< Capture Value 4 Cycle Register, array offset: 0x52, array step: 0x60 */
    uint16_t CVAL5;                                  /**< Capture Value 5 Register, array offset: 0x54, array step: 0x60 */
    uint16_t CVAL5CYC;                               /**< Capture Value 5 Cycle Register, array offset: 0x56, array step: 0x60 */
    uint8_t RESERVED_1[8];
  } SM[4];
  uint16_t OUTEN;                                  /**< Output Enable Register, offset: 0x180 */
  uint16_t MASK;                                   /**< Mask Register, offset: 0x182 */
  uint16_t SWCOUT;                                 /**< Software Controlled Output Register, offset: 0x184 */
  uint16_t DTSRCSEL;                               /**< PWM Source Select Register, offset: 0x186 */
  uint16_t MCTRL;                                  /**< Master Control Register, offset: 0x188 */
  uint16_t MCTRL2;                                 /**< Master Control 2 Register, offset: 0x18A */
  uint16_t FCTRL;                                  /**< Fault Control Register, offset: 0x18C */
  uint16_t FSTS;                                   /**< Fault Status Register, offset: 0x18E */
  uint16_t FFILT;                                  /**< Fault Filter Register, offset: 0x190 */
  uint16_t FTST;                                   /**< Fault Test Register, offset: 0x192 */
  uint16_t FCTRL2;                                 /**< Fault Control 2 Register, offset: 0x194 */
} volatile *PWM_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- PWM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PWM_Register_Accessor_Macros PWM - Register accessor macros
 * @{
 */


/* PWM - Register accessors */
#define PWM_CNT_REG(base,index)                  ((base)->SM[index].CNT)
#define PWM_INIT_REG(base,index)                 ((base)->SM[index].INIT)
#define PWM_CTRL2_REG(base,index)                ((base)->SM[index].CTRL2)
#define PWM_CTRL_REG(base,index)                 ((base)->SM[index].CTRL)
#define PWM_VAL0_REG(base,index)                 ((base)->SM[index].VAL0)
#define PWM_FRACVAL1_REG(base,index)             ((base)->SM[index].FRACVAL1)
#define PWM_VAL1_REG(base,index)                 ((base)->SM[index].VAL1)
#define PWM_FRACVAL2_REG(base,index)             ((base)->SM[index].FRACVAL2)
#define PWM_VAL2_REG(base,index)                 ((base)->SM[index].VAL2)
#define PWM_FRACVAL3_REG(base,index)             ((base)->SM[index].FRACVAL3)
#define PWM_VAL3_REG(base,index)                 ((base)->SM[index].VAL3)
#define PWM_FRACVAL4_REG(base,index)             ((base)->SM[index].FRACVAL4)
#define PWM_VAL4_REG(base,index)                 ((base)->SM[index].VAL4)
#define PWM_FRACVAL5_REG(base,index)             ((base)->SM[index].FRACVAL5)
#define PWM_VAL5_REG(base,index)                 ((base)->SM[index].VAL5)
#define PWM_FRCTRL_REG(base,index)               ((base)->SM[index].FRCTRL)
#define PWM_OCTRL_REG(base,index)                ((base)->SM[index].OCTRL)
#define PWM_STS_REG(base,index)                  ((base)->SM[index].STS)
#define PWM_INTEN_REG(base,index)                ((base)->SM[index].INTEN)
#define PWM_DMAEN_REG(base,index)                ((base)->SM[index].DMAEN)
#define PWM_TCTRL_REG(base,index)                ((base)->SM[index].TCTRL)
#define PWM_DISMAP_REG(base,index,index2)        ((base)->SM[index].DISMAP[index2])
#define PWM_DTCNT0_REG(base,index)               ((base)->SM[index].DTCNT0)
#define PWM_DTCNT1_REG(base,index)               ((base)->SM[index].DTCNT1)
#define PWM_CAPTCTRLA_REG(base,index)            ((base)->SM[index].CAPTCTRLA)
#define PWM_CAPTCOMPA_REG(base,index)            ((base)->SM[index].CAPTCOMPA)
#define PWM_CAPTCTRLB_REG(base,index)            ((base)->SM[index].CAPTCTRLB)
#define PWM_CAPTCOMPB_REG(base,index)            ((base)->SM[index].CAPTCOMPB)
#define PWM_CAPTCTRLX_REG(base,index)            ((base)->SM[index].CAPTCTRLX)
#define PWM_CAPTCOMPX_REG(base,index)            ((base)->SM[index].CAPTCOMPX)
#define PWM_CVAL0_REG(base,index)                ((base)->SM[index].CVAL0)
#define PWM_CVAL0CYC_REG(base,index)             ((base)->SM[index].CVAL0CYC)
#define PWM_CVAL1_REG(base,index)                ((base)->SM[index].CVAL1)
#define PWM_CVAL1CYC_REG(base,index)             ((base)->SM[index].CVAL1CYC)
#define PWM_CVAL2_REG(base,index)                ((base)->SM[index].CVAL2)
#define PWM_CVAL2CYC_REG(base,index)             ((base)->SM[index].CVAL2CYC)
#define PWM_CVAL3_REG(base,index)                ((base)->SM[index].CVAL3)
#define PWM_CVAL3CYC_REG(base,index)             ((base)->SM[index].CVAL3CYC)
#define PWM_CVAL4_REG(base,index)                ((base)->SM[index].CVAL4)
#define PWM_CVAL4CYC_REG(base,index)             ((base)->SM[index].CVAL4CYC)
#define PWM_CVAL5_REG(base,index)                ((base)->SM[index].CVAL5)
#define PWM_CVAL5CYC_REG(base,index)             ((base)->SM[index].CVAL5CYC)
#define PWM_OUTEN_REG(base)                      ((base)->OUTEN)
#define PWM_MASK_REG(base)                       ((base)->MASK)
#define PWM_SWCOUT_REG(base)                     ((base)->SWCOUT)
#define PWM_DTSRCSEL_REG(base)                   ((base)->DTSRCSEL)
#define PWM_MCTRL_REG(base)                      ((base)->MCTRL)
#define PWM_MCTRL2_REG(base)                     ((base)->MCTRL2)
#define PWM_FCTRL_REG(base)                      ((base)->FCTRL)
#define PWM_FSTS_REG(base)                       ((base)->FSTS)
#define PWM_FFILT_REG(base)                      ((base)->FFILT)
#define PWM_FTST_REG(base)                       ((base)->FTST)
#define PWM_FCTRL2_REG(base)                     ((base)->FCTRL2)

/*!
 * @}
 */ /* end of group PWM_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- PWM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PWM_Register_Masks PWM Register Masks
 * @{
 */

/*! @name CNT - Counter Register */
#define PWM_CNT_CNT_MASK                         (0xFFFFU)
#define PWM_CNT_CNT_SHIFT                        (0U)
#define PWM_CNT_CNT(x)                           (((uint16_t)(((uint16_t)(x)) << PWM_CNT_CNT_SHIFT)) & PWM_CNT_CNT_MASK)

/* The count of PWM_CNT */
#define PWM_CNT_COUNT                            (4U)

/*! @name INIT - Initial Count Register */
#define PWM_INIT_INIT_MASK                       (0xFFFFU)
#define PWM_INIT_INIT_SHIFT                      (0U)
#define PWM_INIT_INIT(x)                         (((uint16_t)(((uint16_t)(x)) << PWM_INIT_INIT_SHIFT)) & PWM_INIT_INIT_MASK)

/* The count of PWM_INIT */
#define PWM_INIT_COUNT                           (4U)

/*! @name CTRL2 - Control 2 Register */
#define PWM_CTRL2_CLK_SEL_MASK                   (0x3U)
#define PWM_CTRL2_CLK_SEL_SHIFT                  (0U)
#define PWM_CTRL2_CLK_SEL(x)                     (((uint16_t)(((uint16_t)(x)) << PWM_CTRL2_CLK_SEL_SHIFT)) & PWM_CTRL2_CLK_SEL_MASK)
#define PWM_CTRL2_RELOAD_SEL_MASK                (0x4U)
#define PWM_CTRL2_RELOAD_SEL_SHIFT               (2U)
#define PWM_CTRL2_FORCE_SEL_MASK                 (0x38U)
#define PWM_CTRL2_FORCE_SEL_SHIFT                (3U)
#define PWM_CTRL2_FORCE_SEL(x)                   (((uint16_t)(((uint16_t)(x)) << PWM_CTRL2_FORCE_SEL_SHIFT)) & PWM_CTRL2_FORCE_SEL_MASK)
#define PWM_CTRL2_FORCE_MASK                     (0x40U)
#define PWM_CTRL2_FORCE_SHIFT                    (6U)
#define PWM_CTRL2_FRCEN_MASK                     (0x80U)
#define PWM_CTRL2_FRCEN_SHIFT                    (7U)
#define PWM_CTRL2_INIT_SEL_MASK                  (0x300U)
#define PWM_CTRL2_INIT_SEL_SHIFT                 (8U)
#define PWM_CTRL2_INIT_SEL(x)                    (((uint16_t)(((uint16_t)(x)) << PWM_CTRL2_INIT_SEL_SHIFT)) & PWM_CTRL2_INIT_SEL_MASK)
#define PWM_CTRL2_PWMX_INIT_MASK                 (0x400U)
#define PWM_CTRL2_PWMX_INIT_SHIFT                (10U)
#define PWM_CTRL2_PWM45_INIT_MASK                (0x800U)
#define PWM_CTRL2_PWM45_INIT_SHIFT               (11U)
#define PWM_CTRL2_PWM23_INIT_MASK                (0x1000U)
#define PWM_CTRL2_PWM23_INIT_SHIFT               (12U)
#define PWM_CTRL2_INDEP_MASK                     (0x2000U)
#define PWM_CTRL2_INDEP_SHIFT                    (13U)
#define PWM_CTRL2_WAITEN_MASK                    (0x4000U)
#define PWM_CTRL2_WAITEN_SHIFT                   (14U)
#define PWM_CTRL2_DBGEN_MASK                     (0x8000U)
#define PWM_CTRL2_DBGEN_SHIFT                    (15U)

/* The count of PWM_CTRL2 */
#define PWM_CTRL2_COUNT                          (4U)

/*! @name CTRL - Control Register */
#define PWM_CTRL_DBLEN_MASK                      (0x1U)
#define PWM_CTRL_DBLEN_SHIFT                     (0U)
#define PWM_CTRL_DBLX_MASK                       (0x2U)
#define PWM_CTRL_DBLX_SHIFT                      (1U)
#define PWM_CTRL_LDMOD_MASK                      (0x4U)
#define PWM_CTRL_LDMOD_SHIFT                     (2U)
#define PWM_CTRL_SPLIT_MASK                      (0x8U)
#define PWM_CTRL_SPLIT_SHIFT                     (3U)
#define PWM_CTRL_PRSC_MASK                       (0x70U)
#define PWM_CTRL_PRSC_SHIFT                      (4U)
#define PWM_CTRL_PRSC(x)                         (((uint16_t)(((uint16_t)(x)) << PWM_CTRL_PRSC_SHIFT)) & PWM_CTRL_PRSC_MASK)
#define PWM_CTRL_COMPMODE_MASK                   (0x80U)
#define PWM_CTRL_COMPMODE_SHIFT                  (7U)
#define PWM_CTRL_DT_MASK                         (0x300U)
#define PWM_CTRL_DT_SHIFT                        (8U)
#define PWM_CTRL_DT(x)                           (((uint16_t)(((uint16_t)(x)) << PWM_CTRL_DT_SHIFT)) & PWM_CTRL_DT_MASK)
#define PWM_CTRL_FULL_MASK                       (0x400U)
#define PWM_CTRL_FULL_SHIFT                      (10U)
#define PWM_CTRL_HALF_MASK                       (0x800U)
#define PWM_CTRL_HALF_SHIFT                      (11U)
#define PWM_CTRL_LDFQ_MASK                       (0xF000U)
#define PWM_CTRL_LDFQ_SHIFT                      (12U)
#define PWM_CTRL_LDFQ(x)                         (((uint16_t)(((uint16_t)(x)) << PWM_CTRL_LDFQ_SHIFT)) & PWM_CTRL_LDFQ_MASK)

/* The count of PWM_CTRL */
#define PWM_CTRL_COUNT                           (4U)

/*! @name VAL0 - Value Register 0 */
#define PWM_VAL0_VAL0_MASK                       (0xFFFFU)
#define PWM_VAL0_VAL0_SHIFT                      (0U)
#define PWM_VAL0_VAL0(x)                         (((uint16_t)(((uint16_t)(x)) << PWM_VAL0_VAL0_SHIFT)) & PWM_VAL0_VAL0_MASK)

/* The count of PWM_VAL0 */
#define PWM_VAL0_COUNT                           (4U)

/*! @name FRACVAL1 - Fractional Value Register 1 */
#define PWM_FRACVAL1_FRACVAL1_MASK               (0xF800U)
#define PWM_FRACVAL1_FRACVAL1_SHIFT              (11U)
#define PWM_FRACVAL1_FRACVAL1(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_FRACVAL1_FRACVAL1_SHIFT)) & PWM_FRACVAL1_FRACVAL1_MASK)

/* The count of PWM_FRACVAL1 */
#define PWM_FRACVAL1_COUNT                       (4U)

/*! @name VAL1 - Value Register 1 */
#define PWM_VAL1_VAL1_MASK                       (0xFFFFU)
#define PWM_VAL1_VAL1_SHIFT                      (0U)
#define PWM_VAL1_VAL1(x)                         (((uint16_t)(((uint16_t)(x)) << PWM_VAL1_VAL1_SHIFT)) & PWM_VAL1_VAL1_MASK)

/* The count of PWM_VAL1 */
#define PWM_VAL1_COUNT                           (4U)

/*! @name FRACVAL2 - Fractional Value Register 2 */
#define PWM_FRACVAL2_FRACVAL2_MASK               (0xF800U)
#define PWM_FRACVAL2_FRACVAL2_SHIFT              (11U)
#define PWM_FRACVAL2_FRACVAL2(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_FRACVAL2_FRACVAL2_SHIFT)) & PWM_FRACVAL2_FRACVAL2_MASK)

/* The count of PWM_FRACVAL2 */
#define PWM_FRACVAL2_COUNT                       (4U)

/*! @name VAL2 - Value Register 2 */
#define PWM_VAL2_VAL2_MASK                       (0xFFFFU)
#define PWM_VAL2_VAL2_SHIFT                      (0U)
#define PWM_VAL2_VAL2(x)                         (((uint16_t)(((uint16_t)(x)) << PWM_VAL2_VAL2_SHIFT)) & PWM_VAL2_VAL2_MASK)

/* The count of PWM_VAL2 */
#define PWM_VAL2_COUNT                           (4U)

/*! @name FRACVAL3 - Fractional Value Register 3 */
#define PWM_FRACVAL3_FRACVAL3_MASK               (0xF800U)
#define PWM_FRACVAL3_FRACVAL3_SHIFT              (11U)
#define PWM_FRACVAL3_FRACVAL3(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_FRACVAL3_FRACVAL3_SHIFT)) & PWM_FRACVAL3_FRACVAL3_MASK)

/* The count of PWM_FRACVAL3 */
#define PWM_FRACVAL3_COUNT                       (4U)

/*! @name VAL3 - Value Register 3 */
#define PWM_VAL3_VAL3_MASK                       (0xFFFFU)
#define PWM_VAL3_VAL3_SHIFT                      (0U)
#define PWM_VAL3_VAL3(x)                         (((uint16_t)(((uint16_t)(x)) << PWM_VAL3_VAL3_SHIFT)) & PWM_VAL3_VAL3_MASK)

/* The count of PWM_VAL3 */
#define PWM_VAL3_COUNT                           (4U)

/*! @name FRACVAL4 - Fractional Value Register 4 */
#define PWM_FRACVAL4_FRACVAL4_MASK               (0xF800U)
#define PWM_FRACVAL4_FRACVAL4_SHIFT              (11U)
#define PWM_FRACVAL4_FRACVAL4(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_FRACVAL4_FRACVAL4_SHIFT)) & PWM_FRACVAL4_FRACVAL4_MASK)

/* The count of PWM_FRACVAL4 */
#define PWM_FRACVAL4_COUNT                       (4U)

/*! @name VAL4 - Value Register 4 */
#define PWM_VAL4_VAL4_MASK                       (0xFFFFU)
#define PWM_VAL4_VAL4_SHIFT                      (0U)
#define PWM_VAL4_VAL4(x)                         (((uint16_t)(((uint16_t)(x)) << PWM_VAL4_VAL4_SHIFT)) & PWM_VAL4_VAL4_MASK)

/* The count of PWM_VAL4 */
#define PWM_VAL4_COUNT                           (4U)

/*! @name FRACVAL5 - Fractional Value Register 5 */
#define PWM_FRACVAL5_FRACVAL5_MASK               (0xF800U)
#define PWM_FRACVAL5_FRACVAL5_SHIFT              (11U)
#define PWM_FRACVAL5_FRACVAL5(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_FRACVAL5_FRACVAL5_SHIFT)) & PWM_FRACVAL5_FRACVAL5_MASK)

/* The count of PWM_FRACVAL5 */
#define PWM_FRACVAL5_COUNT                       (4U)

/*! @name VAL5 - Value Register 5 */
#define PWM_VAL5_VAL5_MASK                       (0xFFFFU)
#define PWM_VAL5_VAL5_SHIFT                      (0U)
#define PWM_VAL5_VAL5(x)                         (((uint16_t)(((uint16_t)(x)) << PWM_VAL5_VAL5_SHIFT)) & PWM_VAL5_VAL5_MASK)

/* The count of PWM_VAL5 */
#define PWM_VAL5_COUNT                           (4U)

/*! @name FRCTRL - Fractional Control Register */
#define PWM_FRCTRL_FRAC1_EN_MASK                 (0x2U)
#define PWM_FRCTRL_FRAC1_EN_SHIFT                (1U)
#define PWM_FRCTRL_FRAC23_EN_MASK                (0x4U)
#define PWM_FRCTRL_FRAC23_EN_SHIFT               (2U)
#define PWM_FRCTRL_FRAC45_EN_MASK                (0x10U)
#define PWM_FRCTRL_FRAC45_EN_SHIFT               (4U)
#define PWM_FRCTRL_FRAC_PU_MASK                  (0x100U)
#define PWM_FRCTRL_FRAC_PU_SHIFT                 (8U)
#define PWM_FRCTRL_TEST_MASK                     (0x8000U)
#define PWM_FRCTRL_TEST_SHIFT                    (15U)

/* The count of PWM_FRCTRL */
#define PWM_FRCTRL_COUNT                         (4U)

/*! @name OCTRL - Output Control Register */
#define PWM_OCTRL_PWMXFS_MASK                    (0x3U)
#define PWM_OCTRL_PWMXFS_SHIFT                   (0U)
#define PWM_OCTRL_PWMXFS(x)                      (((uint16_t)(((uint16_t)(x)) << PWM_OCTRL_PWMXFS_SHIFT)) & PWM_OCTRL_PWMXFS_MASK)
#define PWM_OCTRL_PWMBFS_MASK                    (0xCU)
#define PWM_OCTRL_PWMBFS_SHIFT                   (2U)
#define PWM_OCTRL_PWMBFS(x)                      (((uint16_t)(((uint16_t)(x)) << PWM_OCTRL_PWMBFS_SHIFT)) & PWM_OCTRL_PWMBFS_MASK)
#define PWM_OCTRL_PWMAFS_MASK                    (0x30U)
#define PWM_OCTRL_PWMAFS_SHIFT                   (4U)
#define PWM_OCTRL_PWMAFS(x)                      (((uint16_t)(((uint16_t)(x)) << PWM_OCTRL_PWMAFS_SHIFT)) & PWM_OCTRL_PWMAFS_MASK)
#define PWM_OCTRL_POLX_MASK                      (0x100U)
#define PWM_OCTRL_POLX_SHIFT                     (8U)
#define PWM_OCTRL_POLB_MASK                      (0x200U)
#define PWM_OCTRL_POLB_SHIFT                     (9U)
#define PWM_OCTRL_POLA_MASK                      (0x400U)
#define PWM_OCTRL_POLA_SHIFT                     (10U)
#define PWM_OCTRL_PWMX_IN_MASK                   (0x2000U)
#define PWM_OCTRL_PWMX_IN_SHIFT                  (13U)
#define PWM_OCTRL_PWMB_IN_MASK                   (0x4000U)
#define PWM_OCTRL_PWMB_IN_SHIFT                  (14U)
#define PWM_OCTRL_PWMA_IN_MASK                   (0x8000U)
#define PWM_OCTRL_PWMA_IN_SHIFT                  (15U)

/* The count of PWM_OCTRL */
#define PWM_OCTRL_COUNT                          (4U)

/*! @name STS - Status Register */
#define PWM_STS_CMPF_MASK                        (0x3FU)
#define PWM_STS_CMPF_SHIFT                       (0U)
#define PWM_STS_CMPF(x)                          (((uint16_t)(((uint16_t)(x)) << PWM_STS_CMPF_SHIFT)) & PWM_STS_CMPF_MASK)
#define PWM_STS_CFX0_MASK                        (0x40U)
#define PWM_STS_CFX0_SHIFT                       (6U)
#define PWM_STS_CFX1_MASK                        (0x80U)
#define PWM_STS_CFX1_SHIFT                       (7U)
#define PWM_STS_CFB0_MASK                        (0x100U)
#define PWM_STS_CFB0_SHIFT                       (8U)
#define PWM_STS_CFB1_MASK                        (0x200U)
#define PWM_STS_CFB1_SHIFT                       (9U)
#define PWM_STS_CFA0_MASK                        (0x400U)
#define PWM_STS_CFA0_SHIFT                       (10U)
#define PWM_STS_CFA1_MASK                        (0x800U)
#define PWM_STS_CFA1_SHIFT                       (11U)
#define PWM_STS_RF_MASK                          (0x1000U)
#define PWM_STS_RF_SHIFT                         (12U)
#define PWM_STS_REF_MASK                         (0x2000U)
#define PWM_STS_REF_SHIFT                        (13U)
#define PWM_STS_RUF_MASK                         (0x4000U)
#define PWM_STS_RUF_SHIFT                        (14U)

/* The count of PWM_STS */
#define PWM_STS_COUNT                            (4U)

/*! @name INTEN - Interrupt Enable Register */
#define PWM_INTEN_CMPIE_MASK                     (0x3FU)
#define PWM_INTEN_CMPIE_SHIFT                    (0U)
#define PWM_INTEN_CMPIE(x)                       (((uint16_t)(((uint16_t)(x)) << PWM_INTEN_CMPIE_SHIFT)) & PWM_INTEN_CMPIE_MASK)
#define PWM_INTEN_CX0IE_MASK                     (0x40U)
#define PWM_INTEN_CX0IE_SHIFT                    (6U)
#define PWM_INTEN_CX1IE_MASK                     (0x80U)
#define PWM_INTEN_CX1IE_SHIFT                    (7U)
#define PWM_INTEN_CB0IE_MASK                     (0x100U)
#define PWM_INTEN_CB0IE_SHIFT                    (8U)
#define PWM_INTEN_CB1IE_MASK                     (0x200U)
#define PWM_INTEN_CB1IE_SHIFT                    (9U)
#define PWM_INTEN_CA0IE_MASK                     (0x400U)
#define PWM_INTEN_CA0IE_SHIFT                    (10U)
#define PWM_INTEN_CA1IE_MASK                     (0x800U)
#define PWM_INTEN_CA1IE_SHIFT                    (11U)
#define PWM_INTEN_RIE_MASK                       (0x1000U)
#define PWM_INTEN_RIE_SHIFT                      (12U)
#define PWM_INTEN_REIE_MASK                      (0x2000U)
#define PWM_INTEN_REIE_SHIFT                     (13U)

/* The count of PWM_INTEN */
#define PWM_INTEN_COUNT                          (4U)

/*! @name DMAEN - DMA Enable Register */
#define PWM_DMAEN_CX0DE_MASK                     (0x1U)
#define PWM_DMAEN_CX0DE_SHIFT                    (0U)
#define PWM_DMAEN_CX1DE_MASK                     (0x2U)
#define PWM_DMAEN_CX1DE_SHIFT                    (1U)
#define PWM_DMAEN_CB0DE_MASK                     (0x4U)
#define PWM_DMAEN_CB0DE_SHIFT                    (2U)
#define PWM_DMAEN_CB1DE_MASK                     (0x8U)
#define PWM_DMAEN_CB1DE_SHIFT                    (3U)
#define PWM_DMAEN_CA0DE_MASK                     (0x10U)
#define PWM_DMAEN_CA0DE_SHIFT                    (4U)
#define PWM_DMAEN_CA1DE_MASK                     (0x20U)
#define PWM_DMAEN_CA1DE_SHIFT                    (5U)
#define PWM_DMAEN_CAPTDE_MASK                    (0xC0U)
#define PWM_DMAEN_CAPTDE_SHIFT                   (6U)
#define PWM_DMAEN_CAPTDE(x)                      (((uint16_t)(((uint16_t)(x)) << PWM_DMAEN_CAPTDE_SHIFT)) & PWM_DMAEN_CAPTDE_MASK)
#define PWM_DMAEN_FAND_MASK                      (0x100U)
#define PWM_DMAEN_FAND_SHIFT                     (8U)
#define PWM_DMAEN_VALDE_MASK                     (0x200U)
#define PWM_DMAEN_VALDE_SHIFT                    (9U)

/* The count of PWM_DMAEN */
#define PWM_DMAEN_COUNT                          (4U)

/*! @name TCTRL - Output Trigger Control Register */
#define PWM_TCTRL_OUT_TRIG_EN_MASK               (0x3FU)
#define PWM_TCTRL_OUT_TRIG_EN_SHIFT              (0U)
#define PWM_TCTRL_OUT_TRIG_EN(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_TCTRL_OUT_TRIG_EN_SHIFT)) & PWM_TCTRL_OUT_TRIG_EN_MASK)
#define PWM_TCTRL_TRGFRQ_MASK                    (0x1000U)
#define PWM_TCTRL_TRGFRQ_SHIFT                   (12U)
#define PWM_TCTRL_PWBOT1_MASK                    (0x4000U)
#define PWM_TCTRL_PWBOT1_SHIFT                   (14U)
#define PWM_TCTRL_PWAOT0_MASK                    (0x8000U)
#define PWM_TCTRL_PWAOT0_SHIFT                   (15U)

/* The count of PWM_TCTRL */
#define PWM_TCTRL_COUNT                          (4U)

/*! @name DISMAP - Fault Disable Mapping Register 0..Fault Disable Mapping Register 1 */
#define PWM_DISMAP_DIS0A_MASK                    (0xFU)
#define PWM_DISMAP_DIS0A_SHIFT                   (0U)
#define PWM_DISMAP_DIS0A(x)                      (((uint16_t)(((uint16_t)(x)) << PWM_DISMAP_DIS0A_SHIFT)) & PWM_DISMAP_DIS0A_MASK)
#define PWM_DISMAP_DIS1A_MASK                    (0xFU)
#define PWM_DISMAP_DIS1A_SHIFT                   (0U)
#define PWM_DISMAP_DIS1A(x)                      (((uint16_t)(((uint16_t)(x)) << PWM_DISMAP_DIS1A_SHIFT)) & PWM_DISMAP_DIS1A_MASK)
#define PWM_DISMAP_DIS0B_MASK                    (0xF0U)
#define PWM_DISMAP_DIS0B_SHIFT                   (4U)
#define PWM_DISMAP_DIS0B(x)                      (((uint16_t)(((uint16_t)(x)) << PWM_DISMAP_DIS0B_SHIFT)) & PWM_DISMAP_DIS0B_MASK)
#define PWM_DISMAP_DIS1B_MASK                    (0xF0U)
#define PWM_DISMAP_DIS1B_SHIFT                   (4U)
#define PWM_DISMAP_DIS1B(x)                      (((uint16_t)(((uint16_t)(x)) << PWM_DISMAP_DIS1B_SHIFT)) & PWM_DISMAP_DIS1B_MASK)
#define PWM_DISMAP_DIS1X_MASK                    (0xF00U)
#define PWM_DISMAP_DIS1X_SHIFT                   (8U)
#define PWM_DISMAP_DIS1X(x)                      (((uint16_t)(((uint16_t)(x)) << PWM_DISMAP_DIS1X_SHIFT)) & PWM_DISMAP_DIS1X_MASK)
#define PWM_DISMAP_DIS0X_MASK                    (0xF00U)
#define PWM_DISMAP_DIS0X_SHIFT                   (8U)
#define PWM_DISMAP_DIS0X(x)                      (((uint16_t)(((uint16_t)(x)) << PWM_DISMAP_DIS0X_SHIFT)) & PWM_DISMAP_DIS0X_MASK)

/* The count of PWM_DISMAP */
#define PWM_DISMAP_COUNT                         (4U)

/* The count of PWM_DISMAP */
#define PWM_DISMAP_COUNT2                        (2U)

/*! @name DTCNT0 - Deadtime Count Register 0 */
#define PWM_DTCNT0_DTCNT0_MASK                   (0xFFFFU)
#define PWM_DTCNT0_DTCNT0_SHIFT                  (0U)
#define PWM_DTCNT0_DTCNT0(x)                     (((uint16_t)(((uint16_t)(x)) << PWM_DTCNT0_DTCNT0_SHIFT)) & PWM_DTCNT0_DTCNT0_MASK)

/* The count of PWM_DTCNT0 */
#define PWM_DTCNT0_COUNT                         (4U)

/*! @name DTCNT1 - Deadtime Count Register 1 */
#define PWM_DTCNT1_DTCNT1_MASK                   (0xFFFFU)
#define PWM_DTCNT1_DTCNT1_SHIFT                  (0U)
#define PWM_DTCNT1_DTCNT1(x)                     (((uint16_t)(((uint16_t)(x)) << PWM_DTCNT1_DTCNT1_SHIFT)) & PWM_DTCNT1_DTCNT1_MASK)

/* The count of PWM_DTCNT1 */
#define PWM_DTCNT1_COUNT                         (4U)

/*! @name CAPTCTRLA - Capture Control A Register */
#define PWM_CAPTCTRLA_ARMA_MASK                  (0x1U)
#define PWM_CAPTCTRLA_ARMA_SHIFT                 (0U)
#define PWM_CAPTCTRLA_ONESHOTA_MASK              (0x2U)
#define PWM_CAPTCTRLA_ONESHOTA_SHIFT             (1U)
#define PWM_CAPTCTRLA_EDGA0_MASK                 (0xCU)
#define PWM_CAPTCTRLA_EDGA0_SHIFT                (2U)
#define PWM_CAPTCTRLA_EDGA0(x)                   (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCTRLA_EDGA0_SHIFT)) & PWM_CAPTCTRLA_EDGA0_MASK)
#define PWM_CAPTCTRLA_EDGA1_MASK                 (0x30U)
#define PWM_CAPTCTRLA_EDGA1_SHIFT                (4U)
#define PWM_CAPTCTRLA_EDGA1(x)                   (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCTRLA_EDGA1_SHIFT)) & PWM_CAPTCTRLA_EDGA1_MASK)
#define PWM_CAPTCTRLA_INP_SELA_MASK              (0x40U)
#define PWM_CAPTCTRLA_INP_SELA_SHIFT             (6U)
#define PWM_CAPTCTRLA_EDGCNTA_EN_MASK            (0x80U)
#define PWM_CAPTCTRLA_EDGCNTA_EN_SHIFT           (7U)
#define PWM_CAPTCTRLA_CFAWM_MASK                 (0x300U)
#define PWM_CAPTCTRLA_CFAWM_SHIFT                (8U)
#define PWM_CAPTCTRLA_CFAWM(x)                   (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCTRLA_CFAWM_SHIFT)) & PWM_CAPTCTRLA_CFAWM_MASK)
#define PWM_CAPTCTRLA_CA0CNT_MASK                (0x1C00U)
#define PWM_CAPTCTRLA_CA0CNT_SHIFT               (10U)
#define PWM_CAPTCTRLA_CA0CNT(x)                  (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCTRLA_CA0CNT_SHIFT)) & PWM_CAPTCTRLA_CA0CNT_MASK)
#define PWM_CAPTCTRLA_CA1CNT_MASK                (0xE000U)
#define PWM_CAPTCTRLA_CA1CNT_SHIFT               (13U)
#define PWM_CAPTCTRLA_CA1CNT(x)                  (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCTRLA_CA1CNT_SHIFT)) & PWM_CAPTCTRLA_CA1CNT_MASK)

/* The count of PWM_CAPTCTRLA */
#define PWM_CAPTCTRLA_COUNT                      (4U)

/*! @name CAPTCOMPA - Capture Compare A Register */
#define PWM_CAPTCOMPA_EDGCMPA_MASK               (0xFFU)
#define PWM_CAPTCOMPA_EDGCMPA_SHIFT              (0U)
#define PWM_CAPTCOMPA_EDGCMPA(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCOMPA_EDGCMPA_SHIFT)) & PWM_CAPTCOMPA_EDGCMPA_MASK)
#define PWM_CAPTCOMPA_EDGCNTA_MASK               (0xFF00U)
#define PWM_CAPTCOMPA_EDGCNTA_SHIFT              (8U)
#define PWM_CAPTCOMPA_EDGCNTA(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCOMPA_EDGCNTA_SHIFT)) & PWM_CAPTCOMPA_EDGCNTA_MASK)

/* The count of PWM_CAPTCOMPA */
#define PWM_CAPTCOMPA_COUNT                      (4U)

/*! @name CAPTCTRLB - Capture Control B Register */
#define PWM_CAPTCTRLB_ARMB_MASK                  (0x1U)
#define PWM_CAPTCTRLB_ARMB_SHIFT                 (0U)
#define PWM_CAPTCTRLB_ONESHOTB_MASK              (0x2U)
#define PWM_CAPTCTRLB_ONESHOTB_SHIFT             (1U)
#define PWM_CAPTCTRLB_EDGB0_MASK                 (0xCU)
#define PWM_CAPTCTRLB_EDGB0_SHIFT                (2U)
#define PWM_CAPTCTRLB_EDGB0(x)                   (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCTRLB_EDGB0_SHIFT)) & PWM_CAPTCTRLB_EDGB0_MASK)
#define PWM_CAPTCTRLB_EDGB1_MASK                 (0x30U)
#define PWM_CAPTCTRLB_EDGB1_SHIFT                (4U)
#define PWM_CAPTCTRLB_EDGB1(x)                   (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCTRLB_EDGB1_SHIFT)) & PWM_CAPTCTRLB_EDGB1_MASK)
#define PWM_CAPTCTRLB_INP_SELB_MASK              (0x40U)
#define PWM_CAPTCTRLB_INP_SELB_SHIFT             (6U)
#define PWM_CAPTCTRLB_EDGCNTB_EN_MASK            (0x80U)
#define PWM_CAPTCTRLB_EDGCNTB_EN_SHIFT           (7U)
#define PWM_CAPTCTRLB_CFBWM_MASK                 (0x300U)
#define PWM_CAPTCTRLB_CFBWM_SHIFT                (8U)
#define PWM_CAPTCTRLB_CFBWM(x)                   (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCTRLB_CFBWM_SHIFT)) & PWM_CAPTCTRLB_CFBWM_MASK)
#define PWM_CAPTCTRLB_CB0CNT_MASK                (0x1C00U)
#define PWM_CAPTCTRLB_CB0CNT_SHIFT               (10U)
#define PWM_CAPTCTRLB_CB0CNT(x)                  (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCTRLB_CB0CNT_SHIFT)) & PWM_CAPTCTRLB_CB0CNT_MASK)
#define PWM_CAPTCTRLB_CB1CNT_MASK                (0xE000U)
#define PWM_CAPTCTRLB_CB1CNT_SHIFT               (13U)
#define PWM_CAPTCTRLB_CB1CNT(x)                  (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCTRLB_CB1CNT_SHIFT)) & PWM_CAPTCTRLB_CB1CNT_MASK)

/* The count of PWM_CAPTCTRLB */
#define PWM_CAPTCTRLB_COUNT                      (4U)

/*! @name CAPTCOMPB - Capture Compare B Register */
#define PWM_CAPTCOMPB_EDGCMPB_MASK               (0xFFU)
#define PWM_CAPTCOMPB_EDGCMPB_SHIFT              (0U)
#define PWM_CAPTCOMPB_EDGCMPB(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCOMPB_EDGCMPB_SHIFT)) & PWM_CAPTCOMPB_EDGCMPB_MASK)
#define PWM_CAPTCOMPB_EDGCNTB_MASK               (0xFF00U)
#define PWM_CAPTCOMPB_EDGCNTB_SHIFT              (8U)
#define PWM_CAPTCOMPB_EDGCNTB(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCOMPB_EDGCNTB_SHIFT)) & PWM_CAPTCOMPB_EDGCNTB_MASK)

/* The count of PWM_CAPTCOMPB */
#define PWM_CAPTCOMPB_COUNT                      (4U)

/*! @name CAPTCTRLX - Capture Control X Register */
#define PWM_CAPTCTRLX_ARMX_MASK                  (0x1U)
#define PWM_CAPTCTRLX_ARMX_SHIFT                 (0U)
#define PWM_CAPTCTRLX_ONESHOTX_MASK              (0x2U)
#define PWM_CAPTCTRLX_ONESHOTX_SHIFT             (1U)
#define PWM_CAPTCTRLX_EDGX0_MASK                 (0xCU)
#define PWM_CAPTCTRLX_EDGX0_SHIFT                (2U)
#define PWM_CAPTCTRLX_EDGX0(x)                   (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCTRLX_EDGX0_SHIFT)) & PWM_CAPTCTRLX_EDGX0_MASK)
#define PWM_CAPTCTRLX_EDGX1_MASK                 (0x30U)
#define PWM_CAPTCTRLX_EDGX1_SHIFT                (4U)
#define PWM_CAPTCTRLX_EDGX1(x)                   (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCTRLX_EDGX1_SHIFT)) & PWM_CAPTCTRLX_EDGX1_MASK)
#define PWM_CAPTCTRLX_INP_SELX_MASK              (0x40U)
#define PWM_CAPTCTRLX_INP_SELX_SHIFT             (6U)
#define PWM_CAPTCTRLX_EDGCNTX_EN_MASK            (0x80U)
#define PWM_CAPTCTRLX_EDGCNTX_EN_SHIFT           (7U)
#define PWM_CAPTCTRLX_CFXWM_MASK                 (0x300U)
#define PWM_CAPTCTRLX_CFXWM_SHIFT                (8U)
#define PWM_CAPTCTRLX_CFXWM(x)                   (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCTRLX_CFXWM_SHIFT)) & PWM_CAPTCTRLX_CFXWM_MASK)
#define PWM_CAPTCTRLX_CX0CNT_MASK                (0x1C00U)
#define PWM_CAPTCTRLX_CX0CNT_SHIFT               (10U)
#define PWM_CAPTCTRLX_CX0CNT(x)                  (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCTRLX_CX0CNT_SHIFT)) & PWM_CAPTCTRLX_CX0CNT_MASK)
#define PWM_CAPTCTRLX_CX1CNT_MASK                (0xE000U)
#define PWM_CAPTCTRLX_CX1CNT_SHIFT               (13U)
#define PWM_CAPTCTRLX_CX1CNT(x)                  (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCTRLX_CX1CNT_SHIFT)) & PWM_CAPTCTRLX_CX1CNT_MASK)

/* The count of PWM_CAPTCTRLX */
#define PWM_CAPTCTRLX_COUNT                      (4U)

/*! @name CAPTCOMPX - Capture Compare X Register */
#define PWM_CAPTCOMPX_EDGCMPX_MASK               (0xFFU)
#define PWM_CAPTCOMPX_EDGCMPX_SHIFT              (0U)
#define PWM_CAPTCOMPX_EDGCMPX(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCOMPX_EDGCMPX_SHIFT)) & PWM_CAPTCOMPX_EDGCMPX_MASK)
#define PWM_CAPTCOMPX_EDGCNTX_MASK               (0xFF00U)
#define PWM_CAPTCOMPX_EDGCNTX_SHIFT              (8U)
#define PWM_CAPTCOMPX_EDGCNTX(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_CAPTCOMPX_EDGCNTX_SHIFT)) & PWM_CAPTCOMPX_EDGCNTX_MASK)

/* The count of PWM_CAPTCOMPX */
#define PWM_CAPTCOMPX_COUNT                      (4U)

/*! @name CVAL0 - Capture Value 0 Register */
#define PWM_CVAL0_CAPTVAL0_MASK                  (0xFFFFU)
#define PWM_CVAL0_CAPTVAL0_SHIFT                 (0U)
#define PWM_CVAL0_CAPTVAL0(x)                    (((uint16_t)(((uint16_t)(x)) << PWM_CVAL0_CAPTVAL0_SHIFT)) & PWM_CVAL0_CAPTVAL0_MASK)

/* The count of PWM_CVAL0 */
#define PWM_CVAL0_COUNT                          (4U)

/*! @name CVAL0CYC - Capture Value 0 Cycle Register */
#define PWM_CVAL0CYC_CVAL0CYC_MASK               (0xFU)
#define PWM_CVAL0CYC_CVAL0CYC_SHIFT              (0U)
#define PWM_CVAL0CYC_CVAL0CYC(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_CVAL0CYC_CVAL0CYC_SHIFT)) & PWM_CVAL0CYC_CVAL0CYC_MASK)

/* The count of PWM_CVAL0CYC */
#define PWM_CVAL0CYC_COUNT                       (4U)

/*! @name CVAL1 - Capture Value 1 Register */
#define PWM_CVAL1_CAPTVAL1_MASK                  (0xFFFFU)
#define PWM_CVAL1_CAPTVAL1_SHIFT                 (0U)
#define PWM_CVAL1_CAPTVAL1(x)                    (((uint16_t)(((uint16_t)(x)) << PWM_CVAL1_CAPTVAL1_SHIFT)) & PWM_CVAL1_CAPTVAL1_MASK)

/* The count of PWM_CVAL1 */
#define PWM_CVAL1_COUNT                          (4U)

/*! @name CVAL1CYC - Capture Value 1 Cycle Register */
#define PWM_CVAL1CYC_CVAL1CYC_MASK               (0xFU)
#define PWM_CVAL1CYC_CVAL1CYC_SHIFT              (0U)
#define PWM_CVAL1CYC_CVAL1CYC(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_CVAL1CYC_CVAL1CYC_SHIFT)) & PWM_CVAL1CYC_CVAL1CYC_MASK)

/* The count of PWM_CVAL1CYC */
#define PWM_CVAL1CYC_COUNT                       (4U)

/*! @name CVAL2 - Capture Value 2 Register */
#define PWM_CVAL2_CAPTVAL2_MASK                  (0xFFFFU)
#define PWM_CVAL2_CAPTVAL2_SHIFT                 (0U)
#define PWM_CVAL2_CAPTVAL2(x)                    (((uint16_t)(((uint16_t)(x)) << PWM_CVAL2_CAPTVAL2_SHIFT)) & PWM_CVAL2_CAPTVAL2_MASK)

/* The count of PWM_CVAL2 */
#define PWM_CVAL2_COUNT                          (4U)

/*! @name CVAL2CYC - Capture Value 2 Cycle Register */
#define PWM_CVAL2CYC_CVAL2CYC_MASK               (0xFU)
#define PWM_CVAL2CYC_CVAL2CYC_SHIFT              (0U)
#define PWM_CVAL2CYC_CVAL2CYC(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_CVAL2CYC_CVAL2CYC_SHIFT)) & PWM_CVAL2CYC_CVAL2CYC_MASK)

/* The count of PWM_CVAL2CYC */
#define PWM_CVAL2CYC_COUNT                       (4U)

/*! @name CVAL3 - Capture Value 3 Register */
#define PWM_CVAL3_CAPTVAL3_MASK                  (0xFFFFU)
#define PWM_CVAL3_CAPTVAL3_SHIFT                 (0U)
#define PWM_CVAL3_CAPTVAL3(x)                    (((uint16_t)(((uint16_t)(x)) << PWM_CVAL3_CAPTVAL3_SHIFT)) & PWM_CVAL3_CAPTVAL3_MASK)

/* The count of PWM_CVAL3 */
#define PWM_CVAL3_COUNT                          (4U)

/*! @name CVAL3CYC - Capture Value 3 Cycle Register */
#define PWM_CVAL3CYC_CVAL3CYC_MASK               (0xFU)
#define PWM_CVAL3CYC_CVAL3CYC_SHIFT              (0U)
#define PWM_CVAL3CYC_CVAL3CYC(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_CVAL3CYC_CVAL3CYC_SHIFT)) & PWM_CVAL3CYC_CVAL3CYC_MASK)

/* The count of PWM_CVAL3CYC */
#define PWM_CVAL3CYC_COUNT                       (4U)

/*! @name CVAL4 - Capture Value 4 Register */
#define PWM_CVAL4_CAPTVAL4_MASK                  (0xFFFFU)
#define PWM_CVAL4_CAPTVAL4_SHIFT                 (0U)
#define PWM_CVAL4_CAPTVAL4(x)                    (((uint16_t)(((uint16_t)(x)) << PWM_CVAL4_CAPTVAL4_SHIFT)) & PWM_CVAL4_CAPTVAL4_MASK)

/* The count of PWM_CVAL4 */
#define PWM_CVAL4_COUNT                          (4U)

/*! @name CVAL4CYC - Capture Value 4 Cycle Register */
#define PWM_CVAL4CYC_CVAL4CYC_MASK               (0xFU)
#define PWM_CVAL4CYC_CVAL4CYC_SHIFT              (0U)
#define PWM_CVAL4CYC_CVAL4CYC(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_CVAL4CYC_CVAL4CYC_SHIFT)) & PWM_CVAL4CYC_CVAL4CYC_MASK)

/* The count of PWM_CVAL4CYC */
#define PWM_CVAL4CYC_COUNT                       (4U)

/*! @name CVAL5 - Capture Value 5 Register */
#define PWM_CVAL5_CAPTVAL5_MASK                  (0xFFFFU)
#define PWM_CVAL5_CAPTVAL5_SHIFT                 (0U)
#define PWM_CVAL5_CAPTVAL5(x)                    (((uint16_t)(((uint16_t)(x)) << PWM_CVAL5_CAPTVAL5_SHIFT)) & PWM_CVAL5_CAPTVAL5_MASK)

/* The count of PWM_CVAL5 */
#define PWM_CVAL5_COUNT                          (4U)

/*! @name CVAL5CYC - Capture Value 5 Cycle Register */
#define PWM_CVAL5CYC_CVAL5CYC_MASK               (0xFU)
#define PWM_CVAL5CYC_CVAL5CYC_SHIFT              (0U)
#define PWM_CVAL5CYC_CVAL5CYC(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_CVAL5CYC_CVAL5CYC_SHIFT)) & PWM_CVAL5CYC_CVAL5CYC_MASK)

/* The count of PWM_CVAL5CYC */
#define PWM_CVAL5CYC_COUNT                       (4U)

/*! @name OUTEN - Output Enable Register */
#define PWM_OUTEN_PWMX_EN_MASK                   (0xFU)
#define PWM_OUTEN_PWMX_EN_SHIFT                  (0U)
#define PWM_OUTEN_PWMX_EN(x)                     (((uint16_t)(((uint16_t)(x)) << PWM_OUTEN_PWMX_EN_SHIFT)) & PWM_OUTEN_PWMX_EN_MASK)
#define PWM_OUTEN_PWMB_EN_MASK                   (0xF0U)
#define PWM_OUTEN_PWMB_EN_SHIFT                  (4U)
#define PWM_OUTEN_PWMB_EN(x)                     (((uint16_t)(((uint16_t)(x)) << PWM_OUTEN_PWMB_EN_SHIFT)) & PWM_OUTEN_PWMB_EN_MASK)
#define PWM_OUTEN_PWMA_EN_MASK                   (0xF00U)
#define PWM_OUTEN_PWMA_EN_SHIFT                  (8U)
#define PWM_OUTEN_PWMA_EN(x)                     (((uint16_t)(((uint16_t)(x)) << PWM_OUTEN_PWMA_EN_SHIFT)) & PWM_OUTEN_PWMA_EN_MASK)

/*! @name MASK - Mask Register */
#define PWM_MASK_MASKX_MASK                      (0xFU)
#define PWM_MASK_MASKX_SHIFT                     (0U)
#define PWM_MASK_MASKX(x)                        (((uint16_t)(((uint16_t)(x)) << PWM_MASK_MASKX_SHIFT)) & PWM_MASK_MASKX_MASK)
#define PWM_MASK_MASKB_MASK                      (0xF0U)
#define PWM_MASK_MASKB_SHIFT                     (4U)
#define PWM_MASK_MASKB(x)                        (((uint16_t)(((uint16_t)(x)) << PWM_MASK_MASKB_SHIFT)) & PWM_MASK_MASKB_MASK)
#define PWM_MASK_MASKA_MASK                      (0xF00U)
#define PWM_MASK_MASKA_SHIFT                     (8U)
#define PWM_MASK_MASKA(x)                        (((uint16_t)(((uint16_t)(x)) << PWM_MASK_MASKA_SHIFT)) & PWM_MASK_MASKA_MASK)
#define PWM_MASK_UPDATE_MASK_MASK                (0xF000U)
#define PWM_MASK_UPDATE_MASK_SHIFT               (12U)
#define PWM_MASK_UPDATE_MASK(x)                  (((uint16_t)(((uint16_t)(x)) << PWM_MASK_UPDATE_MASK_SHIFT)) & PWM_MASK_UPDATE_MASK_MASK)

/*! @name SWCOUT - Software Controlled Output Register */
#define PWM_SWCOUT_SM0OUT45_MASK                 (0x1U)
#define PWM_SWCOUT_SM0OUT45_SHIFT                (0U)
#define PWM_SWCOUT_SM0OUT23_MASK                 (0x2U)
#define PWM_SWCOUT_SM0OUT23_SHIFT                (1U)
#define PWM_SWCOUT_SM1OUT45_MASK                 (0x4U)
#define PWM_SWCOUT_SM1OUT45_SHIFT                (2U)
#define PWM_SWCOUT_SM1OUT23_MASK                 (0x8U)
#define PWM_SWCOUT_SM1OUT23_SHIFT                (3U)
#define PWM_SWCOUT_SM2OUT45_MASK                 (0x10U)
#define PWM_SWCOUT_SM2OUT45_SHIFT                (4U)
#define PWM_SWCOUT_SM2OUT23_MASK                 (0x20U)
#define PWM_SWCOUT_SM2OUT23_SHIFT                (5U)
#define PWM_SWCOUT_SM3OUT45_MASK                 (0x40U)
#define PWM_SWCOUT_SM3OUT45_SHIFT                (6U)
#define PWM_SWCOUT_SM3OUT23_MASK                 (0x80U)
#define PWM_SWCOUT_SM3OUT23_SHIFT                (7U)

/*! @name DTSRCSEL - PWM Source Select Register */
#define PWM_DTSRCSEL_SM0SEL45_MASK               (0x3U)
#define PWM_DTSRCSEL_SM0SEL45_SHIFT              (0U)
#define PWM_DTSRCSEL_SM0SEL45(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_DTSRCSEL_SM0SEL45_SHIFT)) & PWM_DTSRCSEL_SM0SEL45_MASK)
#define PWM_DTSRCSEL_SM0SEL23_MASK               (0xCU)
#define PWM_DTSRCSEL_SM0SEL23_SHIFT              (2U)
#define PWM_DTSRCSEL_SM0SEL23(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_DTSRCSEL_SM0SEL23_SHIFT)) & PWM_DTSRCSEL_SM0SEL23_MASK)
#define PWM_DTSRCSEL_SM1SEL45_MASK               (0x30U)
#define PWM_DTSRCSEL_SM1SEL45_SHIFT              (4U)
#define PWM_DTSRCSEL_SM1SEL45(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_DTSRCSEL_SM1SEL45_SHIFT)) & PWM_DTSRCSEL_SM1SEL45_MASK)
#define PWM_DTSRCSEL_SM1SEL23_MASK               (0xC0U)
#define PWM_DTSRCSEL_SM1SEL23_SHIFT              (6U)
#define PWM_DTSRCSEL_SM1SEL23(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_DTSRCSEL_SM1SEL23_SHIFT)) & PWM_DTSRCSEL_SM1SEL23_MASK)
#define PWM_DTSRCSEL_SM2SEL45_MASK               (0x300U)
#define PWM_DTSRCSEL_SM2SEL45_SHIFT              (8U)
#define PWM_DTSRCSEL_SM2SEL45(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_DTSRCSEL_SM2SEL45_SHIFT)) & PWM_DTSRCSEL_SM2SEL45_MASK)
#define PWM_DTSRCSEL_SM2SEL23_MASK               (0xC00U)
#define PWM_DTSRCSEL_SM2SEL23_SHIFT              (10U)
#define PWM_DTSRCSEL_SM2SEL23(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_DTSRCSEL_SM2SEL23_SHIFT)) & PWM_DTSRCSEL_SM2SEL23_MASK)
#define PWM_DTSRCSEL_SM3SEL45_MASK               (0x3000U)
#define PWM_DTSRCSEL_SM3SEL45_SHIFT              (12U)
#define PWM_DTSRCSEL_SM3SEL45(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_DTSRCSEL_SM3SEL45_SHIFT)) & PWM_DTSRCSEL_SM3SEL45_MASK)
#define PWM_DTSRCSEL_SM3SEL23_MASK               (0xC000U)
#define PWM_DTSRCSEL_SM3SEL23_SHIFT              (14U)
#define PWM_DTSRCSEL_SM3SEL23(x)                 (((uint16_t)(((uint16_t)(x)) << PWM_DTSRCSEL_SM3SEL23_SHIFT)) & PWM_DTSRCSEL_SM3SEL23_MASK)

/*! @name MCTRL - Master Control Register */
#define PWM_MCTRL_LDOK_MASK                      (0xFU)
#define PWM_MCTRL_LDOK_SHIFT                     (0U)
#define PWM_MCTRL_LDOK(x)                        (((uint16_t)(((uint16_t)(x)) << PWM_MCTRL_LDOK_SHIFT)) & PWM_MCTRL_LDOK_MASK)
#define PWM_MCTRL_CLDOK_MASK                     (0xF0U)
#define PWM_MCTRL_CLDOK_SHIFT                    (4U)
#define PWM_MCTRL_CLDOK(x)                       (((uint16_t)(((uint16_t)(x)) << PWM_MCTRL_CLDOK_SHIFT)) & PWM_MCTRL_CLDOK_MASK)
#define PWM_MCTRL_RUN_MASK                       (0xF00U)
#define PWM_MCTRL_RUN_SHIFT                      (8U)
#define PWM_MCTRL_RUN(x)                         (((uint16_t)(((uint16_t)(x)) << PWM_MCTRL_RUN_SHIFT)) & PWM_MCTRL_RUN_MASK)
#define PWM_MCTRL_IPOL_MASK                      (0xF000U)
#define PWM_MCTRL_IPOL_SHIFT                     (12U)
#define PWM_MCTRL_IPOL(x)                        (((uint16_t)(((uint16_t)(x)) << PWM_MCTRL_IPOL_SHIFT)) & PWM_MCTRL_IPOL_MASK)

/*! @name MCTRL2 - Master Control 2 Register */
#define PWM_MCTRL2_MONPLL_MASK                   (0x3U)
#define PWM_MCTRL2_MONPLL_SHIFT                  (0U)
#define PWM_MCTRL2_MONPLL(x)                     (((uint16_t)(((uint16_t)(x)) << PWM_MCTRL2_MONPLL_SHIFT)) & PWM_MCTRL2_MONPLL_MASK)

/*! @name FCTRL - Fault Control Register */
#define PWM_FCTRL_FIE_MASK                       (0xFU)
#define PWM_FCTRL_FIE_SHIFT                      (0U)
#define PWM_FCTRL_FIE(x)                         (((uint16_t)(((uint16_t)(x)) << PWM_FCTRL_FIE_SHIFT)) & PWM_FCTRL_FIE_MASK)
#define PWM_FCTRL_FSAFE_MASK                     (0xF0U)
#define PWM_FCTRL_FSAFE_SHIFT                    (4U)
#define PWM_FCTRL_FSAFE(x)                       (((uint16_t)(((uint16_t)(x)) << PWM_FCTRL_FSAFE_SHIFT)) & PWM_FCTRL_FSAFE_MASK)
#define PWM_FCTRL_FAUTO_MASK                     (0xF00U)
#define PWM_FCTRL_FAUTO_SHIFT                    (8U)
#define PWM_FCTRL_FAUTO(x)                       (((uint16_t)(((uint16_t)(x)) << PWM_FCTRL_FAUTO_SHIFT)) & PWM_FCTRL_FAUTO_MASK)
#define PWM_FCTRL_FLVL_MASK                      (0xF000U)
#define PWM_FCTRL_FLVL_SHIFT                     (12U)
#define PWM_FCTRL_FLVL(x)                        (((uint16_t)(((uint16_t)(x)) << PWM_FCTRL_FLVL_SHIFT)) & PWM_FCTRL_FLVL_MASK)

/*! @name FSTS - Fault Status Register */
#define PWM_FSTS_FFLAG_MASK                      (0xFU)
#define PWM_FSTS_FFLAG_SHIFT                     (0U)
#define PWM_FSTS_FFLAG(x)                        (((uint16_t)(((uint16_t)(x)) << PWM_FSTS_FFLAG_SHIFT)) & PWM_FSTS_FFLAG_MASK)
#define PWM_FSTS_FFULL_MASK                      (0xF0U)
#define PWM_FSTS_FFULL_SHIFT                     (4U)
#define PWM_FSTS_FFULL(x)                        (((uint16_t)(((uint16_t)(x)) << PWM_FSTS_FFULL_SHIFT)) & PWM_FSTS_FFULL_MASK)
#define PWM_FSTS_FFPIN_MASK                      (0xF00U)
#define PWM_FSTS_FFPIN_SHIFT                     (8U)
#define PWM_FSTS_FFPIN(x)                        (((uint16_t)(((uint16_t)(x)) << PWM_FSTS_FFPIN_SHIFT)) & PWM_FSTS_FFPIN_MASK)
#define PWM_FSTS_FHALF_MASK                      (0xF000U)
#define PWM_FSTS_FHALF_SHIFT                     (12U)
#define PWM_FSTS_FHALF(x)                        (((uint16_t)(((uint16_t)(x)) << PWM_FSTS_FHALF_SHIFT)) & PWM_FSTS_FHALF_MASK)

/*! @name FFILT - Fault Filter Register */
#define PWM_FFILT_FILT_PER_MASK                  (0xFFU)
#define PWM_FFILT_FILT_PER_SHIFT                 (0U)
#define PWM_FFILT_FILT_PER(x)                    (((uint16_t)(((uint16_t)(x)) << PWM_FFILT_FILT_PER_SHIFT)) & PWM_FFILT_FILT_PER_MASK)
#define PWM_FFILT_FILT_CNT_MASK                  (0x700U)
#define PWM_FFILT_FILT_CNT_SHIFT                 (8U)
#define PWM_FFILT_FILT_CNT(x)                    (((uint16_t)(((uint16_t)(x)) << PWM_FFILT_FILT_CNT_SHIFT)) & PWM_FFILT_FILT_CNT_MASK)
#define PWM_FFILT_GSTR_MASK                      (0x8000U)
#define PWM_FFILT_GSTR_SHIFT                     (15U)

/*! @name FTST - Fault Test Register */
#define PWM_FTST_FTEST_MASK                      (0x1U)
#define PWM_FTST_FTEST_SHIFT                     (0U)

/*! @name FCTRL2 - Fault Control 2 Register */
#define PWM_FCTRL2_NOCOMB_MASK                   (0xFU)
#define PWM_FCTRL2_NOCOMB_SHIFT                  (0U)
#define PWM_FCTRL2_NOCOMB(x)                     (((uint16_t)(((uint16_t)(x)) << PWM_FCTRL2_NOCOMB_SHIFT)) & PWM_FCTRL2_NOCOMB_MASK)


/*!
 * @}
 */ /* end of group PWM_Register_Masks */


/* PWM - Peripheral instance base addresses */
/** Peripheral PWM1 base pointer */
#define PWM1_BASE_PTR                            ((PWM_MemMapPtr)0x403DC000u)
/** Peripheral PWM2 base pointer */
#define PWM2_BASE_PTR                            ((PWM_MemMapPtr)0x403E0000u)
/** Array initializer of PWM peripheral base pointers */
#define PWM_BASE_PTRS                            { PWM1_BASE_PTR, PWM2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- PWM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PWM_Register_Accessor_Macros PWM - Register accessor macros
 * @{
 */


/* PWM - Register instance definitions */
/* PWM1 */
#define PWM1_SM0CNT                              PWM_CNT_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0INIT                             PWM_INIT_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CTRL2                            PWM_CTRL2_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CTRL                             PWM_CTRL_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0VAL0                             PWM_VAL0_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0FRACVAL1                         PWM_FRACVAL1_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0VAL1                             PWM_VAL1_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0FRACVAL2                         PWM_FRACVAL2_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0VAL2                             PWM_VAL2_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0FRACVAL3                         PWM_FRACVAL3_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0VAL3                             PWM_VAL3_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0FRACVAL4                         PWM_FRACVAL4_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0VAL4                             PWM_VAL4_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0FRACVAL5                         PWM_FRACVAL5_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0VAL5                             PWM_VAL5_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0FRCTRL                           PWM_FRCTRL_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0OCTRL                            PWM_OCTRL_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0STS                              PWM_STS_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0INTEN                            PWM_INTEN_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0DMAEN                            PWM_DMAEN_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0TCTRL                            PWM_TCTRL_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0DISMAP0                          PWM_DISMAP_REG(PWM1_BASE_PTR,0,0)
#define PWM1_SM0DISMAP1                          PWM_DISMAP_REG(PWM1_BASE_PTR,0,1)
#define PWM1_SM0DTCNT0                           PWM_DTCNT0_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0DTCNT1                           PWM_DTCNT1_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CAPTCTRLA                        PWM_CAPTCTRLA_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CAPTCOMPA                        PWM_CAPTCOMPA_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CAPTCTRLB                        PWM_CAPTCTRLB_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CAPTCOMPB                        PWM_CAPTCOMPB_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CAPTCTRLX                        PWM_CAPTCTRLX_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CAPTCOMPX                        PWM_CAPTCOMPX_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CVAL0                            PWM_CVAL0_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CVAL0CYC                         PWM_CVAL0CYC_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CVAL1                            PWM_CVAL1_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CVAL1CYC                         PWM_CVAL1CYC_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CVAL2                            PWM_CVAL2_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CVAL2CYC                         PWM_CVAL2CYC_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CVAL3                            PWM_CVAL3_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CVAL3CYC                         PWM_CVAL3CYC_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CVAL4                            PWM_CVAL4_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CVAL4CYC                         PWM_CVAL4CYC_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CVAL5                            PWM_CVAL5_REG(PWM1_BASE_PTR,0)
#define PWM1_SM0CVAL5CYC                         PWM_CVAL5CYC_REG(PWM1_BASE_PTR,0)
#define PWM1_SM1CNT                              PWM_CNT_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1INIT                             PWM_INIT_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CTRL2                            PWM_CTRL2_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CTRL                             PWM_CTRL_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1VAL0                             PWM_VAL0_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1FRACVAL1                         PWM_FRACVAL1_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1VAL1                             PWM_VAL1_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1FRACVAL2                         PWM_FRACVAL2_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1VAL2                             PWM_VAL2_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1FRACVAL3                         PWM_FRACVAL3_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1VAL3                             PWM_VAL3_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1FRACVAL4                         PWM_FRACVAL4_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1VAL4                             PWM_VAL4_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1FRACVAL5                         PWM_FRACVAL5_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1VAL5                             PWM_VAL5_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1FRCTRL                           PWM_FRCTRL_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1OCTRL                            PWM_OCTRL_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1STS                              PWM_STS_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1INTEN                            PWM_INTEN_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1DMAEN                            PWM_DMAEN_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1TCTRL                            PWM_TCTRL_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1DISMAP0                          PWM_DISMAP_REG(PWM1_BASE_PTR,1,0)
#define PWM1_SM1DISMAP1                          PWM_DISMAP_REG(PWM1_BASE_PTR,1,1)
#define PWM1_SM1DTCNT0                           PWM_DTCNT0_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1DTCNT1                           PWM_DTCNT1_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CAPTCTRLA                        PWM_CAPTCTRLA_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CAPTCOMPA                        PWM_CAPTCOMPA_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CAPTCTRLB                        PWM_CAPTCTRLB_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CAPTCOMPB                        PWM_CAPTCOMPB_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CAPTCTRLX                        PWM_CAPTCTRLX_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CAPTCOMPX                        PWM_CAPTCOMPX_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CVAL0                            PWM_CVAL0_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CVAL0CYC                         PWM_CVAL0CYC_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CVAL1                            PWM_CVAL1_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CVAL1CYC                         PWM_CVAL1CYC_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CVAL2                            PWM_CVAL2_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CVAL2CYC                         PWM_CVAL2CYC_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CVAL3                            PWM_CVAL3_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CVAL3CYC                         PWM_CVAL3CYC_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CVAL4                            PWM_CVAL4_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CVAL4CYC                         PWM_CVAL4CYC_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CVAL5                            PWM_CVAL5_REG(PWM1_BASE_PTR,1)
#define PWM1_SM1CVAL5CYC                         PWM_CVAL5CYC_REG(PWM1_BASE_PTR,1)
#define PWM1_SM2CNT                              PWM_CNT_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2INIT                             PWM_INIT_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CTRL2                            PWM_CTRL2_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CTRL                             PWM_CTRL_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2VAL0                             PWM_VAL0_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2FRACVAL1                         PWM_FRACVAL1_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2VAL1                             PWM_VAL1_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2FRACVAL2                         PWM_FRACVAL2_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2VAL2                             PWM_VAL2_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2FRACVAL3                         PWM_FRACVAL3_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2VAL3                             PWM_VAL3_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2FRACVAL4                         PWM_FRACVAL4_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2VAL4                             PWM_VAL4_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2FRACVAL5                         PWM_FRACVAL5_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2VAL5                             PWM_VAL5_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2FRCTRL                           PWM_FRCTRL_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2OCTRL                            PWM_OCTRL_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2STS                              PWM_STS_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2INTEN                            PWM_INTEN_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2DMAEN                            PWM_DMAEN_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2TCTRL                            PWM_TCTRL_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2DISMAP0                          PWM_DISMAP_REG(PWM1_BASE_PTR,2,0)
#define PWM1_SM2DISMAP1                          PWM_DISMAP_REG(PWM1_BASE_PTR,2,1)
#define PWM1_SM2DTCNT0                           PWM_DTCNT0_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2DTCNT1                           PWM_DTCNT1_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CAPTCTRLA                        PWM_CAPTCTRLA_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CAPTCOMPA                        PWM_CAPTCOMPA_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CAPTCTRLB                        PWM_CAPTCTRLB_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CAPTCOMPB                        PWM_CAPTCOMPB_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CAPTCTRLX                        PWM_CAPTCTRLX_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CAPTCOMPX                        PWM_CAPTCOMPX_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CVAL0                            PWM_CVAL0_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CVAL0CYC                         PWM_CVAL0CYC_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CVAL1                            PWM_CVAL1_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CVAL1CYC                         PWM_CVAL1CYC_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CVAL2                            PWM_CVAL2_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CVAL2CYC                         PWM_CVAL2CYC_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CVAL3                            PWM_CVAL3_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CVAL3CYC                         PWM_CVAL3CYC_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CVAL4                            PWM_CVAL4_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CVAL4CYC                         PWM_CVAL4CYC_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CVAL5                            PWM_CVAL5_REG(PWM1_BASE_PTR,2)
#define PWM1_SM2CVAL5CYC                         PWM_CVAL5CYC_REG(PWM1_BASE_PTR,2)
#define PWM1_SM3CNT                              PWM_CNT_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3INIT                             PWM_INIT_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CTRL2                            PWM_CTRL2_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CTRL                             PWM_CTRL_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3VAL0                             PWM_VAL0_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3FRACVAL1                         PWM_FRACVAL1_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3VAL1                             PWM_VAL1_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3FRACVAL2                         PWM_FRACVAL2_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3VAL2                             PWM_VAL2_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3FRACVAL3                         PWM_FRACVAL3_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3VAL3                             PWM_VAL3_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3FRACVAL4                         PWM_FRACVAL4_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3VAL4                             PWM_VAL4_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3FRACVAL5                         PWM_FRACVAL5_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3VAL5                             PWM_VAL5_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3FRCTRL                           PWM_FRCTRL_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3OCTRL                            PWM_OCTRL_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3STS                              PWM_STS_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3INTEN                            PWM_INTEN_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3DMAEN                            PWM_DMAEN_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3TCTRL                            PWM_TCTRL_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3DISMAP0                          PWM_DISMAP_REG(PWM1_BASE_PTR,3,0)
#define PWM1_SM3DISMAP1                          PWM_DISMAP_REG(PWM1_BASE_PTR,3,1)
#define PWM1_SM3DTCNT0                           PWM_DTCNT0_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3DTCNT1                           PWM_DTCNT1_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CAPTCTRLA                        PWM_CAPTCTRLA_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CAPTCOMPA                        PWM_CAPTCOMPA_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CAPTCTRLB                        PWM_CAPTCTRLB_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CAPTCOMPB                        PWM_CAPTCOMPB_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CAPTCTRLX                        PWM_CAPTCTRLX_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CAPTCOMPX                        PWM_CAPTCOMPX_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CVAL0                            PWM_CVAL0_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CVAL0CYC                         PWM_CVAL0CYC_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CVAL1                            PWM_CVAL1_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CVAL1CYC                         PWM_CVAL1CYC_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CVAL2                            PWM_CVAL2_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CVAL2CYC                         PWM_CVAL2CYC_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CVAL3                            PWM_CVAL3_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CVAL3CYC                         PWM_CVAL3CYC_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CVAL4                            PWM_CVAL4_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CVAL4CYC                         PWM_CVAL4CYC_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CVAL5                            PWM_CVAL5_REG(PWM1_BASE_PTR,3)
#define PWM1_SM3CVAL5CYC                         PWM_CVAL5CYC_REG(PWM1_BASE_PTR,3)
#define PWM1_OUTEN                               PWM_OUTEN_REG(PWM1_BASE_PTR)
#define PWM1_MASK                                PWM_MASK_REG(PWM1_BASE_PTR)
#define PWM1_SWCOUT                              PWM_SWCOUT_REG(PWM1_BASE_PTR)
#define PWM1_DTSRCSEL                            PWM_DTSRCSEL_REG(PWM1_BASE_PTR)
#define PWM1_MCTRL                               PWM_MCTRL_REG(PWM1_BASE_PTR)
#define PWM1_MCTRL2                              PWM_MCTRL2_REG(PWM1_BASE_PTR)
#define PWM1_FCTRL0                              PWM_FCTRL_REG(PWM1_BASE_PTR)
#define PWM1_FSTS0                               PWM_FSTS_REG(PWM1_BASE_PTR)
#define PWM1_FFILT0                              PWM_FFILT_REG(PWM1_BASE_PTR)
#define PWM1_FTST0                               PWM_FTST_REG(PWM1_BASE_PTR)
#define PWM1_FCTRL20                             PWM_FCTRL2_REG(PWM1_BASE_PTR)
/* PWM2 */
#define PWM2_SM0CNT                              PWM_CNT_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0INIT                             PWM_INIT_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CTRL2                            PWM_CTRL2_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CTRL                             PWM_CTRL_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0VAL0                             PWM_VAL0_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0FRACVAL1                         PWM_FRACVAL1_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0VAL1                             PWM_VAL1_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0FRACVAL2                         PWM_FRACVAL2_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0VAL2                             PWM_VAL2_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0FRACVAL3                         PWM_FRACVAL3_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0VAL3                             PWM_VAL3_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0FRACVAL4                         PWM_FRACVAL4_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0VAL4                             PWM_VAL4_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0FRACVAL5                         PWM_FRACVAL5_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0VAL5                             PWM_VAL5_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0FRCTRL                           PWM_FRCTRL_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0OCTRL                            PWM_OCTRL_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0STS                              PWM_STS_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0INTEN                            PWM_INTEN_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0DMAEN                            PWM_DMAEN_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0TCTRL                            PWM_TCTRL_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0DISMAP0                          PWM_DISMAP_REG(PWM2_BASE_PTR,0,0)
#define PWM2_SM0DISMAP1                          PWM_DISMAP_REG(PWM2_BASE_PTR,0,1)
#define PWM2_SM0DTCNT0                           PWM_DTCNT0_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0DTCNT1                           PWM_DTCNT1_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CAPTCTRLA                        PWM_CAPTCTRLA_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CAPTCOMPA                        PWM_CAPTCOMPA_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CAPTCTRLB                        PWM_CAPTCTRLB_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CAPTCOMPB                        PWM_CAPTCOMPB_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CAPTCTRLX                        PWM_CAPTCTRLX_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CAPTCOMPX                        PWM_CAPTCOMPX_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CVAL0                            PWM_CVAL0_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CVAL0CYC                         PWM_CVAL0CYC_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CVAL1                            PWM_CVAL1_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CVAL1CYC                         PWM_CVAL1CYC_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CVAL2                            PWM_CVAL2_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CVAL2CYC                         PWM_CVAL2CYC_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CVAL3                            PWM_CVAL3_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CVAL3CYC                         PWM_CVAL3CYC_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CVAL4                            PWM_CVAL4_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CVAL4CYC                         PWM_CVAL4CYC_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CVAL5                            PWM_CVAL5_REG(PWM2_BASE_PTR,0)
#define PWM2_SM0CVAL5CYC                         PWM_CVAL5CYC_REG(PWM2_BASE_PTR,0)
#define PWM2_SM1CNT                              PWM_CNT_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1INIT                             PWM_INIT_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CTRL2                            PWM_CTRL2_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CTRL                             PWM_CTRL_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1VAL0                             PWM_VAL0_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1FRACVAL1                         PWM_FRACVAL1_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1VAL1                             PWM_VAL1_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1FRACVAL2                         PWM_FRACVAL2_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1VAL2                             PWM_VAL2_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1FRACVAL3                         PWM_FRACVAL3_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1VAL3                             PWM_VAL3_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1FRACVAL4                         PWM_FRACVAL4_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1VAL4                             PWM_VAL4_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1FRACVAL5                         PWM_FRACVAL5_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1VAL5                             PWM_VAL5_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1FRCTRL                           PWM_FRCTRL_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1OCTRL                            PWM_OCTRL_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1STS                              PWM_STS_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1INTEN                            PWM_INTEN_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1DMAEN                            PWM_DMAEN_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1TCTRL                            PWM_TCTRL_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1DISMAP0                          PWM_DISMAP_REG(PWM2_BASE_PTR,1,0)
#define PWM2_SM1DISMAP1                          PWM_DISMAP_REG(PWM2_BASE_PTR,1,1)
#define PWM2_SM1DTCNT0                           PWM_DTCNT0_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1DTCNT1                           PWM_DTCNT1_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CAPTCTRLA                        PWM_CAPTCTRLA_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CAPTCOMPA                        PWM_CAPTCOMPA_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CAPTCTRLB                        PWM_CAPTCTRLB_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CAPTCOMPB                        PWM_CAPTCOMPB_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CAPTCTRLX                        PWM_CAPTCTRLX_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CAPTCOMPX                        PWM_CAPTCOMPX_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CVAL0                            PWM_CVAL0_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CVAL0CYC                         PWM_CVAL0CYC_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CVAL1                            PWM_CVAL1_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CVAL1CYC                         PWM_CVAL1CYC_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CVAL2                            PWM_CVAL2_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CVAL2CYC                         PWM_CVAL2CYC_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CVAL3                            PWM_CVAL3_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CVAL3CYC                         PWM_CVAL3CYC_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CVAL4                            PWM_CVAL4_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CVAL4CYC                         PWM_CVAL4CYC_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CVAL5                            PWM_CVAL5_REG(PWM2_BASE_PTR,1)
#define PWM2_SM1CVAL5CYC                         PWM_CVAL5CYC_REG(PWM2_BASE_PTR,1)
#define PWM2_SM2CNT                              PWM_CNT_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2INIT                             PWM_INIT_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CTRL2                            PWM_CTRL2_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CTRL                             PWM_CTRL_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2VAL0                             PWM_VAL0_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2FRACVAL1                         PWM_FRACVAL1_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2VAL1                             PWM_VAL1_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2FRACVAL2                         PWM_FRACVAL2_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2VAL2                             PWM_VAL2_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2FRACVAL3                         PWM_FRACVAL3_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2VAL3                             PWM_VAL3_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2FRACVAL4                         PWM_FRACVAL4_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2VAL4                             PWM_VAL4_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2FRACVAL5                         PWM_FRACVAL5_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2VAL5                             PWM_VAL5_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2FRCTRL                           PWM_FRCTRL_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2OCTRL                            PWM_OCTRL_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2STS                              PWM_STS_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2INTEN                            PWM_INTEN_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2DMAEN                            PWM_DMAEN_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2TCTRL                            PWM_TCTRL_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2DISMAP0                          PWM_DISMAP_REG(PWM2_BASE_PTR,2,0)
#define PWM2_SM2DISMAP1                          PWM_DISMAP_REG(PWM2_BASE_PTR,2,1)
#define PWM2_SM2DTCNT0                           PWM_DTCNT0_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2DTCNT1                           PWM_DTCNT1_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CAPTCTRLA                        PWM_CAPTCTRLA_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CAPTCOMPA                        PWM_CAPTCOMPA_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CAPTCTRLB                        PWM_CAPTCTRLB_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CAPTCOMPB                        PWM_CAPTCOMPB_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CAPTCTRLX                        PWM_CAPTCTRLX_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CAPTCOMPX                        PWM_CAPTCOMPX_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CVAL0                            PWM_CVAL0_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CVAL0CYC                         PWM_CVAL0CYC_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CVAL1                            PWM_CVAL1_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CVAL1CYC                         PWM_CVAL1CYC_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CVAL2                            PWM_CVAL2_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CVAL2CYC                         PWM_CVAL2CYC_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CVAL3                            PWM_CVAL3_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CVAL3CYC                         PWM_CVAL3CYC_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CVAL4                            PWM_CVAL4_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CVAL4CYC                         PWM_CVAL4CYC_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CVAL5                            PWM_CVAL5_REG(PWM2_BASE_PTR,2)
#define PWM2_SM2CVAL5CYC                         PWM_CVAL5CYC_REG(PWM2_BASE_PTR,2)
#define PWM2_SM3CNT                              PWM_CNT_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3INIT                             PWM_INIT_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CTRL2                            PWM_CTRL2_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CTRL                             PWM_CTRL_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3VAL0                             PWM_VAL0_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3FRACVAL1                         PWM_FRACVAL1_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3VAL1                             PWM_VAL1_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3FRACVAL2                         PWM_FRACVAL2_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3VAL2                             PWM_VAL2_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3FRACVAL3                         PWM_FRACVAL3_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3VAL3                             PWM_VAL3_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3FRACVAL4                         PWM_FRACVAL4_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3VAL4                             PWM_VAL4_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3FRACVAL5                         PWM_FRACVAL5_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3VAL5                             PWM_VAL5_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3FRCTRL                           PWM_FRCTRL_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3OCTRL                            PWM_OCTRL_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3STS                              PWM_STS_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3INTEN                            PWM_INTEN_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3DMAEN                            PWM_DMAEN_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3TCTRL                            PWM_TCTRL_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3DISMAP0                          PWM_DISMAP_REG(PWM2_BASE_PTR,3,0)
#define PWM2_SM3DISMAP1                          PWM_DISMAP_REG(PWM2_BASE_PTR,3,1)
#define PWM2_SM3DTCNT0                           PWM_DTCNT0_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3DTCNT1                           PWM_DTCNT1_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CAPTCTRLA                        PWM_CAPTCTRLA_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CAPTCOMPA                        PWM_CAPTCOMPA_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CAPTCTRLB                        PWM_CAPTCTRLB_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CAPTCOMPB                        PWM_CAPTCOMPB_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CAPTCTRLX                        PWM_CAPTCTRLX_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CAPTCOMPX                        PWM_CAPTCOMPX_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CVAL0                            PWM_CVAL0_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CVAL0CYC                         PWM_CVAL0CYC_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CVAL1                            PWM_CVAL1_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CVAL1CYC                         PWM_CVAL1CYC_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CVAL2                            PWM_CVAL2_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CVAL2CYC                         PWM_CVAL2CYC_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CVAL3                            PWM_CVAL3_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CVAL3CYC                         PWM_CVAL3CYC_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CVAL4                            PWM_CVAL4_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CVAL4CYC                         PWM_CVAL4CYC_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CVAL5                            PWM_CVAL5_REG(PWM2_BASE_PTR,3)
#define PWM2_SM3CVAL5CYC                         PWM_CVAL5CYC_REG(PWM2_BASE_PTR,3)
#define PWM2_OUTEN                               PWM_OUTEN_REG(PWM2_BASE_PTR)
#define PWM2_MASK                                PWM_MASK_REG(PWM2_BASE_PTR)
#define PWM2_SWCOUT                              PWM_SWCOUT_REG(PWM2_BASE_PTR)
#define PWM2_DTSRCSEL                            PWM_DTSRCSEL_REG(PWM2_BASE_PTR)
#define PWM2_MCTRL                               PWM_MCTRL_REG(PWM2_BASE_PTR)
#define PWM2_MCTRL2                              PWM_MCTRL2_REG(PWM2_BASE_PTR)
#define PWM2_FCTRL0                              PWM_FCTRL_REG(PWM2_BASE_PTR)
#define PWM2_FSTS0                               PWM_FSTS_REG(PWM2_BASE_PTR)
#define PWM2_FFILT0                              PWM_FFILT_REG(PWM2_BASE_PTR)
#define PWM2_FTST0                               PWM_FTST_REG(PWM2_BASE_PTR)
#define PWM2_FCTRL20                             PWM_FCTRL2_REG(PWM2_BASE_PTR)

/* PWM - Register array accessors */
#define PWM1_CNT(index)                          PWM_CNT_REG(PWM1_BASE_PTR,index)
#define PWM2_CNT(index)                          PWM_CNT_REG(PWM2_BASE_PTR,index)
#define PWM1_INIT(index)                         PWM_INIT_REG(PWM1_BASE_PTR,index)
#define PWM2_INIT(index)                         PWM_INIT_REG(PWM2_BASE_PTR,index)
#define PWM1_CTRL2(index)                        PWM_CTRL2_REG(PWM1_BASE_PTR,index)
#define PWM2_CTRL2(index)                        PWM_CTRL2_REG(PWM2_BASE_PTR,index)
#define PWM1_CTRL(index)                         PWM_CTRL_REG(PWM1_BASE_PTR,index)
#define PWM2_CTRL(index)                         PWM_CTRL_REG(PWM2_BASE_PTR,index)
#define PWM1_VAL0(index)                         PWM_VAL0_REG(PWM1_BASE_PTR,index)
#define PWM2_VAL0(index)                         PWM_VAL0_REG(PWM2_BASE_PTR,index)
#define PWM1_FRACVAL1(index)                     PWM_FRACVAL1_REG(PWM1_BASE_PTR,index)
#define PWM2_FRACVAL1(index)                     PWM_FRACVAL1_REG(PWM2_BASE_PTR,index)
#define PWM1_VAL1(index)                         PWM_VAL1_REG(PWM1_BASE_PTR,index)
#define PWM2_VAL1(index)                         PWM_VAL1_REG(PWM2_BASE_PTR,index)
#define PWM1_FRACVAL2(index)                     PWM_FRACVAL2_REG(PWM1_BASE_PTR,index)
#define PWM2_FRACVAL2(index)                     PWM_FRACVAL2_REG(PWM2_BASE_PTR,index)
#define PWM1_VAL2(index)                         PWM_VAL2_REG(PWM1_BASE_PTR,index)
#define PWM2_VAL2(index)                         PWM_VAL2_REG(PWM2_BASE_PTR,index)
#define PWM1_FRACVAL3(index)                     PWM_FRACVAL3_REG(PWM1_BASE_PTR,index)
#define PWM2_FRACVAL3(index)                     PWM_FRACVAL3_REG(PWM2_BASE_PTR,index)
#define PWM1_VAL3(index)                         PWM_VAL3_REG(PWM1_BASE_PTR,index)
#define PWM2_VAL3(index)                         PWM_VAL3_REG(PWM2_BASE_PTR,index)
#define PWM1_FRACVAL4(index)                     PWM_FRACVAL4_REG(PWM1_BASE_PTR,index)
#define PWM2_FRACVAL4(index)                     PWM_FRACVAL4_REG(PWM2_BASE_PTR,index)
#define PWM1_VAL4(index)                         PWM_VAL4_REG(PWM1_BASE_PTR,index)
#define PWM2_VAL4(index)                         PWM_VAL4_REG(PWM2_BASE_PTR,index)
#define PWM1_FRACVAL5(index)                     PWM_FRACVAL5_REG(PWM1_BASE_PTR,index)
#define PWM2_FRACVAL5(index)                     PWM_FRACVAL5_REG(PWM2_BASE_PTR,index)
#define PWM1_VAL5(index)                         PWM_VAL5_REG(PWM1_BASE_PTR,index)
#define PWM2_VAL5(index)                         PWM_VAL5_REG(PWM2_BASE_PTR,index)
#define PWM1_FRCTRL(index)                       PWM_FRCTRL_REG(PWM1_BASE_PTR,index)
#define PWM2_FRCTRL(index)                       PWM_FRCTRL_REG(PWM2_BASE_PTR,index)
#define PWM1_OCTRL(index)                        PWM_OCTRL_REG(PWM1_BASE_PTR,index)
#define PWM2_OCTRL(index)                        PWM_OCTRL_REG(PWM2_BASE_PTR,index)
#define PWM1_STS(index)                          PWM_STS_REG(PWM1_BASE_PTR,index)
#define PWM2_STS(index)                          PWM_STS_REG(PWM2_BASE_PTR,index)
#define PWM1_INTEN(index)                        PWM_INTEN_REG(PWM1_BASE_PTR,index)
#define PWM2_INTEN(index)                        PWM_INTEN_REG(PWM2_BASE_PTR,index)
#define PWM1_DMAEN(index)                        PWM_DMAEN_REG(PWM1_BASE_PTR,index)
#define PWM2_DMAEN(index)                        PWM_DMAEN_REG(PWM2_BASE_PTR,index)
#define PWM1_TCTRL(index)                        PWM_TCTRL_REG(PWM1_BASE_PTR,index)
#define PWM2_TCTRL(index)                        PWM_TCTRL_REG(PWM2_BASE_PTR,index)
#define PWM1_DISMAP(index,index2)                PWM_DISMAP_REG(PWM1_BASE_PTR,index,index2)
#define PWM2_DISMAP(index,index2)                PWM_DISMAP_REG(PWM2_BASE_PTR,index,index2)
#define PWM1_DTCNT0(index)                       PWM_DTCNT0_REG(PWM1_BASE_PTR,index)
#define PWM2_DTCNT0(index)                       PWM_DTCNT0_REG(PWM2_BASE_PTR,index)
#define PWM1_DTCNT1(index)                       PWM_DTCNT1_REG(PWM1_BASE_PTR,index)
#define PWM2_DTCNT1(index)                       PWM_DTCNT1_REG(PWM2_BASE_PTR,index)
#define PWM1_CAPTCTRLA(index)                    PWM_CAPTCTRLA_REG(PWM1_BASE_PTR,index)
#define PWM2_CAPTCTRLA(index)                    PWM_CAPTCTRLA_REG(PWM2_BASE_PTR,index)
#define PWM1_CAPTCOMPA(index)                    PWM_CAPTCOMPA_REG(PWM1_BASE_PTR,index)
#define PWM2_CAPTCOMPA(index)                    PWM_CAPTCOMPA_REG(PWM2_BASE_PTR,index)
#define PWM1_CAPTCTRLB(index)                    PWM_CAPTCTRLB_REG(PWM1_BASE_PTR,index)
#define PWM2_CAPTCTRLB(index)                    PWM_CAPTCTRLB_REG(PWM2_BASE_PTR,index)
#define PWM1_CAPTCOMPB(index)                    PWM_CAPTCOMPB_REG(PWM1_BASE_PTR,index)
#define PWM2_CAPTCOMPB(index)                    PWM_CAPTCOMPB_REG(PWM2_BASE_PTR,index)
#define PWM1_CAPTCTRLX(index)                    PWM_CAPTCTRLX_REG(PWM1_BASE_PTR,index)
#define PWM2_CAPTCTRLX(index)                    PWM_CAPTCTRLX_REG(PWM2_BASE_PTR,index)
#define PWM1_CAPTCOMPX(index)                    PWM_CAPTCOMPX_REG(PWM1_BASE_PTR,index)
#define PWM2_CAPTCOMPX(index)                    PWM_CAPTCOMPX_REG(PWM2_BASE_PTR,index)
#define PWM1_CVAL0(index)                        PWM_CVAL0_REG(PWM1_BASE_PTR,index)
#define PWM2_CVAL0(index)                        PWM_CVAL0_REG(PWM2_BASE_PTR,index)
#define PWM1_CVAL0CYC(index)                     PWM_CVAL0CYC_REG(PWM1_BASE_PTR,index)
#define PWM2_CVAL0CYC(index)                     PWM_CVAL0CYC_REG(PWM2_BASE_PTR,index)
#define PWM1_CVAL1(index)                        PWM_CVAL1_REG(PWM1_BASE_PTR,index)
#define PWM2_CVAL1(index)                        PWM_CVAL1_REG(PWM2_BASE_PTR,index)
#define PWM1_CVAL1CYC(index)                     PWM_CVAL1CYC_REG(PWM1_BASE_PTR,index)
#define PWM2_CVAL1CYC(index)                     PWM_CVAL1CYC_REG(PWM2_BASE_PTR,index)
#define PWM1_CVAL2(index)                        PWM_CVAL2_REG(PWM1_BASE_PTR,index)
#define PWM2_CVAL2(index)                        PWM_CVAL2_REG(PWM2_BASE_PTR,index)
#define PWM1_CVAL2CYC(index)                     PWM_CVAL2CYC_REG(PWM1_BASE_PTR,index)
#define PWM2_CVAL2CYC(index)                     PWM_CVAL2CYC_REG(PWM2_BASE_PTR,index)
#define PWM1_CVAL3(index)                        PWM_CVAL3_REG(PWM1_BASE_PTR,index)
#define PWM2_CVAL3(index)                        PWM_CVAL3_REG(PWM2_BASE_PTR,index)
#define PWM1_CVAL3CYC(index)                     PWM_CVAL3CYC_REG(PWM1_BASE_PTR,index)
#define PWM2_CVAL3CYC(index)                     PWM_CVAL3CYC_REG(PWM2_BASE_PTR,index)
#define PWM1_CVAL4(index)                        PWM_CVAL4_REG(PWM1_BASE_PTR,index)
#define PWM2_CVAL4(index)                        PWM_CVAL4_REG(PWM2_BASE_PTR,index)
#define PWM1_CVAL4CYC(index)                     PWM_CVAL4CYC_REG(PWM1_BASE_PTR,index)
#define PWM2_CVAL4CYC(index)                     PWM_CVAL4CYC_REG(PWM2_BASE_PTR,index)
#define PWM1_CVAL5(index)                        PWM_CVAL5_REG(PWM1_BASE_PTR,index)
#define PWM2_CVAL5(index)                        PWM_CVAL5_REG(PWM2_BASE_PTR,index)
#define PWM1_CVAL5CYC(index)                     PWM_CVAL5CYC_REG(PWM1_BASE_PTR,index)
#define PWM2_CVAL5CYC(index)                     PWM_CVAL5CYC_REG(PWM2_BASE_PTR,index)

/*!
 * @}
 */ /* end of group PWM_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group PWM_Peripheral */


/* ----------------------------------------------------------------------------
   -- ROMC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ROMC_Peripheral ROMC
 * @{
 */

/** ROMC - Peripheral register structure */
typedef struct ROMC_MemMap {
  uint8_t RESERVED_0[212];
  uint32_t ROMPATCHD[8];                           /**< ROMC Data Registers, array offset: 0xD4, array step: 0x4 */
  uint32_t ROMPATCHCNTL;                           /**< ROMC Control Register, offset: 0xF4 */
  uint32_t ROMPATCHENH;                            /**< ROMC Enable Register High, offset: 0xF8 */
  uint32_t ROMPATCHENL;                            /**< ROMC Enable Register Low, offset: 0xFC */
  uint32_t ROMPATCHA[16];                          /**< ROMC Address Registers, array offset: 0x100, array step: 0x4 */
  uint8_t RESERVED_1[200];
  uint32_t ROMPATCHSR;                             /**< ROMC Status Register, offset: 0x208 */
} volatile *ROMC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- ROMC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ROMC_Register_Accessor_Macros ROMC - Register accessor macros
 * @{
 */


/* ROMC - Register accessors */
#define ROMC_ROMPATCHD_REG(base,index)           ((base)->ROMPATCHD[index])
#define ROMC_ROMPATCHCNTL_REG(base)              ((base)->ROMPATCHCNTL)
#define ROMC_ROMPATCHENH_REG(base)               ((base)->ROMPATCHENH)
#define ROMC_ROMPATCHENL_REG(base)               ((base)->ROMPATCHENL)
#define ROMC_ROMPATCHA_REG(base,index)           ((base)->ROMPATCHA[index])
#define ROMC_ROMPATCHSR_REG(base)                ((base)->ROMPATCHSR)

/*!
 * @}
 */ /* end of group ROMC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- ROMC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ROMC_Register_Masks ROMC Register Masks
 * @{
 */

/*! @name ROMPATCHD - ROMC Data Registers */
#define ROMC_ROMPATCHD_DATAX_MASK                (0xFFFFFFFFU)
#define ROMC_ROMPATCHD_DATAX_SHIFT               (0U)
#define ROMC_ROMPATCHD_DATAX(x)                  (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHD_DATAX_SHIFT)) & ROMC_ROMPATCHD_DATAX_MASK)

/* The count of ROMC_ROMPATCHD */
#define ROMC_ROMPATCHD_COUNT                     (8U)

/*! @name ROMPATCHCNTL - ROMC Control Register */
#define ROMC_ROMPATCHCNTL_DATAFIX_MASK           (0xFFU)
#define ROMC_ROMPATCHCNTL_DATAFIX_SHIFT          (0U)
#define ROMC_ROMPATCHCNTL_DATAFIX(x)             (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHCNTL_DATAFIX_SHIFT)) & ROMC_ROMPATCHCNTL_DATAFIX_MASK)
#define ROMC_ROMPATCHCNTL_DIS_MASK               (0x20000000U)
#define ROMC_ROMPATCHCNTL_DIS_SHIFT              (29U)

/*! @name ROMPATCHENL - ROMC Enable Register Low */
#define ROMC_ROMPATCHENL_ENABLE_MASK             (0xFFFFU)
#define ROMC_ROMPATCHENL_ENABLE_SHIFT            (0U)
#define ROMC_ROMPATCHENL_ENABLE(x)               (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHENL_ENABLE_SHIFT)) & ROMC_ROMPATCHENL_ENABLE_MASK)

/*! @name ROMPATCHA - ROMC Address Registers */
#define ROMC_ROMPATCHA_THUMBX_MASK               (0x1U)
#define ROMC_ROMPATCHA_THUMBX_SHIFT              (0U)
#define ROMC_ROMPATCHA_ADDRX_MASK                (0x7FFFFEU)
#define ROMC_ROMPATCHA_ADDRX_SHIFT               (1U)
#define ROMC_ROMPATCHA_ADDRX(x)                  (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHA_ADDRX_SHIFT)) & ROMC_ROMPATCHA_ADDRX_MASK)

/* The count of ROMC_ROMPATCHA */
#define ROMC_ROMPATCHA_COUNT                     (16U)

/*! @name ROMPATCHSR - ROMC Status Register */
#define ROMC_ROMPATCHSR_SOURCE_MASK              (0x3FU)
#define ROMC_ROMPATCHSR_SOURCE_SHIFT             (0U)
#define ROMC_ROMPATCHSR_SOURCE(x)                (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHSR_SOURCE_SHIFT)) & ROMC_ROMPATCHSR_SOURCE_MASK)
#define ROMC_ROMPATCHSR_SW_MASK                  (0x20000U)
#define ROMC_ROMPATCHSR_SW_SHIFT                 (17U)


/*!
 * @}
 */ /* end of group ROMC_Register_Masks */


/* ROMC - Peripheral instance base addresses */
/** Peripheral ROMC base pointer */
#define ROMC_BASE_PTR                            ((ROMC_MemMapPtr)0x40180000u)
/** Array initializer of ROMC peripheral base pointers */
#define ROMC_BASE_PTRS                           { ROMC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- ROMC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ROMC_Register_Accessor_Macros ROMC - Register accessor macros
 * @{
 */


/* ROMC - Register instance definitions */
/* ROMC */
#define ROMC_ROMPATCH7D                          ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,0)
#define ROMC_ROMPATCH6D                          ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,1)
#define ROMC_ROMPATCH5D                          ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,2)
#define ROMC_ROMPATCH4D                          ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,3)
#define ROMC_ROMPATCH3D                          ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,4)
#define ROMC_ROMPATCH2D                          ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,5)
#define ROMC_ROMPATCH1D                          ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,6)
#define ROMC_ROMPATCH0D                          ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,7)
#define ROMC_ROMPATCHCNTL                        ROMC_ROMPATCHCNTL_REG(ROMC_BASE_PTR)
#define ROMC_ROMPATCHENH                         ROMC_ROMPATCHENH_REG(ROMC_BASE_PTR)
#define ROMC_ROMPATCHENL                         ROMC_ROMPATCHENL_REG(ROMC_BASE_PTR)
#define ROMC_ROMPATCH0A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,0)
#define ROMC_ROMPATCH1A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,1)
#define ROMC_ROMPATCH2A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,2)
#define ROMC_ROMPATCH3A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,3)
#define ROMC_ROMPATCH4A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,4)
#define ROMC_ROMPATCH5A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,5)
#define ROMC_ROMPATCH6A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,6)
#define ROMC_ROMPATCH7A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,7)
#define ROMC_ROMPATCH8A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,8)
#define ROMC_ROMPATCH9A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,9)
#define ROMC_ROMPATCH10A                         ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,10)
#define ROMC_ROMPATCH11A                         ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,11)
#define ROMC_ROMPATCH12A                         ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,12)
#define ROMC_ROMPATCH13A                         ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,13)
#define ROMC_ROMPATCH14A                         ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,14)
#define ROMC_ROMPATCH15A                         ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,15)
#define ROMC_ROMPATCHSR                          ROMC_ROMPATCHSR_REG(ROMC_BASE_PTR)

/* ROMC - Register array accessors */
#define ROMC_ROMPATCHD(index)                    ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,index)
#define ROMC_ROMPATCHA(index)                    ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,index)

/*!
 * @}
 */ /* end of group ROMC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group ROMC_Peripheral */


/* ----------------------------------------------------------------------------
   -- RTWDOG
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RTWDOG_Peripheral RTWDOG
 * @{
 */

/** RTWDOG - Peripheral register structure */
typedef struct RTWDOG_MemMap {
  uint32_t CS;                                     /**< Watchdog Control and Status Register, offset: 0x0 */
  uint32_t CNT;                                    /**< Watchdog Counter Register, offset: 0x4 */
  uint32_t TOVAL;                                  /**< Watchdog Timeout Value Register, offset: 0x8 */
  uint32_t WIN;                                    /**< Watchdog Window Register, offset: 0xC */
} volatile *RTWDOG_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- RTWDOG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RTWDOG_Register_Accessor_Macros RTWDOG - Register accessor macros
 * @{
 */


/* RTWDOG - Register accessors */
#define RTWDOG_CS_REG(base)                      ((base)->CS)
#define RTWDOG_CNT_REG(base)                     ((base)->CNT)
#define RTWDOG_TOVAL_REG(base)                   ((base)->TOVAL)
#define RTWDOG_WIN_REG(base)                     ((base)->WIN)

/*!
 * @}
 */ /* end of group RTWDOG_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- RTWDOG Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RTWDOG_Register_Masks RTWDOG Register Masks
 * @{
 */

/*! @name CS - Watchdog Control and Status Register */
#define RTWDOG_CS_STOP_MASK                      (0x1U)
#define RTWDOG_CS_STOP_SHIFT                     (0U)
#define RTWDOG_CS_WAIT_MASK                      (0x2U)
#define RTWDOG_CS_WAIT_SHIFT                     (1U)
#define RTWDOG_CS_DBG_MASK                       (0x4U)
#define RTWDOG_CS_DBG_SHIFT                      (2U)
#define RTWDOG_CS_TST_MASK                       (0x18U)
#define RTWDOG_CS_TST_SHIFT                      (3U)
#define RTWDOG_CS_TST(x)                         (((uint32_t)(((uint32_t)(x)) << RTWDOG_CS_TST_SHIFT)) & RTWDOG_CS_TST_MASK)
#define RTWDOG_CS_UPDATE_MASK                    (0x20U)
#define RTWDOG_CS_UPDATE_SHIFT                   (5U)
#define RTWDOG_CS_INT_MASK                       (0x40U)
#define RTWDOG_CS_INT_SHIFT                      (6U)
#define RTWDOG_CS_EN_MASK                        (0x80U)
#define RTWDOG_CS_EN_SHIFT                       (7U)
#define RTWDOG_CS_CLK_MASK                       (0x300U)
#define RTWDOG_CS_CLK_SHIFT                      (8U)
#define RTWDOG_CS_CLK(x)                         (((uint32_t)(((uint32_t)(x)) << RTWDOG_CS_CLK_SHIFT)) & RTWDOG_CS_CLK_MASK)
#define RTWDOG_CS_RCS_MASK                       (0x400U)
#define RTWDOG_CS_RCS_SHIFT                      (10U)
#define RTWDOG_CS_ULK_MASK                       (0x800U)
#define RTWDOG_CS_ULK_SHIFT                      (11U)
#define RTWDOG_CS_PRES_MASK                      (0x1000U)
#define RTWDOG_CS_PRES_SHIFT                     (12U)
#define RTWDOG_CS_CMD32EN_MASK                   (0x2000U)
#define RTWDOG_CS_CMD32EN_SHIFT                  (13U)
#define RTWDOG_CS_FLG_MASK                       (0x4000U)
#define RTWDOG_CS_FLG_SHIFT                      (14U)
#define RTWDOG_CS_WIN_MASK                       (0x8000U)
#define RTWDOG_CS_WIN_SHIFT                      (15U)

/*! @name CNT - Watchdog Counter Register */
#define RTWDOG_CNT_CNTLOW_MASK                   (0xFFU)
#define RTWDOG_CNT_CNTLOW_SHIFT                  (0U)
#define RTWDOG_CNT_CNTLOW(x)                     (((uint32_t)(((uint32_t)(x)) << RTWDOG_CNT_CNTLOW_SHIFT)) & RTWDOG_CNT_CNTLOW_MASK)
#define RTWDOG_CNT_CNTHIGH_MASK                  (0xFF00U)
#define RTWDOG_CNT_CNTHIGH_SHIFT                 (8U)
#define RTWDOG_CNT_CNTHIGH(x)                    (((uint32_t)(((uint32_t)(x)) << RTWDOG_CNT_CNTHIGH_SHIFT)) & RTWDOG_CNT_CNTHIGH_MASK)

/*! @name TOVAL - Watchdog Timeout Value Register */
#define RTWDOG_TOVAL_TOVALLOW_MASK               (0xFFU)
#define RTWDOG_TOVAL_TOVALLOW_SHIFT              (0U)
#define RTWDOG_TOVAL_TOVALLOW(x)                 (((uint32_t)(((uint32_t)(x)) << RTWDOG_TOVAL_TOVALLOW_SHIFT)) & RTWDOG_TOVAL_TOVALLOW_MASK)
#define RTWDOG_TOVAL_TOVALHIGH_MASK              (0xFF00U)
#define RTWDOG_TOVAL_TOVALHIGH_SHIFT             (8U)
#define RTWDOG_TOVAL_TOVALHIGH(x)                (((uint32_t)(((uint32_t)(x)) << RTWDOG_TOVAL_TOVALHIGH_SHIFT)) & RTWDOG_TOVAL_TOVALHIGH_MASK)

/*! @name WIN - Watchdog Window Register */
#define RTWDOG_WIN_WINLOW_MASK                   (0xFFU)
#define RTWDOG_WIN_WINLOW_SHIFT                  (0U)
#define RTWDOG_WIN_WINLOW(x)                     (((uint32_t)(((uint32_t)(x)) << RTWDOG_WIN_WINLOW_SHIFT)) & RTWDOG_WIN_WINLOW_MASK)
#define RTWDOG_WIN_WINHIGH_MASK                  (0xFF00U)
#define RTWDOG_WIN_WINHIGH_SHIFT                 (8U)
#define RTWDOG_WIN_WINHIGH(x)                    (((uint32_t)(((uint32_t)(x)) << RTWDOG_WIN_WINHIGH_SHIFT)) & RTWDOG_WIN_WINHIGH_MASK)


/*!
 * @}
 */ /* end of group RTWDOG_Register_Masks */


/* RTWDOG - Peripheral instance base addresses */
/** Peripheral RTWDOG base pointer */
#define RTWDOG_BASE_PTR                          ((RTWDOG_MemMapPtr)0x400BC000u)
/** Array initializer of RTWDOG peripheral base pointers */
#define RTWDOG_BASE_PTRS                         { RTWDOG_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- RTWDOG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RTWDOG_Register_Accessor_Macros RTWDOG - Register accessor macros
 * @{
 */


/* RTWDOG - Register instance definitions */
/* RTWDOG */
#define RTWDOG_CS                                RTWDOG_CS_REG(RTWDOG_BASE_PTR)
#define RTWDOG_CNT                               RTWDOG_CNT_REG(RTWDOG_BASE_PTR)
#define RTWDOG_TOVAL                             RTWDOG_TOVAL_REG(RTWDOG_BASE_PTR)
#define RTWDOG_WIN                               RTWDOG_WIN_REG(RTWDOG_BASE_PTR)

/*!
 * @}
 */ /* end of group RTWDOG_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group RTWDOG_Peripheral */


/* ----------------------------------------------------------------------------
   -- SEMC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMC_Peripheral SEMC
 * @{
 */

/** SEMC - Peripheral register structure */
typedef struct SEMC_MemMap {
  uint32_t MCR;                                    /**< Module Control Register, offset: 0x0 */
  uint32_t IOCR;                                   /**< IO Mux Control Register, offset: 0x4 */
  uint32_t BMCR0;                                  /**< Master Bus (AXI) Control Register 0, offset: 0x8 */
  uint32_t BMCR1;                                  /**< Master Bus (AXI) Control Register 1, offset: 0xC */
  uint32_t BR[9];                                  /**< Base Register 0 (For SDRAM CS0 device)..Base Register 8 (For NAND device), array offset: 0x10, array step: 0x4 */
  uint8_t RESERVED_0[4];
  uint32_t INTEN;                                  /**< Interrupt Enable Register, offset: 0x38 */
  uint32_t INTR;                                   /**< Interrupt Enable Register, offset: 0x3C */
  uint32_t SDRAMCR0;                               /**< SDRAM control register 0, offset: 0x40 */
  uint32_t SDRAMCR1;                               /**< SDRAM control register 1, offset: 0x44 */
  uint32_t SDRAMCR2;                               /**< SDRAM control register 2, offset: 0x48 */
  uint32_t SDRAMCR3;                               /**< SDRAM control register 3, offset: 0x4C */
  uint32_t NANDCR0;                                /**< NAND control register 0, offset: 0x50 */
  uint32_t NANDCR1;                                /**< NAND control register 1, offset: 0x54 */
  uint32_t NANDCR2;                                /**< NAND control register 2, offset: 0x58 */
  uint32_t NANDCR3;                                /**< NAND control register 3, offset: 0x5C */
  uint32_t NORCR0;                                 /**< NOR control register 0, offset: 0x60 */
  uint32_t NORCR1;                                 /**< NOR control register 1, offset: 0x64 */
  uint32_t NORCR2;                                 /**< NOR control register 2, offset: 0x68 */
  uint32_t NORCR3;                                 /**< NOR control register 3, offset: 0x6C */
  uint32_t SRAMCR0;                                /**< SRAM control register 0, offset: 0x70 */
  uint32_t SRAMCR1;                                /**< SRAM control register 1, offset: 0x74 */
  uint32_t SRAMCR2;                                /**< SRAM control register 2, offset: 0x78 */
  uint32_t SRAMCR3;                                /**< SRAM control register 3, offset: 0x7C */
  uint32_t DBICR0;                                 /**< DBI-B control register 0, offset: 0x80 */
  uint32_t DBICR1;                                 /**< DBI-B control register 1, offset: 0x84 */
  uint8_t RESERVED_1[8];
  uint32_t IPCR0;                                  /**< IP Command control register 0, offset: 0x90 */
  uint32_t IPCR1;                                  /**< IP Command control register 1, offset: 0x94 */
  uint32_t IPCR2;                                  /**< IP Command control register 2, offset: 0x98 */
  uint32_t IPCMD;                                  /**< IP Command register, offset: 0x9C */
  uint32_t IPTXDAT;                                /**< TX DATA register (for IP Command), offset: 0xA0 */
  uint8_t RESERVED_2[12];
  uint32_t IPRXDAT;                                /**< RX DATA register (for IP Command), offset: 0xB0 */
  uint8_t RESERVED_3[12];
  uint32_t STS0;                                   /**< Status register 0, offset: 0xC0 */
  uint32_t STS1;                                   /**< Status register 1, offset: 0xC4 */
  uint32_t STS2;                                   /**< Status register 2, offset: 0xC8 */
  uint32_t STS3;                                   /**< Status register 3, offset: 0xCC */
  uint32_t STS4;                                   /**< Status register 4, offset: 0xD0 */
  uint32_t STS5;                                   /**< Status register 5, offset: 0xD4 */
  uint32_t STS6;                                   /**< Status register 6, offset: 0xD8 */
  uint32_t STS7;                                   /**< Status register 7, offset: 0xDC */
  uint32_t STS8;                                   /**< Status register 8, offset: 0xE0 */
  uint32_t STS9;                                   /**< Status register 9, offset: 0xE4 */
  uint32_t STS10;                                  /**< Status register 10, offset: 0xE8 */
  uint32_t STS11;                                  /**< Status register 11, offset: 0xEC */
  uint32_t STS12;                                  /**< Status register 12, offset: 0xF0 */
  uint32_t STS13;                                  /**< Status register 13, offset: 0xF4 */
  uint32_t STS14;                                  /**< Status register 14, offset: 0xF8 */
  uint32_t STS15;                                  /**< Status register 15, offset: 0xFC */
} volatile *SEMC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SEMC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMC_Register_Accessor_Macros SEMC - Register accessor macros
 * @{
 */


/* SEMC - Register accessors */
#define SEMC_MCR_REG(base)                       ((base)->MCR)
#define SEMC_IOCR_REG(base)                      ((base)->IOCR)
#define SEMC_BMCR0_REG(base)                     ((base)->BMCR0)
#define SEMC_BMCR1_REG(base)                     ((base)->BMCR1)
#define SEMC_BR_REG(base,index)                  ((base)->BR[index])
#define SEMC_INTEN_REG(base)                     ((base)->INTEN)
#define SEMC_INTR_REG(base)                      ((base)->INTR)
#define SEMC_SDRAMCR0_REG(base)                  ((base)->SDRAMCR0)
#define SEMC_SDRAMCR1_REG(base)                  ((base)->SDRAMCR1)
#define SEMC_SDRAMCR2_REG(base)                  ((base)->SDRAMCR2)
#define SEMC_SDRAMCR3_REG(base)                  ((base)->SDRAMCR3)
#define SEMC_NANDCR0_REG(base)                   ((base)->NANDCR0)
#define SEMC_NANDCR1_REG(base)                   ((base)->NANDCR1)
#define SEMC_NANDCR2_REG(base)                   ((base)->NANDCR2)
#define SEMC_NANDCR3_REG(base)                   ((base)->NANDCR3)
#define SEMC_NORCR0_REG(base)                    ((base)->NORCR0)
#define SEMC_NORCR1_REG(base)                    ((base)->NORCR1)
#define SEMC_NORCR2_REG(base)                    ((base)->NORCR2)
#define SEMC_NORCR3_REG(base)                    ((base)->NORCR3)
#define SEMC_SRAMCR0_REG(base)                   ((base)->SRAMCR0)
#define SEMC_SRAMCR1_REG(base)                   ((base)->SRAMCR1)
#define SEMC_SRAMCR2_REG(base)                   ((base)->SRAMCR2)
#define SEMC_SRAMCR3_REG(base)                   ((base)->SRAMCR3)
#define SEMC_DBICR0_REG(base)                    ((base)->DBICR0)
#define SEMC_DBICR1_REG(base)                    ((base)->DBICR1)
#define SEMC_IPCR0_REG(base)                     ((base)->IPCR0)
#define SEMC_IPCR1_REG(base)                     ((base)->IPCR1)
#define SEMC_IPCR2_REG(base)                     ((base)->IPCR2)
#define SEMC_IPCMD_REG(base)                     ((base)->IPCMD)
#define SEMC_IPTXDAT_REG(base)                   ((base)->IPTXDAT)
#define SEMC_IPRXDAT_REG(base)                   ((base)->IPRXDAT)
#define SEMC_STS0_REG(base)                      ((base)->STS0)
#define SEMC_STS1_REG(base)                      ((base)->STS1)
#define SEMC_STS2_REG(base)                      ((base)->STS2)
#define SEMC_STS3_REG(base)                      ((base)->STS3)
#define SEMC_STS4_REG(base)                      ((base)->STS4)
#define SEMC_STS5_REG(base)                      ((base)->STS5)
#define SEMC_STS6_REG(base)                      ((base)->STS6)
#define SEMC_STS7_REG(base)                      ((base)->STS7)
#define SEMC_STS8_REG(base)                      ((base)->STS8)
#define SEMC_STS9_REG(base)                      ((base)->STS9)
#define SEMC_STS10_REG(base)                     ((base)->STS10)
#define SEMC_STS11_REG(base)                     ((base)->STS11)
#define SEMC_STS12_REG(base)                     ((base)->STS12)
#define SEMC_STS13_REG(base)                     ((base)->STS13)
#define SEMC_STS14_REG(base)                     ((base)->STS14)
#define SEMC_STS15_REG(base)                     ((base)->STS15)

/*!
 * @}
 */ /* end of group SEMC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SEMC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMC_Register_Masks SEMC Register Masks
 * @{
 */

/*! @name MCR - Module Control Register */
#define SEMC_MCR_SWRST_MASK                      (0x1U)
#define SEMC_MCR_SWRST_SHIFT                     (0U)
#define SEMC_MCR_MDIS_MASK                       (0x2U)
#define SEMC_MCR_MDIS_SHIFT                      (1U)
#define SEMC_MCR_DQSMD_MASK                      (0x4U)
#define SEMC_MCR_DQSMD_SHIFT                     (2U)
#define SEMC_MCR_WPOL0_MASK                      (0x40U)
#define SEMC_MCR_WPOL0_SHIFT                     (6U)
#define SEMC_MCR_WPOL1_MASK                      (0x80U)
#define SEMC_MCR_WPOL1_SHIFT                     (7U)
#define SEMC_MCR_CTO_MASK                        (0xFF0000U)
#define SEMC_MCR_CTO_SHIFT                       (16U)
#define SEMC_MCR_CTO(x)                          (((uint32_t)(((uint32_t)(x)) << SEMC_MCR_CTO_SHIFT)) & SEMC_MCR_CTO_MASK)
#define SEMC_MCR_BTO_MASK                        (0x1F000000U)
#define SEMC_MCR_BTO_SHIFT                       (24U)
#define SEMC_MCR_BTO(x)                          (((uint32_t)(((uint32_t)(x)) << SEMC_MCR_BTO_SHIFT)) & SEMC_MCR_BTO_MASK)

/*! @name IOCR - IO Mux Control Register */
#define SEMC_IOCR_MUX_A8_MASK                    (0x7U)
#define SEMC_IOCR_MUX_A8_SHIFT                   (0U)
#define SEMC_IOCR_MUX_A8(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_IOCR_MUX_A8_SHIFT)) & SEMC_IOCR_MUX_A8_MASK)
#define SEMC_IOCR_MUX_CSX0_MASK                  (0x38U)
#define SEMC_IOCR_MUX_CSX0_SHIFT                 (3U)
#define SEMC_IOCR_MUX_CSX0(x)                    (((uint32_t)(((uint32_t)(x)) << SEMC_IOCR_MUX_CSX0_SHIFT)) & SEMC_IOCR_MUX_CSX0_MASK)
#define SEMC_IOCR_MUX_CSX1_MASK                  (0x1C0U)
#define SEMC_IOCR_MUX_CSX1_SHIFT                 (6U)
#define SEMC_IOCR_MUX_CSX1(x)                    (((uint32_t)(((uint32_t)(x)) << SEMC_IOCR_MUX_CSX1_SHIFT)) & SEMC_IOCR_MUX_CSX1_MASK)
#define SEMC_IOCR_MUX_CSX2_MASK                  (0xE00U)
#define SEMC_IOCR_MUX_CSX2_SHIFT                 (9U)
#define SEMC_IOCR_MUX_CSX2(x)                    (((uint32_t)(((uint32_t)(x)) << SEMC_IOCR_MUX_CSX2_SHIFT)) & SEMC_IOCR_MUX_CSX2_MASK)
#define SEMC_IOCR_MUX_CSX3_MASK                  (0x7000U)
#define SEMC_IOCR_MUX_CSX3_SHIFT                 (12U)
#define SEMC_IOCR_MUX_CSX3(x)                    (((uint32_t)(((uint32_t)(x)) << SEMC_IOCR_MUX_CSX3_SHIFT)) & SEMC_IOCR_MUX_CSX3_MASK)
#define SEMC_IOCR_MUX_RDY_MASK                   (0x38000U)
#define SEMC_IOCR_MUX_RDY_SHIFT                  (15U)
#define SEMC_IOCR_MUX_RDY(x)                     (((uint32_t)(((uint32_t)(x)) << SEMC_IOCR_MUX_RDY_SHIFT)) & SEMC_IOCR_MUX_RDY_MASK)

/*! @name BMCR0 - Master Bus (AXI) Control Register 0 */
#define SEMC_BMCR0_WQOS_MASK                     (0xFU)
#define SEMC_BMCR0_WQOS_SHIFT                    (0U)
#define SEMC_BMCR0_WQOS(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_BMCR0_WQOS_SHIFT)) & SEMC_BMCR0_WQOS_MASK)
#define SEMC_BMCR0_WAGE_MASK                     (0xF0U)
#define SEMC_BMCR0_WAGE_SHIFT                    (4U)
#define SEMC_BMCR0_WAGE(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_BMCR0_WAGE_SHIFT)) & SEMC_BMCR0_WAGE_MASK)
#define SEMC_BMCR0_WSH_MASK                      (0xFF00U)
#define SEMC_BMCR0_WSH_SHIFT                     (8U)
#define SEMC_BMCR0_WSH(x)                        (((uint32_t)(((uint32_t)(x)) << SEMC_BMCR0_WSH_SHIFT)) & SEMC_BMCR0_WSH_MASK)
#define SEMC_BMCR0_WRWS_MASK                     (0xFF0000U)
#define SEMC_BMCR0_WRWS_SHIFT                    (16U)
#define SEMC_BMCR0_WRWS(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_BMCR0_WRWS_SHIFT)) & SEMC_BMCR0_WRWS_MASK)

/*! @name BMCR1 - Master Bus (AXI) Control Register 1 */
#define SEMC_BMCR1_WQOS_MASK                     (0xFU)
#define SEMC_BMCR1_WQOS_SHIFT                    (0U)
#define SEMC_BMCR1_WQOS(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_BMCR1_WQOS_SHIFT)) & SEMC_BMCR1_WQOS_MASK)
#define SEMC_BMCR1_WAGE_MASK                     (0xF0U)
#define SEMC_BMCR1_WAGE_SHIFT                    (4U)
#define SEMC_BMCR1_WAGE(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_BMCR1_WAGE_SHIFT)) & SEMC_BMCR1_WAGE_MASK)
#define SEMC_BMCR1_WPH_MASK                      (0xFF00U)
#define SEMC_BMCR1_WPH_SHIFT                     (8U)
#define SEMC_BMCR1_WPH(x)                        (((uint32_t)(((uint32_t)(x)) << SEMC_BMCR1_WPH_SHIFT)) & SEMC_BMCR1_WPH_MASK)
#define SEMC_BMCR1_WRWS_MASK                     (0xFF0000U)
#define SEMC_BMCR1_WRWS_SHIFT                    (16U)
#define SEMC_BMCR1_WRWS(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_BMCR1_WRWS_SHIFT)) & SEMC_BMCR1_WRWS_MASK)
#define SEMC_BMCR1_WBR_MASK                      (0xFF000000U)
#define SEMC_BMCR1_WBR_SHIFT                     (24U)
#define SEMC_BMCR1_WBR(x)                        (((uint32_t)(((uint32_t)(x)) << SEMC_BMCR1_WBR_SHIFT)) & SEMC_BMCR1_WBR_MASK)

/*! @name BR - Base Register 0 (For SDRAM CS0 device)..Base Register 8 (For NAND device) */
#define SEMC_BR_VLD_MASK                         (0x1U)
#define SEMC_BR_VLD_SHIFT                        (0U)
#define SEMC_BR_MS_MASK                          (0x3EU)
#define SEMC_BR_MS_SHIFT                         (1U)
#define SEMC_BR_MS(x)                            (((uint32_t)(((uint32_t)(x)) << SEMC_BR_MS_SHIFT)) & SEMC_BR_MS_MASK)
#define SEMC_BR_BA_MASK                          (0xFFFFF000U)
#define SEMC_BR_BA_SHIFT                         (12U)
#define SEMC_BR_BA(x)                            (((uint32_t)(((uint32_t)(x)) << SEMC_BR_BA_SHIFT)) & SEMC_BR_BA_MASK)

/* The count of SEMC_BR */
#define SEMC_BR_COUNT                            (9U)

/*! @name INTEN - Interrupt Enable Register */
#define SEMC_INTEN_IPCMDDONEEN_MASK              (0x1U)
#define SEMC_INTEN_IPCMDDONEEN_SHIFT             (0U)
#define SEMC_INTEN_IPCMDERREN_MASK               (0x2U)
#define SEMC_INTEN_IPCMDERREN_SHIFT              (1U)
#define SEMC_INTEN_AXICMDERREN_MASK              (0x4U)
#define SEMC_INTEN_AXICMDERREN_SHIFT             (2U)
#define SEMC_INTEN_AXIBUSERREN_MASK              (0x8U)
#define SEMC_INTEN_AXIBUSERREN_SHIFT             (3U)
#define SEMC_INTEN_NDPAGEENDEN_MASK              (0x10U)
#define SEMC_INTEN_NDPAGEENDEN_SHIFT             (4U)
#define SEMC_INTEN_NDNOPENDEN_MASK               (0x20U)
#define SEMC_INTEN_NDNOPENDEN_SHIFT              (5U)

/*! @name INTR - Interrupt Enable Register */
#define SEMC_INTR_IPCMDDONE_MASK                 (0x1U)
#define SEMC_INTR_IPCMDDONE_SHIFT                (0U)
#define SEMC_INTR_IPCMDERR_MASK                  (0x2U)
#define SEMC_INTR_IPCMDERR_SHIFT                 (1U)
#define SEMC_INTR_AXICMDERR_MASK                 (0x4U)
#define SEMC_INTR_AXICMDERR_SHIFT                (2U)
#define SEMC_INTR_AXIBUSERR_MASK                 (0x8U)
#define SEMC_INTR_AXIBUSERR_SHIFT                (3U)
#define SEMC_INTR_NDPAGEEND_MASK                 (0x10U)
#define SEMC_INTR_NDPAGEEND_SHIFT                (4U)
#define SEMC_INTR_NDNOPEND_MASK                  (0x20U)
#define SEMC_INTR_NDNOPEND_SHIFT                 (5U)

/*! @name SDRAMCR0 - SDRAM control register 0 */
#define SEMC_SDRAMCR0_PS_MASK                    (0x1U)
#define SEMC_SDRAMCR0_PS_SHIFT                   (0U)
#define SEMC_SDRAMCR0_BL_MASK                    (0x70U)
#define SEMC_SDRAMCR0_BL_SHIFT                   (4U)
#define SEMC_SDRAMCR0_BL(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_SDRAMCR0_BL_SHIFT)) & SEMC_SDRAMCR0_BL_MASK)
#define SEMC_SDRAMCR0_COL_MASK                   (0x300U)
#define SEMC_SDRAMCR0_COL_SHIFT                  (8U)
#define SEMC_SDRAMCR0_COL(x)                     (((uint32_t)(((uint32_t)(x)) << SEMC_SDRAMCR0_COL_SHIFT)) & SEMC_SDRAMCR0_COL_MASK)
#define SEMC_SDRAMCR0_CL_MASK                    (0xC00U)
#define SEMC_SDRAMCR0_CL_SHIFT                   (10U)
#define SEMC_SDRAMCR0_CL(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_SDRAMCR0_CL_SHIFT)) & SEMC_SDRAMCR0_CL_MASK)

/*! @name SDRAMCR1 - SDRAM control register 1 */
#define SEMC_SDRAMCR1_PRE2ACT_MASK               (0xFU)
#define SEMC_SDRAMCR1_PRE2ACT_SHIFT              (0U)
#define SEMC_SDRAMCR1_PRE2ACT(x)                 (((uint32_t)(((uint32_t)(x)) << SEMC_SDRAMCR1_PRE2ACT_SHIFT)) & SEMC_SDRAMCR1_PRE2ACT_MASK)
#define SEMC_SDRAMCR1_ACT2RW_MASK                (0xF0U)
#define SEMC_SDRAMCR1_ACT2RW_SHIFT               (4U)
#define SEMC_SDRAMCR1_ACT2RW(x)                  (((uint32_t)(((uint32_t)(x)) << SEMC_SDRAMCR1_ACT2RW_SHIFT)) & SEMC_SDRAMCR1_ACT2RW_MASK)
#define SEMC_SDRAMCR1_RFRC_MASK                  (0x1F00U)
#define SEMC_SDRAMCR1_RFRC_SHIFT                 (8U)
#define SEMC_SDRAMCR1_RFRC(x)                    (((uint32_t)(((uint32_t)(x)) << SEMC_SDRAMCR1_RFRC_SHIFT)) & SEMC_SDRAMCR1_RFRC_MASK)
#define SEMC_SDRAMCR1_WRC_MASK                   (0xE000U)
#define SEMC_SDRAMCR1_WRC_SHIFT                  (13U)
#define SEMC_SDRAMCR1_WRC(x)                     (((uint32_t)(((uint32_t)(x)) << SEMC_SDRAMCR1_WRC_SHIFT)) & SEMC_SDRAMCR1_WRC_MASK)
#define SEMC_SDRAMCR1_CKEOFF_MASK                (0xF0000U)
#define SEMC_SDRAMCR1_CKEOFF_SHIFT               (16U)
#define SEMC_SDRAMCR1_CKEOFF(x)                  (((uint32_t)(((uint32_t)(x)) << SEMC_SDRAMCR1_CKEOFF_SHIFT)) & SEMC_SDRAMCR1_CKEOFF_MASK)
#define SEMC_SDRAMCR1_ACT2PRE_MASK               (0xF00000U)
#define SEMC_SDRAMCR1_ACT2PRE_SHIFT              (20U)
#define SEMC_SDRAMCR1_ACT2PRE(x)                 (((uint32_t)(((uint32_t)(x)) << SEMC_SDRAMCR1_ACT2PRE_SHIFT)) & SEMC_SDRAMCR1_ACT2PRE_MASK)

/*! @name SDRAMCR2 - SDRAM control register 2 */
#define SEMC_SDRAMCR2_SRRC_MASK                  (0xFFU)
#define SEMC_SDRAMCR2_SRRC_SHIFT                 (0U)
#define SEMC_SDRAMCR2_SRRC(x)                    (((uint32_t)(((uint32_t)(x)) << SEMC_SDRAMCR2_SRRC_SHIFT)) & SEMC_SDRAMCR2_SRRC_MASK)
#define SEMC_SDRAMCR2_REF2REF_MASK               (0xFF00U)
#define SEMC_SDRAMCR2_REF2REF_SHIFT              (8U)
#define SEMC_SDRAMCR2_REF2REF(x)                 (((uint32_t)(((uint32_t)(x)) << SEMC_SDRAMCR2_REF2REF_SHIFT)) & SEMC_SDRAMCR2_REF2REF_MASK)
#define SEMC_SDRAMCR2_ACT2ACT_MASK               (0xFF0000U)
#define SEMC_SDRAMCR2_ACT2ACT_SHIFT              (16U)
#define SEMC_SDRAMCR2_ACT2ACT(x)                 (((uint32_t)(((uint32_t)(x)) << SEMC_SDRAMCR2_ACT2ACT_SHIFT)) & SEMC_SDRAMCR2_ACT2ACT_MASK)
#define SEMC_SDRAMCR2_ITO_MASK                   (0xFF000000U)
#define SEMC_SDRAMCR2_ITO_SHIFT                  (24U)
#define SEMC_SDRAMCR2_ITO(x)                     (((uint32_t)(((uint32_t)(x)) << SEMC_SDRAMCR2_ITO_SHIFT)) & SEMC_SDRAMCR2_ITO_MASK)

/*! @name SDRAMCR3 - SDRAM control register 3 */
#define SEMC_SDRAMCR3_REN_MASK                   (0x1U)
#define SEMC_SDRAMCR3_REN_SHIFT                  (0U)
#define SEMC_SDRAMCR3_REBL_MASK                  (0xEU)
#define SEMC_SDRAMCR3_REBL_SHIFT                 (1U)
#define SEMC_SDRAMCR3_REBL(x)                    (((uint32_t)(((uint32_t)(x)) << SEMC_SDRAMCR3_REBL_SHIFT)) & SEMC_SDRAMCR3_REBL_MASK)
#define SEMC_SDRAMCR3_PRESCALE_MASK              (0xFF00U)
#define SEMC_SDRAMCR3_PRESCALE_SHIFT             (8U)
#define SEMC_SDRAMCR3_PRESCALE(x)                (((uint32_t)(((uint32_t)(x)) << SEMC_SDRAMCR3_PRESCALE_SHIFT)) & SEMC_SDRAMCR3_PRESCALE_MASK)
#define SEMC_SDRAMCR3_RT_MASK                    (0xFF0000U)
#define SEMC_SDRAMCR3_RT_SHIFT                   (16U)
#define SEMC_SDRAMCR3_RT(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_SDRAMCR3_RT_SHIFT)) & SEMC_SDRAMCR3_RT_MASK)
#define SEMC_SDRAMCR3_UT_MASK                    (0xFF000000U)
#define SEMC_SDRAMCR3_UT_SHIFT                   (24U)
#define SEMC_SDRAMCR3_UT(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_SDRAMCR3_UT_SHIFT)) & SEMC_SDRAMCR3_UT_MASK)

/*! @name NANDCR0 - NAND control register 0 */
#define SEMC_NANDCR0_PS_MASK                     (0x1U)
#define SEMC_NANDCR0_PS_SHIFT                    (0U)
#define SEMC_NANDCR0_BL_MASK                     (0x70U)
#define SEMC_NANDCR0_BL_SHIFT                    (4U)
#define SEMC_NANDCR0_BL(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_NANDCR0_BL_SHIFT)) & SEMC_NANDCR0_BL_MASK)
#define SEMC_NANDCR0_EDO_MASK                    (0x80U)
#define SEMC_NANDCR0_EDO_SHIFT                   (7U)
#define SEMC_NANDCR0_COL_MASK                    (0x700U)
#define SEMC_NANDCR0_COL_SHIFT                   (8U)
#define SEMC_NANDCR0_COL(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_NANDCR0_COL_SHIFT)) & SEMC_NANDCR0_COL_MASK)

/*! @name NANDCR1 - NAND control register 1 */
#define SEMC_NANDCR1_CES_MASK                    (0xFU)
#define SEMC_NANDCR1_CES_SHIFT                   (0U)
#define SEMC_NANDCR1_CES(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_NANDCR1_CES_SHIFT)) & SEMC_NANDCR1_CES_MASK)
#define SEMC_NANDCR1_CEH_MASK                    (0xF0U)
#define SEMC_NANDCR1_CEH_SHIFT                   (4U)
#define SEMC_NANDCR1_CEH(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_NANDCR1_CEH_SHIFT)) & SEMC_NANDCR1_CEH_MASK)
#define SEMC_NANDCR1_WEL_MASK                    (0xF00U)
#define SEMC_NANDCR1_WEL_SHIFT                   (8U)
#define SEMC_NANDCR1_WEL(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_NANDCR1_WEL_SHIFT)) & SEMC_NANDCR1_WEL_MASK)
#define SEMC_NANDCR1_WEH_MASK                    (0xF000U)
#define SEMC_NANDCR1_WEH_SHIFT                   (12U)
#define SEMC_NANDCR1_WEH(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_NANDCR1_WEH_SHIFT)) & SEMC_NANDCR1_WEH_MASK)
#define SEMC_NANDCR1_REL_MASK                    (0xF0000U)
#define SEMC_NANDCR1_REL_SHIFT                   (16U)
#define SEMC_NANDCR1_REL(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_NANDCR1_REL_SHIFT)) & SEMC_NANDCR1_REL_MASK)
#define SEMC_NANDCR1_REH_MASK                    (0xF00000U)
#define SEMC_NANDCR1_REH_SHIFT                   (20U)
#define SEMC_NANDCR1_REH(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_NANDCR1_REH_SHIFT)) & SEMC_NANDCR1_REH_MASK)
#define SEMC_NANDCR1_TA_MASK                     (0xF000000U)
#define SEMC_NANDCR1_TA_SHIFT                    (24U)
#define SEMC_NANDCR1_TA(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_NANDCR1_TA_SHIFT)) & SEMC_NANDCR1_TA_MASK)
#define SEMC_NANDCR1_CEITV_MASK                  (0xF0000000U)
#define SEMC_NANDCR1_CEITV_SHIFT                 (28U)
#define SEMC_NANDCR1_CEITV(x)                    (((uint32_t)(((uint32_t)(x)) << SEMC_NANDCR1_CEITV_SHIFT)) & SEMC_NANDCR1_CEITV_MASK)

/*! @name NANDCR2 - NAND control register 2 */
#define SEMC_NANDCR2_TWHR_MASK                   (0x3FU)
#define SEMC_NANDCR2_TWHR_SHIFT                  (0U)
#define SEMC_NANDCR2_TWHR(x)                     (((uint32_t)(((uint32_t)(x)) << SEMC_NANDCR2_TWHR_SHIFT)) & SEMC_NANDCR2_TWHR_MASK)
#define SEMC_NANDCR2_TRHW_MASK                   (0xFC0U)
#define SEMC_NANDCR2_TRHW_SHIFT                  (6U)
#define SEMC_NANDCR2_TRHW(x)                     (((uint32_t)(((uint32_t)(x)) << SEMC_NANDCR2_TRHW_SHIFT)) & SEMC_NANDCR2_TRHW_MASK)
#define SEMC_NANDCR2_TADL_MASK                   (0x3F000U)
#define SEMC_NANDCR2_TADL_SHIFT                  (12U)
#define SEMC_NANDCR2_TADL(x)                     (((uint32_t)(((uint32_t)(x)) << SEMC_NANDCR2_TADL_SHIFT)) & SEMC_NANDCR2_TADL_MASK)
#define SEMC_NANDCR2_TRR_MASK                    (0xFC0000U)
#define SEMC_NANDCR2_TRR_SHIFT                   (18U)
#define SEMC_NANDCR2_TRR(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_NANDCR2_TRR_SHIFT)) & SEMC_NANDCR2_TRR_MASK)
#define SEMC_NANDCR2_TWB_MASK                    (0x3F000000U)
#define SEMC_NANDCR2_TWB_SHIFT                   (24U)
#define SEMC_NANDCR2_TWB(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_NANDCR2_TWB_SHIFT)) & SEMC_NANDCR2_TWB_MASK)

/*! @name NANDCR3 - NAND control register 3 */
#define SEMC_NANDCR3_NDOPT1_MASK                 (0x1U)
#define SEMC_NANDCR3_NDOPT1_SHIFT                (0U)
#define SEMC_NANDCR3_NDOPT2_MASK                 (0x2U)
#define SEMC_NANDCR3_NDOPT2_SHIFT                (1U)
#define SEMC_NANDCR3_NDOPT3_MASK                 (0x4U)
#define SEMC_NANDCR3_NDOPT3_SHIFT                (2U)

/*! @name NORCR0 - NOR control register 0 */
#define SEMC_NORCR0_PS_MASK                      (0x1U)
#define SEMC_NORCR0_PS_SHIFT                     (0U)
#define SEMC_NORCR0_BL_MASK                      (0x70U)
#define SEMC_NORCR0_BL_SHIFT                     (4U)
#define SEMC_NORCR0_BL(x)                        (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR0_BL_SHIFT)) & SEMC_NORCR0_BL_MASK)
#define SEMC_NORCR0_AM_MASK                      (0x300U)
#define SEMC_NORCR0_AM_SHIFT                     (8U)
#define SEMC_NORCR0_AM(x)                        (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR0_AM_SHIFT)) & SEMC_NORCR0_AM_MASK)
#define SEMC_NORCR0_ADVP_MASK                    (0x400U)
#define SEMC_NORCR0_ADVP_SHIFT                   (10U)
#define SEMC_NORCR0_COL_MASK                     (0xF000U)
#define SEMC_NORCR0_COL_SHIFT                    (12U)
#define SEMC_NORCR0_COL(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR0_COL_SHIFT)) & SEMC_NORCR0_COL_MASK)

/*! @name NORCR1 - NOR control register 1 */
#define SEMC_NORCR1_CES_MASK                     (0xFU)
#define SEMC_NORCR1_CES_SHIFT                    (0U)
#define SEMC_NORCR1_CES(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR1_CES_SHIFT)) & SEMC_NORCR1_CES_MASK)
#define SEMC_NORCR1_CEH_MASK                     (0xF0U)
#define SEMC_NORCR1_CEH_SHIFT                    (4U)
#define SEMC_NORCR1_CEH(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR1_CEH_SHIFT)) & SEMC_NORCR1_CEH_MASK)
#define SEMC_NORCR1_AS_MASK                      (0xF00U)
#define SEMC_NORCR1_AS_SHIFT                     (8U)
#define SEMC_NORCR1_AS(x)                        (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR1_AS_SHIFT)) & SEMC_NORCR1_AS_MASK)
#define SEMC_NORCR1_AH_MASK                      (0xF000U)
#define SEMC_NORCR1_AH_SHIFT                     (12U)
#define SEMC_NORCR1_AH(x)                        (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR1_AH_SHIFT)) & SEMC_NORCR1_AH_MASK)
#define SEMC_NORCR1_WEL_MASK                     (0xF0000U)
#define SEMC_NORCR1_WEL_SHIFT                    (16U)
#define SEMC_NORCR1_WEL(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR1_WEL_SHIFT)) & SEMC_NORCR1_WEL_MASK)
#define SEMC_NORCR1_WEH_MASK                     (0xF00000U)
#define SEMC_NORCR1_WEH_SHIFT                    (20U)
#define SEMC_NORCR1_WEH(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR1_WEH_SHIFT)) & SEMC_NORCR1_WEH_MASK)
#define SEMC_NORCR1_REL_MASK                     (0xF000000U)
#define SEMC_NORCR1_REL_SHIFT                    (24U)
#define SEMC_NORCR1_REL(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR1_REL_SHIFT)) & SEMC_NORCR1_REL_MASK)
#define SEMC_NORCR1_REH_MASK                     (0xF0000000U)
#define SEMC_NORCR1_REH_SHIFT                    (28U)
#define SEMC_NORCR1_REH(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR1_REH_SHIFT)) & SEMC_NORCR1_REH_MASK)

/*! @name NORCR2 - NOR control register 2 */
#define SEMC_NORCR2_WDS_MASK                     (0xFU)
#define SEMC_NORCR2_WDS_SHIFT                    (0U)
#define SEMC_NORCR2_WDS(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR2_WDS_SHIFT)) & SEMC_NORCR2_WDS_MASK)
#define SEMC_NORCR2_WDH_MASK                     (0xF0U)
#define SEMC_NORCR2_WDH_SHIFT                    (4U)
#define SEMC_NORCR2_WDH(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR2_WDH_SHIFT)) & SEMC_NORCR2_WDH_MASK)
#define SEMC_NORCR2_TA_MASK                      (0xF00U)
#define SEMC_NORCR2_TA_SHIFT                     (8U)
#define SEMC_NORCR2_TA(x)                        (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR2_TA_SHIFT)) & SEMC_NORCR2_TA_MASK)
#define SEMC_NORCR2_AWDH_MASK                    (0xF000U)
#define SEMC_NORCR2_AWDH_SHIFT                   (12U)
#define SEMC_NORCR2_AWDH(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR2_AWDH_SHIFT)) & SEMC_NORCR2_AWDH_MASK)
#define SEMC_NORCR2_LC_MASK                      (0xF0000U)
#define SEMC_NORCR2_LC_SHIFT                     (16U)
#define SEMC_NORCR2_LC(x)                        (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR2_LC_SHIFT)) & SEMC_NORCR2_LC_MASK)
#define SEMC_NORCR2_RD_MASK                      (0xF00000U)
#define SEMC_NORCR2_RD_SHIFT                     (20U)
#define SEMC_NORCR2_RD(x)                        (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR2_RD_SHIFT)) & SEMC_NORCR2_RD_MASK)
#define SEMC_NORCR2_CEITV_MASK                   (0xF000000U)
#define SEMC_NORCR2_CEITV_SHIFT                  (24U)
#define SEMC_NORCR2_CEITV(x)                     (((uint32_t)(((uint32_t)(x)) << SEMC_NORCR2_CEITV_SHIFT)) & SEMC_NORCR2_CEITV_MASK)

/*! @name SRAMCR0 - SRAM control register 0 */
#define SEMC_SRAMCR0_PS_MASK                     (0x1U)
#define SEMC_SRAMCR0_PS_SHIFT                    (0U)
#define SEMC_SRAMCR0_BL_MASK                     (0x70U)
#define SEMC_SRAMCR0_BL_SHIFT                    (4U)
#define SEMC_SRAMCR0_BL(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR0_BL_SHIFT)) & SEMC_SRAMCR0_BL_MASK)
#define SEMC_SRAMCR0_AM_MASK                     (0x300U)
#define SEMC_SRAMCR0_AM_SHIFT                    (8U)
#define SEMC_SRAMCR0_AM(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR0_AM_SHIFT)) & SEMC_SRAMCR0_AM_MASK)
#define SEMC_SRAMCR0_ADVP_MASK                   (0x400U)
#define SEMC_SRAMCR0_ADVP_SHIFT                  (10U)
#define SEMC_SRAMCR0_COL_MASK                    (0xF000U)
#define SEMC_SRAMCR0_COL_SHIFT                   (12U)
#define SEMC_SRAMCR0_COL(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR0_COL_SHIFT)) & SEMC_SRAMCR0_COL_MASK)

/*! @name SRAMCR1 - SRAM control register 1 */
#define SEMC_SRAMCR1_CES_MASK                    (0xFU)
#define SEMC_SRAMCR1_CES_SHIFT                   (0U)
#define SEMC_SRAMCR1_CES(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR1_CES_SHIFT)) & SEMC_SRAMCR1_CES_MASK)
#define SEMC_SRAMCR1_CEH_MASK                    (0xF0U)
#define SEMC_SRAMCR1_CEH_SHIFT                   (4U)
#define SEMC_SRAMCR1_CEH(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR1_CEH_SHIFT)) & SEMC_SRAMCR1_CEH_MASK)
#define SEMC_SRAMCR1_AS_MASK                     (0xF00U)
#define SEMC_SRAMCR1_AS_SHIFT                    (8U)
#define SEMC_SRAMCR1_AS(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR1_AS_SHIFT)) & SEMC_SRAMCR1_AS_MASK)
#define SEMC_SRAMCR1_AH_MASK                     (0xF000U)
#define SEMC_SRAMCR1_AH_SHIFT                    (12U)
#define SEMC_SRAMCR1_AH(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR1_AH_SHIFT)) & SEMC_SRAMCR1_AH_MASK)
#define SEMC_SRAMCR1_WEL_MASK                    (0xF0000U)
#define SEMC_SRAMCR1_WEL_SHIFT                   (16U)
#define SEMC_SRAMCR1_WEL(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR1_WEL_SHIFT)) & SEMC_SRAMCR1_WEL_MASK)
#define SEMC_SRAMCR1_WEH_MASK                    (0xF00000U)
#define SEMC_SRAMCR1_WEH_SHIFT                   (20U)
#define SEMC_SRAMCR1_WEH(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR1_WEH_SHIFT)) & SEMC_SRAMCR1_WEH_MASK)
#define SEMC_SRAMCR1_REL_MASK                    (0xF000000U)
#define SEMC_SRAMCR1_REL_SHIFT                   (24U)
#define SEMC_SRAMCR1_REL(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR1_REL_SHIFT)) & SEMC_SRAMCR1_REL_MASK)
#define SEMC_SRAMCR1_REH_MASK                    (0xF0000000U)
#define SEMC_SRAMCR1_REH_SHIFT                   (28U)
#define SEMC_SRAMCR1_REH(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR1_REH_SHIFT)) & SEMC_SRAMCR1_REH_MASK)

/*! @name SRAMCR2 - SRAM control register 2 */
#define SEMC_SRAMCR2_WDS_MASK                    (0xFU)
#define SEMC_SRAMCR2_WDS_SHIFT                   (0U)
#define SEMC_SRAMCR2_WDS(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR2_WDS_SHIFT)) & SEMC_SRAMCR2_WDS_MASK)
#define SEMC_SRAMCR2_WDH_MASK                    (0xF0U)
#define SEMC_SRAMCR2_WDH_SHIFT                   (4U)
#define SEMC_SRAMCR2_WDH(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR2_WDH_SHIFT)) & SEMC_SRAMCR2_WDH_MASK)
#define SEMC_SRAMCR2_TA_MASK                     (0xF00U)
#define SEMC_SRAMCR2_TA_SHIFT                    (8U)
#define SEMC_SRAMCR2_TA(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR2_TA_SHIFT)) & SEMC_SRAMCR2_TA_MASK)
#define SEMC_SRAMCR2_AWDH_MASK                   (0xF000U)
#define SEMC_SRAMCR2_AWDH_SHIFT                  (12U)
#define SEMC_SRAMCR2_AWDH(x)                     (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR2_AWDH_SHIFT)) & SEMC_SRAMCR2_AWDH_MASK)
#define SEMC_SRAMCR2_LC_MASK                     (0xF0000U)
#define SEMC_SRAMCR2_LC_SHIFT                    (16U)
#define SEMC_SRAMCR2_LC(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR2_LC_SHIFT)) & SEMC_SRAMCR2_LC_MASK)
#define SEMC_SRAMCR2_RD_MASK                     (0xF00000U)
#define SEMC_SRAMCR2_RD_SHIFT                    (20U)
#define SEMC_SRAMCR2_RD(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR2_RD_SHIFT)) & SEMC_SRAMCR2_RD_MASK)
#define SEMC_SRAMCR2_CEITV_MASK                  (0xF000000U)
#define SEMC_SRAMCR2_CEITV_SHIFT                 (24U)
#define SEMC_SRAMCR2_CEITV(x)                    (((uint32_t)(((uint32_t)(x)) << SEMC_SRAMCR2_CEITV_SHIFT)) & SEMC_SRAMCR2_CEITV_MASK)

/*! @name DBICR0 - DBI-B control register 0 */
#define SEMC_DBICR0_PS_MASK                      (0x1U)
#define SEMC_DBICR0_PS_SHIFT                     (0U)
#define SEMC_DBICR0_BL_MASK                      (0x70U)
#define SEMC_DBICR0_BL_SHIFT                     (4U)
#define SEMC_DBICR0_BL(x)                        (((uint32_t)(((uint32_t)(x)) << SEMC_DBICR0_BL_SHIFT)) & SEMC_DBICR0_BL_MASK)
#define SEMC_DBICR0_COL_MASK                     (0xF000U)
#define SEMC_DBICR0_COL_SHIFT                    (12U)
#define SEMC_DBICR0_COL(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_DBICR0_COL_SHIFT)) & SEMC_DBICR0_COL_MASK)

/*! @name DBICR1 - DBI-B control register 1 */
#define SEMC_DBICR1_CES_MASK                     (0xFU)
#define SEMC_DBICR1_CES_SHIFT                    (0U)
#define SEMC_DBICR1_CES(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_DBICR1_CES_SHIFT)) & SEMC_DBICR1_CES_MASK)
#define SEMC_DBICR1_CEH_MASK                     (0xF0U)
#define SEMC_DBICR1_CEH_SHIFT                    (4U)
#define SEMC_DBICR1_CEH(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_DBICR1_CEH_SHIFT)) & SEMC_DBICR1_CEH_MASK)
#define SEMC_DBICR1_WEL_MASK                     (0xF00U)
#define SEMC_DBICR1_WEL_SHIFT                    (8U)
#define SEMC_DBICR1_WEL(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_DBICR1_WEL_SHIFT)) & SEMC_DBICR1_WEL_MASK)
#define SEMC_DBICR1_WEH_MASK                     (0xF000U)
#define SEMC_DBICR1_WEH_SHIFT                    (12U)
#define SEMC_DBICR1_WEH(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_DBICR1_WEH_SHIFT)) & SEMC_DBICR1_WEH_MASK)
#define SEMC_DBICR1_REL_MASK                     (0xF0000U)
#define SEMC_DBICR1_REL_SHIFT                    (16U)
#define SEMC_DBICR1_REL(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_DBICR1_REL_SHIFT)) & SEMC_DBICR1_REL_MASK)
#define SEMC_DBICR1_REH_MASK                     (0xF00000U)
#define SEMC_DBICR1_REH_SHIFT                    (20U)
#define SEMC_DBICR1_REH(x)                       (((uint32_t)(((uint32_t)(x)) << SEMC_DBICR1_REH_SHIFT)) & SEMC_DBICR1_REH_MASK)
#define SEMC_DBICR1_CEITV_MASK                   (0xF000000U)
#define SEMC_DBICR1_CEITV_SHIFT                  (24U)
#define SEMC_DBICR1_CEITV(x)                     (((uint32_t)(((uint32_t)(x)) << SEMC_DBICR1_CEITV_SHIFT)) & SEMC_DBICR1_CEITV_MASK)

/*! @name IPCR0 - IP Command control register 0 */
#define SEMC_IPCR0_SA_MASK                       (0xFFFFFFFFU)
#define SEMC_IPCR0_SA_SHIFT                      (0U)
#define SEMC_IPCR0_SA(x)                         (((uint32_t)(((uint32_t)(x)) << SEMC_IPCR0_SA_SHIFT)) & SEMC_IPCR0_SA_MASK)

/*! @name IPCR1 - IP Command control register 1 */
#define SEMC_IPCR1_DATSZ_MASK                    (0x7U)
#define SEMC_IPCR1_DATSZ_SHIFT                   (0U)
#define SEMC_IPCR1_DATSZ(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_IPCR1_DATSZ_SHIFT)) & SEMC_IPCR1_DATSZ_MASK)

/*! @name IPCR2 - IP Command control register 2 */
#define SEMC_IPCR2_BM0_MASK                      (0x1U)
#define SEMC_IPCR2_BM0_SHIFT                     (0U)
#define SEMC_IPCR2_BM1_MASK                      (0x2U)
#define SEMC_IPCR2_BM1_SHIFT                     (1U)
#define SEMC_IPCR2_BM2_MASK                      (0x4U)
#define SEMC_IPCR2_BM2_SHIFT                     (2U)
#define SEMC_IPCR2_BM3_MASK                      (0x8U)
#define SEMC_IPCR2_BM3_SHIFT                     (3U)

/*! @name IPCMD - IP Command register */
#define SEMC_IPCMD_CMD_MASK                      (0xFFFFU)
#define SEMC_IPCMD_CMD_SHIFT                     (0U)
#define SEMC_IPCMD_CMD(x)                        (((uint32_t)(((uint32_t)(x)) << SEMC_IPCMD_CMD_SHIFT)) & SEMC_IPCMD_CMD_MASK)
#define SEMC_IPCMD_KEY_MASK                      (0xFFFF0000U)
#define SEMC_IPCMD_KEY_SHIFT                     (16U)
#define SEMC_IPCMD_KEY(x)                        (((uint32_t)(((uint32_t)(x)) << SEMC_IPCMD_KEY_SHIFT)) & SEMC_IPCMD_KEY_MASK)

/*! @name IPTXDAT - TX DATA register (for IP Command) */
#define SEMC_IPTXDAT_DAT_MASK                    (0xFFFFFFFFU)
#define SEMC_IPTXDAT_DAT_SHIFT                   (0U)
#define SEMC_IPTXDAT_DAT(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_IPTXDAT_DAT_SHIFT)) & SEMC_IPTXDAT_DAT_MASK)

/*! @name IPRXDAT - RX DATA register (for IP Command) */
#define SEMC_IPRXDAT_DAT_MASK                    (0xFFFFFFFFU)
#define SEMC_IPRXDAT_DAT_SHIFT                   (0U)
#define SEMC_IPRXDAT_DAT(x)                      (((uint32_t)(((uint32_t)(x)) << SEMC_IPRXDAT_DAT_SHIFT)) & SEMC_IPRXDAT_DAT_MASK)

/*! @name STS0 - Status register 0 */
#define SEMC_STS0_IDLE_MASK                      (0x1U)
#define SEMC_STS0_IDLE_SHIFT                     (0U)
#define SEMC_STS0_NARDY_MASK                     (0x2U)
#define SEMC_STS0_NARDY_SHIFT                    (1U)

/*! @name STS2 - Status register 2 */
#define SEMC_STS2_NDWRPEND_MASK                  (0x8U)
#define SEMC_STS2_NDWRPEND_SHIFT                 (3U)

/*! @name STS12 - Status register 12 */
#define SEMC_STS12_NDADDR_MASK                   (0xFFFFFFFFU)
#define SEMC_STS12_NDADDR_SHIFT                  (0U)
#define SEMC_STS12_NDADDR(x)                     (((uint32_t)(((uint32_t)(x)) << SEMC_STS12_NDADDR_SHIFT)) & SEMC_STS12_NDADDR_MASK)


/*!
 * @}
 */ /* end of group SEMC_Register_Masks */


/* SEMC - Peripheral instance base addresses */
/** Peripheral SEMC base pointer */
#define SEMC_BASE_PTR                            ((SEMC_MemMapPtr)0x402F0000u)
/** Array initializer of SEMC peripheral base pointers */
#define SEMC_BASE_PTRS                           { SEMC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- SEMC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMC_Register_Accessor_Macros SEMC - Register accessor macros
 * @{
 */


/* SEMC - Register instance definitions */
/* d_ip_semc_syn */
#define SEMC_MCR                                 SEMC_MCR_REG(SEMC_BASE_PTR)
#define SEMC_IOCR                                SEMC_IOCR_REG(SEMC_BASE_PTR)
#define SEMC_BMCR0                               SEMC_BMCR0_REG(SEMC_BASE_PTR)
#define SEMC_BMCR1                               SEMC_BMCR1_REG(SEMC_BASE_PTR)
#define SEMC_BR0                                 SEMC_BR_REG(SEMC_BASE_PTR,0)
#define SEMC_BR1                                 SEMC_BR_REG(SEMC_BASE_PTR,1)
#define SEMC_BR2                                 SEMC_BR_REG(SEMC_BASE_PTR,2)
#define SEMC_BR3                                 SEMC_BR_REG(SEMC_BASE_PTR,3)
#define SEMC_BR4                                 SEMC_BR_REG(SEMC_BASE_PTR,4)
#define SEMC_BR5                                 SEMC_BR_REG(SEMC_BASE_PTR,5)
#define SEMC_BR6                                 SEMC_BR_REG(SEMC_BASE_PTR,6)
#define SEMC_BR7                                 SEMC_BR_REG(SEMC_BASE_PTR,7)
#define SEMC_BR8                                 SEMC_BR_REG(SEMC_BASE_PTR,8)
#define SEMC_INTEN                               SEMC_INTEN_REG(SEMC_BASE_PTR)
#define SEMC_INTR                                SEMC_INTR_REG(SEMC_BASE_PTR)
#define SEMC_SDRAMCR0                            SEMC_SDRAMCR0_REG(SEMC_BASE_PTR)
#define SEMC_SDRAMCR1                            SEMC_SDRAMCR1_REG(SEMC_BASE_PTR)
#define SEMC_SDRAMCR2                            SEMC_SDRAMCR2_REG(SEMC_BASE_PTR)
#define SEMC_SDRAMCR3                            SEMC_SDRAMCR3_REG(SEMC_BASE_PTR)
#define SEMC_NANDCR0                             SEMC_NANDCR0_REG(SEMC_BASE_PTR)
#define SEMC_NANDCR1                             SEMC_NANDCR1_REG(SEMC_BASE_PTR)
#define SEMC_NANDCR2                             SEMC_NANDCR2_REG(SEMC_BASE_PTR)
#define SEMC_NANDCR3                             SEMC_NANDCR3_REG(SEMC_BASE_PTR)
#define SEMC_NORCR0                              SEMC_NORCR0_REG(SEMC_BASE_PTR)
#define SEMC_NORCR1                              SEMC_NORCR1_REG(SEMC_BASE_PTR)
#define SEMC_NORCR2                              SEMC_NORCR2_REG(SEMC_BASE_PTR)
#define SEMC_NORCR3                              SEMC_NORCR3_REG(SEMC_BASE_PTR)
#define SEMC_SRAMCR0                             SEMC_SRAMCR0_REG(SEMC_BASE_PTR)
#define SEMC_SRAMCR1                             SEMC_SRAMCR1_REG(SEMC_BASE_PTR)
#define SEMC_SRAMCR2                             SEMC_SRAMCR2_REG(SEMC_BASE_PTR)
#define SEMC_SRAMCR3                             SEMC_SRAMCR3_REG(SEMC_BASE_PTR)
#define SEMC_DBICR0                              SEMC_DBICR0_REG(SEMC_BASE_PTR)
#define SEMC_DBICR1                              SEMC_DBICR1_REG(SEMC_BASE_PTR)
#define SEMC_IPCR0                               SEMC_IPCR0_REG(SEMC_BASE_PTR)
#define SEMC_IPCR1                               SEMC_IPCR1_REG(SEMC_BASE_PTR)
#define SEMC_IPCR2                               SEMC_IPCR2_REG(SEMC_BASE_PTR)
#define SEMC_IPCMD                               SEMC_IPCMD_REG(SEMC_BASE_PTR)
#define SEMC_IPTXDAT                             SEMC_IPTXDAT_REG(SEMC_BASE_PTR)
#define SEMC_IPRXDAT                             SEMC_IPRXDAT_REG(SEMC_BASE_PTR)
#define SEMC_STS0                                SEMC_STS0_REG(SEMC_BASE_PTR)
#define SEMC_STS1                                SEMC_STS1_REG(SEMC_BASE_PTR)
#define SEMC_STS2                                SEMC_STS2_REG(SEMC_BASE_PTR)
#define SEMC_STS3                                SEMC_STS3_REG(SEMC_BASE_PTR)
#define SEMC_STS4                                SEMC_STS4_REG(SEMC_BASE_PTR)
#define SEMC_STS5                                SEMC_STS5_REG(SEMC_BASE_PTR)
#define SEMC_STS6                                SEMC_STS6_REG(SEMC_BASE_PTR)
#define SEMC_STS7                                SEMC_STS7_REG(SEMC_BASE_PTR)
#define SEMC_STS8                                SEMC_STS8_REG(SEMC_BASE_PTR)
#define SEMC_STS9                                SEMC_STS9_REG(SEMC_BASE_PTR)
#define SEMC_STS10                               SEMC_STS10_REG(SEMC_BASE_PTR)
#define SEMC_STS11                               SEMC_STS11_REG(SEMC_BASE_PTR)
#define SEMC_STS12                               SEMC_STS12_REG(SEMC_BASE_PTR)
#define SEMC_STS13                               SEMC_STS13_REG(SEMC_BASE_PTR)
#define SEMC_STS14                               SEMC_STS14_REG(SEMC_BASE_PTR)
#define SEMC_STS15                               SEMC_STS15_REG(SEMC_BASE_PTR)

/* SEMC - Register array accessors */
#define SEMC_BR(index)                           SEMC_BR_REG(SEMC_BASE_PTR,index)

/*!
 * @}
 */ /* end of group SEMC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SEMC_Peripheral */


/* ----------------------------------------------------------------------------
   -- SNVS
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SNVS_Peripheral SNVS
 * @{
 */

/** SNVS - Peripheral register structure */
typedef struct SNVS_MemMap {
  uint32_t HPLR;                                   /**< SNVS_HP Lock Register, offset: 0x0 */
  uint32_t HPCOMR;                                 /**< SNVS_HP Command Register, offset: 0x4 */
  uint32_t HPCR;                                   /**< SNVS_HP Control Register, offset: 0x8 */
  uint32_t HPSICR;                                 /**< SNVS_HP Security Interrupt Control Register, offset: 0xC */
  uint32_t HPSVCR;                                 /**< SNVS_HP Security Violation Control Register, offset: 0x10 */
  uint32_t HPSR;                                   /**< SNVS_HP Status Register, offset: 0x14 */
  uint32_t HPSVSR;                                 /**< SNVS_HP Security Violation Status Register, offset: 0x18 */
  uint32_t HPHACIVR;                               /**< SNVS_HP High Assurance Counter IV Register, offset: 0x1C */
  uint32_t HPHACR;                                 /**< SNVS_HP High Assurance Counter Register, offset: 0x20 */
  uint32_t HPRTCMR;                                /**< SNVS_HP Real Time Counter MSB Register, offset: 0x24 */
  uint32_t HPRTCLR;                                /**< SNVS_HP Real Time Counter LSB Register, offset: 0x28 */
  uint32_t HPTAMR;                                 /**< SNVS_HP Time Alarm MSB Register, offset: 0x2C */
  uint32_t HPTALR;                                 /**< SNVS_HP Time Alarm LSB Register, offset: 0x30 */
  uint32_t LPLR;                                   /**< SNVS_LP Lock Register, offset: 0x34 */
  uint32_t LPCR;                                   /**< SNVS_LP Control Register, offset: 0x38 */
  uint32_t LPMKCR;                                 /**< SNVS_LP Master Key Control Register, offset: 0x3C */
  uint32_t LPSVCR;                                 /**< SNVS_LP Security Violation Control Register, offset: 0x40 */
  uint8_t RESERVED_0[4];
  uint32_t LPTDCR;                                 /**< SNVS_LP Tamper Detectors Configuration Register, offset: 0x48 */
  uint32_t LPSR;                                   /**< SNVS_LP Status Register, offset: 0x4C */
  uint32_t LPSRTCMR;                               /**< SNVS_LP Secure Real Time Counter MSB Register, offset: 0x50 */
  uint32_t LPSRTCLR;                               /**< SNVS_LP Secure Real Time Counter LSB Register, offset: 0x54 */
  uint32_t LPTAR;                                  /**< SNVS_LP Time Alarm Register, offset: 0x58 */
  uint32_t LPSMCMR;                                /**< SNVS_LP Secure Monotonic Counter MSB Register, offset: 0x5C */
  uint32_t LPSMCLR;                                /**< SNVS_LP Secure Monotonic Counter LSB Register, offset: 0x60 */
  uint32_t LPPGDR;                                 /**< SNVS_LP Power Glitch Detector Register, offset: 0x64 */
  uint32_t LPGPR0_LEGACY_ALIAS;                    /**< SNVS_LP General Purpose Register 0 (legacy alias), offset: 0x68 */
  uint32_t LPZMKR[8];                              /**< SNVS_LP Zeroizable Master Key Register, array offset: 0x6C, array step: 0x4 */
  uint8_t RESERVED_1[4];
  uint32_t LPGPR_ALIAS[4];                         /**< SNVS_LP General Purpose Registers 0 .. 3, array offset: 0x90, array step: 0x4 */
  uint8_t RESERVED_2[96];
  uint32_t LPGPR[4];                               /**< SNVS_LP General Purpose Registers 0 .. 3, array offset: 0x100, array step: 0x4 */
  uint8_t RESERVED_3[2792];
  uint32_t HPVIDR1;                                /**< SNVS_HP Version ID Register 1, offset: 0xBF8 */
  uint32_t HPVIDR2;                                /**< SNVS_HP Version ID Register 2, offset: 0xBFC */
} volatile *SNVS_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SNVS - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SNVS_Register_Accessor_Macros SNVS - Register accessor macros
 * @{
 */


/* SNVS - Register accessors */
#define SNVS_HPLR_REG(base)                      ((base)->HPLR)
#define SNVS_HPCOMR_REG(base)                    ((base)->HPCOMR)
#define SNVS_HPCR_REG(base)                      ((base)->HPCR)
#define SNVS_HPSICR_REG(base)                    ((base)->HPSICR)
#define SNVS_HPSVCR_REG(base)                    ((base)->HPSVCR)
#define SNVS_HPSR_REG(base)                      ((base)->HPSR)
#define SNVS_HPSVSR_REG(base)                    ((base)->HPSVSR)
#define SNVS_HPHACIVR_REG(base)                  ((base)->HPHACIVR)
#define SNVS_HPHACR_REG(base)                    ((base)->HPHACR)
#define SNVS_HPRTCMR_REG(base)                   ((base)->HPRTCMR)
#define SNVS_HPRTCLR_REG(base)                   ((base)->HPRTCLR)
#define SNVS_HPTAMR_REG(base)                    ((base)->HPTAMR)
#define SNVS_HPTALR_REG(base)                    ((base)->HPTALR)
#define SNVS_LPLR_REG(base)                      ((base)->LPLR)
#define SNVS_LPCR_REG(base)                      ((base)->LPCR)
#define SNVS_LPMKCR_REG(base)                    ((base)->LPMKCR)
#define SNVS_LPSVCR_REG(base)                    ((base)->LPSVCR)
#define SNVS_LPTDCR_REG(base)                    ((base)->LPTDCR)
#define SNVS_LPSR_REG(base)                      ((base)->LPSR)
#define SNVS_LPSRTCMR_REG(base)                  ((base)->LPSRTCMR)
#define SNVS_LPSRTCLR_REG(base)                  ((base)->LPSRTCLR)
#define SNVS_LPTAR_REG(base)                     ((base)->LPTAR)
#define SNVS_LPSMCMR_REG(base)                   ((base)->LPSMCMR)
#define SNVS_LPSMCLR_REG(base)                   ((base)->LPSMCLR)
#define SNVS_LPPGDR_REG(base)                    ((base)->LPPGDR)
#define SNVS_LPGPR0_LEGACY_ALIAS_REG(base)       ((base)->LPGPR0_LEGACY_ALIAS)
#define SNVS_LPZMKR_REG(base,index)              ((base)->LPZMKR[index])
#define SNVS_LPGPR_ALIAS_REG(base,index)         ((base)->LPGPR_ALIAS[index])
#define SNVS_LPGPR_REG(base,index)               ((base)->LPGPR[index])
#define SNVS_HPVIDR1_REG(base)                   ((base)->HPVIDR1)
#define SNVS_HPVIDR2_REG(base)                   ((base)->HPVIDR2)

/*!
 * @}
 */ /* end of group SNVS_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SNVS Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SNVS_Register_Masks SNVS Register Masks
 * @{
 */

/*! @name HPLR - SNVS_HP Lock Register */
#define SNVS_HPLR_ZMK_WSL_MASK                   (0x1U)
#define SNVS_HPLR_ZMK_WSL_SHIFT                  (0U)
#define SNVS_HPLR_ZMK_RSL_MASK                   (0x2U)
#define SNVS_HPLR_ZMK_RSL_SHIFT                  (1U)
#define SNVS_HPLR_SRTC_SL_MASK                   (0x4U)
#define SNVS_HPLR_SRTC_SL_SHIFT                  (2U)
#define SNVS_HPLR_LPCALB_SL_MASK                 (0x8U)
#define SNVS_HPLR_LPCALB_SL_SHIFT                (3U)
#define SNVS_HPLR_MC_SL_MASK                     (0x10U)
#define SNVS_HPLR_MC_SL_SHIFT                    (4U)
#define SNVS_HPLR_GPR_SL_MASK                    (0x20U)
#define SNVS_HPLR_GPR_SL_SHIFT                   (5U)
#define SNVS_HPLR_LPSVCR_SL_MASK                 (0x40U)
#define SNVS_HPLR_LPSVCR_SL_SHIFT                (6U)
#define SNVS_HPLR_LPTDCR_SL_MASK                 (0x100U)
#define SNVS_HPLR_LPTDCR_SL_SHIFT                (8U)
#define SNVS_HPLR_MKS_SL_MASK                    (0x200U)
#define SNVS_HPLR_MKS_SL_SHIFT                   (9U)
#define SNVS_HPLR_HPSVCR_L_MASK                  (0x10000U)
#define SNVS_HPLR_HPSVCR_L_SHIFT                 (16U)
#define SNVS_HPLR_HPSICR_L_MASK                  (0x20000U)
#define SNVS_HPLR_HPSICR_L_SHIFT                 (17U)
#define SNVS_HPLR_HAC_L_MASK                     (0x40000U)
#define SNVS_HPLR_HAC_L_SHIFT                    (18U)

/*! @name HPCOMR - SNVS_HP Command Register */
#define SNVS_HPCOMR_SSM_ST_MASK                  (0x1U)
#define SNVS_HPCOMR_SSM_ST_SHIFT                 (0U)
#define SNVS_HPCOMR_SSM_ST_DIS_MASK              (0x2U)
#define SNVS_HPCOMR_SSM_ST_DIS_SHIFT             (1U)
#define SNVS_HPCOMR_SSM_SFNS_DIS_MASK            (0x4U)
#define SNVS_HPCOMR_SSM_SFNS_DIS_SHIFT           (2U)
#define SNVS_HPCOMR_LP_SWR_MASK                  (0x10U)
#define SNVS_HPCOMR_LP_SWR_SHIFT                 (4U)
#define SNVS_HPCOMR_LP_SWR_DIS_MASK              (0x20U)
#define SNVS_HPCOMR_LP_SWR_DIS_SHIFT             (5U)
#define SNVS_HPCOMR_SW_SV_MASK                   (0x100U)
#define SNVS_HPCOMR_SW_SV_SHIFT                  (8U)
#define SNVS_HPCOMR_SW_FSV_MASK                  (0x200U)
#define SNVS_HPCOMR_SW_FSV_SHIFT                 (9U)
#define SNVS_HPCOMR_SW_LPSV_MASK                 (0x400U)
#define SNVS_HPCOMR_SW_LPSV_SHIFT                (10U)
#define SNVS_HPCOMR_PROG_ZMK_MASK                (0x1000U)
#define SNVS_HPCOMR_PROG_ZMK_SHIFT               (12U)
#define SNVS_HPCOMR_MKS_EN_MASK                  (0x2000U)
#define SNVS_HPCOMR_MKS_EN_SHIFT                 (13U)
#define SNVS_HPCOMR_HAC_EN_MASK                  (0x10000U)
#define SNVS_HPCOMR_HAC_EN_SHIFT                 (16U)
#define SNVS_HPCOMR_HAC_LOAD_MASK                (0x20000U)
#define SNVS_HPCOMR_HAC_LOAD_SHIFT               (17U)
#define SNVS_HPCOMR_HAC_CLEAR_MASK               (0x40000U)
#define SNVS_HPCOMR_HAC_CLEAR_SHIFT              (18U)
#define SNVS_HPCOMR_HAC_STOP_MASK                (0x80000U)
#define SNVS_HPCOMR_HAC_STOP_SHIFT               (19U)
#define SNVS_HPCOMR_NPSWA_EN_MASK                (0x80000000U)
#define SNVS_HPCOMR_NPSWA_EN_SHIFT               (31U)

/*! @name HPCR - SNVS_HP Control Register */
#define SNVS_HPCR_RTC_EN_MASK                    (0x1U)
#define SNVS_HPCR_RTC_EN_SHIFT                   (0U)
#define SNVS_HPCR_HPTA_EN_MASK                   (0x2U)
#define SNVS_HPCR_HPTA_EN_SHIFT                  (1U)
#define SNVS_HPCR_DIS_PI_MASK                    (0x4U)
#define SNVS_HPCR_DIS_PI_SHIFT                   (2U)
#define SNVS_HPCR_PI_EN_MASK                     (0x8U)
#define SNVS_HPCR_PI_EN_SHIFT                    (3U)
#define SNVS_HPCR_PI_FREQ_MASK                   (0xF0U)
#define SNVS_HPCR_PI_FREQ_SHIFT                  (4U)
#define SNVS_HPCR_PI_FREQ(x)                     (((uint32_t)(((uint32_t)(x)) << SNVS_HPCR_PI_FREQ_SHIFT)) & SNVS_HPCR_PI_FREQ_MASK)
#define SNVS_HPCR_HPCALB_EN_MASK                 (0x100U)
#define SNVS_HPCR_HPCALB_EN_SHIFT                (8U)
#define SNVS_HPCR_HPCALB_VAL_MASK                (0x7C00U)
#define SNVS_HPCR_HPCALB_VAL_SHIFT               (10U)
#define SNVS_HPCR_HPCALB_VAL(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_HPCR_HPCALB_VAL_SHIFT)) & SNVS_HPCR_HPCALB_VAL_MASK)
#define SNVS_HPCR_HP_TS_MASK                     (0x10000U)
#define SNVS_HPCR_HP_TS_SHIFT                    (16U)
#define SNVS_HPCR_BTN_CONFIG_MASK                (0x7000000U)
#define SNVS_HPCR_BTN_CONFIG_SHIFT               (24U)
#define SNVS_HPCR_BTN_CONFIG(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_HPCR_BTN_CONFIG_SHIFT)) & SNVS_HPCR_BTN_CONFIG_MASK)
#define SNVS_HPCR_BTN_MASK_MASK                  (0x8000000U)
#define SNVS_HPCR_BTN_MASK_SHIFT                 (27U)

/*! @name HPSICR - SNVS_HP Security Interrupt Control Register */
#define SNVS_HPSICR_SV0_EN_MASK                  (0x1U)
#define SNVS_HPSICR_SV0_EN_SHIFT                 (0U)
#define SNVS_HPSICR_SV1_EN_MASK                  (0x2U)
#define SNVS_HPSICR_SV1_EN_SHIFT                 (1U)
#define SNVS_HPSICR_SV2_EN_MASK                  (0x4U)
#define SNVS_HPSICR_SV2_EN_SHIFT                 (2U)
#define SNVS_HPSICR_SV3_EN_MASK                  (0x8U)
#define SNVS_HPSICR_SV3_EN_SHIFT                 (3U)
#define SNVS_HPSICR_SV4_EN_MASK                  (0x10U)
#define SNVS_HPSICR_SV4_EN_SHIFT                 (4U)
#define SNVS_HPSICR_SV5_EN_MASK                  (0x20U)
#define SNVS_HPSICR_SV5_EN_SHIFT                 (5U)
#define SNVS_HPSICR_LPSVI_EN_MASK                (0x80000000U)
#define SNVS_HPSICR_LPSVI_EN_SHIFT               (31U)

/*! @name HPSVCR - SNVS_HP Security Violation Control Register */
#define SNVS_HPSVCR_SV0_CFG_MASK                 (0x1U)
#define SNVS_HPSVCR_SV0_CFG_SHIFT                (0U)
#define SNVS_HPSVCR_SV1_CFG_MASK                 (0x2U)
#define SNVS_HPSVCR_SV1_CFG_SHIFT                (1U)
#define SNVS_HPSVCR_SV2_CFG_MASK                 (0x4U)
#define SNVS_HPSVCR_SV2_CFG_SHIFT                (2U)
#define SNVS_HPSVCR_SV3_CFG_MASK                 (0x8U)
#define SNVS_HPSVCR_SV3_CFG_SHIFT                (3U)
#define SNVS_HPSVCR_SV4_CFG_MASK                 (0x10U)
#define SNVS_HPSVCR_SV4_CFG_SHIFT                (4U)
#define SNVS_HPSVCR_SV5_CFG_MASK                 (0x60U)
#define SNVS_HPSVCR_SV5_CFG_SHIFT                (5U)
#define SNVS_HPSVCR_SV5_CFG(x)                   (((uint32_t)(((uint32_t)(x)) << SNVS_HPSVCR_SV5_CFG_SHIFT)) & SNVS_HPSVCR_SV5_CFG_MASK)
#define SNVS_HPSVCR_LPSV_CFG_MASK                (0xC0000000U)
#define SNVS_HPSVCR_LPSV_CFG_SHIFT               (30U)
#define SNVS_HPSVCR_LPSV_CFG(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_HPSVCR_LPSV_CFG_SHIFT)) & SNVS_HPSVCR_LPSV_CFG_MASK)

/*! @name HPSR - SNVS_HP Status Register */
#define SNVS_HPSR_HPTA_MASK                      (0x1U)
#define SNVS_HPSR_HPTA_SHIFT                     (0U)
#define SNVS_HPSR_PI_MASK                        (0x2U)
#define SNVS_HPSR_PI_SHIFT                       (1U)
#define SNVS_HPSR_LPDIS_MASK                     (0x10U)
#define SNVS_HPSR_LPDIS_SHIFT                    (4U)
#define SNVS_HPSR_BTN_MASK                       (0x40U)
#define SNVS_HPSR_BTN_SHIFT                      (6U)
#define SNVS_HPSR_BI_MASK                        (0x80U)
#define SNVS_HPSR_BI_SHIFT                       (7U)
#define SNVS_HPSR_SSM_STATE_MASK                 (0xF00U)
#define SNVS_HPSR_SSM_STATE_SHIFT                (8U)
#define SNVS_HPSR_SSM_STATE(x)                   (((uint32_t)(((uint32_t)(x)) << SNVS_HPSR_SSM_STATE_SHIFT)) & SNVS_HPSR_SSM_STATE_MASK)
#define SNVS_HPSR_SECURITY_CONFIG_MASK           (0xF000U)
#define SNVS_HPSR_SECURITY_CONFIG_SHIFT          (12U)
#define SNVS_HPSR_SECURITY_CONFIG(x)             (((uint32_t)(((uint32_t)(x)) << SNVS_HPSR_SECURITY_CONFIG_SHIFT)) & SNVS_HPSR_SECURITY_CONFIG_MASK)
#define SNVS_HPSR_OTPMK_SYNDROME_MASK            (0x1FF0000U)
#define SNVS_HPSR_OTPMK_SYNDROME_SHIFT           (16U)
#define SNVS_HPSR_OTPMK_SYNDROME(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_HPSR_OTPMK_SYNDROME_SHIFT)) & SNVS_HPSR_OTPMK_SYNDROME_MASK)
#define SNVS_HPSR_OTPMK_ZERO_MASK                (0x8000000U)
#define SNVS_HPSR_OTPMK_ZERO_SHIFT               (27U)
#define SNVS_HPSR_ZMK_ZERO_MASK                  (0x80000000U)
#define SNVS_HPSR_ZMK_ZERO_SHIFT                 (31U)

/*! @name HPSVSR - SNVS_HP Security Violation Status Register */
#define SNVS_HPSVSR_SV0_MASK                     (0x1U)
#define SNVS_HPSVSR_SV0_SHIFT                    (0U)
#define SNVS_HPSVSR_SV1_MASK                     (0x2U)
#define SNVS_HPSVSR_SV1_SHIFT                    (1U)
#define SNVS_HPSVSR_SV2_MASK                     (0x4U)
#define SNVS_HPSVSR_SV2_SHIFT                    (2U)
#define SNVS_HPSVSR_SV3_MASK                     (0x8U)
#define SNVS_HPSVSR_SV3_SHIFT                    (3U)
#define SNVS_HPSVSR_SV4_MASK                     (0x10U)
#define SNVS_HPSVSR_SV4_SHIFT                    (4U)
#define SNVS_HPSVSR_SV5_MASK                     (0x20U)
#define SNVS_HPSVSR_SV5_SHIFT                    (5U)
#define SNVS_HPSVSR_SW_SV_MASK                   (0x2000U)
#define SNVS_HPSVSR_SW_SV_SHIFT                  (13U)
#define SNVS_HPSVSR_SW_FSV_MASK                  (0x4000U)
#define SNVS_HPSVSR_SW_FSV_SHIFT                 (14U)
#define SNVS_HPSVSR_SW_LPSV_MASK                 (0x8000U)
#define SNVS_HPSVSR_SW_LPSV_SHIFT                (15U)
#define SNVS_HPSVSR_ZMK_SYNDROME_MASK            (0x1FF0000U)
#define SNVS_HPSVSR_ZMK_SYNDROME_SHIFT           (16U)
#define SNVS_HPSVSR_ZMK_SYNDROME(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_HPSVSR_ZMK_SYNDROME_SHIFT)) & SNVS_HPSVSR_ZMK_SYNDROME_MASK)
#define SNVS_HPSVSR_ZMK_ECC_FAIL_MASK            (0x8000000U)
#define SNVS_HPSVSR_ZMK_ECC_FAIL_SHIFT           (27U)
#define SNVS_HPSVSR_LP_SEC_VIO_MASK              (0x80000000U)
#define SNVS_HPSVSR_LP_SEC_VIO_SHIFT             (31U)

/*! @name HPHACIVR - SNVS_HP High Assurance Counter IV Register */
#define SNVS_HPHACIVR_HAC_COUNTER_IV_MASK        (0xFFFFFFFFU)
#define SNVS_HPHACIVR_HAC_COUNTER_IV_SHIFT       (0U)
#define SNVS_HPHACIVR_HAC_COUNTER_IV(x)          (((uint32_t)(((uint32_t)(x)) << SNVS_HPHACIVR_HAC_COUNTER_IV_SHIFT)) & SNVS_HPHACIVR_HAC_COUNTER_IV_MASK)

/*! @name HPHACR - SNVS_HP High Assurance Counter Register */
#define SNVS_HPHACR_HAC_COUNTER_MASK             (0xFFFFFFFFU)
#define SNVS_HPHACR_HAC_COUNTER_SHIFT            (0U)
#define SNVS_HPHACR_HAC_COUNTER(x)               (((uint32_t)(((uint32_t)(x)) << SNVS_HPHACR_HAC_COUNTER_SHIFT)) & SNVS_HPHACR_HAC_COUNTER_MASK)

/*! @name HPRTCMR - SNVS_HP Real Time Counter MSB Register */
#define SNVS_HPRTCMR_RTC_MASK                    (0x7FFFU)
#define SNVS_HPRTCMR_RTC_SHIFT                   (0U)
#define SNVS_HPRTCMR_RTC(x)                      (((uint32_t)(((uint32_t)(x)) << SNVS_HPRTCMR_RTC_SHIFT)) & SNVS_HPRTCMR_RTC_MASK)

/*! @name HPRTCLR - SNVS_HP Real Time Counter LSB Register */
#define SNVS_HPRTCLR_RTC_MASK                    (0xFFFFFFFFU)
#define SNVS_HPRTCLR_RTC_SHIFT                   (0U)
#define SNVS_HPRTCLR_RTC(x)                      (((uint32_t)(((uint32_t)(x)) << SNVS_HPRTCLR_RTC_SHIFT)) & SNVS_HPRTCLR_RTC_MASK)

/*! @name HPTAMR - SNVS_HP Time Alarm MSB Register */
#define SNVS_HPTAMR_HPTA_MS_MASK                 (0x7FFFU)
#define SNVS_HPTAMR_HPTA_MS_SHIFT                (0U)
#define SNVS_HPTAMR_HPTA_MS(x)                   (((uint32_t)(((uint32_t)(x)) << SNVS_HPTAMR_HPTA_MS_SHIFT)) & SNVS_HPTAMR_HPTA_MS_MASK)

/*! @name HPTALR - SNVS_HP Time Alarm LSB Register */
#define SNVS_HPTALR_HPTA_LS_MASK                 (0xFFFFFFFFU)
#define SNVS_HPTALR_HPTA_LS_SHIFT                (0U)
#define SNVS_HPTALR_HPTA_LS(x)                   (((uint32_t)(((uint32_t)(x)) << SNVS_HPTALR_HPTA_LS_SHIFT)) & SNVS_HPTALR_HPTA_LS_MASK)

/*! @name LPLR - SNVS_LP Lock Register */
#define SNVS_LPLR_ZMK_WHL_MASK                   (0x1U)
#define SNVS_LPLR_ZMK_WHL_SHIFT                  (0U)
#define SNVS_LPLR_ZMK_RHL_MASK                   (0x2U)
#define SNVS_LPLR_ZMK_RHL_SHIFT                  (1U)
#define SNVS_LPLR_SRTC_HL_MASK                   (0x4U)
#define SNVS_LPLR_SRTC_HL_SHIFT                  (2U)
#define SNVS_LPLR_LPCALB_HL_MASK                 (0x8U)
#define SNVS_LPLR_LPCALB_HL_SHIFT                (3U)
#define SNVS_LPLR_MC_HL_MASK                     (0x10U)
#define SNVS_LPLR_MC_HL_SHIFT                    (4U)
#define SNVS_LPLR_GPR_HL_MASK                    (0x20U)
#define SNVS_LPLR_GPR_HL_SHIFT                   (5U)
#define SNVS_LPLR_LPSVCR_HL_MASK                 (0x40U)
#define SNVS_LPLR_LPSVCR_HL_SHIFT                (6U)
#define SNVS_LPLR_LPTDCR_HL_MASK                 (0x100U)
#define SNVS_LPLR_LPTDCR_HL_SHIFT                (8U)
#define SNVS_LPLR_MKS_HL_MASK                    (0x200U)
#define SNVS_LPLR_MKS_HL_SHIFT                   (9U)

/*! @name LPCR - SNVS_LP Control Register */
#define SNVS_LPCR_SRTC_ENV_MASK                  (0x1U)
#define SNVS_LPCR_SRTC_ENV_SHIFT                 (0U)
#define SNVS_LPCR_LPTA_EN_MASK                   (0x2U)
#define SNVS_LPCR_LPTA_EN_SHIFT                  (1U)
#define SNVS_LPCR_MC_ENV_MASK                    (0x4U)
#define SNVS_LPCR_MC_ENV_SHIFT                   (2U)
#define SNVS_LPCR_LPWUI_EN_MASK                  (0x8U)
#define SNVS_LPCR_LPWUI_EN_SHIFT                 (3U)
#define SNVS_LPCR_SRTC_INV_EN_MASK               (0x10U)
#define SNVS_LPCR_SRTC_INV_EN_SHIFT              (4U)
#define SNVS_LPCR_DP_EN_MASK                     (0x20U)
#define SNVS_LPCR_DP_EN_SHIFT                    (5U)
#define SNVS_LPCR_TOP_MASK                       (0x40U)
#define SNVS_LPCR_TOP_SHIFT                      (6U)
#define SNVS_LPCR_PWR_GLITCH_EN_MASK             (0x80U)
#define SNVS_LPCR_PWR_GLITCH_EN_SHIFT            (7U)
#define SNVS_LPCR_LPCALB_EN_MASK                 (0x100U)
#define SNVS_LPCR_LPCALB_EN_SHIFT                (8U)
#define SNVS_LPCR_LPCALB_VAL_MASK                (0x7C00U)
#define SNVS_LPCR_LPCALB_VAL_SHIFT               (10U)
#define SNVS_LPCR_LPCALB_VAL(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_LPCALB_VAL_SHIFT)) & SNVS_LPCR_LPCALB_VAL_MASK)
#define SNVS_LPCR_BTN_PRESS_TIME_MASK            (0x30000U)
#define SNVS_LPCR_BTN_PRESS_TIME_SHIFT           (16U)
#define SNVS_LPCR_BTN_PRESS_TIME(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_BTN_PRESS_TIME_SHIFT)) & SNVS_LPCR_BTN_PRESS_TIME_MASK)
#define SNVS_LPCR_DEBOUNCE_MASK                  (0xC0000U)
#define SNVS_LPCR_DEBOUNCE_SHIFT                 (18U)
#define SNVS_LPCR_DEBOUNCE(x)                    (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_DEBOUNCE_SHIFT)) & SNVS_LPCR_DEBOUNCE_MASK)
#define SNVS_LPCR_ON_TIME_MASK                   (0x300000U)
#define SNVS_LPCR_ON_TIME_SHIFT                  (20U)
#define SNVS_LPCR_ON_TIME(x)                     (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_ON_TIME_SHIFT)) & SNVS_LPCR_ON_TIME_MASK)
#define SNVS_LPCR_PK_EN_MASK                     (0x400000U)
#define SNVS_LPCR_PK_EN_SHIFT                    (22U)
#define SNVS_LPCR_PK_OVERRIDE_MASK               (0x800000U)
#define SNVS_LPCR_PK_OVERRIDE_SHIFT              (23U)
#define SNVS_LPCR_GPR_Z_DIS_MASK                 (0x1000000U)
#define SNVS_LPCR_GPR_Z_DIS_SHIFT                (24U)

/*! @name LPMKCR - SNVS_LP Master Key Control Register */
#define SNVS_LPMKCR_MASTER_KEY_SEL_MASK          (0x3U)
#define SNVS_LPMKCR_MASTER_KEY_SEL_SHIFT         (0U)
#define SNVS_LPMKCR_MASTER_KEY_SEL(x)            (((uint32_t)(((uint32_t)(x)) << SNVS_LPMKCR_MASTER_KEY_SEL_SHIFT)) & SNVS_LPMKCR_MASTER_KEY_SEL_MASK)
#define SNVS_LPMKCR_ZMK_HWP_MASK                 (0x4U)
#define SNVS_LPMKCR_ZMK_HWP_SHIFT                (2U)
#define SNVS_LPMKCR_ZMK_VAL_MASK                 (0x8U)
#define SNVS_LPMKCR_ZMK_VAL_SHIFT                (3U)
#define SNVS_LPMKCR_ZMK_ECC_EN_MASK              (0x10U)
#define SNVS_LPMKCR_ZMK_ECC_EN_SHIFT             (4U)
#define SNVS_LPMKCR_ZMK_ECC_VALUE_MASK           (0xFF80U)
#define SNVS_LPMKCR_ZMK_ECC_VALUE_SHIFT          (7U)
#define SNVS_LPMKCR_ZMK_ECC_VALUE(x)             (((uint32_t)(((uint32_t)(x)) << SNVS_LPMKCR_ZMK_ECC_VALUE_SHIFT)) & SNVS_LPMKCR_ZMK_ECC_VALUE_MASK)

/*! @name LPSVCR - SNVS_LP Security Violation Control Register */
#define SNVS_LPSVCR_SV0_EN_MASK                  (0x1U)
#define SNVS_LPSVCR_SV0_EN_SHIFT                 (0U)
#define SNVS_LPSVCR_SV1_EN_MASK                  (0x2U)
#define SNVS_LPSVCR_SV1_EN_SHIFT                 (1U)
#define SNVS_LPSVCR_SV2_EN_MASK                  (0x4U)
#define SNVS_LPSVCR_SV2_EN_SHIFT                 (2U)
#define SNVS_LPSVCR_SV3_EN_MASK                  (0x8U)
#define SNVS_LPSVCR_SV3_EN_SHIFT                 (3U)
#define SNVS_LPSVCR_SV4_EN_MASK                  (0x10U)
#define SNVS_LPSVCR_SV4_EN_SHIFT                 (4U)
#define SNVS_LPSVCR_SV5_EN_MASK                  (0x20U)
#define SNVS_LPSVCR_SV5_EN_SHIFT                 (5U)

/*! @name LPTDCR - SNVS_LP Tamper Detectors Configuration Register */
#define SNVS_LPTDCR_SRTCR_EN_MASK                (0x2U)
#define SNVS_LPTDCR_SRTCR_EN_SHIFT               (1U)
#define SNVS_LPTDCR_MCR_EN_MASK                  (0x4U)
#define SNVS_LPTDCR_MCR_EN_SHIFT                 (2U)
#define SNVS_LPTDCR_ET1_EN_MASK                  (0x200U)
#define SNVS_LPTDCR_ET1_EN_SHIFT                 (9U)
#define SNVS_LPTDCR_ET1P_MASK                    (0x800U)
#define SNVS_LPTDCR_ET1P_SHIFT                   (11U)
#define SNVS_LPTDCR_PFD_OBSERV_MASK              (0x4000U)
#define SNVS_LPTDCR_PFD_OBSERV_SHIFT             (14U)
#define SNVS_LPTDCR_POR_OBSERV_MASK              (0x8000U)
#define SNVS_LPTDCR_POR_OBSERV_SHIFT             (15U)
#define SNVS_LPTDCR_OSCB_MASK                    (0x10000000U)
#define SNVS_LPTDCR_OSCB_SHIFT                   (28U)

/*! @name LPSR - SNVS_LP Status Register */
#define SNVS_LPSR_LPTA_MASK                      (0x1U)
#define SNVS_LPSR_LPTA_SHIFT                     (0U)
#define SNVS_LPSR_SRTCR_MASK                     (0x2U)
#define SNVS_LPSR_SRTCR_SHIFT                    (1U)
#define SNVS_LPSR_MCR_MASK                       (0x4U)
#define SNVS_LPSR_MCR_SHIFT                      (2U)
#define SNVS_LPSR_PGD_MASK                       (0x8U)
#define SNVS_LPSR_PGD_SHIFT                      (3U)
#define SNVS_LPSR_ET1D_MASK                      (0x200U)
#define SNVS_LPSR_ET1D_SHIFT                     (9U)
#define SNVS_LPSR_ESVD_MASK                      (0x10000U)
#define SNVS_LPSR_ESVD_SHIFT                     (16U)
#define SNVS_LPSR_EO_MASK                        (0x20000U)
#define SNVS_LPSR_EO_SHIFT                       (17U)
#define SNVS_LPSR_SPO_MASK                       (0x40000U)
#define SNVS_LPSR_SPO_SHIFT                      (18U)
#define SNVS_LPSR_SED_MASK                       (0x100000U)
#define SNVS_LPSR_SED_SHIFT                      (20U)
#define SNVS_LPSR_LPNS_MASK                      (0x40000000U)
#define SNVS_LPSR_LPNS_SHIFT                     (30U)
#define SNVS_LPSR_LPS_MASK                       (0x80000000U)
#define SNVS_LPSR_LPS_SHIFT                      (31U)

/*! @name LPSRTCMR - SNVS_LP Secure Real Time Counter MSB Register */
#define SNVS_LPSRTCMR_SRTC_MASK                  (0x7FFFU)
#define SNVS_LPSRTCMR_SRTC_SHIFT                 (0U)
#define SNVS_LPSRTCMR_SRTC(x)                    (((uint32_t)(((uint32_t)(x)) << SNVS_LPSRTCMR_SRTC_SHIFT)) & SNVS_LPSRTCMR_SRTC_MASK)

/*! @name LPSRTCLR - SNVS_LP Secure Real Time Counter LSB Register */
#define SNVS_LPSRTCLR_SRTC_MASK                  (0xFFFFFFFFU)
#define SNVS_LPSRTCLR_SRTC_SHIFT                 (0U)
#define SNVS_LPSRTCLR_SRTC(x)                    (((uint32_t)(((uint32_t)(x)) << SNVS_LPSRTCLR_SRTC_SHIFT)) & SNVS_LPSRTCLR_SRTC_MASK)

/*! @name LPTAR - SNVS_LP Time Alarm Register */
#define SNVS_LPTAR_LPTA_MASK                     (0xFFFFFFFFU)
#define SNVS_LPTAR_LPTA_SHIFT                    (0U)
#define SNVS_LPTAR_LPTA(x)                       (((uint32_t)(((uint32_t)(x)) << SNVS_LPTAR_LPTA_SHIFT)) & SNVS_LPTAR_LPTA_MASK)

/*! @name LPSMCMR - SNVS_LP Secure Monotonic Counter MSB Register */
#define SNVS_LPSMCMR_MON_COUNTER_MASK            (0xFFFFU)
#define SNVS_LPSMCMR_MON_COUNTER_SHIFT           (0U)
#define SNVS_LPSMCMR_MON_COUNTER(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_LPSMCMR_MON_COUNTER_SHIFT)) & SNVS_LPSMCMR_MON_COUNTER_MASK)
#define SNVS_LPSMCMR_MC_ERA_BITS_MASK            (0xFFFF0000U)
#define SNVS_LPSMCMR_MC_ERA_BITS_SHIFT           (16U)
#define SNVS_LPSMCMR_MC_ERA_BITS(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_LPSMCMR_MC_ERA_BITS_SHIFT)) & SNVS_LPSMCMR_MC_ERA_BITS_MASK)

/*! @name LPSMCLR - SNVS_LP Secure Monotonic Counter LSB Register */
#define SNVS_LPSMCLR_MON_COUNTER_MASK            (0xFFFFFFFFU)
#define SNVS_LPSMCLR_MON_COUNTER_SHIFT           (0U)
#define SNVS_LPSMCLR_MON_COUNTER(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_LPSMCLR_MON_COUNTER_SHIFT)) & SNVS_LPSMCLR_MON_COUNTER_MASK)

/*! @name LPPGDR - SNVS_LP Power Glitch Detector Register */
#define SNVS_LPPGDR_PGD_MASK                     (0xFFFFFFFFU)
#define SNVS_LPPGDR_PGD_SHIFT                    (0U)
#define SNVS_LPPGDR_PGD(x)                       (((uint32_t)(((uint32_t)(x)) << SNVS_LPPGDR_PGD_SHIFT)) & SNVS_LPPGDR_PGD_MASK)

/*! @name LPGPR0_LEGACY_ALIAS - SNVS_LP General Purpose Register 0 (legacy alias) */
#define SNVS_LPGPR0_LEGACY_ALIAS_GPR_MASK        (0xFFFFFFFFU)
#define SNVS_LPGPR0_LEGACY_ALIAS_GPR_SHIFT       (0U)
#define SNVS_LPGPR0_LEGACY_ALIAS_GPR(x)          (((uint32_t)(((uint32_t)(x)) << SNVS_LPGPR0_LEGACY_ALIAS_GPR_SHIFT)) & SNVS_LPGPR0_LEGACY_ALIAS_GPR_MASK)

/*! @name LPZMKR - SNVS_LP Zeroizable Master Key Register */
#define SNVS_LPZMKR_ZMK_MASK                     (0xFFFFFFFFU)
#define SNVS_LPZMKR_ZMK_SHIFT                    (0U)
#define SNVS_LPZMKR_ZMK(x)                       (((uint32_t)(((uint32_t)(x)) << SNVS_LPZMKR_ZMK_SHIFT)) & SNVS_LPZMKR_ZMK_MASK)

/* The count of SNVS_LPZMKR */
#define SNVS_LPZMKR_COUNT                        (8U)

/*! @name LPGPR_ALIAS - SNVS_LP General Purpose Registers 0 .. 3 */
#define SNVS_LPGPR_ALIAS_GPR_MASK                (0xFFFFFFFFU)
#define SNVS_LPGPR_ALIAS_GPR_SHIFT               (0U)
#define SNVS_LPGPR_ALIAS_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_LPGPR_ALIAS_GPR_SHIFT)) & SNVS_LPGPR_ALIAS_GPR_MASK)

/* The count of SNVS_LPGPR_ALIAS */
#define SNVS_LPGPR_ALIAS_COUNT                   (4U)

/*! @name LPGPR - SNVS_LP General Purpose Registers 0 .. 3 */
#define SNVS_LPGPR_GPR_MASK                      (0xFFFFFFFFU)
#define SNVS_LPGPR_GPR_SHIFT                     (0U)
#define SNVS_LPGPR_GPR(x)                        (((uint32_t)(((uint32_t)(x)) << SNVS_LPGPR_GPR_SHIFT)) & SNVS_LPGPR_GPR_MASK)

/* The count of SNVS_LPGPR */
#define SNVS_LPGPR_COUNT                         (4U)

/*! @name HPVIDR1 - SNVS_HP Version ID Register 1 */
#define SNVS_HPVIDR1_MINOR_REV_MASK              (0xFFU)
#define SNVS_HPVIDR1_MINOR_REV_SHIFT             (0U)
#define SNVS_HPVIDR1_MINOR_REV(x)                (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR1_MINOR_REV_SHIFT)) & SNVS_HPVIDR1_MINOR_REV_MASK)
#define SNVS_HPVIDR1_MAJOR_REV_MASK              (0xFF00U)
#define SNVS_HPVIDR1_MAJOR_REV_SHIFT             (8U)
#define SNVS_HPVIDR1_MAJOR_REV(x)                (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR1_MAJOR_REV_SHIFT)) & SNVS_HPVIDR1_MAJOR_REV_MASK)
#define SNVS_HPVIDR1_IP_ID_MASK                  (0xFFFF0000U)
#define SNVS_HPVIDR1_IP_ID_SHIFT                 (16U)
#define SNVS_HPVIDR1_IP_ID(x)                    (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR1_IP_ID_SHIFT)) & SNVS_HPVIDR1_IP_ID_MASK)

/*! @name HPVIDR2 - SNVS_HP Version ID Register 2 */
#define SNVS_HPVIDR2_CONFIG_OPT_MASK             (0xFFU)
#define SNVS_HPVIDR2_CONFIG_OPT_SHIFT            (0U)
#define SNVS_HPVIDR2_CONFIG_OPT(x)               (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR2_CONFIG_OPT_SHIFT)) & SNVS_HPVIDR2_CONFIG_OPT_MASK)
#define SNVS_HPVIDR2_ECO_REV_MASK                (0xFF00U)
#define SNVS_HPVIDR2_ECO_REV_SHIFT               (8U)
#define SNVS_HPVIDR2_ECO_REV(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR2_ECO_REV_SHIFT)) & SNVS_HPVIDR2_ECO_REV_MASK)
#define SNVS_HPVIDR2_INTG_OPT_MASK               (0xFF0000U)
#define SNVS_HPVIDR2_INTG_OPT_SHIFT              (16U)
#define SNVS_HPVIDR2_INTG_OPT(x)                 (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR2_INTG_OPT_SHIFT)) & SNVS_HPVIDR2_INTG_OPT_MASK)
#define SNVS_HPVIDR2_IP_ERA_MASK                 (0xFF000000U)
#define SNVS_HPVIDR2_IP_ERA_SHIFT                (24U)
#define SNVS_HPVIDR2_IP_ERA(x)                   (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR2_IP_ERA_SHIFT)) & SNVS_HPVIDR2_IP_ERA_MASK)


/*!
 * @}
 */ /* end of group SNVS_Register_Masks */


/* SNVS - Peripheral instance base addresses */
/** Peripheral SNVS base pointer */
#define SNVS_BASE_PTR                            ((SNVS_MemMapPtr)0x400D4000u)
/** Array initializer of SNVS peripheral base pointers */
#define SNVS_BASE_PTRS                           { SNVS_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- SNVS - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SNVS_Register_Accessor_Macros SNVS - Register accessor macros
 * @{
 */


/* SNVS - Register instance definitions */
/* snvs */
#define SNVS_HPLR                                SNVS_HPLR_REG(SNVS_BASE_PTR)
#define SNVS_HPCOMR                              SNVS_HPCOMR_REG(SNVS_BASE_PTR)
#define SNVS_HPCR                                SNVS_HPCR_REG(SNVS_BASE_PTR)
#define SNVS_HPSICR                              SNVS_HPSICR_REG(SNVS_BASE_PTR)
#define SNVS_HPSVCR                              SNVS_HPSVCR_REG(SNVS_BASE_PTR)
#define SNVS_HPSR                                SNVS_HPSR_REG(SNVS_BASE_PTR)
#define SNVS_HPSVSR                              SNVS_HPSVSR_REG(SNVS_BASE_PTR)
#define SNVS_HPHACIVR                            SNVS_HPHACIVR_REG(SNVS_BASE_PTR)
#define SNVS_HPHACR                              SNVS_HPHACR_REG(SNVS_BASE_PTR)
#define SNVS_HPRTCMR                             SNVS_HPRTCMR_REG(SNVS_BASE_PTR)
#define SNVS_HPRTCLR                             SNVS_HPRTCLR_REG(SNVS_BASE_PTR)
#define SNVS_HPTAMR                              SNVS_HPTAMR_REG(SNVS_BASE_PTR)
#define SNVS_HPTALR                              SNVS_HPTALR_REG(SNVS_BASE_PTR)
#define SNVS_LPLR                                SNVS_LPLR_REG(SNVS_BASE_PTR)
#define SNVS_LPCR                                SNVS_LPCR_REG(SNVS_BASE_PTR)
#define SNVS_LPMKCR                              SNVS_LPMKCR_REG(SNVS_BASE_PTR)
#define SNVS_LPSVCR                              SNVS_LPSVCR_REG(SNVS_BASE_PTR)
#define SNVS_LPTDCR                              SNVS_LPTDCR_REG(SNVS_BASE_PTR)
#define SNVS_LPSR                                SNVS_LPSR_REG(SNVS_BASE_PTR)
#define SNVS_LPSRTCMR                            SNVS_LPSRTCMR_REG(SNVS_BASE_PTR)
#define SNVS_LPSRTCLR                            SNVS_LPSRTCLR_REG(SNVS_BASE_PTR)
#define SNVS_LPTAR                               SNVS_LPTAR_REG(SNVS_BASE_PTR)
#define SNVS_LPSMCMR                             SNVS_LPSMCMR_REG(SNVS_BASE_PTR)
#define SNVS_LPSMCLR                             SNVS_LPSMCLR_REG(SNVS_BASE_PTR)
#define SNVS_LPPGDR                              SNVS_LPPGDR_REG(SNVS_BASE_PTR)
#define SNVS_LPGPR0_LEGACY_ALIAS                 SNVS_LPGPR0_LEGACY_ALIAS_REG(SNVS_BASE_PTR)
#define SNVS_LPZMKR0                             SNVS_LPZMKR_REG(SNVS_BASE_PTR,0)
#define SNVS_LPZMKR1                             SNVS_LPZMKR_REG(SNVS_BASE_PTR,1)
#define SNVS_LPZMKR2                             SNVS_LPZMKR_REG(SNVS_BASE_PTR,2)
#define SNVS_LPZMKR3                             SNVS_LPZMKR_REG(SNVS_BASE_PTR,3)
#define SNVS_LPZMKR4                             SNVS_LPZMKR_REG(SNVS_BASE_PTR,4)
#define SNVS_LPZMKR5                             SNVS_LPZMKR_REG(SNVS_BASE_PTR,5)
#define SNVS_LPZMKR6                             SNVS_LPZMKR_REG(SNVS_BASE_PTR,6)
#define SNVS_LPZMKR7                             SNVS_LPZMKR_REG(SNVS_BASE_PTR,7)
#define SNVS_LPGPR0_ALIAS                        SNVS_LPGPR_ALIAS_REG(SNVS_BASE_PTR,0)
#define SNVS_LPGPR1_ALIAS                        SNVS_LPGPR_ALIAS_REG(SNVS_BASE_PTR,1)
#define SNVS_LPGPR2_ALIAS                        SNVS_LPGPR_ALIAS_REG(SNVS_BASE_PTR,2)
#define SNVS_LPGPR3_ALIAS                        SNVS_LPGPR_ALIAS_REG(SNVS_BASE_PTR,3)
#define SNVS_LPGPR0                              SNVS_LPGPR_REG(SNVS_BASE_PTR,0)
#define SNVS_LPGPR1                              SNVS_LPGPR_REG(SNVS_BASE_PTR,1)
#define SNVS_LPGPR2                              SNVS_LPGPR_REG(SNVS_BASE_PTR,2)
#define SNVS_LPGPR3                              SNVS_LPGPR_REG(SNVS_BASE_PTR,3)
#define SNVS_HPVIDR1                             SNVS_HPVIDR1_REG(SNVS_BASE_PTR)
#define SNVS_HPVIDR2                             SNVS_HPVIDR2_REG(SNVS_BASE_PTR)

/* SNVS - Register array accessors */
#define SNVS_LPZMKR(index)                       SNVS_LPZMKR_REG(SNVS_BASE_PTR,index)
#define SNVS_LPGPR_ALIAS(index)                  SNVS_LPGPR_ALIAS_REG(SNVS_BASE_PTR,index)
#define SNVS_LPGPR(index)                        SNVS_LPGPR_REG(SNVS_BASE_PTR,index)

/*!
 * @}
 */ /* end of group SNVS_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SNVS_Peripheral */


/* ----------------------------------------------------------------------------
   -- SPDIF
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPDIF_Peripheral SPDIF
 * @{
 */

/** SPDIF - Peripheral register structure */
typedef struct SPDIF_MemMap {
  uint32_t SCR;                                    /**< SPDIF Configuration Register, offset: 0x0 */
  uint32_t SRCD;                                   /**< CDText Control Register, offset: 0x4 */
  uint32_t SRPC;                                   /**< PhaseConfig Register, offset: 0x8 */
  uint32_t SIE;                                    /**< InterruptEn Register, offset: 0xC */
  union {                                          /* offset: 0x10 */
    uint32_t SIC;                                    /**< InterruptClear Register, offset: 0x10 */
    uint32_t SIS;                                    /**< InterruptStat Register, offset: 0x10 */
  };
  uint32_t SRL;                                    /**< SPDIFRxLeft Register, offset: 0x14 */
  uint32_t SRR;                                    /**< SPDIFRxRight Register, offset: 0x18 */
  uint32_t SRCSH;                                  /**< SPDIFRxCChannel_h Register, offset: 0x1C */
  uint32_t SRCSL;                                  /**< SPDIFRxCChannel_l Register, offset: 0x20 */
  uint32_t SRU;                                    /**< UchannelRx Register, offset: 0x24 */
  uint32_t SRQ;                                    /**< QchannelRx Register, offset: 0x28 */
  uint32_t STL;                                    /**< SPDIFTxLeft Register, offset: 0x2C */
  uint32_t STR;                                    /**< SPDIFTxRight Register, offset: 0x30 */
  uint32_t STCSCH;                                 /**< SPDIFTxCChannelCons_h Register, offset: 0x34 */
  uint32_t STCSCL;                                 /**< SPDIFTxCChannelCons_l Register, offset: 0x38 */
  uint8_t RESERVED_0[8];
  uint32_t SRFM;                                   /**< FreqMeas Register, offset: 0x44 */
  uint8_t RESERVED_1[8];
  uint32_t STC;                                    /**< SPDIFTxClk Register, offset: 0x50 */
} volatile *SPDIF_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SPDIF - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPDIF_Register_Accessor_Macros SPDIF - Register accessor macros
 * @{
 */


/* SPDIF - Register accessors */
#define SPDIF_SCR_REG(base)                      ((base)->SCR)
#define SPDIF_SRCD_REG(base)                     ((base)->SRCD)
#define SPDIF_SRPC_REG(base)                     ((base)->SRPC)
#define SPDIF_SIE_REG(base)                      ((base)->SIE)
#define SPDIF_SIC_REG(base)                      ((base)->SIC)
#define SPDIF_SIS_REG(base)                      ((base)->SIS)
#define SPDIF_SRL_REG(base)                      ((base)->SRL)
#define SPDIF_SRR_REG(base)                      ((base)->SRR)
#define SPDIF_SRCSH_REG(base)                    ((base)->SRCSH)
#define SPDIF_SRCSL_REG(base)                    ((base)->SRCSL)
#define SPDIF_SRU_REG(base)                      ((base)->SRU)
#define SPDIF_SRQ_REG(base)                      ((base)->SRQ)
#define SPDIF_STL_REG(base)                      ((base)->STL)
#define SPDIF_STR_REG(base)                      ((base)->STR)
#define SPDIF_STCSCH_REG(base)                   ((base)->STCSCH)
#define SPDIF_STCSCL_REG(base)                   ((base)->STCSCL)
#define SPDIF_SRFM_REG(base)                     ((base)->SRFM)
#define SPDIF_STC_REG(base)                      ((base)->STC)

/*!
 * @}
 */ /* end of group SPDIF_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SPDIF Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPDIF_Register_Masks SPDIF Register Masks
 * @{
 */

/*! @name SCR - SPDIF Configuration Register */
#define SPDIF_SCR_USRC_SEL_MASK                  (0x3U)
#define SPDIF_SCR_USRC_SEL_SHIFT                 (0U)
#define SPDIF_SCR_USRC_SEL(x)                    (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_USRC_SEL_SHIFT)) & SPDIF_SCR_USRC_SEL_MASK)
#define SPDIF_SCR_TXSEL_MASK                     (0x1CU)
#define SPDIF_SCR_TXSEL_SHIFT                    (2U)
#define SPDIF_SCR_TXSEL(x)                       (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_TXSEL_SHIFT)) & SPDIF_SCR_TXSEL_MASK)
#define SPDIF_SCR_VALCTRL_MASK                   (0x20U)
#define SPDIF_SCR_VALCTRL_SHIFT                  (5U)
#define SPDIF_SCR_DMA_TX_EN_MASK                 (0x100U)
#define SPDIF_SCR_DMA_TX_EN_SHIFT                (8U)
#define SPDIF_SCR_DMA_RX_EN_MASK                 (0x200U)
#define SPDIF_SCR_DMA_RX_EN_SHIFT                (9U)
#define SPDIF_SCR_TXFIFO_CTRL_MASK               (0xC00U)
#define SPDIF_SCR_TXFIFO_CTRL_SHIFT              (10U)
#define SPDIF_SCR_TXFIFO_CTRL(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_TXFIFO_CTRL_SHIFT)) & SPDIF_SCR_TXFIFO_CTRL_MASK)
#define SPDIF_SCR_SOFT_RESET_MASK                (0x1000U)
#define SPDIF_SCR_SOFT_RESET_SHIFT               (12U)
#define SPDIF_SCR_LOW_POWER_MASK                 (0x2000U)
#define SPDIF_SCR_LOW_POWER_SHIFT                (13U)
#define SPDIF_SCR_TXFIFOEMPTY_SEL_MASK           (0x18000U)
#define SPDIF_SCR_TXFIFOEMPTY_SEL_SHIFT          (15U)
#define SPDIF_SCR_TXFIFOEMPTY_SEL(x)             (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_TXFIFOEMPTY_SEL_SHIFT)) & SPDIF_SCR_TXFIFOEMPTY_SEL_MASK)
#define SPDIF_SCR_TXAUTOSYNC_MASK                (0x20000U)
#define SPDIF_SCR_TXAUTOSYNC_SHIFT               (17U)
#define SPDIF_SCR_RXAUTOSYNC_MASK                (0x40000U)
#define SPDIF_SCR_RXAUTOSYNC_SHIFT               (18U)
#define SPDIF_SCR_RXFIFOFULL_SEL_MASK            (0x180000U)
#define SPDIF_SCR_RXFIFOFULL_SEL_SHIFT           (19U)
#define SPDIF_SCR_RXFIFOFULL_SEL(x)              (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_RXFIFOFULL_SEL_SHIFT)) & SPDIF_SCR_RXFIFOFULL_SEL_MASK)
#define SPDIF_SCR_RXFIFO_RST_MASK                (0x200000U)
#define SPDIF_SCR_RXFIFO_RST_SHIFT               (21U)
#define SPDIF_SCR_RXFIFO_OFF_ON_MASK             (0x400000U)
#define SPDIF_SCR_RXFIFO_OFF_ON_SHIFT            (22U)
#define SPDIF_SCR_RXFIFO_CTRL_MASK               (0x800000U)
#define SPDIF_SCR_RXFIFO_CTRL_SHIFT              (23U)

/*! @name SRCD - CDText Control Register */
#define SPDIF_SRCD_USYNCMODE_MASK                (0x2U)
#define SPDIF_SRCD_USYNCMODE_SHIFT               (1U)

/*! @name SRPC - PhaseConfig Register */
#define SPDIF_SRPC_GAINSEL_MASK                  (0x38U)
#define SPDIF_SRPC_GAINSEL_SHIFT                 (3U)
#define SPDIF_SRPC_GAINSEL(x)                    (((uint32_t)(((uint32_t)(x)) << SPDIF_SRPC_GAINSEL_SHIFT)) & SPDIF_SRPC_GAINSEL_MASK)
#define SPDIF_SRPC_LOCK_MASK                     (0x40U)
#define SPDIF_SRPC_LOCK_SHIFT                    (6U)
#define SPDIF_SRPC_CLKSRC_SEL_MASK               (0x780U)
#define SPDIF_SRPC_CLKSRC_SEL_SHIFT              (7U)
#define SPDIF_SRPC_CLKSRC_SEL(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_SRPC_CLKSRC_SEL_SHIFT)) & SPDIF_SRPC_CLKSRC_SEL_MASK)

/*! @name SIE - InterruptEn Register */
#define SPDIF_SIE_RXFIFOFUL_MASK                 (0x1U)
#define SPDIF_SIE_RXFIFOFUL_SHIFT                (0U)
#define SPDIF_SIE_TXEM_MASK                      (0x2U)
#define SPDIF_SIE_TXEM_SHIFT                     (1U)
#define SPDIF_SIE_LOCKLOSS_MASK                  (0x4U)
#define SPDIF_SIE_LOCKLOSS_SHIFT                 (2U)
#define SPDIF_SIE_RXFIFORESYN_MASK               (0x8U)
#define SPDIF_SIE_RXFIFORESYN_SHIFT              (3U)
#define SPDIF_SIE_RXFIFOUNOV_MASK                (0x10U)
#define SPDIF_SIE_RXFIFOUNOV_SHIFT               (4U)
#define SPDIF_SIE_UQERR_MASK                     (0x20U)
#define SPDIF_SIE_UQERR_SHIFT                    (5U)
#define SPDIF_SIE_UQSYNC_MASK                    (0x40U)
#define SPDIF_SIE_UQSYNC_SHIFT                   (6U)
#define SPDIF_SIE_QRXOV_MASK                     (0x80U)
#define SPDIF_SIE_QRXOV_SHIFT                    (7U)
#define SPDIF_SIE_QRXFUL_MASK                    (0x100U)
#define SPDIF_SIE_QRXFUL_SHIFT                   (8U)
#define SPDIF_SIE_URXOV_MASK                     (0x200U)
#define SPDIF_SIE_URXOV_SHIFT                    (9U)
#define SPDIF_SIE_URXFUL_MASK                    (0x400U)
#define SPDIF_SIE_URXFUL_SHIFT                   (10U)
#define SPDIF_SIE_BITERR_MASK                    (0x4000U)
#define SPDIF_SIE_BITERR_SHIFT                   (14U)
#define SPDIF_SIE_SYMERR_MASK                    (0x8000U)
#define SPDIF_SIE_SYMERR_SHIFT                   (15U)
#define SPDIF_SIE_VALNOGOOD_MASK                 (0x10000U)
#define SPDIF_SIE_VALNOGOOD_SHIFT                (16U)
#define SPDIF_SIE_CNEW_MASK                      (0x20000U)
#define SPDIF_SIE_CNEW_SHIFT                     (17U)
#define SPDIF_SIE_TXRESYN_MASK                   (0x40000U)
#define SPDIF_SIE_TXRESYN_SHIFT                  (18U)
#define SPDIF_SIE_TXUNOV_MASK                    (0x80000U)
#define SPDIF_SIE_TXUNOV_SHIFT                   (19U)
#define SPDIF_SIE_LOCK_MASK                      (0x100000U)
#define SPDIF_SIE_LOCK_SHIFT                     (20U)

/*! @name SIC - InterruptClear Register */
#define SPDIF_SIC_LOCKLOSS_MASK                  (0x4U)
#define SPDIF_SIC_LOCKLOSS_SHIFT                 (2U)
#define SPDIF_SIC_RXFIFORESYN_MASK               (0x8U)
#define SPDIF_SIC_RXFIFORESYN_SHIFT              (3U)
#define SPDIF_SIC_RXFIFOUNOV_MASK                (0x10U)
#define SPDIF_SIC_RXFIFOUNOV_SHIFT               (4U)
#define SPDIF_SIC_UQERR_MASK                     (0x20U)
#define SPDIF_SIC_UQERR_SHIFT                    (5U)
#define SPDIF_SIC_UQSYNC_MASK                    (0x40U)
#define SPDIF_SIC_UQSYNC_SHIFT                   (6U)
#define SPDIF_SIC_QRXOV_MASK                     (0x80U)
#define SPDIF_SIC_QRXOV_SHIFT                    (7U)
#define SPDIF_SIC_URXOV_MASK                     (0x200U)
#define SPDIF_SIC_URXOV_SHIFT                    (9U)
#define SPDIF_SIC_BITERR_MASK                    (0x4000U)
#define SPDIF_SIC_BITERR_SHIFT                   (14U)
#define SPDIF_SIC_SYMERR_MASK                    (0x8000U)
#define SPDIF_SIC_SYMERR_SHIFT                   (15U)
#define SPDIF_SIC_VALNOGOOD_MASK                 (0x10000U)
#define SPDIF_SIC_VALNOGOOD_SHIFT                (16U)
#define SPDIF_SIC_CNEW_MASK                      (0x20000U)
#define SPDIF_SIC_CNEW_SHIFT                     (17U)
#define SPDIF_SIC_TXRESYN_MASK                   (0x40000U)
#define SPDIF_SIC_TXRESYN_SHIFT                  (18U)
#define SPDIF_SIC_TXUNOV_MASK                    (0x80000U)
#define SPDIF_SIC_TXUNOV_SHIFT                   (19U)
#define SPDIF_SIC_LOCK_MASK                      (0x100000U)
#define SPDIF_SIC_LOCK_SHIFT                     (20U)

/*! @name SIS - InterruptStat Register */
#define SPDIF_SIS_RXFIFOFUL_MASK                 (0x1U)
#define SPDIF_SIS_RXFIFOFUL_SHIFT                (0U)
#define SPDIF_SIS_TXEM_MASK                      (0x2U)
#define SPDIF_SIS_TXEM_SHIFT                     (1U)
#define SPDIF_SIS_LOCKLOSS_MASK                  (0x4U)
#define SPDIF_SIS_LOCKLOSS_SHIFT                 (2U)
#define SPDIF_SIS_RXFIFORESYN_MASK               (0x8U)
#define SPDIF_SIS_RXFIFORESYN_SHIFT              (3U)
#define SPDIF_SIS_RXFIFOUNOV_MASK                (0x10U)
#define SPDIF_SIS_RXFIFOUNOV_SHIFT               (4U)
#define SPDIF_SIS_UQERR_MASK                     (0x20U)
#define SPDIF_SIS_UQERR_SHIFT                    (5U)
#define SPDIF_SIS_UQSYNC_MASK                    (0x40U)
#define SPDIF_SIS_UQSYNC_SHIFT                   (6U)
#define SPDIF_SIS_QRXOV_MASK                     (0x80U)
#define SPDIF_SIS_QRXOV_SHIFT                    (7U)
#define SPDIF_SIS_QRXFUL_MASK                    (0x100U)
#define SPDIF_SIS_QRXFUL_SHIFT                   (8U)
#define SPDIF_SIS_URXOV_MASK                     (0x200U)
#define SPDIF_SIS_URXOV_SHIFT                    (9U)
#define SPDIF_SIS_URXFUL_MASK                    (0x400U)
#define SPDIF_SIS_URXFUL_SHIFT                   (10U)
#define SPDIF_SIS_BITERR_MASK                    (0x4000U)
#define SPDIF_SIS_BITERR_SHIFT                   (14U)
#define SPDIF_SIS_SYMERR_MASK                    (0x8000U)
#define SPDIF_SIS_SYMERR_SHIFT                   (15U)
#define SPDIF_SIS_VALNOGOOD_MASK                 (0x10000U)
#define SPDIF_SIS_VALNOGOOD_SHIFT                (16U)
#define SPDIF_SIS_CNEW_MASK                      (0x20000U)
#define SPDIF_SIS_CNEW_SHIFT                     (17U)
#define SPDIF_SIS_TXRESYN_MASK                   (0x40000U)
#define SPDIF_SIS_TXRESYN_SHIFT                  (18U)
#define SPDIF_SIS_TXUNOV_MASK                    (0x80000U)
#define SPDIF_SIS_TXUNOV_SHIFT                   (19U)
#define SPDIF_SIS_LOCK_MASK                      (0x100000U)
#define SPDIF_SIS_LOCK_SHIFT                     (20U)

/*! @name SRL - SPDIFRxLeft Register */
#define SPDIF_SRL_RXDATALEFT_MASK                (0xFFFFFFU)
#define SPDIF_SRL_RXDATALEFT_SHIFT               (0U)
#define SPDIF_SRL_RXDATALEFT(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SRL_RXDATALEFT_SHIFT)) & SPDIF_SRL_RXDATALEFT_MASK)

/*! @name SRR - SPDIFRxRight Register */
#define SPDIF_SRR_RXDATARIGHT_MASK               (0xFFFFFFU)
#define SPDIF_SRR_RXDATARIGHT_SHIFT              (0U)
#define SPDIF_SRR_RXDATARIGHT(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_SRR_RXDATARIGHT_SHIFT)) & SPDIF_SRR_RXDATARIGHT_MASK)

/*! @name SRCSH - SPDIFRxCChannel_h Register */
#define SPDIF_SRCSH_RXCCHANNEL_H_MASK            (0xFFFFFFU)
#define SPDIF_SRCSH_RXCCHANNEL_H_SHIFT           (0U)
#define SPDIF_SRCSH_RXCCHANNEL_H(x)              (((uint32_t)(((uint32_t)(x)) << SPDIF_SRCSH_RXCCHANNEL_H_SHIFT)) & SPDIF_SRCSH_RXCCHANNEL_H_MASK)

/*! @name SRCSL - SPDIFRxCChannel_l Register */
#define SPDIF_SRCSL_RXCCHANNEL_L_MASK            (0xFFFFFFU)
#define SPDIF_SRCSL_RXCCHANNEL_L_SHIFT           (0U)
#define SPDIF_SRCSL_RXCCHANNEL_L(x)              (((uint32_t)(((uint32_t)(x)) << SPDIF_SRCSL_RXCCHANNEL_L_SHIFT)) & SPDIF_SRCSL_RXCCHANNEL_L_MASK)

/*! @name SRU - UchannelRx Register */
#define SPDIF_SRU_RXUCHANNEL_MASK                (0xFFFFFFU)
#define SPDIF_SRU_RXUCHANNEL_SHIFT               (0U)
#define SPDIF_SRU_RXUCHANNEL(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SRU_RXUCHANNEL_SHIFT)) & SPDIF_SRU_RXUCHANNEL_MASK)

/*! @name SRQ - QchannelRx Register */
#define SPDIF_SRQ_RXQCHANNEL_MASK                (0xFFFFFFU)
#define SPDIF_SRQ_RXQCHANNEL_SHIFT               (0U)
#define SPDIF_SRQ_RXQCHANNEL(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SRQ_RXQCHANNEL_SHIFT)) & SPDIF_SRQ_RXQCHANNEL_MASK)

/*! @name STL - SPDIFTxLeft Register */
#define SPDIF_STL_TXDATALEFT_MASK                (0xFFFFFFU)
#define SPDIF_STL_TXDATALEFT_SHIFT               (0U)
#define SPDIF_STL_TXDATALEFT(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_STL_TXDATALEFT_SHIFT)) & SPDIF_STL_TXDATALEFT_MASK)

/*! @name STR - SPDIFTxRight Register */
#define SPDIF_STR_TXDATARIGHT_MASK               (0xFFFFFFU)
#define SPDIF_STR_TXDATARIGHT_SHIFT              (0U)
#define SPDIF_STR_TXDATARIGHT(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_STR_TXDATARIGHT_SHIFT)) & SPDIF_STR_TXDATARIGHT_MASK)

/*! @name STCSCH - SPDIFTxCChannelCons_h Register */
#define SPDIF_STCSCH_TXCCHANNELCONS_H_MASK       (0xFFFFFFU)
#define SPDIF_STCSCH_TXCCHANNELCONS_H_SHIFT      (0U)
#define SPDIF_STCSCH_TXCCHANNELCONS_H(x)         (((uint32_t)(((uint32_t)(x)) << SPDIF_STCSCH_TXCCHANNELCONS_H_SHIFT)) & SPDIF_STCSCH_TXCCHANNELCONS_H_MASK)

/*! @name STCSCL - SPDIFTxCChannelCons_l Register */
#define SPDIF_STCSCL_TXCCHANNELCONS_L_MASK       (0xFFFFFFU)
#define SPDIF_STCSCL_TXCCHANNELCONS_L_SHIFT      (0U)
#define SPDIF_STCSCL_TXCCHANNELCONS_L(x)         (((uint32_t)(((uint32_t)(x)) << SPDIF_STCSCL_TXCCHANNELCONS_L_SHIFT)) & SPDIF_STCSCL_TXCCHANNELCONS_L_MASK)

/*! @name SRFM - FreqMeas Register */
#define SPDIF_SRFM_FREQMEAS_MASK                 (0xFFFFFFU)
#define SPDIF_SRFM_FREQMEAS_SHIFT                (0U)
#define SPDIF_SRFM_FREQMEAS(x)                   (((uint32_t)(((uint32_t)(x)) << SPDIF_SRFM_FREQMEAS_SHIFT)) & SPDIF_SRFM_FREQMEAS_MASK)

/*! @name STC - SPDIFTxClk Register */
#define SPDIF_STC_TXCLK_DF_MASK                  (0x7FU)
#define SPDIF_STC_TXCLK_DF_SHIFT                 (0U)
#define SPDIF_STC_TXCLK_DF(x)                    (((uint32_t)(((uint32_t)(x)) << SPDIF_STC_TXCLK_DF_SHIFT)) & SPDIF_STC_TXCLK_DF_MASK)
#define SPDIF_STC_TX_ALL_CLK_EN_MASK             (0x80U)
#define SPDIF_STC_TX_ALL_CLK_EN_SHIFT            (7U)
#define SPDIF_STC_TXCLK_SOURCE_MASK              (0x700U)
#define SPDIF_STC_TXCLK_SOURCE_SHIFT             (8U)
#define SPDIF_STC_TXCLK_SOURCE(x)                (((uint32_t)(((uint32_t)(x)) << SPDIF_STC_TXCLK_SOURCE_SHIFT)) & SPDIF_STC_TXCLK_SOURCE_MASK)
#define SPDIF_STC_SYSCLK_DF_MASK                 (0xFF800U)
#define SPDIF_STC_SYSCLK_DF_SHIFT                (11U)
#define SPDIF_STC_SYSCLK_DF(x)                   (((uint32_t)(((uint32_t)(x)) << SPDIF_STC_SYSCLK_DF_SHIFT)) & SPDIF_STC_SYSCLK_DF_MASK)


/*!
 * @}
 */ /* end of group SPDIF_Register_Masks */


/* SPDIF - Peripheral instance base addresses */
/** Peripheral SPDIF base pointer */
#define SPDIF_BASE_PTR                           ((SPDIF_MemMapPtr)0x40380000u)
/** Array initializer of SPDIF peripheral base pointers */
#define SPDIF_BASE_PTRS                          { SPDIF_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- SPDIF - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPDIF_Register_Accessor_Macros SPDIF - Register accessor macros
 * @{
 */


/* SPDIF - Register instance definitions */
/* SPDIF */
#define SPDIF_SCR                                SPDIF_SCR_REG(SPDIF_BASE_PTR)
#define SPDIF_SRCD                               SPDIF_SRCD_REG(SPDIF_BASE_PTR)
#define SPDIF_SRPC                               SPDIF_SRPC_REG(SPDIF_BASE_PTR)
#define SPDIF_SIE                                SPDIF_SIE_REG(SPDIF_BASE_PTR)
#define SPDIF_SIC                                SPDIF_SIC_REG(SPDIF_BASE_PTR)
#define SPDIF_SIS                                SPDIF_SIS_REG(SPDIF_BASE_PTR)
#define SPDIF_SRL                                SPDIF_SRL_REG(SPDIF_BASE_PTR)
#define SPDIF_SRR                                SPDIF_SRR_REG(SPDIF_BASE_PTR)
#define SPDIF_SRCSH                              SPDIF_SRCSH_REG(SPDIF_BASE_PTR)
#define SPDIF_SRCSL                              SPDIF_SRCSL_REG(SPDIF_BASE_PTR)
#define SPDIF_SRU                                SPDIF_SRU_REG(SPDIF_BASE_PTR)
#define SPDIF_SRQ                                SPDIF_SRQ_REG(SPDIF_BASE_PTR)
#define SPDIF_STL                                SPDIF_STL_REG(SPDIF_BASE_PTR)
#define SPDIF_STR                                SPDIF_STR_REG(SPDIF_BASE_PTR)
#define SPDIF_STCSCH                             SPDIF_STCSCH_REG(SPDIF_BASE_PTR)
#define SPDIF_STCSCL                             SPDIF_STCSCL_REG(SPDIF_BASE_PTR)
#define SPDIF_SRFM                               SPDIF_SRFM_REG(SPDIF_BASE_PTR)
#define SPDIF_STC                                SPDIF_STC_REG(SPDIF_BASE_PTR)

/*!
 * @}
 */ /* end of group SPDIF_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SPDIF_Peripheral */


/* ----------------------------------------------------------------------------
   -- SRC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SRC_Peripheral SRC
 * @{
 */

/** SRC - Peripheral register structure */
typedef struct SRC_MemMap {
  uint32_t SCR;                                    /**< SRC Control Register, offset: 0x0 */
  uint32_t SBMR1;                                  /**< SRC Boot Mode Register 1, offset: 0x4 */
  uint32_t SRSR;                                   /**< SRC Reset Status Register, offset: 0x8 */
  uint8_t RESERVED_0[16];
  uint32_t SBMR2;                                  /**< SRC Boot Mode Register 2, offset: 0x1C */
  uint32_t GPR[10];                                /**< SRC General Purpose Register 1..SRC General Purpose Register 10, array offset: 0x20, array step: 0x4 */
} volatile *SRC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SRC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SRC_Register_Accessor_Macros SRC - Register accessor macros
 * @{
 */


/* SRC - Register accessors */
#define SRC_SCR_REG(base)                        ((base)->SCR)
#define SRC_SBMR1_REG(base)                      ((base)->SBMR1)
#define SRC_SRSR_REG(base)                       ((base)->SRSR)
#define SRC_SBMR2_REG(base)                      ((base)->SBMR2)
#define SRC_GPR_REG(base,index)                  ((base)->GPR[index])

/*!
 * @}
 */ /* end of group SRC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SRC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SRC_Register_Masks SRC Register Masks
 * @{
 */

/*! @name SCR - SRC Control Register */
#define SRC_SCR_LOCKUP_RST_MASK                  (0x10U)
#define SRC_SCR_LOCKUP_RST_SHIFT                 (4U)
#define SRC_SCR_MASK_WDOG_RST_MASK               (0x780U)
#define SRC_SCR_MASK_WDOG_RST_SHIFT              (7U)
#define SRC_SCR_MASK_WDOG_RST(x)                 (((uint32_t)(((uint32_t)(x)) << SRC_SCR_MASK_WDOG_RST_SHIFT)) & SRC_SCR_MASK_WDOG_RST_MASK)
#define SRC_SCR_CORE0_RST_MASK                   (0x2000U)
#define SRC_SCR_CORE0_RST_SHIFT                  (13U)
#define SRC_SCR_CORE0_DBG_RST_MASK               (0x20000U)
#define SRC_SCR_CORE0_DBG_RST_SHIFT              (17U)
#define SRC_SCR_DBG_RST_MSK_PG_MASK              (0x2000000U)
#define SRC_SCR_DBG_RST_MSK_PG_SHIFT             (25U)
#define SRC_SCR_MASK_WDOG3_RST_MASK              (0xF0000000U)
#define SRC_SCR_MASK_WDOG3_RST_SHIFT             (28U)
#define SRC_SCR_MASK_WDOG3_RST(x)                (((uint32_t)(((uint32_t)(x)) << SRC_SCR_MASK_WDOG3_RST_SHIFT)) & SRC_SCR_MASK_WDOG3_RST_MASK)

/*! @name SBMR1 - SRC Boot Mode Register 1 */
#define SRC_SBMR1_BOOT_CFG1_MASK                 (0xFFU)
#define SRC_SBMR1_BOOT_CFG1_SHIFT                (0U)
#define SRC_SBMR1_BOOT_CFG1(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_SBMR1_BOOT_CFG1_SHIFT)) & SRC_SBMR1_BOOT_CFG1_MASK)
#define SRC_SBMR1_BOOT_CFG2_MASK                 (0xFF00U)
#define SRC_SBMR1_BOOT_CFG2_SHIFT                (8U)
#define SRC_SBMR1_BOOT_CFG2(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_SBMR1_BOOT_CFG2_SHIFT)) & SRC_SBMR1_BOOT_CFG2_MASK)
#define SRC_SBMR1_BOOT_CFG3_MASK                 (0xFF0000U)
#define SRC_SBMR1_BOOT_CFG3_SHIFT                (16U)
#define SRC_SBMR1_BOOT_CFG3(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_SBMR1_BOOT_CFG3_SHIFT)) & SRC_SBMR1_BOOT_CFG3_MASK)
#define SRC_SBMR1_BOOT_CFG4_MASK                 (0xFF000000U)
#define SRC_SBMR1_BOOT_CFG4_SHIFT                (24U)
#define SRC_SBMR1_BOOT_CFG4(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_SBMR1_BOOT_CFG4_SHIFT)) & SRC_SBMR1_BOOT_CFG4_MASK)

/*! @name SRSR - SRC Reset Status Register */
#define SRC_SRSR_IPP_RESET_B_MASK                (0x1U)
#define SRC_SRSR_IPP_RESET_B_SHIFT               (0U)
#define SRC_SRSR_LOCKUP_SYSRESETREQ_MASK         (0x2U)
#define SRC_SRSR_LOCKUP_SYSRESETREQ_SHIFT        (1U)
#define SRC_SRSR_CSU_RESET_B_MASK                (0x4U)
#define SRC_SRSR_CSU_RESET_B_SHIFT               (2U)
#define SRC_SRSR_IPP_USER_RESET_B_MASK           (0x8U)
#define SRC_SRSR_IPP_USER_RESET_B_SHIFT          (3U)
#define SRC_SRSR_WDOG_RST_B_MASK                 (0x10U)
#define SRC_SRSR_WDOG_RST_B_SHIFT                (4U)
#define SRC_SRSR_JTAG_RST_B_MASK                 (0x20U)
#define SRC_SRSR_JTAG_RST_B_SHIFT                (5U)
#define SRC_SRSR_JTAG_SW_RST_MASK                (0x40U)
#define SRC_SRSR_JTAG_SW_RST_SHIFT               (6U)
#define SRC_SRSR_WDOG3_RST_B_MASK                (0x80U)
#define SRC_SRSR_WDOG3_RST_B_SHIFT               (7U)
#define SRC_SRSR_TEMPSENSE_RST_B_MASK            (0x100U)
#define SRC_SRSR_TEMPSENSE_RST_B_SHIFT           (8U)

/*! @name SBMR2 - SRC Boot Mode Register 2 */
#define SRC_SBMR2_SEC_CONFIG_MASK                (0x3U)
#define SRC_SBMR2_SEC_CONFIG_SHIFT               (0U)
#define SRC_SBMR2_SEC_CONFIG(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_SBMR2_SEC_CONFIG_SHIFT)) & SRC_SBMR2_SEC_CONFIG_MASK)
#define SRC_SBMR2_DIR_BT_DIS_MASK                (0x8U)
#define SRC_SBMR2_DIR_BT_DIS_SHIFT               (3U)
#define SRC_SBMR2_BT_FUSE_SEL_MASK               (0x10U)
#define SRC_SBMR2_BT_FUSE_SEL_SHIFT              (4U)
#define SRC_SBMR2_BMOD_MASK                      (0x3000000U)
#define SRC_SBMR2_BMOD_SHIFT                     (24U)
#define SRC_SBMR2_BMOD(x)                        (((uint32_t)(((uint32_t)(x)) << SRC_SBMR2_BMOD_SHIFT)) & SRC_SBMR2_BMOD_MASK)

/*! @name GPR - SRC General Purpose Register 1..SRC General Purpose Register 10 */
#define SRC_GPR_PERSISTENT_ENTRY0_MASK           (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ENTRY0_SHIFT          (0U)
#define SRC_GPR_PERSISTENT_ENTRY0(x)             (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ENTRY0_SHIFT)) & SRC_GPR_PERSISTENT_ENTRY0_MASK)
#define SRC_GPR_PERSISTENT_ARG0_MASK             (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ARG0_SHIFT            (0U)
#define SRC_GPR_PERSISTENT_ARG0(x)               (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ARG0_SHIFT)) & SRC_GPR_PERSISTENT_ARG0_MASK)

/* The count of SRC_GPR */
#define SRC_GPR_COUNT                            (10U)


/*!
 * @}
 */ /* end of group SRC_Register_Masks */


/* SRC - Peripheral instance base addresses */
/** Peripheral SRC base pointer */
#define SRC_BASE_PTR                             ((SRC_MemMapPtr)0x400F8000u)
/** Array initializer of SRC peripheral base pointers */
#define SRC_BASE_PTRS                            { SRC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- SRC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SRC_Register_Accessor_Macros SRC - Register accessor macros
 * @{
 */


/* SRC - Register instance definitions */
/* SRC */
#define SRC_SCR                                  SRC_SCR_REG(SRC_BASE_PTR)
#define SRC_SBMR1                                SRC_SBMR1_REG(SRC_BASE_PTR)
#define SRC_SRSR                                 SRC_SRSR_REG(SRC_BASE_PTR)
#define SRC_SBMR2                                SRC_SBMR2_REG(SRC_BASE_PTR)
#define SRC_GPR1                                 SRC_GPR_REG(SRC_BASE_PTR,0)
#define SRC_GPR2                                 SRC_GPR_REG(SRC_BASE_PTR,1)
#define SRC_GPR3                                 SRC_GPR_REG(SRC_BASE_PTR,2)
#define SRC_GPR4                                 SRC_GPR_REG(SRC_BASE_PTR,3)
#define SRC_GPR5                                 SRC_GPR_REG(SRC_BASE_PTR,4)
#define SRC_GPR6                                 SRC_GPR_REG(SRC_BASE_PTR,5)
#define SRC_GPR7                                 SRC_GPR_REG(SRC_BASE_PTR,6)
#define SRC_GPR8                                 SRC_GPR_REG(SRC_BASE_PTR,7)
#define SRC_GPR9                                 SRC_GPR_REG(SRC_BASE_PTR,8)
#define SRC_GPR10                                SRC_GPR_REG(SRC_BASE_PTR,9)

/* SRC - Register array accessors */
#define SRC_GPR(index)                           SRC_GPR_REG(SRC_BASE_PTR,index)

/*!
 * @}
 */ /* end of group SRC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SRC_Peripheral */


/* ----------------------------------------------------------------------------
   -- TEMPMON
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TEMPMON_Peripheral TEMPMON
 * @{
 */

/** TEMPMON - Peripheral register structure */
typedef struct TEMPMON_MemMap {
  uint8_t RESERVED_0[384];
  uint32_t TEMPSENSE0;                             /**< Tempsensor Control Register 0, offset: 0x180 */
  uint32_t TEMPSENSE0_SET;                         /**< Tempsensor Control Register 0, offset: 0x184 */
  uint32_t TEMPSENSE0_CLR;                         /**< Tempsensor Control Register 0, offset: 0x188 */
  uint32_t TEMPSENSE0_TOG;                         /**< Tempsensor Control Register 0, offset: 0x18C */
  uint32_t TEMPSENSE1;                             /**< Tempsensor Control Register 1, offset: 0x190 */
  uint32_t TEMPSENSE1_SET;                         /**< Tempsensor Control Register 1, offset: 0x194 */
  uint32_t TEMPSENSE1_CLR;                         /**< Tempsensor Control Register 1, offset: 0x198 */
  uint32_t TEMPSENSE1_TOG;                         /**< Tempsensor Control Register 1, offset: 0x19C */
  uint8_t RESERVED_1[240];
  uint32_t TEMPSENSE2;                             /**< Tempsensor Control Register 2, offset: 0x290 */
  uint32_t TEMPSENSE2_SET;                         /**< Tempsensor Control Register 2, offset: 0x294 */
  uint32_t TEMPSENSE2_CLR;                         /**< Tempsensor Control Register 2, offset: 0x298 */
  uint32_t TEMPSENSE2_TOG;                         /**< Tempsensor Control Register 2, offset: 0x29C */
} volatile *TEMPMON_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- TEMPMON - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TEMPMON_Register_Accessor_Macros TEMPMON - Register accessor macros
 * @{
 */


/* TEMPMON - Register accessors */
#define TEMPMON_TEMPSENSE0_REG(base)             ((base)->TEMPSENSE0)
#define TEMPMON_TEMPSENSE0_SET_REG(base)         ((base)->TEMPSENSE0_SET)
#define TEMPMON_TEMPSENSE0_CLR_REG(base)         ((base)->TEMPSENSE0_CLR)
#define TEMPMON_TEMPSENSE0_TOG_REG(base)         ((base)->TEMPSENSE0_TOG)
#define TEMPMON_TEMPSENSE1_REG(base)             ((base)->TEMPSENSE1)
#define TEMPMON_TEMPSENSE1_SET_REG(base)         ((base)->TEMPSENSE1_SET)
#define TEMPMON_TEMPSENSE1_CLR_REG(base)         ((base)->TEMPSENSE1_CLR)
#define TEMPMON_TEMPSENSE1_TOG_REG(base)         ((base)->TEMPSENSE1_TOG)
#define TEMPMON_TEMPSENSE2_REG(base)             ((base)->TEMPSENSE2)
#define TEMPMON_TEMPSENSE2_SET_REG(base)         ((base)->TEMPSENSE2_SET)
#define TEMPMON_TEMPSENSE2_CLR_REG(base)         ((base)->TEMPSENSE2_CLR)
#define TEMPMON_TEMPSENSE2_TOG_REG(base)         ((base)->TEMPSENSE2_TOG)

/*!
 * @}
 */ /* end of group TEMPMON_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- TEMPMON Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TEMPMON_Register_Masks TEMPMON Register Masks
 * @{
 */

/*! @name TEMPSENSE0 - Tempsensor Control Register 0 */
#define TEMPMON_TEMPSENSE0_POWER_DOWN_MASK       (0x1U)
#define TEMPMON_TEMPSENSE0_POWER_DOWN_SHIFT      (0U)
#define TEMPMON_TEMPSENSE0_MEASURE_TEMP_MASK     (0x2U)
#define TEMPMON_TEMPSENSE0_MEASURE_TEMP_SHIFT    (1U)
#define TEMPMON_TEMPSENSE0_FINISHED_MASK         (0x4U)
#define TEMPMON_TEMPSENSE0_FINISHED_SHIFT        (2U)
#define TEMPMON_TEMPSENSE0_TEMP_CNT_MASK         (0xFFF00U)
#define TEMPMON_TEMPSENSE0_TEMP_CNT_SHIFT        (8U)
#define TEMPMON_TEMPSENSE0_TEMP_CNT(x)           (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE0_TEMP_CNT_SHIFT)) & TEMPMON_TEMPSENSE0_TEMP_CNT_MASK)
#define TEMPMON_TEMPSENSE0_ALARM_VALUE_MASK      (0xFFF00000U)
#define TEMPMON_TEMPSENSE0_ALARM_VALUE_SHIFT     (20U)
#define TEMPMON_TEMPSENSE0_ALARM_VALUE(x)        (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE0_ALARM_VALUE_SHIFT)) & TEMPMON_TEMPSENSE0_ALARM_VALUE_MASK)

/*! @name TEMPSENSE0_SET - Tempsensor Control Register 0 */
#define TEMPMON_TEMPSENSE0_SET_POWER_DOWN_MASK   (0x1U)
#define TEMPMON_TEMPSENSE0_SET_POWER_DOWN_SHIFT  (0U)
#define TEMPMON_TEMPSENSE0_SET_MEASURE_TEMP_MASK (0x2U)
#define TEMPMON_TEMPSENSE0_SET_MEASURE_TEMP_SHIFT (1U)
#define TEMPMON_TEMPSENSE0_SET_FINISHED_MASK     (0x4U)
#define TEMPMON_TEMPSENSE0_SET_FINISHED_SHIFT    (2U)
#define TEMPMON_TEMPSENSE0_SET_TEMP_CNT_MASK     (0xFFF00U)
#define TEMPMON_TEMPSENSE0_SET_TEMP_CNT_SHIFT    (8U)
#define TEMPMON_TEMPSENSE0_SET_TEMP_CNT(x)       (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE0_SET_TEMP_CNT_SHIFT)) & TEMPMON_TEMPSENSE0_SET_TEMP_CNT_MASK)
#define TEMPMON_TEMPSENSE0_SET_ALARM_VALUE_MASK  (0xFFF00000U)
#define TEMPMON_TEMPSENSE0_SET_ALARM_VALUE_SHIFT (20U)
#define TEMPMON_TEMPSENSE0_SET_ALARM_VALUE(x)    (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE0_SET_ALARM_VALUE_SHIFT)) & TEMPMON_TEMPSENSE0_SET_ALARM_VALUE_MASK)

/*! @name TEMPSENSE0_CLR - Tempsensor Control Register 0 */
#define TEMPMON_TEMPSENSE0_CLR_POWER_DOWN_MASK   (0x1U)
#define TEMPMON_TEMPSENSE0_CLR_POWER_DOWN_SHIFT  (0U)
#define TEMPMON_TEMPSENSE0_CLR_MEASURE_TEMP_MASK (0x2U)
#define TEMPMON_TEMPSENSE0_CLR_MEASURE_TEMP_SHIFT (1U)
#define TEMPMON_TEMPSENSE0_CLR_FINISHED_MASK     (0x4U)
#define TEMPMON_TEMPSENSE0_CLR_FINISHED_SHIFT    (2U)
#define TEMPMON_TEMPSENSE0_CLR_TEMP_CNT_MASK     (0xFFF00U)
#define TEMPMON_TEMPSENSE0_CLR_TEMP_CNT_SHIFT    (8U)
#define TEMPMON_TEMPSENSE0_CLR_TEMP_CNT(x)       (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE0_CLR_TEMP_CNT_SHIFT)) & TEMPMON_TEMPSENSE0_CLR_TEMP_CNT_MASK)
#define TEMPMON_TEMPSENSE0_CLR_ALARM_VALUE_MASK  (0xFFF00000U)
#define TEMPMON_TEMPSENSE0_CLR_ALARM_VALUE_SHIFT (20U)
#define TEMPMON_TEMPSENSE0_CLR_ALARM_VALUE(x)    (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE0_CLR_ALARM_VALUE_SHIFT)) & TEMPMON_TEMPSENSE0_CLR_ALARM_VALUE_MASK)

/*! @name TEMPSENSE0_TOG - Tempsensor Control Register 0 */
#define TEMPMON_TEMPSENSE0_TOG_POWER_DOWN_MASK   (0x1U)
#define TEMPMON_TEMPSENSE0_TOG_POWER_DOWN_SHIFT  (0U)
#define TEMPMON_TEMPSENSE0_TOG_MEASURE_TEMP_MASK (0x2U)
#define TEMPMON_TEMPSENSE0_TOG_MEASURE_TEMP_SHIFT (1U)
#define TEMPMON_TEMPSENSE0_TOG_FINISHED_MASK     (0x4U)
#define TEMPMON_TEMPSENSE0_TOG_FINISHED_SHIFT    (2U)
#define TEMPMON_TEMPSENSE0_TOG_TEMP_CNT_MASK     (0xFFF00U)
#define TEMPMON_TEMPSENSE0_TOG_TEMP_CNT_SHIFT    (8U)
#define TEMPMON_TEMPSENSE0_TOG_TEMP_CNT(x)       (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE0_TOG_TEMP_CNT_SHIFT)) & TEMPMON_TEMPSENSE0_TOG_TEMP_CNT_MASK)
#define TEMPMON_TEMPSENSE0_TOG_ALARM_VALUE_MASK  (0xFFF00000U)
#define TEMPMON_TEMPSENSE0_TOG_ALARM_VALUE_SHIFT (20U)
#define TEMPMON_TEMPSENSE0_TOG_ALARM_VALUE(x)    (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE0_TOG_ALARM_VALUE_SHIFT)) & TEMPMON_TEMPSENSE0_TOG_ALARM_VALUE_MASK)

/*! @name TEMPSENSE1 - Tempsensor Control Register 1 */
#define TEMPMON_TEMPSENSE1_MEASURE_FREQ_MASK     (0xFFFFU)
#define TEMPMON_TEMPSENSE1_MEASURE_FREQ_SHIFT    (0U)
#define TEMPMON_TEMPSENSE1_MEASURE_FREQ(x)       (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE1_MEASURE_FREQ_SHIFT)) & TEMPMON_TEMPSENSE1_MEASURE_FREQ_MASK)

/*! @name TEMPSENSE1_SET - Tempsensor Control Register 1 */
#define TEMPMON_TEMPSENSE1_SET_MEASURE_FREQ_MASK (0xFFFFU)
#define TEMPMON_TEMPSENSE1_SET_MEASURE_FREQ_SHIFT (0U)
#define TEMPMON_TEMPSENSE1_SET_MEASURE_FREQ(x)   (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE1_SET_MEASURE_FREQ_SHIFT)) & TEMPMON_TEMPSENSE1_SET_MEASURE_FREQ_MASK)

/*! @name TEMPSENSE1_CLR - Tempsensor Control Register 1 */
#define TEMPMON_TEMPSENSE1_CLR_MEASURE_FREQ_MASK (0xFFFFU)
#define TEMPMON_TEMPSENSE1_CLR_MEASURE_FREQ_SHIFT (0U)
#define TEMPMON_TEMPSENSE1_CLR_MEASURE_FREQ(x)   (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE1_CLR_MEASURE_FREQ_SHIFT)) & TEMPMON_TEMPSENSE1_CLR_MEASURE_FREQ_MASK)

/*! @name TEMPSENSE1_TOG - Tempsensor Control Register 1 */
#define TEMPMON_TEMPSENSE1_TOG_MEASURE_FREQ_MASK (0xFFFFU)
#define TEMPMON_TEMPSENSE1_TOG_MEASURE_FREQ_SHIFT (0U)
#define TEMPMON_TEMPSENSE1_TOG_MEASURE_FREQ(x)   (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE1_TOG_MEASURE_FREQ_SHIFT)) & TEMPMON_TEMPSENSE1_TOG_MEASURE_FREQ_MASK)

/*! @name TEMPSENSE2 - Tempsensor Control Register 2 */
#define TEMPMON_TEMPSENSE2_LOW_ALARM_VALUE_MASK  (0xFFFU)
#define TEMPMON_TEMPSENSE2_LOW_ALARM_VALUE_SHIFT (0U)
#define TEMPMON_TEMPSENSE2_LOW_ALARM_VALUE(x)    (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE2_LOW_ALARM_VALUE_SHIFT)) & TEMPMON_TEMPSENSE2_LOW_ALARM_VALUE_MASK)
#define TEMPMON_TEMPSENSE2_PANIC_ALARM_VALUE_MASK (0xFFF0000U)
#define TEMPMON_TEMPSENSE2_PANIC_ALARM_VALUE_SHIFT (16U)
#define TEMPMON_TEMPSENSE2_PANIC_ALARM_VALUE(x)  (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE2_PANIC_ALARM_VALUE_SHIFT)) & TEMPMON_TEMPSENSE2_PANIC_ALARM_VALUE_MASK)

/*! @name TEMPSENSE2_SET - Tempsensor Control Register 2 */
#define TEMPMON_TEMPSENSE2_SET_LOW_ALARM_VALUE_MASK (0xFFFU)
#define TEMPMON_TEMPSENSE2_SET_LOW_ALARM_VALUE_SHIFT (0U)
#define TEMPMON_TEMPSENSE2_SET_LOW_ALARM_VALUE(x) (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE2_SET_LOW_ALARM_VALUE_SHIFT)) & TEMPMON_TEMPSENSE2_SET_LOW_ALARM_VALUE_MASK)
#define TEMPMON_TEMPSENSE2_SET_PANIC_ALARM_VALUE_MASK (0xFFF0000U)
#define TEMPMON_TEMPSENSE2_SET_PANIC_ALARM_VALUE_SHIFT (16U)
#define TEMPMON_TEMPSENSE2_SET_PANIC_ALARM_VALUE(x) (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE2_SET_PANIC_ALARM_VALUE_SHIFT)) & TEMPMON_TEMPSENSE2_SET_PANIC_ALARM_VALUE_MASK)

/*! @name TEMPSENSE2_CLR - Tempsensor Control Register 2 */
#define TEMPMON_TEMPSENSE2_CLR_LOW_ALARM_VALUE_MASK (0xFFFU)
#define TEMPMON_TEMPSENSE2_CLR_LOW_ALARM_VALUE_SHIFT (0U)
#define TEMPMON_TEMPSENSE2_CLR_LOW_ALARM_VALUE(x) (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE2_CLR_LOW_ALARM_VALUE_SHIFT)) & TEMPMON_TEMPSENSE2_CLR_LOW_ALARM_VALUE_MASK)
#define TEMPMON_TEMPSENSE2_CLR_PANIC_ALARM_VALUE_MASK (0xFFF0000U)
#define TEMPMON_TEMPSENSE2_CLR_PANIC_ALARM_VALUE_SHIFT (16U)
#define TEMPMON_TEMPSENSE2_CLR_PANIC_ALARM_VALUE(x) (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE2_CLR_PANIC_ALARM_VALUE_SHIFT)) & TEMPMON_TEMPSENSE2_CLR_PANIC_ALARM_VALUE_MASK)

/*! @name TEMPSENSE2_TOG - Tempsensor Control Register 2 */
#define TEMPMON_TEMPSENSE2_TOG_LOW_ALARM_VALUE_MASK (0xFFFU)
#define TEMPMON_TEMPSENSE2_TOG_LOW_ALARM_VALUE_SHIFT (0U)
#define TEMPMON_TEMPSENSE2_TOG_LOW_ALARM_VALUE(x) (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE2_TOG_LOW_ALARM_VALUE_SHIFT)) & TEMPMON_TEMPSENSE2_TOG_LOW_ALARM_VALUE_MASK)
#define TEMPMON_TEMPSENSE2_TOG_PANIC_ALARM_VALUE_MASK (0xFFF0000U)
#define TEMPMON_TEMPSENSE2_TOG_PANIC_ALARM_VALUE_SHIFT (16U)
#define TEMPMON_TEMPSENSE2_TOG_PANIC_ALARM_VALUE(x) (((uint32_t)(((uint32_t)(x)) << TEMPMON_TEMPSENSE2_TOG_PANIC_ALARM_VALUE_SHIFT)) & TEMPMON_TEMPSENSE2_TOG_PANIC_ALARM_VALUE_MASK)


/*!
 * @}
 */ /* end of group TEMPMON_Register_Masks */


/* TEMPMON - Peripheral instance base addresses */
/** Peripheral TEMPMON base pointer */
#define TEMPMON_BASE_PTR                         ((TEMPMON_MemMapPtr)0x400D8000u)
/** Array initializer of TEMPMON peripheral base pointers */
#define TEMPMON_BASE_PTRS                        { TEMPMON_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- TEMPMON - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TEMPMON_Register_Accessor_Macros TEMPMON - Register accessor macros
 * @{
 */


/* TEMPMON - Register instance definitions */
/* TEMPMON */
#define TEMPMON_TEMPSENSE0                       TEMPMON_TEMPSENSE0_REG(TEMPMON_BASE_PTR)
#define TEMPMON_TEMPSENSE0_SET                   TEMPMON_TEMPSENSE0_SET_REG(TEMPMON_BASE_PTR)
#define TEMPMON_TEMPSENSE0_CLR                   TEMPMON_TEMPSENSE0_CLR_REG(TEMPMON_BASE_PTR)
#define TEMPMON_TEMPSENSE0_TOG                   TEMPMON_TEMPSENSE0_TOG_REG(TEMPMON_BASE_PTR)
#define TEMPMON_TEMPSENSE1                       TEMPMON_TEMPSENSE1_REG(TEMPMON_BASE_PTR)
#define TEMPMON_TEMPSENSE1_SET                   TEMPMON_TEMPSENSE1_SET_REG(TEMPMON_BASE_PTR)
#define TEMPMON_TEMPSENSE1_CLR                   TEMPMON_TEMPSENSE1_CLR_REG(TEMPMON_BASE_PTR)
#define TEMPMON_TEMPSENSE1_TOG                   TEMPMON_TEMPSENSE1_TOG_REG(TEMPMON_BASE_PTR)
#define TEMPMON_TEMPSENSE2                       TEMPMON_TEMPSENSE2_REG(TEMPMON_BASE_PTR)
#define TEMPMON_TEMPSENSE2_SET                   TEMPMON_TEMPSENSE2_SET_REG(TEMPMON_BASE_PTR)
#define TEMPMON_TEMPSENSE2_CLR                   TEMPMON_TEMPSENSE2_CLR_REG(TEMPMON_BASE_PTR)
#define TEMPMON_TEMPSENSE2_TOG                   TEMPMON_TEMPSENSE2_TOG_REG(TEMPMON_BASE_PTR)

/*!
 * @}
 */ /* end of group TEMPMON_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group TEMPMON_Peripheral */


/* ----------------------------------------------------------------------------
   -- TMR
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TMR_Peripheral TMR
 * @{
 */

/** TMR - Peripheral register structure */
typedef struct TMR_MemMap {
  struct {                                         /* offset: 0x0, array step: 0x20 */
    uint16_t COMP1;                                  /**< Timer Channel Compare Register 1, array offset: 0x0, array step: 0x20 */
    uint16_t COMP2;                                  /**< Timer Channel Compare Register 2, array offset: 0x2, array step: 0x20 */
    uint16_t CAPT;                                   /**< Timer Channel Capture Register, array offset: 0x4, array step: 0x20 */
    uint16_t LOAD;                                   /**< Timer Channel Load Register, array offset: 0x6, array step: 0x20 */
    uint16_t HOLD;                                   /**< Timer Channel Hold Register, array offset: 0x8, array step: 0x20 */
    uint16_t CNTR;                                   /**< Timer Channel Counter Register, array offset: 0xA, array step: 0x20 */
    uint16_t CTRL;                                   /**< Timer Channel Control Register, array offset: 0xC, array step: 0x20 */
    uint16_t SCTRL;                                  /**< Timer Channel Status and Control Register, array offset: 0xE, array step: 0x20 */
    uint16_t CMPLD1;                                 /**< Timer Channel Comparator Load Register 1, array offset: 0x10, array step: 0x20 */
    uint16_t CMPLD2;                                 /**< Timer Channel Comparator Load Register 2, array offset: 0x12, array step: 0x20 */
    uint16_t CSCTRL;                                 /**< Timer Channel Comparator Status and Control Register, array offset: 0x14, array step: 0x20 */
    uint16_t FILT;                                   /**< Timer Channel Input Filter Register, array offset: 0x16, array step: 0x20 */
    uint16_t DMA;                                    /**< Timer Channel DMA Enable Register, array offset: 0x18, array step: 0x20 */
    uint8_t RESERVED_0[4];
    uint16_t ENBL;                                   /**< Timer Channel Enable Register, array offset: 0x1E, array step: 0x20, this item is not available for all array instances */
  } CHANNEL[4];
} volatile *TMR_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- TMR - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TMR_Register_Accessor_Macros TMR - Register accessor macros
 * @{
 */


/* TMR - Register accessors */
#define TMR_COMP1_REG(base,index)                ((base)->CHANNEL[index].COMP1)
#define TMR_COMP2_REG(base,index)                ((base)->CHANNEL[index].COMP2)
#define TMR_CAPT_REG(base,index)                 ((base)->CHANNEL[index].CAPT)
#define TMR_LOAD_REG(base,index)                 ((base)->CHANNEL[index].LOAD)
#define TMR_HOLD_REG(base,index)                 ((base)->CHANNEL[index].HOLD)
#define TMR_CNTR_REG(base,index)                 ((base)->CHANNEL[index].CNTR)
#define TMR_CTRL_REG(base,index)                 ((base)->CHANNEL[index].CTRL)
#define TMR_SCTRL_REG(base,index)                ((base)->CHANNEL[index].SCTRL)
#define TMR_CMPLD1_REG(base,index)               ((base)->CHANNEL[index].CMPLD1)
#define TMR_CMPLD2_REG(base,index)               ((base)->CHANNEL[index].CMPLD2)
#define TMR_CSCTRL_REG(base,index)               ((base)->CHANNEL[index].CSCTRL)
#define TMR_FILT_REG(base,index)                 ((base)->CHANNEL[index].FILT)
#define TMR_DMA_REG(base,index)                  ((base)->CHANNEL[index].DMA)
#define TMR_ENBL_REG(base,index)                 ((base)->CHANNEL[index].ENBL)

/*!
 * @}
 */ /* end of group TMR_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- TMR Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TMR_Register_Masks TMR Register Masks
 * @{
 */

/*! @name COMP1 - Timer Channel Compare Register 1 */
#define TMR_COMP1_COMPARISON_1_MASK              (0xFFFFU)
#define TMR_COMP1_COMPARISON_1_SHIFT             (0U)
#define TMR_COMP1_COMPARISON_1(x)                (((uint16_t)(((uint16_t)(x)) << TMR_COMP1_COMPARISON_1_SHIFT)) & TMR_COMP1_COMPARISON_1_MASK)

/* The count of TMR_COMP1 */
#define TMR_COMP1_COUNT                          (4U)

/*! @name COMP2 - Timer Channel Compare Register 2 */
#define TMR_COMP2_COMPARISON_2_MASK              (0xFFFFU)
#define TMR_COMP2_COMPARISON_2_SHIFT             (0U)
#define TMR_COMP2_COMPARISON_2(x)                (((uint16_t)(((uint16_t)(x)) << TMR_COMP2_COMPARISON_2_SHIFT)) & TMR_COMP2_COMPARISON_2_MASK)

/* The count of TMR_COMP2 */
#define TMR_COMP2_COUNT                          (4U)

/*! @name CAPT - Timer Channel Capture Register */
#define TMR_CAPT_CAPTURE_MASK                    (0xFFFFU)
#define TMR_CAPT_CAPTURE_SHIFT                   (0U)
#define TMR_CAPT_CAPTURE(x)                      (((uint16_t)(((uint16_t)(x)) << TMR_CAPT_CAPTURE_SHIFT)) & TMR_CAPT_CAPTURE_MASK)

/* The count of TMR_CAPT */
#define TMR_CAPT_COUNT                           (4U)

/*! @name LOAD - Timer Channel Load Register */
#define TMR_LOAD_LOAD_MASK                       (0xFFFFU)
#define TMR_LOAD_LOAD_SHIFT                      (0U)
#define TMR_LOAD_LOAD(x)                         (((uint16_t)(((uint16_t)(x)) << TMR_LOAD_LOAD_SHIFT)) & TMR_LOAD_LOAD_MASK)

/* The count of TMR_LOAD */
#define TMR_LOAD_COUNT                           (4U)

/*! @name HOLD - Timer Channel Hold Register */
#define TMR_HOLD_HOLD_MASK                       (0xFFFFU)
#define TMR_HOLD_HOLD_SHIFT                      (0U)
#define TMR_HOLD_HOLD(x)                         (((uint16_t)(((uint16_t)(x)) << TMR_HOLD_HOLD_SHIFT)) & TMR_HOLD_HOLD_MASK)

/* The count of TMR_HOLD */
#define TMR_HOLD_COUNT                           (4U)

/*! @name CNTR - Timer Channel Counter Register */
#define TMR_CNTR_COUNTER_MASK                    (0xFFFFU)
#define TMR_CNTR_COUNTER_SHIFT                   (0U)
#define TMR_CNTR_COUNTER(x)                      (((uint16_t)(((uint16_t)(x)) << TMR_CNTR_COUNTER_SHIFT)) & TMR_CNTR_COUNTER_MASK)

/* The count of TMR_CNTR */
#define TMR_CNTR_COUNT                           (4U)

/*! @name CTRL - Timer Channel Control Register */
#define TMR_CTRL_OUTMODE_MASK                    (0x7U)
#define TMR_CTRL_OUTMODE_SHIFT                   (0U)
#define TMR_CTRL_OUTMODE(x)                      (((uint16_t)(((uint16_t)(x)) << TMR_CTRL_OUTMODE_SHIFT)) & TMR_CTRL_OUTMODE_MASK)
#define TMR_CTRL_COINIT_MASK                     (0x8U)
#define TMR_CTRL_COINIT_SHIFT                    (3U)
#define TMR_CTRL_DIR_MASK                        (0x10U)
#define TMR_CTRL_DIR_SHIFT                       (4U)
#define TMR_CTRL_LENGTH_MASK                     (0x20U)
#define TMR_CTRL_LENGTH_SHIFT                    (5U)
#define TMR_CTRL_ONCE_MASK                       (0x40U)
#define TMR_CTRL_ONCE_SHIFT                      (6U)
#define TMR_CTRL_SCS_MASK                        (0x180U)
#define TMR_CTRL_SCS_SHIFT                       (7U)
#define TMR_CTRL_SCS(x)                          (((uint16_t)(((uint16_t)(x)) << TMR_CTRL_SCS_SHIFT)) & TMR_CTRL_SCS_MASK)
#define TMR_CTRL_PCS_MASK                        (0x1E00U)
#define TMR_CTRL_PCS_SHIFT                       (9U)
#define TMR_CTRL_PCS(x)                          (((uint16_t)(((uint16_t)(x)) << TMR_CTRL_PCS_SHIFT)) & TMR_CTRL_PCS_MASK)
#define TMR_CTRL_CM_MASK                         (0xE000U)
#define TMR_CTRL_CM_SHIFT                        (13U)
#define TMR_CTRL_CM(x)                           (((uint16_t)(((uint16_t)(x)) << TMR_CTRL_CM_SHIFT)) & TMR_CTRL_CM_MASK)

/* The count of TMR_CTRL */
#define TMR_CTRL_COUNT                           (4U)

/*! @name SCTRL - Timer Channel Status and Control Register */
#define TMR_SCTRL_OEN_MASK                       (0x1U)
#define TMR_SCTRL_OEN_SHIFT                      (0U)
#define TMR_SCTRL_OPS_MASK                       (0x2U)
#define TMR_SCTRL_OPS_SHIFT                      (1U)
#define TMR_SCTRL_FORCE_MASK                     (0x4U)
#define TMR_SCTRL_FORCE_SHIFT                    (2U)
#define TMR_SCTRL_VAL_MASK                       (0x8U)
#define TMR_SCTRL_VAL_SHIFT                      (3U)
#define TMR_SCTRL_EEOF_MASK                      (0x10U)
#define TMR_SCTRL_EEOF_SHIFT                     (4U)
#define TMR_SCTRL_MSTR_MASK                      (0x20U)
#define TMR_SCTRL_MSTR_SHIFT                     (5U)
#define TMR_SCTRL_CAPTURE_MODE_MASK              (0xC0U)
#define TMR_SCTRL_CAPTURE_MODE_SHIFT             (6U)
#define TMR_SCTRL_CAPTURE_MODE(x)                (((uint16_t)(((uint16_t)(x)) << TMR_SCTRL_CAPTURE_MODE_SHIFT)) & TMR_SCTRL_CAPTURE_MODE_MASK)
#define TMR_SCTRL_INPUT_MASK                     (0x100U)
#define TMR_SCTRL_INPUT_SHIFT                    (8U)
#define TMR_SCTRL_IPS_MASK                       (0x200U)
#define TMR_SCTRL_IPS_SHIFT                      (9U)
#define TMR_SCTRL_IEFIE_MASK                     (0x400U)
#define TMR_SCTRL_IEFIE_SHIFT                    (10U)
#define TMR_SCTRL_IEF_MASK                       (0x800U)
#define TMR_SCTRL_IEF_SHIFT                      (11U)
#define TMR_SCTRL_TOFIE_MASK                     (0x1000U)
#define TMR_SCTRL_TOFIE_SHIFT                    (12U)
#define TMR_SCTRL_TOF_MASK                       (0x2000U)
#define TMR_SCTRL_TOF_SHIFT                      (13U)
#define TMR_SCTRL_TCFIE_MASK                     (0x4000U)
#define TMR_SCTRL_TCFIE_SHIFT                    (14U)
#define TMR_SCTRL_TCF_MASK                       (0x8000U)
#define TMR_SCTRL_TCF_SHIFT                      (15U)

/* The count of TMR_SCTRL */
#define TMR_SCTRL_COUNT                          (4U)

/*! @name CMPLD1 - Timer Channel Comparator Load Register 1 */
#define TMR_CMPLD1_COMPARATOR_LOAD_1_MASK        (0xFFFFU)
#define TMR_CMPLD1_COMPARATOR_LOAD_1_SHIFT       (0U)
#define TMR_CMPLD1_COMPARATOR_LOAD_1(x)          (((uint16_t)(((uint16_t)(x)) << TMR_CMPLD1_COMPARATOR_LOAD_1_SHIFT)) & TMR_CMPLD1_COMPARATOR_LOAD_1_MASK)

/* The count of TMR_CMPLD1 */
#define TMR_CMPLD1_COUNT                         (4U)

/*! @name CMPLD2 - Timer Channel Comparator Load Register 2 */
#define TMR_CMPLD2_COMPARATOR_LOAD_2_MASK        (0xFFFFU)
#define TMR_CMPLD2_COMPARATOR_LOAD_2_SHIFT       (0U)
#define TMR_CMPLD2_COMPARATOR_LOAD_2(x)          (((uint16_t)(((uint16_t)(x)) << TMR_CMPLD2_COMPARATOR_LOAD_2_SHIFT)) & TMR_CMPLD2_COMPARATOR_LOAD_2_MASK)

/* The count of TMR_CMPLD2 */
#define TMR_CMPLD2_COUNT                         (4U)

/*! @name CSCTRL - Timer Channel Comparator Status and Control Register */
#define TMR_CSCTRL_CL1_MASK                      (0x3U)
#define TMR_CSCTRL_CL1_SHIFT                     (0U)
#define TMR_CSCTRL_CL1(x)                        (((uint16_t)(((uint16_t)(x)) << TMR_CSCTRL_CL1_SHIFT)) & TMR_CSCTRL_CL1_MASK)
#define TMR_CSCTRL_CL2_MASK                      (0xCU)
#define TMR_CSCTRL_CL2_SHIFT                     (2U)
#define TMR_CSCTRL_CL2(x)                        (((uint16_t)(((uint16_t)(x)) << TMR_CSCTRL_CL2_SHIFT)) & TMR_CSCTRL_CL2_MASK)
#define TMR_CSCTRL_TCF1_MASK                     (0x10U)
#define TMR_CSCTRL_TCF1_SHIFT                    (4U)
#define TMR_CSCTRL_TCF2_MASK                     (0x20U)
#define TMR_CSCTRL_TCF2_SHIFT                    (5U)
#define TMR_CSCTRL_TCF1EN_MASK                   (0x40U)
#define TMR_CSCTRL_TCF1EN_SHIFT                  (6U)
#define TMR_CSCTRL_TCF2EN_MASK                   (0x80U)
#define TMR_CSCTRL_TCF2EN_SHIFT                  (7U)
#define TMR_CSCTRL_UP_MASK                       (0x200U)
#define TMR_CSCTRL_UP_SHIFT                      (9U)
#define TMR_CSCTRL_TCI_MASK                      (0x400U)
#define TMR_CSCTRL_TCI_SHIFT                     (10U)
#define TMR_CSCTRL_ROC_MASK                      (0x800U)
#define TMR_CSCTRL_ROC_SHIFT                     (11U)
#define TMR_CSCTRL_ALT_LOAD_MASK                 (0x1000U)
#define TMR_CSCTRL_ALT_LOAD_SHIFT                (12U)
#define TMR_CSCTRL_FAULT_MASK                    (0x2000U)
#define TMR_CSCTRL_FAULT_SHIFT                   (13U)
#define TMR_CSCTRL_DBG_EN_MASK                   (0xC000U)
#define TMR_CSCTRL_DBG_EN_SHIFT                  (14U)
#define TMR_CSCTRL_DBG_EN(x)                     (((uint16_t)(((uint16_t)(x)) << TMR_CSCTRL_DBG_EN_SHIFT)) & TMR_CSCTRL_DBG_EN_MASK)

/* The count of TMR_CSCTRL */
#define TMR_CSCTRL_COUNT                         (4U)

/*! @name FILT - Timer Channel Input Filter Register */
#define TMR_FILT_FILT_PER_MASK                   (0xFFU)
#define TMR_FILT_FILT_PER_SHIFT                  (0U)
#define TMR_FILT_FILT_PER(x)                     (((uint16_t)(((uint16_t)(x)) << TMR_FILT_FILT_PER_SHIFT)) & TMR_FILT_FILT_PER_MASK)
#define TMR_FILT_FILT_CNT_MASK                   (0x700U)
#define TMR_FILT_FILT_CNT_SHIFT                  (8U)
#define TMR_FILT_FILT_CNT(x)                     (((uint16_t)(((uint16_t)(x)) << TMR_FILT_FILT_CNT_SHIFT)) & TMR_FILT_FILT_CNT_MASK)

/* The count of TMR_FILT */
#define TMR_FILT_COUNT                           (4U)

/*! @name DMA - Timer Channel DMA Enable Register */
#define TMR_DMA_IEFDE_MASK                       (0x1U)
#define TMR_DMA_IEFDE_SHIFT                      (0U)
#define TMR_DMA_CMPLD1DE_MASK                    (0x2U)
#define TMR_DMA_CMPLD1DE_SHIFT                   (1U)
#define TMR_DMA_CMPLD2DE_MASK                    (0x4U)
#define TMR_DMA_CMPLD2DE_SHIFT                   (2U)

/* The count of TMR_DMA */
#define TMR_DMA_COUNT                            (4U)

/*! @name ENBL - Timer Channel Enable Register */
#define TMR_ENBL_ENBL_MASK                       (0xFU)
#define TMR_ENBL_ENBL_SHIFT                      (0U)
#define TMR_ENBL_ENBL(x)                         (((uint16_t)(((uint16_t)(x)) << TMR_ENBL_ENBL_SHIFT)) & TMR_ENBL_ENBL_MASK)

/* The count of TMR_ENBL */
#define TMR_ENBL_COUNT                           (4U)


/*!
 * @}
 */ /* end of group TMR_Register_Masks */


/* TMR - Peripheral instance base addresses */
/** Peripheral TMR1 base pointer */
#define TMR1_BASE_PTR                            ((TMR_MemMapPtr)0x401DC000u)
/** Peripheral TMR2 base pointer */
#define TMR2_BASE_PTR                            ((TMR_MemMapPtr)0x401E0000u)
/** Array initializer of TMR peripheral base pointers */
#define TMR_BASE_PTRS                            { TMR1_BASE_PTR, TMR2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- TMR - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TMR_Register_Accessor_Macros TMR - Register accessor macros
 * @{
 */


/* TMR - Register instance definitions */
/* TMR1 */
#define TMR1_COMP10                              TMR_COMP1_REG(TMR1_BASE_PTR,0)
#define TMR1_COMP20                              TMR_COMP2_REG(TMR1_BASE_PTR,0)
#define TMR1_CAPT0                               TMR_CAPT_REG(TMR1_BASE_PTR,0)
#define TMR1_LOAD0                               TMR_LOAD_REG(TMR1_BASE_PTR,0)
#define TMR1_HOLD0                               TMR_HOLD_REG(TMR1_BASE_PTR,0)
#define TMR1_CNTR0                               TMR_CNTR_REG(TMR1_BASE_PTR,0)
#define TMR1_CTRL0                               TMR_CTRL_REG(TMR1_BASE_PTR,0)
#define TMR1_SCTRL0                              TMR_SCTRL_REG(TMR1_BASE_PTR,0)
#define TMR1_CMPLD10                             TMR_CMPLD1_REG(TMR1_BASE_PTR,0)
#define TMR1_CMPLD20                             TMR_CMPLD2_REG(TMR1_BASE_PTR,0)
#define TMR1_CSCTRL0                             TMR_CSCTRL_REG(TMR1_BASE_PTR,0)
#define TMR1_FILT0                               TMR_FILT_REG(TMR1_BASE_PTR,0)
#define TMR1_DMA0                                TMR_DMA_REG(TMR1_BASE_PTR,0)
#define TMR1_ENBL                                TMR_ENBL_REG(TMR1_BASE_PTR,0)
#define TMR1_COMP11                              TMR_COMP1_REG(TMR1_BASE_PTR,1)
#define TMR1_COMP21                              TMR_COMP2_REG(TMR1_BASE_PTR,1)
#define TMR1_CAPT1                               TMR_CAPT_REG(TMR1_BASE_PTR,1)
#define TMR1_LOAD1                               TMR_LOAD_REG(TMR1_BASE_PTR,1)
#define TMR1_HOLD1                               TMR_HOLD_REG(TMR1_BASE_PTR,1)
#define TMR1_CNTR1                               TMR_CNTR_REG(TMR1_BASE_PTR,1)
#define TMR1_CTRL1                               TMR_CTRL_REG(TMR1_BASE_PTR,1)
#define TMR1_SCTRL1                              TMR_SCTRL_REG(TMR1_BASE_PTR,1)
#define TMR1_CMPLD11                             TMR_CMPLD1_REG(TMR1_BASE_PTR,1)
#define TMR1_CMPLD21                             TMR_CMPLD2_REG(TMR1_BASE_PTR,1)
#define TMR1_CSCTRL1                             TMR_CSCTRL_REG(TMR1_BASE_PTR,1)
#define TMR1_FILT1                               TMR_FILT_REG(TMR1_BASE_PTR,1)
#define TMR1_DMA1                                TMR_DMA_REG(TMR1_BASE_PTR,1)
#define TMR1_COMP12                              TMR_COMP1_REG(TMR1_BASE_PTR,2)
#define TMR1_COMP22                              TMR_COMP2_REG(TMR1_BASE_PTR,2)
#define TMR1_CAPT2                               TMR_CAPT_REG(TMR1_BASE_PTR,2)
#define TMR1_LOAD2                               TMR_LOAD_REG(TMR1_BASE_PTR,2)
#define TMR1_HOLD2                               TMR_HOLD_REG(TMR1_BASE_PTR,2)
#define TMR1_CNTR2                               TMR_CNTR_REG(TMR1_BASE_PTR,2)
#define TMR1_CTRL2                               TMR_CTRL_REG(TMR1_BASE_PTR,2)
#define TMR1_SCTRL2                              TMR_SCTRL_REG(TMR1_BASE_PTR,2)
#define TMR1_CMPLD12                             TMR_CMPLD1_REG(TMR1_BASE_PTR,2)
#define TMR1_CMPLD22                             TMR_CMPLD2_REG(TMR1_BASE_PTR,2)
#define TMR1_CSCTRL2                             TMR_CSCTRL_REG(TMR1_BASE_PTR,2)
#define TMR1_FILT2                               TMR_FILT_REG(TMR1_BASE_PTR,2)
#define TMR1_DMA2                                TMR_DMA_REG(TMR1_BASE_PTR,2)
#define TMR1_COMP13                              TMR_COMP1_REG(TMR1_BASE_PTR,3)
#define TMR1_COMP23                              TMR_COMP2_REG(TMR1_BASE_PTR,3)
#define TMR1_CAPT3                               TMR_CAPT_REG(TMR1_BASE_PTR,3)
#define TMR1_LOAD3                               TMR_LOAD_REG(TMR1_BASE_PTR,3)
#define TMR1_HOLD3                               TMR_HOLD_REG(TMR1_BASE_PTR,3)
#define TMR1_CNTR3                               TMR_CNTR_REG(TMR1_BASE_PTR,3)
#define TMR1_CTRL3                               TMR_CTRL_REG(TMR1_BASE_PTR,3)
#define TMR1_SCTRL3                              TMR_SCTRL_REG(TMR1_BASE_PTR,3)
#define TMR1_CMPLD13                             TMR_CMPLD1_REG(TMR1_BASE_PTR,3)
#define TMR1_CMPLD23                             TMR_CMPLD2_REG(TMR1_BASE_PTR,3)
#define TMR1_CSCTRL3                             TMR_CSCTRL_REG(TMR1_BASE_PTR,3)
#define TMR1_FILT3                               TMR_FILT_REG(TMR1_BASE_PTR,3)
#define TMR1_DMA3                                TMR_DMA_REG(TMR1_BASE_PTR,3)
/* TMR2 */
#define TMR2_COMP10                              TMR_COMP1_REG(TMR2_BASE_PTR,0)
#define TMR2_COMP20                              TMR_COMP2_REG(TMR2_BASE_PTR,0)
#define TMR2_CAPT0                               TMR_CAPT_REG(TMR2_BASE_PTR,0)
#define TMR2_LOAD0                               TMR_LOAD_REG(TMR2_BASE_PTR,0)
#define TMR2_HOLD0                               TMR_HOLD_REG(TMR2_BASE_PTR,0)
#define TMR2_CNTR0                               TMR_CNTR_REG(TMR2_BASE_PTR,0)
#define TMR2_CTRL0                               TMR_CTRL_REG(TMR2_BASE_PTR,0)
#define TMR2_SCTRL0                              TMR_SCTRL_REG(TMR2_BASE_PTR,0)
#define TMR2_CMPLD10                             TMR_CMPLD1_REG(TMR2_BASE_PTR,0)
#define TMR2_CMPLD20                             TMR_CMPLD2_REG(TMR2_BASE_PTR,0)
#define TMR2_CSCTRL0                             TMR_CSCTRL_REG(TMR2_BASE_PTR,0)
#define TMR2_FILT0                               TMR_FILT_REG(TMR2_BASE_PTR,0)
#define TMR2_DMA0                                TMR_DMA_REG(TMR2_BASE_PTR,0)
#define TMR2_ENBL                                TMR_ENBL_REG(TMR2_BASE_PTR,0)
#define TMR2_COMP11                              TMR_COMP1_REG(TMR2_BASE_PTR,1)
#define TMR2_COMP21                              TMR_COMP2_REG(TMR2_BASE_PTR,1)
#define TMR2_CAPT1                               TMR_CAPT_REG(TMR2_BASE_PTR,1)
#define TMR2_LOAD1                               TMR_LOAD_REG(TMR2_BASE_PTR,1)
#define TMR2_HOLD1                               TMR_HOLD_REG(TMR2_BASE_PTR,1)
#define TMR2_CNTR1                               TMR_CNTR_REG(TMR2_BASE_PTR,1)
#define TMR2_CTRL1                               TMR_CTRL_REG(TMR2_BASE_PTR,1)
#define TMR2_SCTRL1                              TMR_SCTRL_REG(TMR2_BASE_PTR,1)
#define TMR2_CMPLD11                             TMR_CMPLD1_REG(TMR2_BASE_PTR,1)
#define TMR2_CMPLD21                             TMR_CMPLD2_REG(TMR2_BASE_PTR,1)
#define TMR2_CSCTRL1                             TMR_CSCTRL_REG(TMR2_BASE_PTR,1)
#define TMR2_FILT1                               TMR_FILT_REG(TMR2_BASE_PTR,1)
#define TMR2_DMA1                                TMR_DMA_REG(TMR2_BASE_PTR,1)
#define TMR2_COMP12                              TMR_COMP1_REG(TMR2_BASE_PTR,2)
#define TMR2_COMP22                              TMR_COMP2_REG(TMR2_BASE_PTR,2)
#define TMR2_CAPT2                               TMR_CAPT_REG(TMR2_BASE_PTR,2)
#define TMR2_LOAD2                               TMR_LOAD_REG(TMR2_BASE_PTR,2)
#define TMR2_HOLD2                               TMR_HOLD_REG(TMR2_BASE_PTR,2)
#define TMR2_CNTR2                               TMR_CNTR_REG(TMR2_BASE_PTR,2)
#define TMR2_CTRL2                               TMR_CTRL_REG(TMR2_BASE_PTR,2)
#define TMR2_SCTRL2                              TMR_SCTRL_REG(TMR2_BASE_PTR,2)
#define TMR2_CMPLD12                             TMR_CMPLD1_REG(TMR2_BASE_PTR,2)
#define TMR2_CMPLD22                             TMR_CMPLD2_REG(TMR2_BASE_PTR,2)
#define TMR2_CSCTRL2                             TMR_CSCTRL_REG(TMR2_BASE_PTR,2)
#define TMR2_FILT2                               TMR_FILT_REG(TMR2_BASE_PTR,2)
#define TMR2_DMA2                                TMR_DMA_REG(TMR2_BASE_PTR,2)
#define TMR2_COMP13                              TMR_COMP1_REG(TMR2_BASE_PTR,3)
#define TMR2_COMP23                              TMR_COMP2_REG(TMR2_BASE_PTR,3)
#define TMR2_CAPT3                               TMR_CAPT_REG(TMR2_BASE_PTR,3)
#define TMR2_LOAD3                               TMR_LOAD_REG(TMR2_BASE_PTR,3)
#define TMR2_HOLD3                               TMR_HOLD_REG(TMR2_BASE_PTR,3)
#define TMR2_CNTR3                               TMR_CNTR_REG(TMR2_BASE_PTR,3)
#define TMR2_CTRL3                               TMR_CTRL_REG(TMR2_BASE_PTR,3)
#define TMR2_SCTRL3                              TMR_SCTRL_REG(TMR2_BASE_PTR,3)
#define TMR2_CMPLD13                             TMR_CMPLD1_REG(TMR2_BASE_PTR,3)
#define TMR2_CMPLD23                             TMR_CMPLD2_REG(TMR2_BASE_PTR,3)
#define TMR2_CSCTRL3                             TMR_CSCTRL_REG(TMR2_BASE_PTR,3)
#define TMR2_FILT3                               TMR_FILT_REG(TMR2_BASE_PTR,3)
#define TMR2_DMA3                                TMR_DMA_REG(TMR2_BASE_PTR,3)

/* TMR - Register array accessors */
#define TMR1_COMP1(index)                        TMR_COMP1_REG(TMR1_BASE_PTR,index)
#define TMR2_COMP1(index)                        TMR_COMP1_REG(TMR2_BASE_PTR,index)
#define TMR1_COMP2(index)                        TMR_COMP2_REG(TMR1_BASE_PTR,index)
#define TMR2_COMP2(index)                        TMR_COMP2_REG(TMR2_BASE_PTR,index)
#define TMR1_CAPT(index)                         TMR_CAPT_REG(TMR1_BASE_PTR,index)
#define TMR2_CAPT(index)                         TMR_CAPT_REG(TMR2_BASE_PTR,index)
#define TMR1_LOAD(index)                         TMR_LOAD_REG(TMR1_BASE_PTR,index)
#define TMR2_LOAD(index)                         TMR_LOAD_REG(TMR2_BASE_PTR,index)
#define TMR1_HOLD(index)                         TMR_HOLD_REG(TMR1_BASE_PTR,index)
#define TMR2_HOLD(index)                         TMR_HOLD_REG(TMR2_BASE_PTR,index)
#define TMR1_CNTR(index)                         TMR_CNTR_REG(TMR1_BASE_PTR,index)
#define TMR2_CNTR(index)                         TMR_CNTR_REG(TMR2_BASE_PTR,index)
#define TMR1_CTRL(index)                         TMR_CTRL_REG(TMR1_BASE_PTR,index)
#define TMR2_CTRL(index)                         TMR_CTRL_REG(TMR2_BASE_PTR,index)
#define TMR1_SCTRL(index)                        TMR_SCTRL_REG(TMR1_BASE_PTR,index)
#define TMR2_SCTRL(index)                        TMR_SCTRL_REG(TMR2_BASE_PTR,index)
#define TMR1_CMPLD1(index)                       TMR_CMPLD1_REG(TMR1_BASE_PTR,index)
#define TMR2_CMPLD1(index)                       TMR_CMPLD1_REG(TMR2_BASE_PTR,index)
#define TMR1_CMPLD2(index)                       TMR_CMPLD2_REG(TMR1_BASE_PTR,index)
#define TMR2_CMPLD2(index)                       TMR_CMPLD2_REG(TMR2_BASE_PTR,index)
#define TMR1_CSCTRL(index)                       TMR_CSCTRL_REG(TMR1_BASE_PTR,index)
#define TMR2_CSCTRL(index)                       TMR_CSCTRL_REG(TMR2_BASE_PTR,index)
#define TMR1_FILT(index)                         TMR_FILT_REG(TMR1_BASE_PTR,index)
#define TMR2_FILT(index)                         TMR_FILT_REG(TMR2_BASE_PTR,index)
#define TMR1_DMA(index)                          TMR_DMA_REG(TMR1_BASE_PTR,index)
#define TMR2_DMA(index)                          TMR_DMA_REG(TMR2_BASE_PTR,index)

/*!
 * @}
 */ /* end of group TMR_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group TMR_Peripheral */


/* ----------------------------------------------------------------------------
   -- TRNG
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TRNG_Peripheral TRNG
 * @{
 */

/** TRNG - Peripheral register structure */
typedef struct TRNG_MemMap {
  uint32_t MCTL;                                   /**< Miscellaneous Control Register, offset: 0x0 */
  uint32_t SCMISC;                                 /**< Statistical Check Miscellaneous Register, offset: 0x4 */
  uint32_t PKRRNG;                                 /**< Poker Range Register, offset: 0x8 */
  union {                                          /* offset: 0xC */
    uint32_t PKRMAX;                                 /**< Poker Maximum Limit Register, offset: 0xC */
    uint32_t PKRSQ;                                  /**< Poker Square Calculation Result Register, offset: 0xC */
  };
  uint32_t SDCTL;                                  /**< Seed Control Register, offset: 0x10 */
  union {                                          /* offset: 0x14 */
    uint32_t SBLIM;                                  /**< Sparse Bit Limit Register, offset: 0x14 */
    uint32_t TOTSAM;                                 /**< Total Samples Register, offset: 0x14 */
  };
  uint32_t FRQMIN;                                 /**< Frequency Count Minimum Limit Register, offset: 0x18 */
  union {                                          /* offset: 0x1C */
    uint32_t FRQCNT;                                 /**< Frequency Count Register, offset: 0x1C */
    uint32_t FRQMAX;                                 /**< Frequency Count Maximum Limit Register, offset: 0x1C */
  };
  union {                                          /* offset: 0x20 */
    uint32_t SCMC;                                   /**< Statistical Check Monobit Count Register, offset: 0x20 */
    uint32_t SCML;                                   /**< Statistical Check Monobit Limit Register, offset: 0x20 */
  };
  union {                                          /* offset: 0x24 */
    uint32_t SCR1C;                                  /**< Statistical Check Run Length 1 Count Register, offset: 0x24 */
    uint32_t SCR1L;                                  /**< Statistical Check Run Length 1 Limit Register, offset: 0x24 */
  };
  union {                                          /* offset: 0x28 */
    uint32_t SCR2C;                                  /**< Statistical Check Run Length 2 Count Register, offset: 0x28 */
    uint32_t SCR2L;                                  /**< Statistical Check Run Length 2 Limit Register, offset: 0x28 */
  };
  union {                                          /* offset: 0x2C */
    uint32_t SCR3C;                                  /**< Statistical Check Run Length 3 Count Register, offset: 0x2C */
    uint32_t SCR3L;                                  /**< Statistical Check Run Length 3 Limit Register, offset: 0x2C */
  };
  union {                                          /* offset: 0x30 */
    uint32_t SCR4C;                                  /**< Statistical Check Run Length 4 Count Register, offset: 0x30 */
    uint32_t SCR4L;                                  /**< Statistical Check Run Length 4 Limit Register, offset: 0x30 */
  };
  union {                                          /* offset: 0x34 */
    uint32_t SCR5C;                                  /**< Statistical Check Run Length 5 Count Register, offset: 0x34 */
    uint32_t SCR5L;                                  /**< Statistical Check Run Length 5 Limit Register, offset: 0x34 */
  };
  union {                                          /* offset: 0x38 */
    uint32_t SCR6PC;                                 /**< Statistical Check Run Length 6+ Count Register, offset: 0x38 */
    uint32_t SCR6PL;                                 /**< Statistical Check Run Length 6+ Limit Register, offset: 0x38 */
  };
  uint32_t STATUS;                                 /**< Status Register, offset: 0x3C */
  uint32_t ENT[16];                                /**< Entropy Read Register, array offset: 0x40, array step: 0x4 */
  uint32_t PKRCNT10;                               /**< Statistical Check Poker Count 1 and 0 Register, offset: 0x80 */
  uint32_t PKRCNT32;                               /**< Statistical Check Poker Count 3 and 2 Register, offset: 0x84 */
  uint32_t PKRCNT54;                               /**< Statistical Check Poker Count 5 and 4 Register, offset: 0x88 */
  uint32_t PKRCNT76;                               /**< Statistical Check Poker Count 7 and 6 Register, offset: 0x8C */
  uint32_t PKRCNT98;                               /**< Statistical Check Poker Count 9 and 8 Register, offset: 0x90 */
  uint32_t PKRCNTBA;                               /**< Statistical Check Poker Count B and A Register, offset: 0x94 */
  uint32_t PKRCNTDC;                               /**< Statistical Check Poker Count D and C Register, offset: 0x98 */
  uint32_t PKRCNTFE;                               /**< Statistical Check Poker Count F and E Register, offset: 0x9C */
  uint32_t SEC_CFG;                                /**< Security Configuration Register, offset: 0xA0 */
  uint32_t INT_CTRL;                               /**< Interrupt Control Register, offset: 0xA4 */
  uint32_t INT_MASK;                               /**< Mask Register, offset: 0xA8 */
  uint32_t INT_STATUS;                             /**< Interrupt Status Register, offset: 0xAC */
  uint8_t RESERVED_0[64];
  uint32_t VID1;                                   /**< Version ID Register (MS), offset: 0xF0 */
  uint32_t VID2;                                   /**< Version ID Register (LS), offset: 0xF4 */
} volatile *TRNG_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- TRNG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TRNG_Register_Accessor_Macros TRNG - Register accessor macros
 * @{
 */


/* TRNG - Register accessors */
#define TRNG_MCTL_REG(base)                      ((base)->MCTL)
#define TRNG_SCMISC_REG(base)                    ((base)->SCMISC)
#define TRNG_PKRRNG_REG(base)                    ((base)->PKRRNG)
#define TRNG_PKRMAX_REG(base)                    ((base)->PKRMAX)
#define TRNG_PKRSQ_REG(base)                     ((base)->PKRSQ)
#define TRNG_SDCTL_REG(base)                     ((base)->SDCTL)
#define TRNG_SBLIM_REG(base)                     ((base)->SBLIM)
#define TRNG_TOTSAM_REG(base)                    ((base)->TOTSAM)
#define TRNG_FRQMIN_REG(base)                    ((base)->FRQMIN)
#define TRNG_FRQCNT_REG(base)                    ((base)->FRQCNT)
#define TRNG_FRQMAX_REG(base)                    ((base)->FRQMAX)
#define TRNG_SCMC_REG(base)                      ((base)->SCMC)
#define TRNG_SCML_REG(base)                      ((base)->SCML)
#define TRNG_SCR1C_REG(base)                     ((base)->SCR1C)
#define TRNG_SCR1L_REG(base)                     ((base)->SCR1L)
#define TRNG_SCR2C_REG(base)                     ((base)->SCR2C)
#define TRNG_SCR2L_REG(base)                     ((base)->SCR2L)
#define TRNG_SCR3C_REG(base)                     ((base)->SCR3C)
#define TRNG_SCR3L_REG(base)                     ((base)->SCR3L)
#define TRNG_SCR4C_REG(base)                     ((base)->SCR4C)
#define TRNG_SCR4L_REG(base)                     ((base)->SCR4L)
#define TRNG_SCR5C_REG(base)                     ((base)->SCR5C)
#define TRNG_SCR5L_REG(base)                     ((base)->SCR5L)
#define TRNG_SCR6PC_REG(base)                    ((base)->SCR6PC)
#define TRNG_SCR6PL_REG(base)                    ((base)->SCR6PL)
#define TRNG_STATUS_REG(base)                    ((base)->STATUS)
#define TRNG_ENT_REG(base,index)                 ((base)->ENT[index])
#define TRNG_PKRCNT10_REG(base)                  ((base)->PKRCNT10)
#define TRNG_PKRCNT32_REG(base)                  ((base)->PKRCNT32)
#define TRNG_PKRCNT54_REG(base)                  ((base)->PKRCNT54)
#define TRNG_PKRCNT76_REG(base)                  ((base)->PKRCNT76)
#define TRNG_PKRCNT98_REG(base)                  ((base)->PKRCNT98)
#define TRNG_PKRCNTBA_REG(base)                  ((base)->PKRCNTBA)
#define TRNG_PKRCNTDC_REG(base)                  ((base)->PKRCNTDC)
#define TRNG_PKRCNTFE_REG(base)                  ((base)->PKRCNTFE)
#define TRNG_SEC_CFG_REG(base)                   ((base)->SEC_CFG)
#define TRNG_INT_CTRL_REG(base)                  ((base)->INT_CTRL)
#define TRNG_INT_MASK_REG(base)                  ((base)->INT_MASK)
#define TRNG_INT_STATUS_REG(base)                ((base)->INT_STATUS)
#define TRNG_VID1_REG(base)                      ((base)->VID1)
#define TRNG_VID2_REG(base)                      ((base)->VID2)

/*!
 * @}
 */ /* end of group TRNG_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- TRNG Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TRNG_Register_Masks TRNG Register Masks
 * @{
 */

/*! @name MCTL - Miscellaneous Control Register */
#define TRNG_MCTL_SAMP_MODE_MASK                 (0x3U)
#define TRNG_MCTL_SAMP_MODE_SHIFT                (0U)
#define TRNG_MCTL_SAMP_MODE(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_MCTL_SAMP_MODE_SHIFT)) & TRNG_MCTL_SAMP_MODE_MASK)
#define TRNG_MCTL_OSC_DIV_MASK                   (0xCU)
#define TRNG_MCTL_OSC_DIV_SHIFT                  (2U)
#define TRNG_MCTL_OSC_DIV(x)                     (((uint32_t)(((uint32_t)(x)) << TRNG_MCTL_OSC_DIV_SHIFT)) & TRNG_MCTL_OSC_DIV_MASK)
#define TRNG_MCTL_UNUSED4_MASK                   (0x10U)
#define TRNG_MCTL_UNUSED4_SHIFT                  (4U)
#define TRNG_MCTL_TRNG_ACC_MASK                  (0x20U)
#define TRNG_MCTL_TRNG_ACC_SHIFT                 (5U)
#define TRNG_MCTL_RST_DEF_MASK                   (0x40U)
#define TRNG_MCTL_RST_DEF_SHIFT                  (6U)
#define TRNG_MCTL_FOR_SCLK_MASK                  (0x80U)
#define TRNG_MCTL_FOR_SCLK_SHIFT                 (7U)
#define TRNG_MCTL_FCT_FAIL_MASK                  (0x100U)
#define TRNG_MCTL_FCT_FAIL_SHIFT                 (8U)
#define TRNG_MCTL_FCT_VAL_MASK                   (0x200U)
#define TRNG_MCTL_FCT_VAL_SHIFT                  (9U)
#define TRNG_MCTL_ENT_VAL_MASK                   (0x400U)
#define TRNG_MCTL_ENT_VAL_SHIFT                  (10U)
#define TRNG_MCTL_TST_OUT_MASK                   (0x800U)
#define TRNG_MCTL_TST_OUT_SHIFT                  (11U)
#define TRNG_MCTL_ERR_MASK                       (0x1000U)
#define TRNG_MCTL_ERR_SHIFT                      (12U)
#define TRNG_MCTL_TSTOP_OK_MASK                  (0x2000U)
#define TRNG_MCTL_TSTOP_OK_SHIFT                 (13U)
#define TRNG_MCTL_LRUN_CONT_MASK                 (0x4000U)
#define TRNG_MCTL_LRUN_CONT_SHIFT                (14U)
#define TRNG_MCTL_PRGM_MASK                      (0x10000U)
#define TRNG_MCTL_PRGM_SHIFT                     (16U)

/*! @name SCMISC - Statistical Check Miscellaneous Register */
#define TRNG_SCMISC_LRUN_MAX_MASK                (0xFFU)
#define TRNG_SCMISC_LRUN_MAX_SHIFT               (0U)
#define TRNG_SCMISC_LRUN_MAX(x)                  (((uint32_t)(((uint32_t)(x)) << TRNG_SCMISC_LRUN_MAX_SHIFT)) & TRNG_SCMISC_LRUN_MAX_MASK)
#define TRNG_SCMISC_RTY_CT_MASK                  (0xF0000U)
#define TRNG_SCMISC_RTY_CT_SHIFT                 (16U)
#define TRNG_SCMISC_RTY_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCMISC_RTY_CT_SHIFT)) & TRNG_SCMISC_RTY_CT_MASK)

/*! @name PKRRNG - Poker Range Register */
#define TRNG_PKRRNG_PKR_RNG_MASK                 (0xFFFFU)
#define TRNG_PKRRNG_PKR_RNG_SHIFT                (0U)
#define TRNG_PKRRNG_PKR_RNG(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_PKRRNG_PKR_RNG_SHIFT)) & TRNG_PKRRNG_PKR_RNG_MASK)

/*! @name PKRMAX - Poker Maximum Limit Register */
#define TRNG_PKRMAX_PKR_MAX_MASK                 (0xFFFFFFU)
#define TRNG_PKRMAX_PKR_MAX_SHIFT                (0U)
#define TRNG_PKRMAX_PKR_MAX(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_PKRMAX_PKR_MAX_SHIFT)) & TRNG_PKRMAX_PKR_MAX_MASK)

/*! @name PKRSQ - Poker Square Calculation Result Register */
#define TRNG_PKRSQ_PKR_SQ_MASK                   (0xFFFFFFU)
#define TRNG_PKRSQ_PKR_SQ_SHIFT                  (0U)
#define TRNG_PKRSQ_PKR_SQ(x)                     (((uint32_t)(((uint32_t)(x)) << TRNG_PKRSQ_PKR_SQ_SHIFT)) & TRNG_PKRSQ_PKR_SQ_MASK)

/*! @name SDCTL - Seed Control Register */
#define TRNG_SDCTL_SAMP_SIZE_MASK                (0xFFFFU)
#define TRNG_SDCTL_SAMP_SIZE_SHIFT               (0U)
#define TRNG_SDCTL_SAMP_SIZE(x)                  (((uint32_t)(((uint32_t)(x)) << TRNG_SDCTL_SAMP_SIZE_SHIFT)) & TRNG_SDCTL_SAMP_SIZE_MASK)
#define TRNG_SDCTL_ENT_DLY_MASK                  (0xFFFF0000U)
#define TRNG_SDCTL_ENT_DLY_SHIFT                 (16U)
#define TRNG_SDCTL_ENT_DLY(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SDCTL_ENT_DLY_SHIFT)) & TRNG_SDCTL_ENT_DLY_MASK)

/*! @name SBLIM - Sparse Bit Limit Register */
#define TRNG_SBLIM_SB_LIM_MASK                   (0x3FFU)
#define TRNG_SBLIM_SB_LIM_SHIFT                  (0U)
#define TRNG_SBLIM_SB_LIM(x)                     (((uint32_t)(((uint32_t)(x)) << TRNG_SBLIM_SB_LIM_SHIFT)) & TRNG_SBLIM_SB_LIM_MASK)

/*! @name TOTSAM - Total Samples Register */
#define TRNG_TOTSAM_TOT_SAM_MASK                 (0xFFFFFU)
#define TRNG_TOTSAM_TOT_SAM_SHIFT                (0U)
#define TRNG_TOTSAM_TOT_SAM(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_TOTSAM_TOT_SAM_SHIFT)) & TRNG_TOTSAM_TOT_SAM_MASK)

/*! @name FRQMIN - Frequency Count Minimum Limit Register */
#define TRNG_FRQMIN_FRQ_MIN_MASK                 (0x3FFFFFU)
#define TRNG_FRQMIN_FRQ_MIN_SHIFT                (0U)
#define TRNG_FRQMIN_FRQ_MIN(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_FRQMIN_FRQ_MIN_SHIFT)) & TRNG_FRQMIN_FRQ_MIN_MASK)

/*! @name FRQCNT - Frequency Count Register */
#define TRNG_FRQCNT_FRQ_CT_MASK                  (0x3FFFFFU)
#define TRNG_FRQCNT_FRQ_CT_SHIFT                 (0U)
#define TRNG_FRQCNT_FRQ_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_FRQCNT_FRQ_CT_SHIFT)) & TRNG_FRQCNT_FRQ_CT_MASK)

/*! @name FRQMAX - Frequency Count Maximum Limit Register */
#define TRNG_FRQMAX_FRQ_MAX_MASK                 (0x3FFFFFU)
#define TRNG_FRQMAX_FRQ_MAX_SHIFT                (0U)
#define TRNG_FRQMAX_FRQ_MAX(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_FRQMAX_FRQ_MAX_SHIFT)) & TRNG_FRQMAX_FRQ_MAX_MASK)

/*! @name SCMC - Statistical Check Monobit Count Register */
#define TRNG_SCMC_MONO_CT_MASK                   (0xFFFFU)
#define TRNG_SCMC_MONO_CT_SHIFT                  (0U)
#define TRNG_SCMC_MONO_CT(x)                     (((uint32_t)(((uint32_t)(x)) << TRNG_SCMC_MONO_CT_SHIFT)) & TRNG_SCMC_MONO_CT_MASK)

/*! @name SCML - Statistical Check Monobit Limit Register */
#define TRNG_SCML_MONO_MAX_MASK                  (0xFFFFU)
#define TRNG_SCML_MONO_MAX_SHIFT                 (0U)
#define TRNG_SCML_MONO_MAX(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCML_MONO_MAX_SHIFT)) & TRNG_SCML_MONO_MAX_MASK)
#define TRNG_SCML_MONO_RNG_MASK                  (0xFFFF0000U)
#define TRNG_SCML_MONO_RNG_SHIFT                 (16U)
#define TRNG_SCML_MONO_RNG(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCML_MONO_RNG_SHIFT)) & TRNG_SCML_MONO_RNG_MASK)

/*! @name SCR1C - Statistical Check Run Length 1 Count Register */
#define TRNG_SCR1C_R1_0_CT_MASK                  (0x7FFFU)
#define TRNG_SCR1C_R1_0_CT_SHIFT                 (0U)
#define TRNG_SCR1C_R1_0_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR1C_R1_0_CT_SHIFT)) & TRNG_SCR1C_R1_0_CT_MASK)
#define TRNG_SCR1C_R1_1_CT_MASK                  (0x7FFF0000U)
#define TRNG_SCR1C_R1_1_CT_SHIFT                 (16U)
#define TRNG_SCR1C_R1_1_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR1C_R1_1_CT_SHIFT)) & TRNG_SCR1C_R1_1_CT_MASK)

/*! @name SCR1L - Statistical Check Run Length 1 Limit Register */
#define TRNG_SCR1L_RUN1_MAX_MASK                 (0x7FFFU)
#define TRNG_SCR1L_RUN1_MAX_SHIFT                (0U)
#define TRNG_SCR1L_RUN1_MAX(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR1L_RUN1_MAX_SHIFT)) & TRNG_SCR1L_RUN1_MAX_MASK)
#define TRNG_SCR1L_RUN1_RNG_MASK                 (0x7FFF0000U)
#define TRNG_SCR1L_RUN1_RNG_SHIFT                (16U)
#define TRNG_SCR1L_RUN1_RNG(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR1L_RUN1_RNG_SHIFT)) & TRNG_SCR1L_RUN1_RNG_MASK)

/*! @name SCR2C - Statistical Check Run Length 2 Count Register */
#define TRNG_SCR2C_R2_0_CT_MASK                  (0x3FFFU)
#define TRNG_SCR2C_R2_0_CT_SHIFT                 (0U)
#define TRNG_SCR2C_R2_0_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR2C_R2_0_CT_SHIFT)) & TRNG_SCR2C_R2_0_CT_MASK)
#define TRNG_SCR2C_R2_1_CT_MASK                  (0x3FFF0000U)
#define TRNG_SCR2C_R2_1_CT_SHIFT                 (16U)
#define TRNG_SCR2C_R2_1_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR2C_R2_1_CT_SHIFT)) & TRNG_SCR2C_R2_1_CT_MASK)

/*! @name SCR2L - Statistical Check Run Length 2 Limit Register */
#define TRNG_SCR2L_RUN2_MAX_MASK                 (0x3FFFU)
#define TRNG_SCR2L_RUN2_MAX_SHIFT                (0U)
#define TRNG_SCR2L_RUN2_MAX(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR2L_RUN2_MAX_SHIFT)) & TRNG_SCR2L_RUN2_MAX_MASK)
#define TRNG_SCR2L_RUN2_RNG_MASK                 (0x3FFF0000U)
#define TRNG_SCR2L_RUN2_RNG_SHIFT                (16U)
#define TRNG_SCR2L_RUN2_RNG(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR2L_RUN2_RNG_SHIFT)) & TRNG_SCR2L_RUN2_RNG_MASK)

/*! @name SCR3C - Statistical Check Run Length 3 Count Register */
#define TRNG_SCR3C_R3_0_CT_MASK                  (0x1FFFU)
#define TRNG_SCR3C_R3_0_CT_SHIFT                 (0U)
#define TRNG_SCR3C_R3_0_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR3C_R3_0_CT_SHIFT)) & TRNG_SCR3C_R3_0_CT_MASK)
#define TRNG_SCR3C_R3_1_CT_MASK                  (0x1FFF0000U)
#define TRNG_SCR3C_R3_1_CT_SHIFT                 (16U)
#define TRNG_SCR3C_R3_1_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR3C_R3_1_CT_SHIFT)) & TRNG_SCR3C_R3_1_CT_MASK)

/*! @name SCR3L - Statistical Check Run Length 3 Limit Register */
#define TRNG_SCR3L_RUN3_MAX_MASK                 (0x1FFFU)
#define TRNG_SCR3L_RUN3_MAX_SHIFT                (0U)
#define TRNG_SCR3L_RUN3_MAX(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR3L_RUN3_MAX_SHIFT)) & TRNG_SCR3L_RUN3_MAX_MASK)
#define TRNG_SCR3L_RUN3_RNG_MASK                 (0x1FFF0000U)
#define TRNG_SCR3L_RUN3_RNG_SHIFT                (16U)
#define TRNG_SCR3L_RUN3_RNG(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR3L_RUN3_RNG_SHIFT)) & TRNG_SCR3L_RUN3_RNG_MASK)

/*! @name SCR4C - Statistical Check Run Length 4 Count Register */
#define TRNG_SCR4C_R4_0_CT_MASK                  (0xFFFU)
#define TRNG_SCR4C_R4_0_CT_SHIFT                 (0U)
#define TRNG_SCR4C_R4_0_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR4C_R4_0_CT_SHIFT)) & TRNG_SCR4C_R4_0_CT_MASK)
#define TRNG_SCR4C_R4_1_CT_MASK                  (0xFFF0000U)
#define TRNG_SCR4C_R4_1_CT_SHIFT                 (16U)
#define TRNG_SCR4C_R4_1_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR4C_R4_1_CT_SHIFT)) & TRNG_SCR4C_R4_1_CT_MASK)

/*! @name SCR4L - Statistical Check Run Length 4 Limit Register */
#define TRNG_SCR4L_RUN4_MAX_MASK                 (0xFFFU)
#define TRNG_SCR4L_RUN4_MAX_SHIFT                (0U)
#define TRNG_SCR4L_RUN4_MAX(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR4L_RUN4_MAX_SHIFT)) & TRNG_SCR4L_RUN4_MAX_MASK)
#define TRNG_SCR4L_RUN4_RNG_MASK                 (0xFFF0000U)
#define TRNG_SCR4L_RUN4_RNG_SHIFT                (16U)
#define TRNG_SCR4L_RUN4_RNG(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR4L_RUN4_RNG_SHIFT)) & TRNG_SCR4L_RUN4_RNG_MASK)

/*! @name SCR5C - Statistical Check Run Length 5 Count Register */
#define TRNG_SCR5C_R5_0_CT_MASK                  (0x7FFU)
#define TRNG_SCR5C_R5_0_CT_SHIFT                 (0U)
#define TRNG_SCR5C_R5_0_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR5C_R5_0_CT_SHIFT)) & TRNG_SCR5C_R5_0_CT_MASK)
#define TRNG_SCR5C_R5_1_CT_MASK                  (0x7FF0000U)
#define TRNG_SCR5C_R5_1_CT_SHIFT                 (16U)
#define TRNG_SCR5C_R5_1_CT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_SCR5C_R5_1_CT_SHIFT)) & TRNG_SCR5C_R5_1_CT_MASK)

/*! @name SCR5L - Statistical Check Run Length 5 Limit Register */
#define TRNG_SCR5L_RUN5_MAX_MASK                 (0x7FFU)
#define TRNG_SCR5L_RUN5_MAX_SHIFT                (0U)
#define TRNG_SCR5L_RUN5_MAX(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR5L_RUN5_MAX_SHIFT)) & TRNG_SCR5L_RUN5_MAX_MASK)
#define TRNG_SCR5L_RUN5_RNG_MASK                 (0x7FF0000U)
#define TRNG_SCR5L_RUN5_RNG_SHIFT                (16U)
#define TRNG_SCR5L_RUN5_RNG(x)                   (((uint32_t)(((uint32_t)(x)) << TRNG_SCR5L_RUN5_RNG_SHIFT)) & TRNG_SCR5L_RUN5_RNG_MASK)

/*! @name SCR6PC - Statistical Check Run Length 6+ Count Register */
#define TRNG_SCR6PC_R6P_0_CT_MASK                (0x7FFU)
#define TRNG_SCR6PC_R6P_0_CT_SHIFT               (0U)
#define TRNG_SCR6PC_R6P_0_CT(x)                  (((uint32_t)(((uint32_t)(x)) << TRNG_SCR6PC_R6P_0_CT_SHIFT)) & TRNG_SCR6PC_R6P_0_CT_MASK)
#define TRNG_SCR6PC_R6P_1_CT_MASK                (0x7FF0000U)
#define TRNG_SCR6PC_R6P_1_CT_SHIFT               (16U)
#define TRNG_SCR6PC_R6P_1_CT(x)                  (((uint32_t)(((uint32_t)(x)) << TRNG_SCR6PC_R6P_1_CT_SHIFT)) & TRNG_SCR6PC_R6P_1_CT_MASK)

/*! @name SCR6PL - Statistical Check Run Length 6+ Limit Register */
#define TRNG_SCR6PL_RUN6P_MAX_MASK               (0x7FFU)
#define TRNG_SCR6PL_RUN6P_MAX_SHIFT              (0U)
#define TRNG_SCR6PL_RUN6P_MAX(x)                 (((uint32_t)(((uint32_t)(x)) << TRNG_SCR6PL_RUN6P_MAX_SHIFT)) & TRNG_SCR6PL_RUN6P_MAX_MASK)
#define TRNG_SCR6PL_RUN6P_RNG_MASK               (0x7FF0000U)
#define TRNG_SCR6PL_RUN6P_RNG_SHIFT              (16U)
#define TRNG_SCR6PL_RUN6P_RNG(x)                 (((uint32_t)(((uint32_t)(x)) << TRNG_SCR6PL_RUN6P_RNG_SHIFT)) & TRNG_SCR6PL_RUN6P_RNG_MASK)

/*! @name STATUS - Status Register */
#define TRNG_STATUS_TF1BR0_MASK                  (0x1U)
#define TRNG_STATUS_TF1BR0_SHIFT                 (0U)
#define TRNG_STATUS_TF1BR1_MASK                  (0x2U)
#define TRNG_STATUS_TF1BR1_SHIFT                 (1U)
#define TRNG_STATUS_TF2BR0_MASK                  (0x4U)
#define TRNG_STATUS_TF2BR0_SHIFT                 (2U)
#define TRNG_STATUS_TF2BR1_MASK                  (0x8U)
#define TRNG_STATUS_TF2BR1_SHIFT                 (3U)
#define TRNG_STATUS_TF3BR0_MASK                  (0x10U)
#define TRNG_STATUS_TF3BR0_SHIFT                 (4U)
#define TRNG_STATUS_TF3BR1_MASK                  (0x20U)
#define TRNG_STATUS_TF3BR1_SHIFT                 (5U)
#define TRNG_STATUS_TF4BR0_MASK                  (0x40U)
#define TRNG_STATUS_TF4BR0_SHIFT                 (6U)
#define TRNG_STATUS_TF4BR1_MASK                  (0x80U)
#define TRNG_STATUS_TF4BR1_SHIFT                 (7U)
#define TRNG_STATUS_TF5BR0_MASK                  (0x100U)
#define TRNG_STATUS_TF5BR0_SHIFT                 (8U)
#define TRNG_STATUS_TF5BR1_MASK                  (0x200U)
#define TRNG_STATUS_TF5BR1_SHIFT                 (9U)
#define TRNG_STATUS_TF6PBR0_MASK                 (0x400U)
#define TRNG_STATUS_TF6PBR0_SHIFT                (10U)
#define TRNG_STATUS_TF6PBR1_MASK                 (0x800U)
#define TRNG_STATUS_TF6PBR1_SHIFT                (11U)
#define TRNG_STATUS_TFSB_MASK                    (0x1000U)
#define TRNG_STATUS_TFSB_SHIFT                   (12U)
#define TRNG_STATUS_TFLR_MASK                    (0x2000U)
#define TRNG_STATUS_TFLR_SHIFT                   (13U)
#define TRNG_STATUS_TFP_MASK                     (0x4000U)
#define TRNG_STATUS_TFP_SHIFT                    (14U)
#define TRNG_STATUS_TFMB_MASK                    (0x8000U)
#define TRNG_STATUS_TFMB_SHIFT                   (15U)
#define TRNG_STATUS_RETRY_CT_MASK                (0xF0000U)
#define TRNG_STATUS_RETRY_CT_SHIFT               (16U)
#define TRNG_STATUS_RETRY_CT(x)                  (((uint32_t)(((uint32_t)(x)) << TRNG_STATUS_RETRY_CT_SHIFT)) & TRNG_STATUS_RETRY_CT_MASK)

/*! @name ENT - Entropy Read Register */
#define TRNG_ENT_ENT_MASK                        (0xFFFFFFFFU)
#define TRNG_ENT_ENT_SHIFT                       (0U)
#define TRNG_ENT_ENT(x)                          (((uint32_t)(((uint32_t)(x)) << TRNG_ENT_ENT_SHIFT)) & TRNG_ENT_ENT_MASK)

/* The count of TRNG_ENT */
#define TRNG_ENT_COUNT                           (16U)

/*! @name PKRCNT10 - Statistical Check Poker Count 1 and 0 Register */
#define TRNG_PKRCNT10_PKR_0_CT_MASK              (0xFFFFU)
#define TRNG_PKRCNT10_PKR_0_CT_SHIFT             (0U)
#define TRNG_PKRCNT10_PKR_0_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT10_PKR_0_CT_SHIFT)) & TRNG_PKRCNT10_PKR_0_CT_MASK)
#define TRNG_PKRCNT10_PKR_1_CT_MASK              (0xFFFF0000U)
#define TRNG_PKRCNT10_PKR_1_CT_SHIFT             (16U)
#define TRNG_PKRCNT10_PKR_1_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT10_PKR_1_CT_SHIFT)) & TRNG_PKRCNT10_PKR_1_CT_MASK)

/*! @name PKRCNT32 - Statistical Check Poker Count 3 and 2 Register */
#define TRNG_PKRCNT32_PKR_2_CT_MASK              (0xFFFFU)
#define TRNG_PKRCNT32_PKR_2_CT_SHIFT             (0U)
#define TRNG_PKRCNT32_PKR_2_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT32_PKR_2_CT_SHIFT)) & TRNG_PKRCNT32_PKR_2_CT_MASK)
#define TRNG_PKRCNT32_PKR_3_CT_MASK              (0xFFFF0000U)
#define TRNG_PKRCNT32_PKR_3_CT_SHIFT             (16U)
#define TRNG_PKRCNT32_PKR_3_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT32_PKR_3_CT_SHIFT)) & TRNG_PKRCNT32_PKR_3_CT_MASK)

/*! @name PKRCNT54 - Statistical Check Poker Count 5 and 4 Register */
#define TRNG_PKRCNT54_PKR_4_CT_MASK              (0xFFFFU)
#define TRNG_PKRCNT54_PKR_4_CT_SHIFT             (0U)
#define TRNG_PKRCNT54_PKR_4_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT54_PKR_4_CT_SHIFT)) & TRNG_PKRCNT54_PKR_4_CT_MASK)
#define TRNG_PKRCNT54_PKR_5_CT_MASK              (0xFFFF0000U)
#define TRNG_PKRCNT54_PKR_5_CT_SHIFT             (16U)
#define TRNG_PKRCNT54_PKR_5_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT54_PKR_5_CT_SHIFT)) & TRNG_PKRCNT54_PKR_5_CT_MASK)

/*! @name PKRCNT76 - Statistical Check Poker Count 7 and 6 Register */
#define TRNG_PKRCNT76_PKR_6_CT_MASK              (0xFFFFU)
#define TRNG_PKRCNT76_PKR_6_CT_SHIFT             (0U)
#define TRNG_PKRCNT76_PKR_6_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT76_PKR_6_CT_SHIFT)) & TRNG_PKRCNT76_PKR_6_CT_MASK)
#define TRNG_PKRCNT76_PKR_7_CT_MASK              (0xFFFF0000U)
#define TRNG_PKRCNT76_PKR_7_CT_SHIFT             (16U)
#define TRNG_PKRCNT76_PKR_7_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT76_PKR_7_CT_SHIFT)) & TRNG_PKRCNT76_PKR_7_CT_MASK)

/*! @name PKRCNT98 - Statistical Check Poker Count 9 and 8 Register */
#define TRNG_PKRCNT98_PKR_8_CT_MASK              (0xFFFFU)
#define TRNG_PKRCNT98_PKR_8_CT_SHIFT             (0U)
#define TRNG_PKRCNT98_PKR_8_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT98_PKR_8_CT_SHIFT)) & TRNG_PKRCNT98_PKR_8_CT_MASK)
#define TRNG_PKRCNT98_PKR_9_CT_MASK              (0xFFFF0000U)
#define TRNG_PKRCNT98_PKR_9_CT_SHIFT             (16U)
#define TRNG_PKRCNT98_PKR_9_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNT98_PKR_9_CT_SHIFT)) & TRNG_PKRCNT98_PKR_9_CT_MASK)

/*! @name PKRCNTBA - Statistical Check Poker Count B and A Register */
#define TRNG_PKRCNTBA_PKR_A_CT_MASK              (0xFFFFU)
#define TRNG_PKRCNTBA_PKR_A_CT_SHIFT             (0U)
#define TRNG_PKRCNTBA_PKR_A_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNTBA_PKR_A_CT_SHIFT)) & TRNG_PKRCNTBA_PKR_A_CT_MASK)
#define TRNG_PKRCNTBA_PKR_B_CT_MASK              (0xFFFF0000U)
#define TRNG_PKRCNTBA_PKR_B_CT_SHIFT             (16U)
#define TRNG_PKRCNTBA_PKR_B_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNTBA_PKR_B_CT_SHIFT)) & TRNG_PKRCNTBA_PKR_B_CT_MASK)

/*! @name PKRCNTDC - Statistical Check Poker Count D and C Register */
#define TRNG_PKRCNTDC_PKR_C_CT_MASK              (0xFFFFU)
#define TRNG_PKRCNTDC_PKR_C_CT_SHIFT             (0U)
#define TRNG_PKRCNTDC_PKR_C_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNTDC_PKR_C_CT_SHIFT)) & TRNG_PKRCNTDC_PKR_C_CT_MASK)
#define TRNG_PKRCNTDC_PKR_D_CT_MASK              (0xFFFF0000U)
#define TRNG_PKRCNTDC_PKR_D_CT_SHIFT             (16U)
#define TRNG_PKRCNTDC_PKR_D_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNTDC_PKR_D_CT_SHIFT)) & TRNG_PKRCNTDC_PKR_D_CT_MASK)

/*! @name PKRCNTFE - Statistical Check Poker Count F and E Register */
#define TRNG_PKRCNTFE_PKR_E_CT_MASK              (0xFFFFU)
#define TRNG_PKRCNTFE_PKR_E_CT_SHIFT             (0U)
#define TRNG_PKRCNTFE_PKR_E_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNTFE_PKR_E_CT_SHIFT)) & TRNG_PKRCNTFE_PKR_E_CT_MASK)
#define TRNG_PKRCNTFE_PKR_F_CT_MASK              (0xFFFF0000U)
#define TRNG_PKRCNTFE_PKR_F_CT_SHIFT             (16U)
#define TRNG_PKRCNTFE_PKR_F_CT(x)                (((uint32_t)(((uint32_t)(x)) << TRNG_PKRCNTFE_PKR_F_CT_SHIFT)) & TRNG_PKRCNTFE_PKR_F_CT_MASK)

/*! @name SEC_CFG - Security Configuration Register */
#define TRNG_SEC_CFG_UNUSED0_MASK                (0x1U)
#define TRNG_SEC_CFG_UNUSED0_SHIFT               (0U)
#define TRNG_SEC_CFG_NO_PRGM_MASK                (0x2U)
#define TRNG_SEC_CFG_NO_PRGM_SHIFT               (1U)
#define TRNG_SEC_CFG_UNUSED2_MASK                (0x4U)
#define TRNG_SEC_CFG_UNUSED2_SHIFT               (2U)

/*! @name INT_CTRL - Interrupt Control Register */
#define TRNG_INT_CTRL_HW_ERR_MASK                (0x1U)
#define TRNG_INT_CTRL_HW_ERR_SHIFT               (0U)
#define TRNG_INT_CTRL_ENT_VAL_MASK               (0x2U)
#define TRNG_INT_CTRL_ENT_VAL_SHIFT              (1U)
#define TRNG_INT_CTRL_FRQ_CT_FAIL_MASK           (0x4U)
#define TRNG_INT_CTRL_FRQ_CT_FAIL_SHIFT          (2U)
#define TRNG_INT_CTRL_UNUSED_MASK                (0xFFFFFFF8U)
#define TRNG_INT_CTRL_UNUSED_SHIFT               (3U)
#define TRNG_INT_CTRL_UNUSED(x)                  (((uint32_t)(((uint32_t)(x)) << TRNG_INT_CTRL_UNUSED_SHIFT)) & TRNG_INT_CTRL_UNUSED_MASK)

/*! @name INT_MASK - Mask Register */
#define TRNG_INT_MASK_HW_ERR_MASK                (0x1U)
#define TRNG_INT_MASK_HW_ERR_SHIFT               (0U)
#define TRNG_INT_MASK_ENT_VAL_MASK               (0x2U)
#define TRNG_INT_MASK_ENT_VAL_SHIFT              (1U)
#define TRNG_INT_MASK_FRQ_CT_FAIL_MASK           (0x4U)
#define TRNG_INT_MASK_FRQ_CT_FAIL_SHIFT          (2U)

/*! @name INT_STATUS - Interrupt Status Register */
#define TRNG_INT_STATUS_HW_ERR_MASK              (0x1U)
#define TRNG_INT_STATUS_HW_ERR_SHIFT             (0U)
#define TRNG_INT_STATUS_ENT_VAL_MASK             (0x2U)
#define TRNG_INT_STATUS_ENT_VAL_SHIFT            (1U)
#define TRNG_INT_STATUS_FRQ_CT_FAIL_MASK         (0x4U)
#define TRNG_INT_STATUS_FRQ_CT_FAIL_SHIFT        (2U)

/*! @name VID1 - Version ID Register (MS) */
#define TRNG_VID1_MIN_REV_MASK                   (0xFFU)
#define TRNG_VID1_MIN_REV_SHIFT                  (0U)
#define TRNG_VID1_MIN_REV(x)                     (((uint32_t)(((uint32_t)(x)) << TRNG_VID1_MIN_REV_SHIFT)) & TRNG_VID1_MIN_REV_MASK)
#define TRNG_VID1_MAJ_REV_MASK                   (0xFF00U)
#define TRNG_VID1_MAJ_REV_SHIFT                  (8U)
#define TRNG_VID1_MAJ_REV(x)                     (((uint32_t)(((uint32_t)(x)) << TRNG_VID1_MAJ_REV_SHIFT)) & TRNG_VID1_MAJ_REV_MASK)
#define TRNG_VID1_IP_ID_MASK                     (0xFFFF0000U)
#define TRNG_VID1_IP_ID_SHIFT                    (16U)
#define TRNG_VID1_IP_ID(x)                       (((uint32_t)(((uint32_t)(x)) << TRNG_VID1_IP_ID_SHIFT)) & TRNG_VID1_IP_ID_MASK)

/*! @name VID2 - Version ID Register (LS) */
#define TRNG_VID2_CONFIG_OPT_MASK                (0xFFU)
#define TRNG_VID2_CONFIG_OPT_SHIFT               (0U)
#define TRNG_VID2_CONFIG_OPT(x)                  (((uint32_t)(((uint32_t)(x)) << TRNG_VID2_CONFIG_OPT_SHIFT)) & TRNG_VID2_CONFIG_OPT_MASK)
#define TRNG_VID2_ECO_REV_MASK                   (0xFF00U)
#define TRNG_VID2_ECO_REV_SHIFT                  (8U)
#define TRNG_VID2_ECO_REV(x)                     (((uint32_t)(((uint32_t)(x)) << TRNG_VID2_ECO_REV_SHIFT)) & TRNG_VID2_ECO_REV_MASK)
#define TRNG_VID2_INTG_OPT_MASK                  (0xFF0000U)
#define TRNG_VID2_INTG_OPT_SHIFT                 (16U)
#define TRNG_VID2_INTG_OPT(x)                    (((uint32_t)(((uint32_t)(x)) << TRNG_VID2_INTG_OPT_SHIFT)) & TRNG_VID2_INTG_OPT_MASK)
#define TRNG_VID2_ERA_MASK                       (0xFF000000U)
#define TRNG_VID2_ERA_SHIFT                      (24U)
#define TRNG_VID2_ERA(x)                         (((uint32_t)(((uint32_t)(x)) << TRNG_VID2_ERA_SHIFT)) & TRNG_VID2_ERA_MASK)


/*!
 * @}
 */ /* end of group TRNG_Register_Masks */


/* TRNG - Peripheral instance base addresses */
/** Peripheral TRNG base pointer */
#define TRNG_BASE_PTR                            ((TRNG_MemMapPtr)0x400CC000u)
/** Array initializer of TRNG peripheral base pointers */
#define TRNG_BASE_PTRS                           { TRNG_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- TRNG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TRNG_Register_Accessor_Macros TRNG - Register accessor macros
 * @{
 */


/* TRNG - Register instance definitions */
/* TRNG */
#define TRNG_MCTL                                TRNG_MCTL_REG(TRNG_BASE_PTR)
#define TRNG_SCMISC                              TRNG_SCMISC_REG(TRNG_BASE_PTR)
#define TRNG_PKRRNG                              TRNG_PKRRNG_REG(TRNG_BASE_PTR)
#define TRNG_PKRMAX                              TRNG_PKRMAX_REG(TRNG_BASE_PTR)
#define TRNG_PKRSQ                               TRNG_PKRSQ_REG(TRNG_BASE_PTR)
#define TRNG_SDCTL                               TRNG_SDCTL_REG(TRNG_BASE_PTR)
#define TRNG_SBLIM                               TRNG_SBLIM_REG(TRNG_BASE_PTR)
#define TRNG_TOTSAM                              TRNG_TOTSAM_REG(TRNG_BASE_PTR)
#define TRNG_FRQMIN                              TRNG_FRQMIN_REG(TRNG_BASE_PTR)
#define TRNG_FRQCNT                              TRNG_FRQCNT_REG(TRNG_BASE_PTR)
#define TRNG_FRQMAX                              TRNG_FRQMAX_REG(TRNG_BASE_PTR)
#define TRNG_SCMC                                TRNG_SCMC_REG(TRNG_BASE_PTR)
#define TRNG_SCML                                TRNG_SCML_REG(TRNG_BASE_PTR)
#define TRNG_SCR1C                               TRNG_SCR1C_REG(TRNG_BASE_PTR)
#define TRNG_SCR1L                               TRNG_SCR1L_REG(TRNG_BASE_PTR)
#define TRNG_SCR2C                               TRNG_SCR2C_REG(TRNG_BASE_PTR)
#define TRNG_SCR2L                               TRNG_SCR2L_REG(TRNG_BASE_PTR)
#define TRNG_SCR3C                               TRNG_SCR3C_REG(TRNG_BASE_PTR)
#define TRNG_SCR3L                               TRNG_SCR3L_REG(TRNG_BASE_PTR)
#define TRNG_SCR4C                               TRNG_SCR4C_REG(TRNG_BASE_PTR)
#define TRNG_SCR4L                               TRNG_SCR4L_REG(TRNG_BASE_PTR)
#define TRNG_SCR5C                               TRNG_SCR5C_REG(TRNG_BASE_PTR)
#define TRNG_SCR5L                               TRNG_SCR5L_REG(TRNG_BASE_PTR)
#define TRNG_SCR6PC                              TRNG_SCR6PC_REG(TRNG_BASE_PTR)
#define TRNG_SCR6PL                              TRNG_SCR6PL_REG(TRNG_BASE_PTR)
#define TRNG_STATUS                              TRNG_STATUS_REG(TRNG_BASE_PTR)
#define TRNG_ENT0                                TRNG_ENT_REG(TRNG_BASE_PTR,0)
#define TRNG_ENT1                                TRNG_ENT_REG(TRNG_BASE_PTR,1)
#define TRNG_ENT2                                TRNG_ENT_REG(TRNG_BASE_PTR,2)
#define TRNG_ENT3                                TRNG_ENT_REG(TRNG_BASE_PTR,3)
#define TRNG_ENT4                                TRNG_ENT_REG(TRNG_BASE_PTR,4)
#define TRNG_ENT5                                TRNG_ENT_REG(TRNG_BASE_PTR,5)
#define TRNG_ENT6                                TRNG_ENT_REG(TRNG_BASE_PTR,6)
#define TRNG_ENT7                                TRNG_ENT_REG(TRNG_BASE_PTR,7)
#define TRNG_ENT8                                TRNG_ENT_REG(TRNG_BASE_PTR,8)
#define TRNG_ENT9                                TRNG_ENT_REG(TRNG_BASE_PTR,9)
#define TRNG_ENT10                               TRNG_ENT_REG(TRNG_BASE_PTR,10)
#define TRNG_ENT11                               TRNG_ENT_REG(TRNG_BASE_PTR,11)
#define TRNG_ENT12                               TRNG_ENT_REG(TRNG_BASE_PTR,12)
#define TRNG_ENT13                               TRNG_ENT_REG(TRNG_BASE_PTR,13)
#define TRNG_ENT14                               TRNG_ENT_REG(TRNG_BASE_PTR,14)
#define TRNG_ENT15                               TRNG_ENT_REG(TRNG_BASE_PTR,15)
#define TRNG_PKRCNT10                            TRNG_PKRCNT10_REG(TRNG_BASE_PTR)
#define TRNG_PKRCNT32                            TRNG_PKRCNT32_REG(TRNG_BASE_PTR)
#define TRNG_PKRCNT54                            TRNG_PKRCNT54_REG(TRNG_BASE_PTR)
#define TRNG_PKRCNT76                            TRNG_PKRCNT76_REG(TRNG_BASE_PTR)
#define TRNG_PKRCNT98                            TRNG_PKRCNT98_REG(TRNG_BASE_PTR)
#define TRNG_PKRCNTBA                            TRNG_PKRCNTBA_REG(TRNG_BASE_PTR)
#define TRNG_PKRCNTDC                            TRNG_PKRCNTDC_REG(TRNG_BASE_PTR)
#define TRNG_PKRCNTFE                            TRNG_PKRCNTFE_REG(TRNG_BASE_PTR)
#define TRNG_SEC_CFG                             TRNG_SEC_CFG_REG(TRNG_BASE_PTR)
#define TRNG_INT_CTRL                            TRNG_INT_CTRL_REG(TRNG_BASE_PTR)
#define TRNG_INT_MASK                            TRNG_INT_MASK_REG(TRNG_BASE_PTR)
#define TRNG_INT_STATUS                          TRNG_INT_STATUS_REG(TRNG_BASE_PTR)
#define TRNG_VID1                                TRNG_VID1_REG(TRNG_BASE_PTR)
#define TRNG_VID2                                TRNG_VID2_REG(TRNG_BASE_PTR)

/* TRNG - Register array accessors */
#define TRNG_ENT(index)                          TRNG_ENT_REG(TRNG_BASE_PTR,index)

/*!
 * @}
 */ /* end of group TRNG_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group TRNG_Peripheral */


/* ----------------------------------------------------------------------------
   -- USB
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USB_Peripheral USB
 * @{
 */

/** USB - Peripheral register structure */
typedef struct USB_MemMap {
  uint32_t ID;                                     /**< Identification register, offset: 0x0 */
  uint32_t HWGENERAL;                              /**< Hardware General, offset: 0x4 */
  uint32_t HWHOST;                                 /**< Host Hardware Parameters, offset: 0x8 */
  uint32_t HWDEVICE;                               /**< Device Hardware Parameters, offset: 0xC */
  uint32_t HWTXBUF;                                /**< TX Buffer Hardware Parameters, offset: 0x10 */
  uint32_t HWRXBUF;                                /**< RX Buffer Hardware Parameters, offset: 0x14 */
  uint8_t RESERVED_0[104];
  uint32_t GPTIMER0LD;                             /**< General Purpose Timer #0 Load, offset: 0x80 */
  uint32_t GPTIMER0CTRL;                           /**< General Purpose Timer #0 Controller, offset: 0x84 */
  uint32_t GPTIMER1LD;                             /**< General Purpose Timer #1 Load, offset: 0x88 */
  uint32_t GPTIMER1CTRL;                           /**< General Purpose Timer #1 Controller, offset: 0x8C */
  uint32_t SBUSCFG;                                /**< System Bus Config, offset: 0x90 */
  uint8_t RESERVED_1[108];
  uint8_t CAPLENGTH;                               /**< Capability Registers Length, offset: 0x100 */
  uint8_t RESERVED_2[1];
  uint16_t HCIVERSION;                             /**< Host Controller Interface Version, offset: 0x102 */
  uint32_t HCSPARAMS;                              /**< Host Controller Structural Parameters, offset: 0x104 */
  uint32_t HCCPARAMS;                              /**< Host Controller Capability Parameters, offset: 0x108 */
  uint8_t RESERVED_3[20];
  uint16_t DCIVERSION;                             /**< Device Controller Interface Version, offset: 0x120 */
  uint8_t RESERVED_4[2];
  uint32_t DCCPARAMS;                              /**< Device Controller Capability Parameters, offset: 0x124 */
  uint8_t RESERVED_5[24];
  uint32_t USBCMD;                                 /**< USB Command Register, offset: 0x140 */
  uint32_t USBSTS;                                 /**< USB Status Register, offset: 0x144 */
  uint32_t USBINTR;                                /**< Interrupt Enable Register, offset: 0x148 */
  uint32_t FRINDEX;                                /**< USB Frame Index, offset: 0x14C */
  uint8_t RESERVED_6[4];
  union {                                          /* offset: 0x154 */
    uint32_t DEVICEADDR;                             /**< Device Address, offset: 0x154 */
    uint32_t PERIODICLISTBASE;                       /**< Frame List Base Address, offset: 0x154 */
  };
  union {                                          /* offset: 0x158 */
    uint32_t ASYNCLISTADDR;                          /**< Next Asynch. Address, offset: 0x158 */
    uint32_t ENDPTLISTADDR;                          /**< Endpoint List Address, offset: 0x158 */
  };
  uint8_t RESERVED_7[4];
  uint32_t BURSTSIZE;                              /**< Programmable Burst Size, offset: 0x160 */
  uint32_t TXFILLTUNING;                           /**< TX FIFO Fill Tuning, offset: 0x164 */
  uint8_t RESERVED_8[16];
  uint32_t ENDPTNAK;                               /**< Endpoint NAK, offset: 0x178 */
  uint32_t ENDPTNAKEN;                             /**< Endpoint NAK Enable, offset: 0x17C */
  uint32_t CONFIGFLAG;                             /**< Configure Flag Register, offset: 0x180 */
  uint32_t PORTSC1;                                /**< Port Status & Control, offset: 0x184 */
  uint8_t RESERVED_9[28];
  uint32_t OTGSC;                                  /**< On-The-Go Status & control, offset: 0x1A4 */
  uint32_t USBMODE;                                /**< USB Device Mode, offset: 0x1A8 */
  uint32_t ENDPTSETUPSTAT;                         /**< Endpoint Setup Status, offset: 0x1AC */
  uint32_t ENDPTPRIME;                             /**< Endpoint Prime, offset: 0x1B0 */
  uint32_t ENDPTFLUSH;                             /**< Endpoint Flush, offset: 0x1B4 */
  uint32_t ENDPTSTAT;                              /**< Endpoint Status, offset: 0x1B8 */
  uint32_t ENDPTCOMPLETE;                          /**< Endpoint Complete, offset: 0x1BC */
  uint32_t ENDPTCTRL0;                             /**< Endpoint Control0, offset: 0x1C0 */
  uint32_t ENDPTCTRL[7];                           /**< Endpoint Control 1..Endpoint Control 7, array offset: 0x1C4, array step: 0x4 */
} volatile *USB_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- USB - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USB_Register_Accessor_Macros USB - Register accessor macros
 * @{
 */


/* USB - Register accessors */
#define USB_ID_REG(base)                         ((base)->ID)
#define USB_HWGENERAL_REG(base)                  ((base)->HWGENERAL)
#define USB_HWHOST_REG(base)                     ((base)->HWHOST)
#define USB_HWDEVICE_REG(base)                   ((base)->HWDEVICE)
#define USB_HWTXBUF_REG(base)                    ((base)->HWTXBUF)
#define USB_HWRXBUF_REG(base)                    ((base)->HWRXBUF)
#define USB_GPTIMER0LD_REG(base)                 ((base)->GPTIMER0LD)
#define USB_GPTIMER0CTRL_REG(base)               ((base)->GPTIMER0CTRL)
#define USB_GPTIMER1LD_REG(base)                 ((base)->GPTIMER1LD)
#define USB_GPTIMER1CTRL_REG(base)               ((base)->GPTIMER1CTRL)
#define USB_SBUSCFG_REG(base)                    ((base)->SBUSCFG)
#define USB_CAPLENGTH_REG(base)                  ((base)->CAPLENGTH)
#define USB_HCIVERSION_REG(base)                 ((base)->HCIVERSION)
#define USB_HCSPARAMS_REG(base)                  ((base)->HCSPARAMS)
#define USB_HCCPARAMS_REG(base)                  ((base)->HCCPARAMS)
#define USB_DCIVERSION_REG(base)                 ((base)->DCIVERSION)
#define USB_DCCPARAMS_REG(base)                  ((base)->DCCPARAMS)
#define USB_USBCMD_REG(base)                     ((base)->USBCMD)
#define USB_USBSTS_REG(base)                     ((base)->USBSTS)
#define USB_USBINTR_REG(base)                    ((base)->USBINTR)
#define USB_FRINDEX_REG(base)                    ((base)->FRINDEX)
#define USB_DEVICEADDR_REG(base)                 ((base)->DEVICEADDR)
#define USB_PERIODICLISTBASE_REG(base)           ((base)->PERIODICLISTBASE)
#define USB_ASYNCLISTADDR_REG(base)              ((base)->ASYNCLISTADDR)
#define USB_ENDPTLISTADDR_REG(base)              ((base)->ENDPTLISTADDR)
#define USB_BURSTSIZE_REG(base)                  ((base)->BURSTSIZE)
#define USB_TXFILLTUNING_REG(base)               ((base)->TXFILLTUNING)
#define USB_ENDPTNAK_REG(base)                   ((base)->ENDPTNAK)
#define USB_ENDPTNAKEN_REG(base)                 ((base)->ENDPTNAKEN)
#define USB_CONFIGFLAG_REG(base)                 ((base)->CONFIGFLAG)
#define USB_PORTSC1_REG(base)                    ((base)->PORTSC1)
#define USB_OTGSC_REG(base)                      ((base)->OTGSC)
#define USB_USBMODE_REG(base)                    ((base)->USBMODE)
#define USB_ENDPTSETUPSTAT_REG(base)             ((base)->ENDPTSETUPSTAT)
#define USB_ENDPTPRIME_REG(base)                 ((base)->ENDPTPRIME)
#define USB_ENDPTFLUSH_REG(base)                 ((base)->ENDPTFLUSH)
#define USB_ENDPTSTAT_REG(base)                  ((base)->ENDPTSTAT)
#define USB_ENDPTCOMPLETE_REG(base)              ((base)->ENDPTCOMPLETE)
#define USB_ENDPTCTRL0_REG(base)                 ((base)->ENDPTCTRL0)
#define USB_ENDPTCTRL_REG(base,index)            ((base)->ENDPTCTRL[index])

/*!
 * @}
 */ /* end of group USB_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- USB Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USB_Register_Masks USB Register Masks
 * @{
 */

/*! @name ID - Identification register */
#define USB_ID_ID_MASK                           (0x3FU)
#define USB_ID_ID_SHIFT                          (0U)
#define USB_ID_ID(x)                             (((uint32_t)(((uint32_t)(x)) << USB_ID_ID_SHIFT)) & USB_ID_ID_MASK)
#define USB_ID_NID_MASK                          (0x3F00U)
#define USB_ID_NID_SHIFT                         (8U)
#define USB_ID_NID(x)                            (((uint32_t)(((uint32_t)(x)) << USB_ID_NID_SHIFT)) & USB_ID_NID_MASK)
#define USB_ID_REVISION_MASK                     (0xFF0000U)
#define USB_ID_REVISION_SHIFT                    (16U)
#define USB_ID_REVISION(x)                       (((uint32_t)(((uint32_t)(x)) << USB_ID_REVISION_SHIFT)) & USB_ID_REVISION_MASK)

/*! @name HWGENERAL - Hardware General */
#define USB_HWGENERAL_PHYW_MASK                  (0x30U)
#define USB_HWGENERAL_PHYW_SHIFT                 (4U)
#define USB_HWGENERAL_PHYW(x)                    (((uint32_t)(((uint32_t)(x)) << USB_HWGENERAL_PHYW_SHIFT)) & USB_HWGENERAL_PHYW_MASK)
#define USB_HWGENERAL_PHYM_MASK                  (0x1C0U)
#define USB_HWGENERAL_PHYM_SHIFT                 (6U)
#define USB_HWGENERAL_PHYM(x)                    (((uint32_t)(((uint32_t)(x)) << USB_HWGENERAL_PHYM_SHIFT)) & USB_HWGENERAL_PHYM_MASK)
#define USB_HWGENERAL_SM_MASK                    (0x600U)
#define USB_HWGENERAL_SM_SHIFT                   (9U)
#define USB_HWGENERAL_SM(x)                      (((uint32_t)(((uint32_t)(x)) << USB_HWGENERAL_SM_SHIFT)) & USB_HWGENERAL_SM_MASK)

/*! @name HWHOST - Host Hardware Parameters */
#define USB_HWHOST_HC_MASK                       (0x1U)
#define USB_HWHOST_HC_SHIFT                      (0U)
#define USB_HWHOST_NPORT_MASK                    (0xEU)
#define USB_HWHOST_NPORT_SHIFT                   (1U)
#define USB_HWHOST_NPORT(x)                      (((uint32_t)(((uint32_t)(x)) << USB_HWHOST_NPORT_SHIFT)) & USB_HWHOST_NPORT_MASK)

/*! @name HWDEVICE - Device Hardware Parameters */
#define USB_HWDEVICE_DC_MASK                     (0x1U)
#define USB_HWDEVICE_DC_SHIFT                    (0U)
#define USB_HWDEVICE_DEVEP_MASK                  (0x3EU)
#define USB_HWDEVICE_DEVEP_SHIFT                 (1U)
#define USB_HWDEVICE_DEVEP(x)                    (((uint32_t)(((uint32_t)(x)) << USB_HWDEVICE_DEVEP_SHIFT)) & USB_HWDEVICE_DEVEP_MASK)

/*! @name HWTXBUF - TX Buffer Hardware Parameters */
#define USB_HWTXBUF_TXBURST_MASK                 (0xFFU)
#define USB_HWTXBUF_TXBURST_SHIFT                (0U)
#define USB_HWTXBUF_TXBURST(x)                   (((uint32_t)(((uint32_t)(x)) << USB_HWTXBUF_TXBURST_SHIFT)) & USB_HWTXBUF_TXBURST_MASK)
#define USB_HWTXBUF_TXCHANADD_MASK               (0xFF0000U)
#define USB_HWTXBUF_TXCHANADD_SHIFT              (16U)
#define USB_HWTXBUF_TXCHANADD(x)                 (((uint32_t)(((uint32_t)(x)) << USB_HWTXBUF_TXCHANADD_SHIFT)) & USB_HWTXBUF_TXCHANADD_MASK)

/*! @name HWRXBUF - RX Buffer Hardware Parameters */
#define USB_HWRXBUF_RXBURST_MASK                 (0xFFU)
#define USB_HWRXBUF_RXBURST_SHIFT                (0U)
#define USB_HWRXBUF_RXBURST(x)                   (((uint32_t)(((uint32_t)(x)) << USB_HWRXBUF_RXBURST_SHIFT)) & USB_HWRXBUF_RXBURST_MASK)
#define USB_HWRXBUF_RXADD_MASK                   (0xFF00U)
#define USB_HWRXBUF_RXADD_SHIFT                  (8U)
#define USB_HWRXBUF_RXADD(x)                     (((uint32_t)(((uint32_t)(x)) << USB_HWRXBUF_RXADD_SHIFT)) & USB_HWRXBUF_RXADD_MASK)

/*! @name GPTIMER0LD - General Purpose Timer #0 Load */
#define USB_GPTIMER0LD_GPTLD_MASK                (0xFFFFFFU)
#define USB_GPTIMER0LD_GPTLD_SHIFT               (0U)
#define USB_GPTIMER0LD_GPTLD(x)                  (((uint32_t)(((uint32_t)(x)) << USB_GPTIMER0LD_GPTLD_SHIFT)) & USB_GPTIMER0LD_GPTLD_MASK)

/*! @name GPTIMER0CTRL - General Purpose Timer #0 Controller */
#define USB_GPTIMER0CTRL_GPTCNT_MASK             (0xFFFFFFU)
#define USB_GPTIMER0CTRL_GPTCNT_SHIFT            (0U)
#define USB_GPTIMER0CTRL_GPTCNT(x)               (((uint32_t)(((uint32_t)(x)) << USB_GPTIMER0CTRL_GPTCNT_SHIFT)) & USB_GPTIMER0CTRL_GPTCNT_MASK)
#define USB_GPTIMER0CTRL_GPTMODE_MASK            (0x1000000U)
#define USB_GPTIMER0CTRL_GPTMODE_SHIFT           (24U)
#define USB_GPTIMER0CTRL_GPTRST_MASK             (0x40000000U)
#define USB_GPTIMER0CTRL_GPTRST_SHIFT            (30U)
#define USB_GPTIMER0CTRL_GPTRUN_MASK             (0x80000000U)
#define USB_GPTIMER0CTRL_GPTRUN_SHIFT            (31U)

/*! @name GPTIMER1LD - General Purpose Timer #1 Load */
#define USB_GPTIMER1LD_GPTLD_MASK                (0xFFFFFFU)
#define USB_GPTIMER1LD_GPTLD_SHIFT               (0U)
#define USB_GPTIMER1LD_GPTLD(x)                  (((uint32_t)(((uint32_t)(x)) << USB_GPTIMER1LD_GPTLD_SHIFT)) & USB_GPTIMER1LD_GPTLD_MASK)

/*! @name GPTIMER1CTRL - General Purpose Timer #1 Controller */
#define USB_GPTIMER1CTRL_GPTCNT_MASK             (0xFFFFFFU)
#define USB_GPTIMER1CTRL_GPTCNT_SHIFT            (0U)
#define USB_GPTIMER1CTRL_GPTCNT(x)               (((uint32_t)(((uint32_t)(x)) << USB_GPTIMER1CTRL_GPTCNT_SHIFT)) & USB_GPTIMER1CTRL_GPTCNT_MASK)
#define USB_GPTIMER1CTRL_GPTMODE_MASK            (0x1000000U)
#define USB_GPTIMER1CTRL_GPTMODE_SHIFT           (24U)
#define USB_GPTIMER1CTRL_GPTRST_MASK             (0x40000000U)
#define USB_GPTIMER1CTRL_GPTRST_SHIFT            (30U)
#define USB_GPTIMER1CTRL_GPTRUN_MASK             (0x80000000U)
#define USB_GPTIMER1CTRL_GPTRUN_SHIFT            (31U)

/*! @name SBUSCFG - System Bus Config */
#define USB_SBUSCFG_AHBBRST_MASK                 (0x7U)
#define USB_SBUSCFG_AHBBRST_SHIFT                (0U)
#define USB_SBUSCFG_AHBBRST(x)                   (((uint32_t)(((uint32_t)(x)) << USB_SBUSCFG_AHBBRST_SHIFT)) & USB_SBUSCFG_AHBBRST_MASK)

/*! @name CAPLENGTH - Capability Registers Length */
#define USB_CAPLENGTH_CAPLENGTH_MASK             (0xFFU)
#define USB_CAPLENGTH_CAPLENGTH_SHIFT            (0U)
#define USB_CAPLENGTH_CAPLENGTH(x)               (((uint8_t)(((uint8_t)(x)) << USB_CAPLENGTH_CAPLENGTH_SHIFT)) & USB_CAPLENGTH_CAPLENGTH_MASK)

/*! @name HCIVERSION - Host Controller Interface Version */
#define USB_HCIVERSION_HCIVERSION_MASK           (0xFFFFU)
#define USB_HCIVERSION_HCIVERSION_SHIFT          (0U)
#define USB_HCIVERSION_HCIVERSION(x)             (((uint16_t)(((uint16_t)(x)) << USB_HCIVERSION_HCIVERSION_SHIFT)) & USB_HCIVERSION_HCIVERSION_MASK)

/*! @name HCSPARAMS - Host Controller Structural Parameters */
#define USB_HCSPARAMS_N_PORTS_MASK               (0xFU)
#define USB_HCSPARAMS_N_PORTS_SHIFT              (0U)
#define USB_HCSPARAMS_N_PORTS(x)                 (((uint32_t)(((uint32_t)(x)) << USB_HCSPARAMS_N_PORTS_SHIFT)) & USB_HCSPARAMS_N_PORTS_MASK)
#define USB_HCSPARAMS_PPC_MASK                   (0x10U)
#define USB_HCSPARAMS_PPC_SHIFT                  (4U)
#define USB_HCSPARAMS_N_PCC_MASK                 (0xF00U)
#define USB_HCSPARAMS_N_PCC_SHIFT                (8U)
#define USB_HCSPARAMS_N_PCC(x)                   (((uint32_t)(((uint32_t)(x)) << USB_HCSPARAMS_N_PCC_SHIFT)) & USB_HCSPARAMS_N_PCC_MASK)
#define USB_HCSPARAMS_N_CC_MASK                  (0xF000U)
#define USB_HCSPARAMS_N_CC_SHIFT                 (12U)
#define USB_HCSPARAMS_N_CC(x)                    (((uint32_t)(((uint32_t)(x)) << USB_HCSPARAMS_N_CC_SHIFT)) & USB_HCSPARAMS_N_CC_MASK)
#define USB_HCSPARAMS_PI_MASK                    (0x10000U)
#define USB_HCSPARAMS_PI_SHIFT                   (16U)
#define USB_HCSPARAMS_N_PTT_MASK                 (0xF00000U)
#define USB_HCSPARAMS_N_PTT_SHIFT                (20U)
#define USB_HCSPARAMS_N_PTT(x)                   (((uint32_t)(((uint32_t)(x)) << USB_HCSPARAMS_N_PTT_SHIFT)) & USB_HCSPARAMS_N_PTT_MASK)
#define USB_HCSPARAMS_N_TT_MASK                  (0xF000000U)
#define USB_HCSPARAMS_N_TT_SHIFT                 (24U)
#define USB_HCSPARAMS_N_TT(x)                    (((uint32_t)(((uint32_t)(x)) << USB_HCSPARAMS_N_TT_SHIFT)) & USB_HCSPARAMS_N_TT_MASK)

/*! @name HCCPARAMS - Host Controller Capability Parameters */
#define USB_HCCPARAMS_ADC_MASK                   (0x1U)
#define USB_HCCPARAMS_ADC_SHIFT                  (0U)
#define USB_HCCPARAMS_PFL_MASK                   (0x2U)
#define USB_HCCPARAMS_PFL_SHIFT                  (1U)
#define USB_HCCPARAMS_ASP_MASK                   (0x4U)
#define USB_HCCPARAMS_ASP_SHIFT                  (2U)
#define USB_HCCPARAMS_IST_MASK                   (0xF0U)
#define USB_HCCPARAMS_IST_SHIFT                  (4U)
#define USB_HCCPARAMS_IST(x)                     (((uint32_t)(((uint32_t)(x)) << USB_HCCPARAMS_IST_SHIFT)) & USB_HCCPARAMS_IST_MASK)
#define USB_HCCPARAMS_EECP_MASK                  (0xFF00U)
#define USB_HCCPARAMS_EECP_SHIFT                 (8U)
#define USB_HCCPARAMS_EECP(x)                    (((uint32_t)(((uint32_t)(x)) << USB_HCCPARAMS_EECP_SHIFT)) & USB_HCCPARAMS_EECP_MASK)

/*! @name DCIVERSION - Device Controller Interface Version */
#define USB_DCIVERSION_DCIVERSION_MASK           (0xFFFFU)
#define USB_DCIVERSION_DCIVERSION_SHIFT          (0U)
#define USB_DCIVERSION_DCIVERSION(x)             (((uint16_t)(((uint16_t)(x)) << USB_DCIVERSION_DCIVERSION_SHIFT)) & USB_DCIVERSION_DCIVERSION_MASK)

/*! @name DCCPARAMS - Device Controller Capability Parameters */
#define USB_DCCPARAMS_DEN_MASK                   (0x1FU)
#define USB_DCCPARAMS_DEN_SHIFT                  (0U)
#define USB_DCCPARAMS_DEN(x)                     (((uint32_t)(((uint32_t)(x)) << USB_DCCPARAMS_DEN_SHIFT)) & USB_DCCPARAMS_DEN_MASK)
#define USB_DCCPARAMS_DC_MASK                    (0x80U)
#define USB_DCCPARAMS_DC_SHIFT                   (7U)
#define USB_DCCPARAMS_HC_MASK                    (0x100U)
#define USB_DCCPARAMS_HC_SHIFT                   (8U)

/*! @name USBCMD - USB Command Register */
#define USB_USBCMD_RS_MASK                       (0x1U)
#define USB_USBCMD_RS_SHIFT                      (0U)
#define USB_USBCMD_RST_MASK                      (0x2U)
#define USB_USBCMD_RST_SHIFT                     (1U)
#define USB_USBCMD_FS_1_MASK                     (0xCU)
#define USB_USBCMD_FS_1_SHIFT                    (2U)
#define USB_USBCMD_FS_1(x)                       (((uint32_t)(((uint32_t)(x)) << USB_USBCMD_FS_1_SHIFT)) & USB_USBCMD_FS_1_MASK)
#define USB_USBCMD_PSE_MASK                      (0x10U)
#define USB_USBCMD_PSE_SHIFT                     (4U)
#define USB_USBCMD_ASE_MASK                      (0x20U)
#define USB_USBCMD_ASE_SHIFT                     (5U)
#define USB_USBCMD_IAA_MASK                      (0x40U)
#define USB_USBCMD_IAA_SHIFT                     (6U)
#define USB_USBCMD_ASP_MASK                      (0x300U)
#define USB_USBCMD_ASP_SHIFT                     (8U)
#define USB_USBCMD_ASP(x)                        (((uint32_t)(((uint32_t)(x)) << USB_USBCMD_ASP_SHIFT)) & USB_USBCMD_ASP_MASK)
#define USB_USBCMD_ASPE_MASK                     (0x800U)
#define USB_USBCMD_ASPE_SHIFT                    (11U)
#define USB_USBCMD_ATDTW_MASK                    (0x1000U)
#define USB_USBCMD_ATDTW_SHIFT                   (12U)
#define USB_USBCMD_SUTW_MASK                     (0x2000U)
#define USB_USBCMD_SUTW_SHIFT                    (13U)
#define USB_USBCMD_FS_2_MASK                     (0x8000U)
#define USB_USBCMD_FS_2_SHIFT                    (15U)
#define USB_USBCMD_ITC_MASK                      (0xFF0000U)
#define USB_USBCMD_ITC_SHIFT                     (16U)
#define USB_USBCMD_ITC(x)                        (((uint32_t)(((uint32_t)(x)) << USB_USBCMD_ITC_SHIFT)) & USB_USBCMD_ITC_MASK)

/*! @name USBSTS - USB Status Register */
#define USB_USBSTS_UI_MASK                       (0x1U)
#define USB_USBSTS_UI_SHIFT                      (0U)
#define USB_USBSTS_UEI_MASK                      (0x2U)
#define USB_USBSTS_UEI_SHIFT                     (1U)
#define USB_USBSTS_PCI_MASK                      (0x4U)
#define USB_USBSTS_PCI_SHIFT                     (2U)
#define USB_USBSTS_FRI_MASK                      (0x8U)
#define USB_USBSTS_FRI_SHIFT                     (3U)
#define USB_USBSTS_SEI_MASK                      (0x10U)
#define USB_USBSTS_SEI_SHIFT                     (4U)
#define USB_USBSTS_AAI_MASK                      (0x20U)
#define USB_USBSTS_AAI_SHIFT                     (5U)
#define USB_USBSTS_URI_MASK                      (0x40U)
#define USB_USBSTS_URI_SHIFT                     (6U)
#define USB_USBSTS_SRI_MASK                      (0x80U)
#define USB_USBSTS_SRI_SHIFT                     (7U)
#define USB_USBSTS_SLI_MASK                      (0x100U)
#define USB_USBSTS_SLI_SHIFT                     (8U)
#define USB_USBSTS_ULPII_MASK                    (0x400U)
#define USB_USBSTS_ULPII_SHIFT                   (10U)
#define USB_USBSTS_HCH_MASK                      (0x1000U)
#define USB_USBSTS_HCH_SHIFT                     (12U)
#define USB_USBSTS_RCL_MASK                      (0x2000U)
#define USB_USBSTS_RCL_SHIFT                     (13U)
#define USB_USBSTS_PS_MASK                       (0x4000U)
#define USB_USBSTS_PS_SHIFT                      (14U)
#define USB_USBSTS_AS_MASK                       (0x8000U)
#define USB_USBSTS_AS_SHIFT                      (15U)
#define USB_USBSTS_NAKI_MASK                     (0x10000U)
#define USB_USBSTS_NAKI_SHIFT                    (16U)
#define USB_USBSTS_TI0_MASK                      (0x1000000U)
#define USB_USBSTS_TI0_SHIFT                     (24U)
#define USB_USBSTS_TI1_MASK                      (0x2000000U)
#define USB_USBSTS_TI1_SHIFT                     (25U)

/*! @name USBINTR - Interrupt Enable Register */
#define USB_USBINTR_UE_MASK                      (0x1U)
#define USB_USBINTR_UE_SHIFT                     (0U)
#define USB_USBINTR_UEE_MASK                     (0x2U)
#define USB_USBINTR_UEE_SHIFT                    (1U)
#define USB_USBINTR_PCE_MASK                     (0x4U)
#define USB_USBINTR_PCE_SHIFT                    (2U)
#define USB_USBINTR_FRE_MASK                     (0x8U)
#define USB_USBINTR_FRE_SHIFT                    (3U)
#define USB_USBINTR_SEE_MASK                     (0x10U)
#define USB_USBINTR_SEE_SHIFT                    (4U)
#define USB_USBINTR_AAE_MASK                     (0x20U)
#define USB_USBINTR_AAE_SHIFT                    (5U)
#define USB_USBINTR_URE_MASK                     (0x40U)
#define USB_USBINTR_URE_SHIFT                    (6U)
#define USB_USBINTR_SRE_MASK                     (0x80U)
#define USB_USBINTR_SRE_SHIFT                    (7U)
#define USB_USBINTR_SLE_MASK                     (0x100U)
#define USB_USBINTR_SLE_SHIFT                    (8U)
#define USB_USBINTR_ULPIE_MASK                   (0x400U)
#define USB_USBINTR_ULPIE_SHIFT                  (10U)
#define USB_USBINTR_NAKE_MASK                    (0x10000U)
#define USB_USBINTR_NAKE_SHIFT                   (16U)
#define USB_USBINTR_UAIE_MASK                    (0x40000U)
#define USB_USBINTR_UAIE_SHIFT                   (18U)
#define USB_USBINTR_UPIE_MASK                    (0x80000U)
#define USB_USBINTR_UPIE_SHIFT                   (19U)
#define USB_USBINTR_TIE0_MASK                    (0x1000000U)
#define USB_USBINTR_TIE0_SHIFT                   (24U)
#define USB_USBINTR_TIE1_MASK                    (0x2000000U)
#define USB_USBINTR_TIE1_SHIFT                   (25U)

/*! @name FRINDEX - USB Frame Index */
#define USB_FRINDEX_FRINDEX_MASK                 (0x3FFFU)
#define USB_FRINDEX_FRINDEX_SHIFT                (0U)
#define USB_FRINDEX_FRINDEX(x)                   (((uint32_t)(((uint32_t)(x)) << USB_FRINDEX_FRINDEX_SHIFT)) & USB_FRINDEX_FRINDEX_MASK)

/*! @name DEVICEADDR - Device Address */
#define USB_DEVICEADDR_USBADRA_MASK              (0x1000000U)
#define USB_DEVICEADDR_USBADRA_SHIFT             (24U)
#define USB_DEVICEADDR_USBADR_MASK               (0xFE000000U)
#define USB_DEVICEADDR_USBADR_SHIFT              (25U)
#define USB_DEVICEADDR_USBADR(x)                 (((uint32_t)(((uint32_t)(x)) << USB_DEVICEADDR_USBADR_SHIFT)) & USB_DEVICEADDR_USBADR_MASK)

/*! @name PERIODICLISTBASE - Frame List Base Address */
#define USB_PERIODICLISTBASE_BASEADR_MASK        (0xFFFFF000U)
#define USB_PERIODICLISTBASE_BASEADR_SHIFT       (12U)
#define USB_PERIODICLISTBASE_BASEADR(x)          (((uint32_t)(((uint32_t)(x)) << USB_PERIODICLISTBASE_BASEADR_SHIFT)) & USB_PERIODICLISTBASE_BASEADR_MASK)

/*! @name ASYNCLISTADDR - Next Asynch. Address */
#define USB_ASYNCLISTADDR_ASYBASE_MASK           (0xFFFFFFE0U)
#define USB_ASYNCLISTADDR_ASYBASE_SHIFT          (5U)
#define USB_ASYNCLISTADDR_ASYBASE(x)             (((uint32_t)(((uint32_t)(x)) << USB_ASYNCLISTADDR_ASYBASE_SHIFT)) & USB_ASYNCLISTADDR_ASYBASE_MASK)

/*! @name ENDPTLISTADDR - Endpoint List Address */
#define USB_ENDPTLISTADDR_EPBASE_MASK            (0xFFFFF800U)
#define USB_ENDPTLISTADDR_EPBASE_SHIFT           (11U)
#define USB_ENDPTLISTADDR_EPBASE(x)              (((uint32_t)(((uint32_t)(x)) << USB_ENDPTLISTADDR_EPBASE_SHIFT)) & USB_ENDPTLISTADDR_EPBASE_MASK)

/*! @name BURSTSIZE - Programmable Burst Size */
#define USB_BURSTSIZE_RXPBURST_MASK              (0xFFU)
#define USB_BURSTSIZE_RXPBURST_SHIFT             (0U)
#define USB_BURSTSIZE_RXPBURST(x)                (((uint32_t)(((uint32_t)(x)) << USB_BURSTSIZE_RXPBURST_SHIFT)) & USB_BURSTSIZE_RXPBURST_MASK)
#define USB_BURSTSIZE_TXPBURST_MASK              (0x1FF00U)
#define USB_BURSTSIZE_TXPBURST_SHIFT             (8U)
#define USB_BURSTSIZE_TXPBURST(x)                (((uint32_t)(((uint32_t)(x)) << USB_BURSTSIZE_TXPBURST_SHIFT)) & USB_BURSTSIZE_TXPBURST_MASK)

/*! @name TXFILLTUNING - TX FIFO Fill Tuning */
#define USB_TXFILLTUNING_TXSCHOH_MASK            (0xFFU)
#define USB_TXFILLTUNING_TXSCHOH_SHIFT           (0U)
#define USB_TXFILLTUNING_TXSCHOH(x)              (((uint32_t)(((uint32_t)(x)) << USB_TXFILLTUNING_TXSCHOH_SHIFT)) & USB_TXFILLTUNING_TXSCHOH_MASK)
#define USB_TXFILLTUNING_TXSCHHEALTH_MASK        (0x1F00U)
#define USB_TXFILLTUNING_TXSCHHEALTH_SHIFT       (8U)
#define USB_TXFILLTUNING_TXSCHHEALTH(x)          (((uint32_t)(((uint32_t)(x)) << USB_TXFILLTUNING_TXSCHHEALTH_SHIFT)) & USB_TXFILLTUNING_TXSCHHEALTH_MASK)
#define USB_TXFILLTUNING_TXFIFOTHRES_MASK        (0x3F0000U)
#define USB_TXFILLTUNING_TXFIFOTHRES_SHIFT       (16U)
#define USB_TXFILLTUNING_TXFIFOTHRES(x)          (((uint32_t)(((uint32_t)(x)) << USB_TXFILLTUNING_TXFIFOTHRES_SHIFT)) & USB_TXFILLTUNING_TXFIFOTHRES_MASK)

/*! @name ENDPTNAK - Endpoint NAK */
#define USB_ENDPTNAK_EPRN_MASK                   (0xFFU)
#define USB_ENDPTNAK_EPRN_SHIFT                  (0U)
#define USB_ENDPTNAK_EPRN(x)                     (((uint32_t)(((uint32_t)(x)) << USB_ENDPTNAK_EPRN_SHIFT)) & USB_ENDPTNAK_EPRN_MASK)
#define USB_ENDPTNAK_EPTN_MASK                   (0xFF0000U)
#define USB_ENDPTNAK_EPTN_SHIFT                  (16U)
#define USB_ENDPTNAK_EPTN(x)                     (((uint32_t)(((uint32_t)(x)) << USB_ENDPTNAK_EPTN_SHIFT)) & USB_ENDPTNAK_EPTN_MASK)

/*! @name ENDPTNAKEN - Endpoint NAK Enable */
#define USB_ENDPTNAKEN_EPRNE_MASK                (0xFFU)
#define USB_ENDPTNAKEN_EPRNE_SHIFT               (0U)
#define USB_ENDPTNAKEN_EPRNE(x)                  (((uint32_t)(((uint32_t)(x)) << USB_ENDPTNAKEN_EPRNE_SHIFT)) & USB_ENDPTNAKEN_EPRNE_MASK)
#define USB_ENDPTNAKEN_EPTNE_MASK                (0xFF0000U)
#define USB_ENDPTNAKEN_EPTNE_SHIFT               (16U)
#define USB_ENDPTNAKEN_EPTNE(x)                  (((uint32_t)(((uint32_t)(x)) << USB_ENDPTNAKEN_EPTNE_SHIFT)) & USB_ENDPTNAKEN_EPTNE_MASK)

/*! @name CONFIGFLAG - Configure Flag Register */
#define USB_CONFIGFLAG_CF_MASK                   (0x1U)
#define USB_CONFIGFLAG_CF_SHIFT                  (0U)

/*! @name PORTSC1 - Port Status & Control */
#define USB_PORTSC1_CCS_MASK                     (0x1U)
#define USB_PORTSC1_CCS_SHIFT                    (0U)
#define USB_PORTSC1_CSC_MASK                     (0x2U)
#define USB_PORTSC1_CSC_SHIFT                    (1U)
#define USB_PORTSC1_PE_MASK                      (0x4U)
#define USB_PORTSC1_PE_SHIFT                     (2U)
#define USB_PORTSC1_PEC_MASK                     (0x8U)
#define USB_PORTSC1_PEC_SHIFT                    (3U)
#define USB_PORTSC1_OCA_MASK                     (0x10U)
#define USB_PORTSC1_OCA_SHIFT                    (4U)
#define USB_PORTSC1_OCC_MASK                     (0x20U)
#define USB_PORTSC1_OCC_SHIFT                    (5U)
#define USB_PORTSC1_FPR_MASK                     (0x40U)
#define USB_PORTSC1_FPR_SHIFT                    (6U)
#define USB_PORTSC1_SUSP_MASK                    (0x80U)
#define USB_PORTSC1_SUSP_SHIFT                   (7U)
#define USB_PORTSC1_PR_MASK                      (0x100U)
#define USB_PORTSC1_PR_SHIFT                     (8U)
#define USB_PORTSC1_HSP_MASK                     (0x200U)
#define USB_PORTSC1_HSP_SHIFT                    (9U)
#define USB_PORTSC1_LS_MASK                      (0xC00U)
#define USB_PORTSC1_LS_SHIFT                     (10U)
#define USB_PORTSC1_LS(x)                        (((uint32_t)(((uint32_t)(x)) << USB_PORTSC1_LS_SHIFT)) & USB_PORTSC1_LS_MASK)
#define USB_PORTSC1_PP_MASK                      (0x1000U)
#define USB_PORTSC1_PP_SHIFT                     (12U)
#define USB_PORTSC1_PO_MASK                      (0x2000U)
#define USB_PORTSC1_PO_SHIFT                     (13U)
#define USB_PORTSC1_PIC_MASK                     (0xC000U)
#define USB_PORTSC1_PIC_SHIFT                    (14U)
#define USB_PORTSC1_PIC(x)                       (((uint32_t)(((uint32_t)(x)) << USB_PORTSC1_PIC_SHIFT)) & USB_PORTSC1_PIC_MASK)
#define USB_PORTSC1_PTC_MASK                     (0xF0000U)
#define USB_PORTSC1_PTC_SHIFT                    (16U)
#define USB_PORTSC1_PTC(x)                       (((uint32_t)(((uint32_t)(x)) << USB_PORTSC1_PTC_SHIFT)) & USB_PORTSC1_PTC_MASK)
#define USB_PORTSC1_WKCN_MASK                    (0x100000U)
#define USB_PORTSC1_WKCN_SHIFT                   (20U)
#define USB_PORTSC1_WKDC_MASK                    (0x200000U)
#define USB_PORTSC1_WKDC_SHIFT                   (21U)
#define USB_PORTSC1_WKOC_MASK                    (0x400000U)
#define USB_PORTSC1_WKOC_SHIFT                   (22U)
#define USB_PORTSC1_PHCD_MASK                    (0x800000U)
#define USB_PORTSC1_PHCD_SHIFT                   (23U)
#define USB_PORTSC1_PFSC_MASK                    (0x1000000U)
#define USB_PORTSC1_PFSC_SHIFT                   (24U)
#define USB_PORTSC1_PTS_2_MASK                   (0x2000000U)
#define USB_PORTSC1_PTS_2_SHIFT                  (25U)
#define USB_PORTSC1_PSPD_MASK                    (0xC000000U)
#define USB_PORTSC1_PSPD_SHIFT                   (26U)
#define USB_PORTSC1_PSPD(x)                      (((uint32_t)(((uint32_t)(x)) << USB_PORTSC1_PSPD_SHIFT)) & USB_PORTSC1_PSPD_MASK)
#define USB_PORTSC1_PTW_MASK                     (0x10000000U)
#define USB_PORTSC1_PTW_SHIFT                    (28U)
#define USB_PORTSC1_STS_MASK                     (0x20000000U)
#define USB_PORTSC1_STS_SHIFT                    (29U)
#define USB_PORTSC1_PTS_1_MASK                   (0xC0000000U)
#define USB_PORTSC1_PTS_1_SHIFT                  (30U)
#define USB_PORTSC1_PTS_1(x)                     (((uint32_t)(((uint32_t)(x)) << USB_PORTSC1_PTS_1_SHIFT)) & USB_PORTSC1_PTS_1_MASK)

/*! @name OTGSC - On-The-Go Status & control */
#define USB_OTGSC_VD_MASK                        (0x1U)
#define USB_OTGSC_VD_SHIFT                       (0U)
#define USB_OTGSC_VC_MASK                        (0x2U)
#define USB_OTGSC_VC_SHIFT                       (1U)
#define USB_OTGSC_OT_MASK                        (0x8U)
#define USB_OTGSC_OT_SHIFT                       (3U)
#define USB_OTGSC_DP_MASK                        (0x10U)
#define USB_OTGSC_DP_SHIFT                       (4U)
#define USB_OTGSC_IDPU_MASK                      (0x20U)
#define USB_OTGSC_IDPU_SHIFT                     (5U)
#define USB_OTGSC_ID_MASK                        (0x100U)
#define USB_OTGSC_ID_SHIFT                       (8U)
#define USB_OTGSC_AVV_MASK                       (0x200U)
#define USB_OTGSC_AVV_SHIFT                      (9U)
#define USB_OTGSC_ASV_MASK                       (0x400U)
#define USB_OTGSC_ASV_SHIFT                      (10U)
#define USB_OTGSC_BSV_MASK                       (0x800U)
#define USB_OTGSC_BSV_SHIFT                      (11U)
#define USB_OTGSC_BSE_MASK                       (0x1000U)
#define USB_OTGSC_BSE_SHIFT                      (12U)
#define USB_OTGSC_TOG_1MS_MASK                   (0x2000U)
#define USB_OTGSC_TOG_1MS_SHIFT                  (13U)
#define USB_OTGSC_DPS_MASK                       (0x4000U)
#define USB_OTGSC_DPS_SHIFT                      (14U)
#define USB_OTGSC_IDIS_MASK                      (0x10000U)
#define USB_OTGSC_IDIS_SHIFT                     (16U)
#define USB_OTGSC_AVVIS_MASK                     (0x20000U)
#define USB_OTGSC_AVVIS_SHIFT                    (17U)
#define USB_OTGSC_ASVIS_MASK                     (0x40000U)
#define USB_OTGSC_ASVIS_SHIFT                    (18U)
#define USB_OTGSC_BSVIS_MASK                     (0x80000U)
#define USB_OTGSC_BSVIS_SHIFT                    (19U)
#define USB_OTGSC_BSEIS_MASK                     (0x100000U)
#define USB_OTGSC_BSEIS_SHIFT                    (20U)
#define USB_OTGSC_STATUS_1MS_MASK                (0x200000U)
#define USB_OTGSC_STATUS_1MS_SHIFT               (21U)
#define USB_OTGSC_DPIS_MASK                      (0x400000U)
#define USB_OTGSC_DPIS_SHIFT                     (22U)
#define USB_OTGSC_IDIE_MASK                      (0x1000000U)
#define USB_OTGSC_IDIE_SHIFT                     (24U)
#define USB_OTGSC_AVVIE_MASK                     (0x2000000U)
#define USB_OTGSC_AVVIE_SHIFT                    (25U)
#define USB_OTGSC_ASVIE_MASK                     (0x4000000U)
#define USB_OTGSC_ASVIE_SHIFT                    (26U)
#define USB_OTGSC_BSVIE_MASK                     (0x8000000U)
#define USB_OTGSC_BSVIE_SHIFT                    (27U)
#define USB_OTGSC_BSEIE_MASK                     (0x10000000U)
#define USB_OTGSC_BSEIE_SHIFT                    (28U)
#define USB_OTGSC_EN_1MS_MASK                    (0x20000000U)
#define USB_OTGSC_EN_1MS_SHIFT                   (29U)
#define USB_OTGSC_DPIE_MASK                      (0x40000000U)
#define USB_OTGSC_DPIE_SHIFT                     (30U)

/*! @name USBMODE - USB Device Mode */
#define USB_USBMODE_CM_MASK                      (0x3U)
#define USB_USBMODE_CM_SHIFT                     (0U)
#define USB_USBMODE_CM(x)                        (((uint32_t)(((uint32_t)(x)) << USB_USBMODE_CM_SHIFT)) & USB_USBMODE_CM_MASK)
#define USB_USBMODE_ES_MASK                      (0x4U)
#define USB_USBMODE_ES_SHIFT                     (2U)
#define USB_USBMODE_SLOM_MASK                    (0x8U)
#define USB_USBMODE_SLOM_SHIFT                   (3U)
#define USB_USBMODE_SDIS_MASK                    (0x10U)
#define USB_USBMODE_SDIS_SHIFT                   (4U)

/*! @name ENDPTSETUPSTAT - Endpoint Setup Status */
#define USB_ENDPTSETUPSTAT_ENDPTSETUPSTAT_MASK   (0xFFFFU)
#define USB_ENDPTSETUPSTAT_ENDPTSETUPSTAT_SHIFT  (0U)
#define USB_ENDPTSETUPSTAT_ENDPTSETUPSTAT(x)     (((uint32_t)(((uint32_t)(x)) << USB_ENDPTSETUPSTAT_ENDPTSETUPSTAT_SHIFT)) & USB_ENDPTSETUPSTAT_ENDPTSETUPSTAT_MASK)

/*! @name ENDPTPRIME - Endpoint Prime */
#define USB_ENDPTPRIME_PERB_MASK                 (0xFFU)
#define USB_ENDPTPRIME_PERB_SHIFT                (0U)
#define USB_ENDPTPRIME_PERB(x)                   (((uint32_t)(((uint32_t)(x)) << USB_ENDPTPRIME_PERB_SHIFT)) & USB_ENDPTPRIME_PERB_MASK)
#define USB_ENDPTPRIME_PETB_MASK                 (0xFF0000U)
#define USB_ENDPTPRIME_PETB_SHIFT                (16U)
#define USB_ENDPTPRIME_PETB(x)                   (((uint32_t)(((uint32_t)(x)) << USB_ENDPTPRIME_PETB_SHIFT)) & USB_ENDPTPRIME_PETB_MASK)

/*! @name ENDPTFLUSH - Endpoint Flush */
#define USB_ENDPTFLUSH_FERB_MASK                 (0xFFU)
#define USB_ENDPTFLUSH_FERB_SHIFT                (0U)
#define USB_ENDPTFLUSH_FERB(x)                   (((uint32_t)(((uint32_t)(x)) << USB_ENDPTFLUSH_FERB_SHIFT)) & USB_ENDPTFLUSH_FERB_MASK)
#define USB_ENDPTFLUSH_FETB_MASK                 (0xFF0000U)
#define USB_ENDPTFLUSH_FETB_SHIFT                (16U)
#define USB_ENDPTFLUSH_FETB(x)                   (((uint32_t)(((uint32_t)(x)) << USB_ENDPTFLUSH_FETB_SHIFT)) & USB_ENDPTFLUSH_FETB_MASK)

/*! @name ENDPTSTAT - Endpoint Status */
#define USB_ENDPTSTAT_ERBR_MASK                  (0xFFU)
#define USB_ENDPTSTAT_ERBR_SHIFT                 (0U)
#define USB_ENDPTSTAT_ERBR(x)                    (((uint32_t)(((uint32_t)(x)) << USB_ENDPTSTAT_ERBR_SHIFT)) & USB_ENDPTSTAT_ERBR_MASK)
#define USB_ENDPTSTAT_ETBR_MASK                  (0xFF0000U)
#define USB_ENDPTSTAT_ETBR_SHIFT                 (16U)
#define USB_ENDPTSTAT_ETBR(x)                    (((uint32_t)(((uint32_t)(x)) << USB_ENDPTSTAT_ETBR_SHIFT)) & USB_ENDPTSTAT_ETBR_MASK)

/*! @name ENDPTCOMPLETE - Endpoint Complete */
#define USB_ENDPTCOMPLETE_ERCE_MASK              (0xFFU)
#define USB_ENDPTCOMPLETE_ERCE_SHIFT             (0U)
#define USB_ENDPTCOMPLETE_ERCE(x)                (((uint32_t)(((uint32_t)(x)) << USB_ENDPTCOMPLETE_ERCE_SHIFT)) & USB_ENDPTCOMPLETE_ERCE_MASK)
#define USB_ENDPTCOMPLETE_ETCE_MASK              (0xFF0000U)
#define USB_ENDPTCOMPLETE_ETCE_SHIFT             (16U)
#define USB_ENDPTCOMPLETE_ETCE(x)                (((uint32_t)(((uint32_t)(x)) << USB_ENDPTCOMPLETE_ETCE_SHIFT)) & USB_ENDPTCOMPLETE_ETCE_MASK)

/*! @name ENDPTCTRL0 - Endpoint Control0 */
#define USB_ENDPTCTRL0_RXS_MASK                  (0x1U)
#define USB_ENDPTCTRL0_RXS_SHIFT                 (0U)
#define USB_ENDPTCTRL0_RXT_MASK                  (0xCU)
#define USB_ENDPTCTRL0_RXT_SHIFT                 (2U)
#define USB_ENDPTCTRL0_RXT(x)                    (((uint32_t)(((uint32_t)(x)) << USB_ENDPTCTRL0_RXT_SHIFT)) & USB_ENDPTCTRL0_RXT_MASK)
#define USB_ENDPTCTRL0_RXE_MASK                  (0x80U)
#define USB_ENDPTCTRL0_RXE_SHIFT                 (7U)
#define USB_ENDPTCTRL0_TXS_MASK                  (0x10000U)
#define USB_ENDPTCTRL0_TXS_SHIFT                 (16U)
#define USB_ENDPTCTRL0_TXT_MASK                  (0xC0000U)
#define USB_ENDPTCTRL0_TXT_SHIFT                 (18U)
#define USB_ENDPTCTRL0_TXT(x)                    (((uint32_t)(((uint32_t)(x)) << USB_ENDPTCTRL0_TXT_SHIFT)) & USB_ENDPTCTRL0_TXT_MASK)
#define USB_ENDPTCTRL0_TXE_MASK                  (0x800000U)
#define USB_ENDPTCTRL0_TXE_SHIFT                 (23U)

/*! @name ENDPTCTRL - Endpoint Control 1..Endpoint Control 7 */
#define USB_ENDPTCTRL_RXS_MASK                   (0x1U)
#define USB_ENDPTCTRL_RXS_SHIFT                  (0U)
#define USB_ENDPTCTRL_RXD_MASK                   (0x2U)
#define USB_ENDPTCTRL_RXD_SHIFT                  (1U)
#define USB_ENDPTCTRL_RXT_MASK                   (0xCU)
#define USB_ENDPTCTRL_RXT_SHIFT                  (2U)
#define USB_ENDPTCTRL_RXT(x)                     (((uint32_t)(((uint32_t)(x)) << USB_ENDPTCTRL_RXT_SHIFT)) & USB_ENDPTCTRL_RXT_MASK)
#define USB_ENDPTCTRL_RXI_MASK                   (0x20U)
#define USB_ENDPTCTRL_RXI_SHIFT                  (5U)
#define USB_ENDPTCTRL_RXR_MASK                   (0x40U)
#define USB_ENDPTCTRL_RXR_SHIFT                  (6U)
#define USB_ENDPTCTRL_RXE_MASK                   (0x80U)
#define USB_ENDPTCTRL_RXE_SHIFT                  (7U)
#define USB_ENDPTCTRL_TXS_MASK                   (0x10000U)
#define USB_ENDPTCTRL_TXS_SHIFT                  (16U)
#define USB_ENDPTCTRL_TXD_MASK                   (0x20000U)
#define USB_ENDPTCTRL_TXD_SHIFT                  (17U)
#define USB_ENDPTCTRL_TXT_MASK                   (0xC0000U)
#define USB_ENDPTCTRL_TXT_SHIFT                  (18U)
#define USB_ENDPTCTRL_TXT(x)                     (((uint32_t)(((uint32_t)(x)) << USB_ENDPTCTRL_TXT_SHIFT)) & USB_ENDPTCTRL_TXT_MASK)
#define USB_ENDPTCTRL_TXI_MASK                   (0x200000U)
#define USB_ENDPTCTRL_TXI_SHIFT                  (21U)
#define USB_ENDPTCTRL_TXR_MASK                   (0x400000U)
#define USB_ENDPTCTRL_TXR_SHIFT                  (22U)
#define USB_ENDPTCTRL_TXE_MASK                   (0x800000U)
#define USB_ENDPTCTRL_TXE_SHIFT                  (23U)

/* The count of USB_ENDPTCTRL */
#define USB_ENDPTCTRL_COUNT                      (7U)


/*!
 * @}
 */ /* end of group USB_Register_Masks */


/* USB - Peripheral instance base addresses */
/** Peripheral USB1 base pointer */
#define USB1_BASE_PTR                            ((USB_MemMapPtr)0x402E0000u)
/** Peripheral USB2 base pointer */
#define USB2_BASE_PTR                            ((USB_MemMapPtr)0x402E0200u)
/** Array initializer of USB peripheral base pointers */
#define USB_BASE_PTRS                            { USB1_BASE_PTR, USB2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- USB - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USB_Register_Accessor_Macros USB - Register accessor macros
 * @{
 */


/* USB - Register instance definitions */
/* USB1 */
#define USB_UOG1_ID                              USB_ID_REG(USB1_BASE_PTR)
#define USB_UOG1_HWGENERAL                       USB_HWGENERAL_REG(USB1_BASE_PTR)
#define USB_UOG1_HWHOST                          USB_HWHOST_REG(USB1_BASE_PTR)
#define USB_UOG1_HWDEVICE                        USB_HWDEVICE_REG(USB1_BASE_PTR)
#define USB_UOG1_HWTXBUF                         USB_HWTXBUF_REG(USB1_BASE_PTR)
#define USB_UOG1_HWRXBUF                         USB_HWRXBUF_REG(USB1_BASE_PTR)
#define USB_UOG1_GPTIMER0LD                      USB_GPTIMER0LD_REG(USB1_BASE_PTR)
#define USB_UOG1_GPTIMER0CTRL                    USB_GPTIMER0CTRL_REG(USB1_BASE_PTR)
#define USB_UOG1_GPTIMER1LD                      USB_GPTIMER1LD_REG(USB1_BASE_PTR)
#define USB_UOG1_GPTIMER1CTRL                    USB_GPTIMER1CTRL_REG(USB1_BASE_PTR)
#define USB_UOG1_SBUSCFG                         USB_SBUSCFG_REG(USB1_BASE_PTR)
#define USB_UOG1_CAPLENGTH                       USB_CAPLENGTH_REG(USB1_BASE_PTR)
#define USB_UOG1_HCIVERSION                      USB_HCIVERSION_REG(USB1_BASE_PTR)
#define USB_UOG1_HCSPARAMS                       USB_HCSPARAMS_REG(USB1_BASE_PTR)
#define USB_UOG1_HCCPARAMS                       USB_HCCPARAMS_REG(USB1_BASE_PTR)
#define USB_UOG1_DCIVERSION                      USB_DCIVERSION_REG(USB1_BASE_PTR)
#define USB_UOG1_DCCPARAMS                       USB_DCCPARAMS_REG(USB1_BASE_PTR)
#define USB_UOG1_USBCMD                          USB_USBCMD_REG(USB1_BASE_PTR)
#define USB_UOG1_USBSTS                          USB_USBSTS_REG(USB1_BASE_PTR)
#define USB_UOG1_USBINTR                         USB_USBINTR_REG(USB1_BASE_PTR)
#define USB_UOG1_FRINDEX                         USB_FRINDEX_REG(USB1_BASE_PTR)
#define USB_UOG1_DEVICEADDR                      USB_DEVICEADDR_REG(USB1_BASE_PTR)
#define USB_UOG1_PERIODICLISTBASE                USB_PERIODICLISTBASE_REG(USB1_BASE_PTR)
#define USB_UOG1_ASYNCLISTADDR                   USB_ASYNCLISTADDR_REG(USB1_BASE_PTR)
#define USB_UOG1_ENDPTLISTADDR                   USB_ENDPTLISTADDR_REG(USB1_BASE_PTR)
#define USB_UOG1_BURSTSIZE                       USB_BURSTSIZE_REG(USB1_BASE_PTR)
#define USB_UOG1_TXFILLTUNING                    USB_TXFILLTUNING_REG(USB1_BASE_PTR)
#define USB_UOG1_ENDPTNAK                        USB_ENDPTNAK_REG(USB1_BASE_PTR)
#define USB_UOG1_ENDPTNAKEN                      USB_ENDPTNAKEN_REG(USB1_BASE_PTR)
#define USB_UOG1_CONFIGFLAG                      USB_CONFIGFLAG_REG(USB1_BASE_PTR)
#define USB_UOG1_PORTSC1                         USB_PORTSC1_REG(USB1_BASE_PTR)
#define USB_UOG1_OTGSC                           USB_OTGSC_REG(USB1_BASE_PTR)
#define USB_UOG1_USBMODE                         USB_USBMODE_REG(USB1_BASE_PTR)
#define USB_UOG1_ENDPTSETUPSTAT                  USB_ENDPTSETUPSTAT_REG(USB1_BASE_PTR)
#define USB_UOG1_ENDPTPRIME                      USB_ENDPTPRIME_REG(USB1_BASE_PTR)
#define USB_UOG1_ENDPTFLUSH                      USB_ENDPTFLUSH_REG(USB1_BASE_PTR)
#define USB_UOG1_ENDPTSTAT                       USB_ENDPTSTAT_REG(USB1_BASE_PTR)
#define USB_UOG1_ENDPTCOMPLETE                   USB_ENDPTCOMPLETE_REG(USB1_BASE_PTR)
#define USB_UOG1_ENDPTCTRL0                      USB_ENDPTCTRL0_REG(USB1_BASE_PTR)
#define USB_UOG1_ENDPTCTRL1                      USB_ENDPTCTRL_REG(USB1_BASE_PTR,0)
#define USB_UOG1_ENDPTCTRL2                      USB_ENDPTCTRL_REG(USB1_BASE_PTR,1)
#define USB_UOG1_ENDPTCTRL3                      USB_ENDPTCTRL_REG(USB1_BASE_PTR,2)
#define USB_UOG1_ENDPTCTRL4                      USB_ENDPTCTRL_REG(USB1_BASE_PTR,3)
#define USB_UOG1_ENDPTCTRL5                      USB_ENDPTCTRL_REG(USB1_BASE_PTR,4)
#define USB_UOG1_ENDPTCTRL6                      USB_ENDPTCTRL_REG(USB1_BASE_PTR,5)
#define USB_UOG1_ENDPTCTRL7                      USB_ENDPTCTRL_REG(USB1_BASE_PTR,6)
/* USB2 */
#define USB_UOG2_ID                              USB_ID_REG(USB2_BASE_PTR)
#define USB_UOG2_HWGENERAL                       USB_HWGENERAL_REG(USB2_BASE_PTR)
#define USB_UOG2_HWHOST                          USB_HWHOST_REG(USB2_BASE_PTR)
#define USB_UOG2_HWDEVICE                        USB_HWDEVICE_REG(USB2_BASE_PTR)
#define USB_UOG2_HWTXBUF                         USB_HWTXBUF_REG(USB2_BASE_PTR)
#define USB_UOG2_HWRXBUF                         USB_HWRXBUF_REG(USB2_BASE_PTR)
#define USB_UOG2_GPTIMER0LD                      USB_GPTIMER0LD_REG(USB2_BASE_PTR)
#define USB_UOG2_GPTIMER0CTRL                    USB_GPTIMER0CTRL_REG(USB2_BASE_PTR)
#define USB_UOG2_GPTIMER1LD                      USB_GPTIMER1LD_REG(USB2_BASE_PTR)
#define USB_UOG2_GPTIMER1CTRL                    USB_GPTIMER1CTRL_REG(USB2_BASE_PTR)
#define USB_UOG2_SBUSCFG                         USB_SBUSCFG_REG(USB2_BASE_PTR)
#define USB_UOG2_CAPLENGTH                       USB_CAPLENGTH_REG(USB2_BASE_PTR)
#define USB_UOG2_HCIVERSION                      USB_HCIVERSION_REG(USB2_BASE_PTR)
#define USB_UOG2_HCSPARAMS                       USB_HCSPARAMS_REG(USB2_BASE_PTR)
#define USB_UOG2_HCCPARAMS                       USB_HCCPARAMS_REG(USB2_BASE_PTR)
#define USB_UOG2_DCIVERSION                      USB_DCIVERSION_REG(USB2_BASE_PTR)
#define USB_UOG2_DCCPARAMS                       USB_DCCPARAMS_REG(USB2_BASE_PTR)
#define USB_UOG2_USBCMD                          USB_USBCMD_REG(USB2_BASE_PTR)
#define USB_UOG2_USBSTS                          USB_USBSTS_REG(USB2_BASE_PTR)
#define USB_UOG2_USBINTR                         USB_USBINTR_REG(USB2_BASE_PTR)
#define USB_UOG2_FRINDEX                         USB_FRINDEX_REG(USB2_BASE_PTR)
#define USB_UOG2_DEVICEADDR                      USB_DEVICEADDR_REG(USB2_BASE_PTR)
#define USB_UOG2_PERIODICLISTBASE                USB_PERIODICLISTBASE_REG(USB2_BASE_PTR)
#define USB_UOG2_ASYNCLISTADDR                   USB_ASYNCLISTADDR_REG(USB2_BASE_PTR)
#define USB_UOG2_ENDPTLISTADDR                   USB_ENDPTLISTADDR_REG(USB2_BASE_PTR)
#define USB_UOG2_BURSTSIZE                       USB_BURSTSIZE_REG(USB2_BASE_PTR)
#define USB_UOG2_TXFILLTUNING                    USB_TXFILLTUNING_REG(USB2_BASE_PTR)
#define USB_UOG2_ENDPTNAK                        USB_ENDPTNAK_REG(USB2_BASE_PTR)
#define USB_UOG2_ENDPTNAKEN                      USB_ENDPTNAKEN_REG(USB2_BASE_PTR)
#define USB_UOG2_CONFIGFLAG                      USB_CONFIGFLAG_REG(USB2_BASE_PTR)
#define USB_UOG2_PORTSC1                         USB_PORTSC1_REG(USB2_BASE_PTR)
#define USB_UOG2_OTGSC                           USB_OTGSC_REG(USB2_BASE_PTR)
#define USB_UOG2_USBMODE                         USB_USBMODE_REG(USB2_BASE_PTR)
#define USB_UOG2_ENDPTSETUPSTAT                  USB_ENDPTSETUPSTAT_REG(USB2_BASE_PTR)
#define USB_UOG2_ENDPTPRIME                      USB_ENDPTPRIME_REG(USB2_BASE_PTR)
#define USB_UOG2_ENDPTFLUSH                      USB_ENDPTFLUSH_REG(USB2_BASE_PTR)
#define USB_UOG2_ENDPTSTAT                       USB_ENDPTSTAT_REG(USB2_BASE_PTR)
#define USB_UOG2_ENDPTCOMPLETE                   USB_ENDPTCOMPLETE_REG(USB2_BASE_PTR)
#define USB_UOG2_ENDPTCTRL0                      USB_ENDPTCTRL0_REG(USB2_BASE_PTR)
#define USB_UOG2_ENDPTCTRL1                      USB_ENDPTCTRL_REG(USB2_BASE_PTR,0)
#define USB_UOG2_ENDPTCTRL2                      USB_ENDPTCTRL_REG(USB2_BASE_PTR,1)
#define USB_UOG2_ENDPTCTRL3                      USB_ENDPTCTRL_REG(USB2_BASE_PTR,2)
#define USB_UOG2_ENDPTCTRL4                      USB_ENDPTCTRL_REG(USB2_BASE_PTR,3)
#define USB_UOG2_ENDPTCTRL5                      USB_ENDPTCTRL_REG(USB2_BASE_PTR,4)
#define USB_UOG2_ENDPTCTRL6                      USB_ENDPTCTRL_REG(USB2_BASE_PTR,5)
#define USB_UOG2_ENDPTCTRL7                      USB_ENDPTCTRL_REG(USB2_BASE_PTR,6)

/* USB - Register array accessors */
#define USB1_ENDPTCTRL(index)                    USB_ENDPTCTRL_REG(USB1_BASE_PTR,index)
#define USB2_ENDPTCTRL(index)                    USB_ENDPTCTRL_REG(USB2_BASE_PTR,index)

/*!
 * @}
 */ /* end of group USB_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group USB_Peripheral */


/* ----------------------------------------------------------------------------
   -- USBNC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBNC_Peripheral USBNC
 * @{
 */

/** USBNC - Peripheral register structure */
typedef struct USBNC_MemMap {
  uint8_t RESERVED_0[2048];
  uint32_t USB_OTGn_CTRL;                          /**< USB OTG1 Control Register..USB OTG2 Control Register, offset: 0x800 */
  uint8_t RESERVED_1[20];
  uint32_t USB_OTGn_PHY_CTRL_0;                    /**< OTG1 UTMI PHY Control 0 Register..OTG2 UTMI PHY Control 0 Register, offset: 0x818 */
} volatile *USBNC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- USBNC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBNC_Register_Accessor_Macros USBNC - Register accessor macros
 * @{
 */


/* USBNC - Register accessors */
#define USBNC_USB_OTGn_CTRL_REG(base)            ((base)->USB_OTGn_CTRL)
#define USBNC_USB_OTGn_PHY_CTRL_0_REG(base)      ((base)->USB_OTGn_PHY_CTRL_0)

/*!
 * @}
 */ /* end of group USBNC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- USBNC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBNC_Register_Masks USBNC Register Masks
 * @{
 */

/*! @name USB_OTGn_CTRL - USB OTG1 Control Register..USB OTG2 Control Register */
#define USBNC_USB_OTGn_CTRL_OVER_CUR_DIS_MASK    (0x80U)
#define USBNC_USB_OTGn_CTRL_OVER_CUR_DIS_SHIFT   (7U)
#define USBNC_USB_OTGn_CTRL_OVER_CUR_POL_MASK    (0x100U)
#define USBNC_USB_OTGn_CTRL_OVER_CUR_POL_SHIFT   (8U)
#define USBNC_USB_OTGn_CTRL_PWR_POL_MASK         (0x200U)
#define USBNC_USB_OTGn_CTRL_PWR_POL_SHIFT        (9U)
#define USBNC_USB_OTGn_CTRL_WIE_MASK             (0x400U)
#define USBNC_USB_OTGn_CTRL_WIE_SHIFT            (10U)
#define USBNC_USB_OTGn_CTRL_WKUP_SW_EN_MASK      (0x4000U)
#define USBNC_USB_OTGn_CTRL_WKUP_SW_EN_SHIFT     (14U)
#define USBNC_USB_OTGn_CTRL_WKUP_SW_MASK         (0x8000U)
#define USBNC_USB_OTGn_CTRL_WKUP_SW_SHIFT        (15U)
#define USBNC_USB_OTGn_CTRL_WKUP_ID_EN_MASK      (0x10000U)
#define USBNC_USB_OTGn_CTRL_WKUP_ID_EN_SHIFT     (16U)
#define USBNC_USB_OTGn_CTRL_WKUP_VBUS_EN_MASK    (0x20000U)
#define USBNC_USB_OTGn_CTRL_WKUP_VBUS_EN_SHIFT   (17U)
#define USBNC_USB_OTGn_CTRL_WIR_MASK             (0x80000000U)
#define USBNC_USB_OTGn_CTRL_WIR_SHIFT            (31U)

/*! @name USB_OTGn_PHY_CTRL_0 - OTG1 UTMI PHY Control 0 Register..OTG2 UTMI PHY Control 0 Register */
#define USBNC_USB_OTGn_PHY_CTRL_0_UTMI_CLK_VLD_MASK (0x80000000U)
#define USBNC_USB_OTGn_PHY_CTRL_0_UTMI_CLK_VLD_SHIFT (31U)


/*!
 * @}
 */ /* end of group USBNC_Register_Masks */


/* USBNC - Peripheral instance base addresses */
/** Peripheral USBNC1 base pointer */
#define USBNC1_BASE_PTR                          ((USBNC_MemMapPtr)0x402E0000u)
/** Peripheral USBNC2 base pointer */
#define USBNC2_BASE_PTR                          ((USBNC_MemMapPtr)0x402E0004u)
/** Array initializer of USBNC peripheral base pointers */
#define USBNC_BASE_PTRS                          { USBNC1_BASE_PTR, USBNC2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- USBNC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBNC_Register_Accessor_Macros USBNC - Register accessor macros
 * @{
 */


/* USBNC - Register instance definitions */
/* USBNC1 */
#define USBNC_USB_OTG1_CTRL                      USBNC_USB_OTGn_CTRL_REG(USBNC1_BASE_PTR)
#define USBNC_USB_OTG1_PHY_CTRL_0                USBNC_USB_OTGn_PHY_CTRL_0_REG(USBNC1_BASE_PTR)
/* USBNC2 */
#define USBNC_USB_OTG2_CTRL                      USBNC_USB_OTGn_CTRL_REG(USBNC2_BASE_PTR)
#define USBNC_USB_OTG2_PHY_CTRL_0                USBNC_USB_OTGn_PHY_CTRL_0_REG(USBNC2_BASE_PTR)

/*!
 * @}
 */ /* end of group USBNC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group USBNC_Peripheral */


/* ----------------------------------------------------------------------------
   -- USBPHY
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBPHY_Peripheral USBPHY
 * @{
 */

/** USBPHY - Peripheral register structure */
typedef struct USBPHY_MemMap {
  uint32_t PWD;                                    /**< USB PHY Power-Down Register, offset: 0x0 */
  uint32_t PWD_SET;                                /**< USB PHY Power-Down Register, offset: 0x4 */
  uint32_t PWD_CLR;                                /**< USB PHY Power-Down Register, offset: 0x8 */
  uint32_t PWD_TOG;                                /**< USB PHY Power-Down Register, offset: 0xC */
  uint32_t TX;                                     /**< USB PHY Transmitter Control Register, offset: 0x10 */
  uint32_t TX_SET;                                 /**< USB PHY Transmitter Control Register, offset: 0x14 */
  uint32_t TX_CLR;                                 /**< USB PHY Transmitter Control Register, offset: 0x18 */
  uint32_t TX_TOG;                                 /**< USB PHY Transmitter Control Register, offset: 0x1C */
  uint32_t RX;                                     /**< USB PHY Receiver Control Register, offset: 0x20 */
  uint32_t RX_SET;                                 /**< USB PHY Receiver Control Register, offset: 0x24 */
  uint32_t RX_CLR;                                 /**< USB PHY Receiver Control Register, offset: 0x28 */
  uint32_t RX_TOG;                                 /**< USB PHY Receiver Control Register, offset: 0x2C */
  uint32_t CTRL;                                   /**< USB PHY General Control Register, offset: 0x30 */
  uint32_t CTRL_SET;                               /**< USB PHY General Control Register, offset: 0x34 */
  uint32_t CTRL_CLR;                               /**< USB PHY General Control Register, offset: 0x38 */
  uint32_t CTRL_TOG;                               /**< USB PHY General Control Register, offset: 0x3C */
  uint32_t STATUS;                                 /**< USB PHY Status Register, offset: 0x40 */
  uint8_t RESERVED_0[12];
  uint32_t DEBUG;                                  /**< USB PHY Debug Register, offset: 0x50 */
  uint32_t DEBUG_SET;                              /**< USB PHY Debug Register, offset: 0x54 */
  uint32_t DEBUG_CLR;                              /**< USB PHY Debug Register, offset: 0x58 */
  uint32_t DEBUG_TOG;                              /**< USB PHY Debug Register, offset: 0x5C */
  uint32_t DEBUG0_STATUS;                          /**< UTMI Debug Status Register 0, offset: 0x60 */
  uint8_t RESERVED_1[12];
  uint32_t DEBUG1;                                 /**< UTMI Debug Status Register 1, offset: 0x70 */
  uint32_t DEBUG1_SET;                             /**< UTMI Debug Status Register 1, offset: 0x74 */
  uint32_t DEBUG1_CLR;                             /**< UTMI Debug Status Register 1, offset: 0x78 */
  uint32_t DEBUG1_TOG;                             /**< UTMI Debug Status Register 1, offset: 0x7C */
  uint32_t VERSION;                                /**< UTMI RTL Version, offset: 0x80 */
} volatile *USBPHY_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- USBPHY - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBPHY_Register_Accessor_Macros USBPHY - Register accessor macros
 * @{
 */


/* USBPHY - Register accessors */
#define USBPHY_PWD_REG(base)                     ((base)->PWD)
#define USBPHY_PWD_SET_REG(base)                 ((base)->PWD_SET)
#define USBPHY_PWD_CLR_REG(base)                 ((base)->PWD_CLR)
#define USBPHY_PWD_TOG_REG(base)                 ((base)->PWD_TOG)
#define USBPHY_TX_REG(base)                      ((base)->TX)
#define USBPHY_TX_SET_REG(base)                  ((base)->TX_SET)
#define USBPHY_TX_CLR_REG(base)                  ((base)->TX_CLR)
#define USBPHY_TX_TOG_REG(base)                  ((base)->TX_TOG)
#define USBPHY_RX_REG(base)                      ((base)->RX)
#define USBPHY_RX_SET_REG(base)                  ((base)->RX_SET)
#define USBPHY_RX_CLR_REG(base)                  ((base)->RX_CLR)
#define USBPHY_RX_TOG_REG(base)                  ((base)->RX_TOG)
#define USBPHY_CTRL_REG(base)                    ((base)->CTRL)
#define USBPHY_CTRL_SET_REG(base)                ((base)->CTRL_SET)
#define USBPHY_CTRL_CLR_REG(base)                ((base)->CTRL_CLR)
#define USBPHY_CTRL_TOG_REG(base)                ((base)->CTRL_TOG)
#define USBPHY_STATUS_REG(base)                  ((base)->STATUS)
#define USBPHY_DEBUG_REG(base)                   ((base)->DEBUG)
#define USBPHY_DEBUG_SET_REG(base)               ((base)->DEBUG_SET)
#define USBPHY_DEBUG_CLR_REG(base)               ((base)->DEBUG_CLR)
#define USBPHY_DEBUG_TOG_REG(base)               ((base)->DEBUG_TOG)
#define USBPHY_DEBUG0_STATUS_REG(base)           ((base)->DEBUG0_STATUS)
#define USBPHY_DEBUG1_REG(base)                  ((base)->DEBUG1)
#define USBPHY_DEBUG1_SET_REG(base)              ((base)->DEBUG1_SET)
#define USBPHY_DEBUG1_CLR_REG(base)              ((base)->DEBUG1_CLR)
#define USBPHY_DEBUG1_TOG_REG(base)              ((base)->DEBUG1_TOG)
#define USBPHY_VERSION_REG(base)                 ((base)->VERSION)

/*!
 * @}
 */ /* end of group USBPHY_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- USBPHY Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBPHY_Register_Masks USBPHY Register Masks
 * @{
 */

/*! @name PWD - USB PHY Power-Down Register */
#define USBPHY_PWD_RSVD0_MASK                    (0x3FFU)
#define USBPHY_PWD_RSVD0_SHIFT                   (0U)
#define USBPHY_PWD_RSVD0(x)                      (((uint32_t)(((uint32_t)(x)) << USBPHY_PWD_RSVD0_SHIFT)) & USBPHY_PWD_RSVD0_MASK)
#define USBPHY_PWD_TXPWDFS_MASK                  (0x400U)
#define USBPHY_PWD_TXPWDFS_SHIFT                 (10U)
#define USBPHY_PWD_TXPWDIBIAS_MASK               (0x800U)
#define USBPHY_PWD_TXPWDIBIAS_SHIFT              (11U)
#define USBPHY_PWD_TXPWDV2I_MASK                 (0x1000U)
#define USBPHY_PWD_TXPWDV2I_SHIFT                (12U)
#define USBPHY_PWD_RSVD1_MASK                    (0x1E000U)
#define USBPHY_PWD_RSVD1_SHIFT                   (13U)
#define USBPHY_PWD_RSVD1(x)                      (((uint32_t)(((uint32_t)(x)) << USBPHY_PWD_RSVD1_SHIFT)) & USBPHY_PWD_RSVD1_MASK)
#define USBPHY_PWD_RXPWDENV_MASK                 (0x20000U)
#define USBPHY_PWD_RXPWDENV_SHIFT                (17U)
#define USBPHY_PWD_RXPWD1PT1_MASK                (0x40000U)
#define USBPHY_PWD_RXPWD1PT1_SHIFT               (18U)
#define USBPHY_PWD_RXPWDDIFF_MASK                (0x80000U)
#define USBPHY_PWD_RXPWDDIFF_SHIFT               (19U)
#define USBPHY_PWD_RXPWDRX_MASK                  (0x100000U)
#define USBPHY_PWD_RXPWDRX_SHIFT                 (20U)
#define USBPHY_PWD_RSVD2_MASK                    (0xFFE00000U)
#define USBPHY_PWD_RSVD2_SHIFT                   (21U)
#define USBPHY_PWD_RSVD2(x)                      (((uint32_t)(((uint32_t)(x)) << USBPHY_PWD_RSVD2_SHIFT)) & USBPHY_PWD_RSVD2_MASK)

/*! @name PWD_SET - USB PHY Power-Down Register */
#define USBPHY_PWD_SET_RSVD0_MASK                (0x3FFU)
#define USBPHY_PWD_SET_RSVD0_SHIFT               (0U)
#define USBPHY_PWD_SET_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_PWD_SET_RSVD0_SHIFT)) & USBPHY_PWD_SET_RSVD0_MASK)
#define USBPHY_PWD_SET_TXPWDFS_MASK              (0x400U)
#define USBPHY_PWD_SET_TXPWDFS_SHIFT             (10U)
#define USBPHY_PWD_SET_TXPWDIBIAS_MASK           (0x800U)
#define USBPHY_PWD_SET_TXPWDIBIAS_SHIFT          (11U)
#define USBPHY_PWD_SET_TXPWDV2I_MASK             (0x1000U)
#define USBPHY_PWD_SET_TXPWDV2I_SHIFT            (12U)
#define USBPHY_PWD_SET_RSVD1_MASK                (0x1E000U)
#define USBPHY_PWD_SET_RSVD1_SHIFT               (13U)
#define USBPHY_PWD_SET_RSVD1(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_PWD_SET_RSVD1_SHIFT)) & USBPHY_PWD_SET_RSVD1_MASK)
#define USBPHY_PWD_SET_RXPWDENV_MASK             (0x20000U)
#define USBPHY_PWD_SET_RXPWDENV_SHIFT            (17U)
#define USBPHY_PWD_SET_RXPWD1PT1_MASK            (0x40000U)
#define USBPHY_PWD_SET_RXPWD1PT1_SHIFT           (18U)
#define USBPHY_PWD_SET_RXPWDDIFF_MASK            (0x80000U)
#define USBPHY_PWD_SET_RXPWDDIFF_SHIFT           (19U)
#define USBPHY_PWD_SET_RXPWDRX_MASK              (0x100000U)
#define USBPHY_PWD_SET_RXPWDRX_SHIFT             (20U)
#define USBPHY_PWD_SET_RSVD2_MASK                (0xFFE00000U)
#define USBPHY_PWD_SET_RSVD2_SHIFT               (21U)
#define USBPHY_PWD_SET_RSVD2(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_PWD_SET_RSVD2_SHIFT)) & USBPHY_PWD_SET_RSVD2_MASK)

/*! @name PWD_CLR - USB PHY Power-Down Register */
#define USBPHY_PWD_CLR_RSVD0_MASK                (0x3FFU)
#define USBPHY_PWD_CLR_RSVD0_SHIFT               (0U)
#define USBPHY_PWD_CLR_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_PWD_CLR_RSVD0_SHIFT)) & USBPHY_PWD_CLR_RSVD0_MASK)
#define USBPHY_PWD_CLR_TXPWDFS_MASK              (0x400U)
#define USBPHY_PWD_CLR_TXPWDFS_SHIFT             (10U)
#define USBPHY_PWD_CLR_TXPWDIBIAS_MASK           (0x800U)
#define USBPHY_PWD_CLR_TXPWDIBIAS_SHIFT          (11U)
#define USBPHY_PWD_CLR_TXPWDV2I_MASK             (0x1000U)
#define USBPHY_PWD_CLR_TXPWDV2I_SHIFT            (12U)
#define USBPHY_PWD_CLR_RSVD1_MASK                (0x1E000U)
#define USBPHY_PWD_CLR_RSVD1_SHIFT               (13U)
#define USBPHY_PWD_CLR_RSVD1(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_PWD_CLR_RSVD1_SHIFT)) & USBPHY_PWD_CLR_RSVD1_MASK)
#define USBPHY_PWD_CLR_RXPWDENV_MASK             (0x20000U)
#define USBPHY_PWD_CLR_RXPWDENV_SHIFT            (17U)
#define USBPHY_PWD_CLR_RXPWD1PT1_MASK            (0x40000U)
#define USBPHY_PWD_CLR_RXPWD1PT1_SHIFT           (18U)
#define USBPHY_PWD_CLR_RXPWDDIFF_MASK            (0x80000U)
#define USBPHY_PWD_CLR_RXPWDDIFF_SHIFT           (19U)
#define USBPHY_PWD_CLR_RXPWDRX_MASK              (0x100000U)
#define USBPHY_PWD_CLR_RXPWDRX_SHIFT             (20U)
#define USBPHY_PWD_CLR_RSVD2_MASK                (0xFFE00000U)
#define USBPHY_PWD_CLR_RSVD2_SHIFT               (21U)
#define USBPHY_PWD_CLR_RSVD2(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_PWD_CLR_RSVD2_SHIFT)) & USBPHY_PWD_CLR_RSVD2_MASK)

/*! @name PWD_TOG - USB PHY Power-Down Register */
#define USBPHY_PWD_TOG_RSVD0_MASK                (0x3FFU)
#define USBPHY_PWD_TOG_RSVD0_SHIFT               (0U)
#define USBPHY_PWD_TOG_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_PWD_TOG_RSVD0_SHIFT)) & USBPHY_PWD_TOG_RSVD0_MASK)
#define USBPHY_PWD_TOG_TXPWDFS_MASK              (0x400U)
#define USBPHY_PWD_TOG_TXPWDFS_SHIFT             (10U)
#define USBPHY_PWD_TOG_TXPWDIBIAS_MASK           (0x800U)
#define USBPHY_PWD_TOG_TXPWDIBIAS_SHIFT          (11U)
#define USBPHY_PWD_TOG_TXPWDV2I_MASK             (0x1000U)
#define USBPHY_PWD_TOG_TXPWDV2I_SHIFT            (12U)
#define USBPHY_PWD_TOG_RSVD1_MASK                (0x1E000U)
#define USBPHY_PWD_TOG_RSVD1_SHIFT               (13U)
#define USBPHY_PWD_TOG_RSVD1(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_PWD_TOG_RSVD1_SHIFT)) & USBPHY_PWD_TOG_RSVD1_MASK)
#define USBPHY_PWD_TOG_RXPWDENV_MASK             (0x20000U)
#define USBPHY_PWD_TOG_RXPWDENV_SHIFT            (17U)
#define USBPHY_PWD_TOG_RXPWD1PT1_MASK            (0x40000U)
#define USBPHY_PWD_TOG_RXPWD1PT1_SHIFT           (18U)
#define USBPHY_PWD_TOG_RXPWDDIFF_MASK            (0x80000U)
#define USBPHY_PWD_TOG_RXPWDDIFF_SHIFT           (19U)
#define USBPHY_PWD_TOG_RXPWDRX_MASK              (0x100000U)
#define USBPHY_PWD_TOG_RXPWDRX_SHIFT             (20U)
#define USBPHY_PWD_TOG_RSVD2_MASK                (0xFFE00000U)
#define USBPHY_PWD_TOG_RSVD2_SHIFT               (21U)
#define USBPHY_PWD_TOG_RSVD2(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_PWD_TOG_RSVD2_SHIFT)) & USBPHY_PWD_TOG_RSVD2_MASK)

/*! @name TX - USB PHY Transmitter Control Register */
#define USBPHY_TX_D_CAL_MASK                     (0xFU)
#define USBPHY_TX_D_CAL_SHIFT                    (0U)
#define USBPHY_TX_D_CAL(x)                       (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_D_CAL_SHIFT)) & USBPHY_TX_D_CAL_MASK)
#define USBPHY_TX_RSVD0_MASK                     (0xF0U)
#define USBPHY_TX_RSVD0_SHIFT                    (4U)
#define USBPHY_TX_RSVD0(x)                       (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_RSVD0_SHIFT)) & USBPHY_TX_RSVD0_MASK)
#define USBPHY_TX_TXCAL45DN_MASK                 (0xF00U)
#define USBPHY_TX_TXCAL45DN_SHIFT                (8U)
#define USBPHY_TX_TXCAL45DN(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_TXCAL45DN_SHIFT)) & USBPHY_TX_TXCAL45DN_MASK)
#define USBPHY_TX_RSVD1_MASK                     (0xF000U)
#define USBPHY_TX_RSVD1_SHIFT                    (12U)
#define USBPHY_TX_RSVD1(x)                       (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_RSVD1_SHIFT)) & USBPHY_TX_RSVD1_MASK)
#define USBPHY_TX_TXCAL45DP_MASK                 (0xF0000U)
#define USBPHY_TX_TXCAL45DP_SHIFT                (16U)
#define USBPHY_TX_TXCAL45DP(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_TXCAL45DP_SHIFT)) & USBPHY_TX_TXCAL45DP_MASK)
#define USBPHY_TX_RSVD2_MASK                     (0x3F00000U)
#define USBPHY_TX_RSVD2_SHIFT                    (20U)
#define USBPHY_TX_RSVD2(x)                       (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_RSVD2_SHIFT)) & USBPHY_TX_RSVD2_MASK)
#define USBPHY_TX_USBPHY_TX_EDGECTRL_MASK        (0x1C000000U)
#define USBPHY_TX_USBPHY_TX_EDGECTRL_SHIFT       (26U)
#define USBPHY_TX_USBPHY_TX_EDGECTRL(x)          (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_USBPHY_TX_EDGECTRL_SHIFT)) & USBPHY_TX_USBPHY_TX_EDGECTRL_MASK)
#define USBPHY_TX_RSVD5_MASK                     (0xE0000000U)
#define USBPHY_TX_RSVD5_SHIFT                    (29U)
#define USBPHY_TX_RSVD5(x)                       (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_RSVD5_SHIFT)) & USBPHY_TX_RSVD5_MASK)

/*! @name TX_SET - USB PHY Transmitter Control Register */
#define USBPHY_TX_SET_D_CAL_MASK                 (0xFU)
#define USBPHY_TX_SET_D_CAL_SHIFT                (0U)
#define USBPHY_TX_SET_D_CAL(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_SET_D_CAL_SHIFT)) & USBPHY_TX_SET_D_CAL_MASK)
#define USBPHY_TX_SET_RSVD0_MASK                 (0xF0U)
#define USBPHY_TX_SET_RSVD0_SHIFT                (4U)
#define USBPHY_TX_SET_RSVD0(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_SET_RSVD0_SHIFT)) & USBPHY_TX_SET_RSVD0_MASK)
#define USBPHY_TX_SET_TXCAL45DN_MASK             (0xF00U)
#define USBPHY_TX_SET_TXCAL45DN_SHIFT            (8U)
#define USBPHY_TX_SET_TXCAL45DN(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_SET_TXCAL45DN_SHIFT)) & USBPHY_TX_SET_TXCAL45DN_MASK)
#define USBPHY_TX_SET_RSVD1_MASK                 (0xF000U)
#define USBPHY_TX_SET_RSVD1_SHIFT                (12U)
#define USBPHY_TX_SET_RSVD1(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_SET_RSVD1_SHIFT)) & USBPHY_TX_SET_RSVD1_MASK)
#define USBPHY_TX_SET_TXCAL45DP_MASK             (0xF0000U)
#define USBPHY_TX_SET_TXCAL45DP_SHIFT            (16U)
#define USBPHY_TX_SET_TXCAL45DP(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_SET_TXCAL45DP_SHIFT)) & USBPHY_TX_SET_TXCAL45DP_MASK)
#define USBPHY_TX_SET_RSVD2_MASK                 (0x3F00000U)
#define USBPHY_TX_SET_RSVD2_SHIFT                (20U)
#define USBPHY_TX_SET_RSVD2(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_SET_RSVD2_SHIFT)) & USBPHY_TX_SET_RSVD2_MASK)
#define USBPHY_TX_SET_USBPHY_TX_EDGECTRL_MASK    (0x1C000000U)
#define USBPHY_TX_SET_USBPHY_TX_EDGECTRL_SHIFT   (26U)
#define USBPHY_TX_SET_USBPHY_TX_EDGECTRL(x)      (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_SET_USBPHY_TX_EDGECTRL_SHIFT)) & USBPHY_TX_SET_USBPHY_TX_EDGECTRL_MASK)
#define USBPHY_TX_SET_RSVD5_MASK                 (0xE0000000U)
#define USBPHY_TX_SET_RSVD5_SHIFT                (29U)
#define USBPHY_TX_SET_RSVD5(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_SET_RSVD5_SHIFT)) & USBPHY_TX_SET_RSVD5_MASK)

/*! @name TX_CLR - USB PHY Transmitter Control Register */
#define USBPHY_TX_CLR_D_CAL_MASK                 (0xFU)
#define USBPHY_TX_CLR_D_CAL_SHIFT                (0U)
#define USBPHY_TX_CLR_D_CAL(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_CLR_D_CAL_SHIFT)) & USBPHY_TX_CLR_D_CAL_MASK)
#define USBPHY_TX_CLR_RSVD0_MASK                 (0xF0U)
#define USBPHY_TX_CLR_RSVD0_SHIFT                (4U)
#define USBPHY_TX_CLR_RSVD0(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_CLR_RSVD0_SHIFT)) & USBPHY_TX_CLR_RSVD0_MASK)
#define USBPHY_TX_CLR_TXCAL45DN_MASK             (0xF00U)
#define USBPHY_TX_CLR_TXCAL45DN_SHIFT            (8U)
#define USBPHY_TX_CLR_TXCAL45DN(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_CLR_TXCAL45DN_SHIFT)) & USBPHY_TX_CLR_TXCAL45DN_MASK)
#define USBPHY_TX_CLR_RSVD1_MASK                 (0xF000U)
#define USBPHY_TX_CLR_RSVD1_SHIFT                (12U)
#define USBPHY_TX_CLR_RSVD1(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_CLR_RSVD1_SHIFT)) & USBPHY_TX_CLR_RSVD1_MASK)
#define USBPHY_TX_CLR_TXCAL45DP_MASK             (0xF0000U)
#define USBPHY_TX_CLR_TXCAL45DP_SHIFT            (16U)
#define USBPHY_TX_CLR_TXCAL45DP(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_CLR_TXCAL45DP_SHIFT)) & USBPHY_TX_CLR_TXCAL45DP_MASK)
#define USBPHY_TX_CLR_RSVD2_MASK                 (0x3F00000U)
#define USBPHY_TX_CLR_RSVD2_SHIFT                (20U)
#define USBPHY_TX_CLR_RSVD2(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_CLR_RSVD2_SHIFT)) & USBPHY_TX_CLR_RSVD2_MASK)
#define USBPHY_TX_CLR_USBPHY_TX_EDGECTRL_MASK    (0x1C000000U)
#define USBPHY_TX_CLR_USBPHY_TX_EDGECTRL_SHIFT   (26U)
#define USBPHY_TX_CLR_USBPHY_TX_EDGECTRL(x)      (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_CLR_USBPHY_TX_EDGECTRL_SHIFT)) & USBPHY_TX_CLR_USBPHY_TX_EDGECTRL_MASK)
#define USBPHY_TX_CLR_RSVD5_MASK                 (0xE0000000U)
#define USBPHY_TX_CLR_RSVD5_SHIFT                (29U)
#define USBPHY_TX_CLR_RSVD5(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_CLR_RSVD5_SHIFT)) & USBPHY_TX_CLR_RSVD5_MASK)

/*! @name TX_TOG - USB PHY Transmitter Control Register */
#define USBPHY_TX_TOG_D_CAL_MASK                 (0xFU)
#define USBPHY_TX_TOG_D_CAL_SHIFT                (0U)
#define USBPHY_TX_TOG_D_CAL(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_TOG_D_CAL_SHIFT)) & USBPHY_TX_TOG_D_CAL_MASK)
#define USBPHY_TX_TOG_RSVD0_MASK                 (0xF0U)
#define USBPHY_TX_TOG_RSVD0_SHIFT                (4U)
#define USBPHY_TX_TOG_RSVD0(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_TOG_RSVD0_SHIFT)) & USBPHY_TX_TOG_RSVD0_MASK)
#define USBPHY_TX_TOG_TXCAL45DN_MASK             (0xF00U)
#define USBPHY_TX_TOG_TXCAL45DN_SHIFT            (8U)
#define USBPHY_TX_TOG_TXCAL45DN(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_TOG_TXCAL45DN_SHIFT)) & USBPHY_TX_TOG_TXCAL45DN_MASK)
#define USBPHY_TX_TOG_RSVD1_MASK                 (0xF000U)
#define USBPHY_TX_TOG_RSVD1_SHIFT                (12U)
#define USBPHY_TX_TOG_RSVD1(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_TOG_RSVD1_SHIFT)) & USBPHY_TX_TOG_RSVD1_MASK)
#define USBPHY_TX_TOG_TXCAL45DP_MASK             (0xF0000U)
#define USBPHY_TX_TOG_TXCAL45DP_SHIFT            (16U)
#define USBPHY_TX_TOG_TXCAL45DP(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_TOG_TXCAL45DP_SHIFT)) & USBPHY_TX_TOG_TXCAL45DP_MASK)
#define USBPHY_TX_TOG_RSVD2_MASK                 (0x3F00000U)
#define USBPHY_TX_TOG_RSVD2_SHIFT                (20U)
#define USBPHY_TX_TOG_RSVD2(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_TOG_RSVD2_SHIFT)) & USBPHY_TX_TOG_RSVD2_MASK)
#define USBPHY_TX_TOG_USBPHY_TX_EDGECTRL_MASK    (0x1C000000U)
#define USBPHY_TX_TOG_USBPHY_TX_EDGECTRL_SHIFT   (26U)
#define USBPHY_TX_TOG_USBPHY_TX_EDGECTRL(x)      (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_TOG_USBPHY_TX_EDGECTRL_SHIFT)) & USBPHY_TX_TOG_USBPHY_TX_EDGECTRL_MASK)
#define USBPHY_TX_TOG_RSVD5_MASK                 (0xE0000000U)
#define USBPHY_TX_TOG_RSVD5_SHIFT                (29U)
#define USBPHY_TX_TOG_RSVD5(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_TX_TOG_RSVD5_SHIFT)) & USBPHY_TX_TOG_RSVD5_MASK)

/*! @name RX - USB PHY Receiver Control Register */
#define USBPHY_RX_ENVADJ_MASK                    (0x7U)
#define USBPHY_RX_ENVADJ_SHIFT                   (0U)
#define USBPHY_RX_ENVADJ(x)                      (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_ENVADJ_SHIFT)) & USBPHY_RX_ENVADJ_MASK)
#define USBPHY_RX_RSVD0_MASK                     (0x8U)
#define USBPHY_RX_RSVD0_SHIFT                    (3U)
#define USBPHY_RX_DISCONADJ_MASK                 (0x70U)
#define USBPHY_RX_DISCONADJ_SHIFT                (4U)
#define USBPHY_RX_DISCONADJ(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_DISCONADJ_SHIFT)) & USBPHY_RX_DISCONADJ_MASK)
#define USBPHY_RX_RSVD1_MASK                     (0x3FFF80U)
#define USBPHY_RX_RSVD1_SHIFT                    (7U)
#define USBPHY_RX_RSVD1(x)                       (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_RSVD1_SHIFT)) & USBPHY_RX_RSVD1_MASK)
#define USBPHY_RX_RXDBYPASS_MASK                 (0x400000U)
#define USBPHY_RX_RXDBYPASS_SHIFT                (22U)
#define USBPHY_RX_RSVD2_MASK                     (0xFF800000U)
#define USBPHY_RX_RSVD2_SHIFT                    (23U)
#define USBPHY_RX_RSVD2(x)                       (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_RSVD2_SHIFT)) & USBPHY_RX_RSVD2_MASK)

/*! @name RX_SET - USB PHY Receiver Control Register */
#define USBPHY_RX_SET_ENVADJ_MASK                (0x7U)
#define USBPHY_RX_SET_ENVADJ_SHIFT               (0U)
#define USBPHY_RX_SET_ENVADJ(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_SET_ENVADJ_SHIFT)) & USBPHY_RX_SET_ENVADJ_MASK)
#define USBPHY_RX_SET_RSVD0_MASK                 (0x8U)
#define USBPHY_RX_SET_RSVD0_SHIFT                (3U)
#define USBPHY_RX_SET_DISCONADJ_MASK             (0x70U)
#define USBPHY_RX_SET_DISCONADJ_SHIFT            (4U)
#define USBPHY_RX_SET_DISCONADJ(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_SET_DISCONADJ_SHIFT)) & USBPHY_RX_SET_DISCONADJ_MASK)
#define USBPHY_RX_SET_RSVD1_MASK                 (0x3FFF80U)
#define USBPHY_RX_SET_RSVD1_SHIFT                (7U)
#define USBPHY_RX_SET_RSVD1(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_SET_RSVD1_SHIFT)) & USBPHY_RX_SET_RSVD1_MASK)
#define USBPHY_RX_SET_RXDBYPASS_MASK             (0x400000U)
#define USBPHY_RX_SET_RXDBYPASS_SHIFT            (22U)
#define USBPHY_RX_SET_RSVD2_MASK                 (0xFF800000U)
#define USBPHY_RX_SET_RSVD2_SHIFT                (23U)
#define USBPHY_RX_SET_RSVD2(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_SET_RSVD2_SHIFT)) & USBPHY_RX_SET_RSVD2_MASK)

/*! @name RX_CLR - USB PHY Receiver Control Register */
#define USBPHY_RX_CLR_ENVADJ_MASK                (0x7U)
#define USBPHY_RX_CLR_ENVADJ_SHIFT               (0U)
#define USBPHY_RX_CLR_ENVADJ(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_CLR_ENVADJ_SHIFT)) & USBPHY_RX_CLR_ENVADJ_MASK)
#define USBPHY_RX_CLR_RSVD0_MASK                 (0x8U)
#define USBPHY_RX_CLR_RSVD0_SHIFT                (3U)
#define USBPHY_RX_CLR_DISCONADJ_MASK             (0x70U)
#define USBPHY_RX_CLR_DISCONADJ_SHIFT            (4U)
#define USBPHY_RX_CLR_DISCONADJ(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_CLR_DISCONADJ_SHIFT)) & USBPHY_RX_CLR_DISCONADJ_MASK)
#define USBPHY_RX_CLR_RSVD1_MASK                 (0x3FFF80U)
#define USBPHY_RX_CLR_RSVD1_SHIFT                (7U)
#define USBPHY_RX_CLR_RSVD1(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_CLR_RSVD1_SHIFT)) & USBPHY_RX_CLR_RSVD1_MASK)
#define USBPHY_RX_CLR_RXDBYPASS_MASK             (0x400000U)
#define USBPHY_RX_CLR_RXDBYPASS_SHIFT            (22U)
#define USBPHY_RX_CLR_RSVD2_MASK                 (0xFF800000U)
#define USBPHY_RX_CLR_RSVD2_SHIFT                (23U)
#define USBPHY_RX_CLR_RSVD2(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_CLR_RSVD2_SHIFT)) & USBPHY_RX_CLR_RSVD2_MASK)

/*! @name RX_TOG - USB PHY Receiver Control Register */
#define USBPHY_RX_TOG_ENVADJ_MASK                (0x7U)
#define USBPHY_RX_TOG_ENVADJ_SHIFT               (0U)
#define USBPHY_RX_TOG_ENVADJ(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_TOG_ENVADJ_SHIFT)) & USBPHY_RX_TOG_ENVADJ_MASK)
#define USBPHY_RX_TOG_RSVD0_MASK                 (0x8U)
#define USBPHY_RX_TOG_RSVD0_SHIFT                (3U)
#define USBPHY_RX_TOG_DISCONADJ_MASK             (0x70U)
#define USBPHY_RX_TOG_DISCONADJ_SHIFT            (4U)
#define USBPHY_RX_TOG_DISCONADJ(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_TOG_DISCONADJ_SHIFT)) & USBPHY_RX_TOG_DISCONADJ_MASK)
#define USBPHY_RX_TOG_RSVD1_MASK                 (0x3FFF80U)
#define USBPHY_RX_TOG_RSVD1_SHIFT                (7U)
#define USBPHY_RX_TOG_RSVD1(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_TOG_RSVD1_SHIFT)) & USBPHY_RX_TOG_RSVD1_MASK)
#define USBPHY_RX_TOG_RXDBYPASS_MASK             (0x400000U)
#define USBPHY_RX_TOG_RXDBYPASS_SHIFT            (22U)
#define USBPHY_RX_TOG_RSVD2_MASK                 (0xFF800000U)
#define USBPHY_RX_TOG_RSVD2_SHIFT                (23U)
#define USBPHY_RX_TOG_RSVD2(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_RX_TOG_RSVD2_SHIFT)) & USBPHY_RX_TOG_RSVD2_MASK)

/*! @name CTRL - USB PHY General Control Register */
#define USBPHY_CTRL_ENOTG_ID_CHG_IRQ_MASK        (0x1U)
#define USBPHY_CTRL_ENOTG_ID_CHG_IRQ_SHIFT       (0U)
#define USBPHY_CTRL_ENHOSTDISCONDETECT_MASK      (0x2U)
#define USBPHY_CTRL_ENHOSTDISCONDETECT_SHIFT     (1U)
#define USBPHY_CTRL_ENIRQHOSTDISCON_MASK         (0x4U)
#define USBPHY_CTRL_ENIRQHOSTDISCON_SHIFT        (2U)
#define USBPHY_CTRL_HOSTDISCONDETECT_IRQ_MASK    (0x8U)
#define USBPHY_CTRL_HOSTDISCONDETECT_IRQ_SHIFT   (3U)
#define USBPHY_CTRL_ENDEVPLUGINDETECT_MASK       (0x10U)
#define USBPHY_CTRL_ENDEVPLUGINDETECT_SHIFT      (4U)
#define USBPHY_CTRL_DEVPLUGIN_POLARITY_MASK      (0x20U)
#define USBPHY_CTRL_DEVPLUGIN_POLARITY_SHIFT     (5U)
#define USBPHY_CTRL_OTG_ID_CHG_IRQ_MASK          (0x40U)
#define USBPHY_CTRL_OTG_ID_CHG_IRQ_SHIFT         (6U)
#define USBPHY_CTRL_ENOTGIDDETECT_MASK           (0x80U)
#define USBPHY_CTRL_ENOTGIDDETECT_SHIFT          (7U)
#define USBPHY_CTRL_RESUMEIRQSTICKY_MASK         (0x100U)
#define USBPHY_CTRL_RESUMEIRQSTICKY_SHIFT        (8U)
#define USBPHY_CTRL_ENIRQRESUMEDETECT_MASK       (0x200U)
#define USBPHY_CTRL_ENIRQRESUMEDETECT_SHIFT      (9U)
#define USBPHY_CTRL_RESUME_IRQ_MASK              (0x400U)
#define USBPHY_CTRL_RESUME_IRQ_SHIFT             (10U)
#define USBPHY_CTRL_ENIRQDEVPLUGIN_MASK          (0x800U)
#define USBPHY_CTRL_ENIRQDEVPLUGIN_SHIFT         (11U)
#define USBPHY_CTRL_DEVPLUGIN_IRQ_MASK           (0x1000U)
#define USBPHY_CTRL_DEVPLUGIN_IRQ_SHIFT          (12U)
#define USBPHY_CTRL_DATA_ON_LRADC_MASK           (0x2000U)
#define USBPHY_CTRL_DATA_ON_LRADC_SHIFT          (13U)
#define USBPHY_CTRL_ENUTMILEVEL2_MASK            (0x4000U)
#define USBPHY_CTRL_ENUTMILEVEL2_SHIFT           (14U)
#define USBPHY_CTRL_ENUTMILEVEL3_MASK            (0x8000U)
#define USBPHY_CTRL_ENUTMILEVEL3_SHIFT           (15U)
#define USBPHY_CTRL_ENIRQWAKEUP_MASK             (0x10000U)
#define USBPHY_CTRL_ENIRQWAKEUP_SHIFT            (16U)
#define USBPHY_CTRL_WAKEUP_IRQ_MASK              (0x20000U)
#define USBPHY_CTRL_WAKEUP_IRQ_SHIFT             (17U)
#define USBPHY_CTRL_ENAUTO_PWRON_PLL_MASK        (0x40000U)
#define USBPHY_CTRL_ENAUTO_PWRON_PLL_SHIFT       (18U)
#define USBPHY_CTRL_ENAUTOCLR_CLKGATE_MASK       (0x80000U)
#define USBPHY_CTRL_ENAUTOCLR_CLKGATE_SHIFT      (19U)
#define USBPHY_CTRL_ENAUTOCLR_PHY_PWD_MASK       (0x100000U)
#define USBPHY_CTRL_ENAUTOCLR_PHY_PWD_SHIFT      (20U)
#define USBPHY_CTRL_ENDPDMCHG_WKUP_MASK          (0x200000U)
#define USBPHY_CTRL_ENDPDMCHG_WKUP_SHIFT         (21U)
#define USBPHY_CTRL_ENIDCHG_WKUP_MASK            (0x400000U)
#define USBPHY_CTRL_ENIDCHG_WKUP_SHIFT           (22U)
#define USBPHY_CTRL_ENVBUSCHG_WKUP_MASK          (0x800000U)
#define USBPHY_CTRL_ENVBUSCHG_WKUP_SHIFT         (23U)
#define USBPHY_CTRL_FSDLL_RST_EN_MASK            (0x1000000U)
#define USBPHY_CTRL_FSDLL_RST_EN_SHIFT           (24U)
#define USBPHY_CTRL_RSVD1_MASK                   (0x6000000U)
#define USBPHY_CTRL_RSVD1_SHIFT                  (25U)
#define USBPHY_CTRL_RSVD1(x)                     (((uint32_t)(((uint32_t)(x)) << USBPHY_CTRL_RSVD1_SHIFT)) & USBPHY_CTRL_RSVD1_MASK)
#define USBPHY_CTRL_OTG_ID_VALUE_MASK            (0x8000000U)
#define USBPHY_CTRL_OTG_ID_VALUE_SHIFT           (27U)
#define USBPHY_CTRL_HOST_FORCE_LS_SE0_MASK       (0x10000000U)
#define USBPHY_CTRL_HOST_FORCE_LS_SE0_SHIFT      (28U)
#define USBPHY_CTRL_UTMI_SUSPENDM_MASK           (0x20000000U)
#define USBPHY_CTRL_UTMI_SUSPENDM_SHIFT          (29U)
#define USBPHY_CTRL_CLKGATE_MASK                 (0x40000000U)
#define USBPHY_CTRL_CLKGATE_SHIFT                (30U)
#define USBPHY_CTRL_SFTRST_MASK                  (0x80000000U)
#define USBPHY_CTRL_SFTRST_SHIFT                 (31U)

/*! @name CTRL_SET - USB PHY General Control Register */
#define USBPHY_CTRL_SET_ENOTG_ID_CHG_IRQ_MASK    (0x1U)
#define USBPHY_CTRL_SET_ENOTG_ID_CHG_IRQ_SHIFT   (0U)
#define USBPHY_CTRL_SET_ENHOSTDISCONDETECT_MASK  (0x2U)
#define USBPHY_CTRL_SET_ENHOSTDISCONDETECT_SHIFT (1U)
#define USBPHY_CTRL_SET_ENIRQHOSTDISCON_MASK     (0x4U)
#define USBPHY_CTRL_SET_ENIRQHOSTDISCON_SHIFT    (2U)
#define USBPHY_CTRL_SET_HOSTDISCONDETECT_IRQ_MASK (0x8U)
#define USBPHY_CTRL_SET_HOSTDISCONDETECT_IRQ_SHIFT (3U)
#define USBPHY_CTRL_SET_ENDEVPLUGINDETECT_MASK   (0x10U)
#define USBPHY_CTRL_SET_ENDEVPLUGINDETECT_SHIFT  (4U)
#define USBPHY_CTRL_SET_DEVPLUGIN_POLARITY_MASK  (0x20U)
#define USBPHY_CTRL_SET_DEVPLUGIN_POLARITY_SHIFT (5U)
#define USBPHY_CTRL_SET_OTG_ID_CHG_IRQ_MASK      (0x40U)
#define USBPHY_CTRL_SET_OTG_ID_CHG_IRQ_SHIFT     (6U)
#define USBPHY_CTRL_SET_ENOTGIDDETECT_MASK       (0x80U)
#define USBPHY_CTRL_SET_ENOTGIDDETECT_SHIFT      (7U)
#define USBPHY_CTRL_SET_RESUMEIRQSTICKY_MASK     (0x100U)
#define USBPHY_CTRL_SET_RESUMEIRQSTICKY_SHIFT    (8U)
#define USBPHY_CTRL_SET_ENIRQRESUMEDETECT_MASK   (0x200U)
#define USBPHY_CTRL_SET_ENIRQRESUMEDETECT_SHIFT  (9U)
#define USBPHY_CTRL_SET_RESUME_IRQ_MASK          (0x400U)
#define USBPHY_CTRL_SET_RESUME_IRQ_SHIFT         (10U)
#define USBPHY_CTRL_SET_ENIRQDEVPLUGIN_MASK      (0x800U)
#define USBPHY_CTRL_SET_ENIRQDEVPLUGIN_SHIFT     (11U)
#define USBPHY_CTRL_SET_DEVPLUGIN_IRQ_MASK       (0x1000U)
#define USBPHY_CTRL_SET_DEVPLUGIN_IRQ_SHIFT      (12U)
#define USBPHY_CTRL_SET_DATA_ON_LRADC_MASK       (0x2000U)
#define USBPHY_CTRL_SET_DATA_ON_LRADC_SHIFT      (13U)
#define USBPHY_CTRL_SET_ENUTMILEVEL2_MASK        (0x4000U)
#define USBPHY_CTRL_SET_ENUTMILEVEL2_SHIFT       (14U)
#define USBPHY_CTRL_SET_ENUTMILEVEL3_MASK        (0x8000U)
#define USBPHY_CTRL_SET_ENUTMILEVEL3_SHIFT       (15U)
#define USBPHY_CTRL_SET_ENIRQWAKEUP_MASK         (0x10000U)
#define USBPHY_CTRL_SET_ENIRQWAKEUP_SHIFT        (16U)
#define USBPHY_CTRL_SET_WAKEUP_IRQ_MASK          (0x20000U)
#define USBPHY_CTRL_SET_WAKEUP_IRQ_SHIFT         (17U)
#define USBPHY_CTRL_SET_ENAUTO_PWRON_PLL_MASK    (0x40000U)
#define USBPHY_CTRL_SET_ENAUTO_PWRON_PLL_SHIFT   (18U)
#define USBPHY_CTRL_SET_ENAUTOCLR_CLKGATE_MASK   (0x80000U)
#define USBPHY_CTRL_SET_ENAUTOCLR_CLKGATE_SHIFT  (19U)
#define USBPHY_CTRL_SET_ENAUTOCLR_PHY_PWD_MASK   (0x100000U)
#define USBPHY_CTRL_SET_ENAUTOCLR_PHY_PWD_SHIFT  (20U)
#define USBPHY_CTRL_SET_ENDPDMCHG_WKUP_MASK      (0x200000U)
#define USBPHY_CTRL_SET_ENDPDMCHG_WKUP_SHIFT     (21U)
#define USBPHY_CTRL_SET_ENIDCHG_WKUP_MASK        (0x400000U)
#define USBPHY_CTRL_SET_ENIDCHG_WKUP_SHIFT       (22U)
#define USBPHY_CTRL_SET_ENVBUSCHG_WKUP_MASK      (0x800000U)
#define USBPHY_CTRL_SET_ENVBUSCHG_WKUP_SHIFT     (23U)
#define USBPHY_CTRL_SET_FSDLL_RST_EN_MASK        (0x1000000U)
#define USBPHY_CTRL_SET_FSDLL_RST_EN_SHIFT       (24U)
#define USBPHY_CTRL_SET_RSVD1_MASK               (0x6000000U)
#define USBPHY_CTRL_SET_RSVD1_SHIFT              (25U)
#define USBPHY_CTRL_SET_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << USBPHY_CTRL_SET_RSVD1_SHIFT)) & USBPHY_CTRL_SET_RSVD1_MASK)
#define USBPHY_CTRL_SET_OTG_ID_VALUE_MASK        (0x8000000U)
#define USBPHY_CTRL_SET_OTG_ID_VALUE_SHIFT       (27U)
#define USBPHY_CTRL_SET_HOST_FORCE_LS_SE0_MASK   (0x10000000U)
#define USBPHY_CTRL_SET_HOST_FORCE_LS_SE0_SHIFT  (28U)
#define USBPHY_CTRL_SET_UTMI_SUSPENDM_MASK       (0x20000000U)
#define USBPHY_CTRL_SET_UTMI_SUSPENDM_SHIFT      (29U)
#define USBPHY_CTRL_SET_CLKGATE_MASK             (0x40000000U)
#define USBPHY_CTRL_SET_CLKGATE_SHIFT            (30U)
#define USBPHY_CTRL_SET_SFTRST_MASK              (0x80000000U)
#define USBPHY_CTRL_SET_SFTRST_SHIFT             (31U)

/*! @name CTRL_CLR - USB PHY General Control Register */
#define USBPHY_CTRL_CLR_ENOTG_ID_CHG_IRQ_MASK    (0x1U)
#define USBPHY_CTRL_CLR_ENOTG_ID_CHG_IRQ_SHIFT   (0U)
#define USBPHY_CTRL_CLR_ENHOSTDISCONDETECT_MASK  (0x2U)
#define USBPHY_CTRL_CLR_ENHOSTDISCONDETECT_SHIFT (1U)
#define USBPHY_CTRL_CLR_ENIRQHOSTDISCON_MASK     (0x4U)
#define USBPHY_CTRL_CLR_ENIRQHOSTDISCON_SHIFT    (2U)
#define USBPHY_CTRL_CLR_HOSTDISCONDETECT_IRQ_MASK (0x8U)
#define USBPHY_CTRL_CLR_HOSTDISCONDETECT_IRQ_SHIFT (3U)
#define USBPHY_CTRL_CLR_ENDEVPLUGINDETECT_MASK   (0x10U)
#define USBPHY_CTRL_CLR_ENDEVPLUGINDETECT_SHIFT  (4U)
#define USBPHY_CTRL_CLR_DEVPLUGIN_POLARITY_MASK  (0x20U)
#define USBPHY_CTRL_CLR_DEVPLUGIN_POLARITY_SHIFT (5U)
#define USBPHY_CTRL_CLR_OTG_ID_CHG_IRQ_MASK      (0x40U)
#define USBPHY_CTRL_CLR_OTG_ID_CHG_IRQ_SHIFT     (6U)
#define USBPHY_CTRL_CLR_ENOTGIDDETECT_MASK       (0x80U)
#define USBPHY_CTRL_CLR_ENOTGIDDETECT_SHIFT      (7U)
#define USBPHY_CTRL_CLR_RESUMEIRQSTICKY_MASK     (0x100U)
#define USBPHY_CTRL_CLR_RESUMEIRQSTICKY_SHIFT    (8U)
#define USBPHY_CTRL_CLR_ENIRQRESUMEDETECT_MASK   (0x200U)
#define USBPHY_CTRL_CLR_ENIRQRESUMEDETECT_SHIFT  (9U)
#define USBPHY_CTRL_CLR_RESUME_IRQ_MASK          (0x400U)
#define USBPHY_CTRL_CLR_RESUME_IRQ_SHIFT         (10U)
#define USBPHY_CTRL_CLR_ENIRQDEVPLUGIN_MASK      (0x800U)
#define USBPHY_CTRL_CLR_ENIRQDEVPLUGIN_SHIFT     (11U)
#define USBPHY_CTRL_CLR_DEVPLUGIN_IRQ_MASK       (0x1000U)
#define USBPHY_CTRL_CLR_DEVPLUGIN_IRQ_SHIFT      (12U)
#define USBPHY_CTRL_CLR_DATA_ON_LRADC_MASK       (0x2000U)
#define USBPHY_CTRL_CLR_DATA_ON_LRADC_SHIFT      (13U)
#define USBPHY_CTRL_CLR_ENUTMILEVEL2_MASK        (0x4000U)
#define USBPHY_CTRL_CLR_ENUTMILEVEL2_SHIFT       (14U)
#define USBPHY_CTRL_CLR_ENUTMILEVEL3_MASK        (0x8000U)
#define USBPHY_CTRL_CLR_ENUTMILEVEL3_SHIFT       (15U)
#define USBPHY_CTRL_CLR_ENIRQWAKEUP_MASK         (0x10000U)
#define USBPHY_CTRL_CLR_ENIRQWAKEUP_SHIFT        (16U)
#define USBPHY_CTRL_CLR_WAKEUP_IRQ_MASK          (0x20000U)
#define USBPHY_CTRL_CLR_WAKEUP_IRQ_SHIFT         (17U)
#define USBPHY_CTRL_CLR_ENAUTO_PWRON_PLL_MASK    (0x40000U)
#define USBPHY_CTRL_CLR_ENAUTO_PWRON_PLL_SHIFT   (18U)
#define USBPHY_CTRL_CLR_ENAUTOCLR_CLKGATE_MASK   (0x80000U)
#define USBPHY_CTRL_CLR_ENAUTOCLR_CLKGATE_SHIFT  (19U)
#define USBPHY_CTRL_CLR_ENAUTOCLR_PHY_PWD_MASK   (0x100000U)
#define USBPHY_CTRL_CLR_ENAUTOCLR_PHY_PWD_SHIFT  (20U)
#define USBPHY_CTRL_CLR_ENDPDMCHG_WKUP_MASK      (0x200000U)
#define USBPHY_CTRL_CLR_ENDPDMCHG_WKUP_SHIFT     (21U)
#define USBPHY_CTRL_CLR_ENIDCHG_WKUP_MASK        (0x400000U)
#define USBPHY_CTRL_CLR_ENIDCHG_WKUP_SHIFT       (22U)
#define USBPHY_CTRL_CLR_ENVBUSCHG_WKUP_MASK      (0x800000U)
#define USBPHY_CTRL_CLR_ENVBUSCHG_WKUP_SHIFT     (23U)
#define USBPHY_CTRL_CLR_FSDLL_RST_EN_MASK        (0x1000000U)
#define USBPHY_CTRL_CLR_FSDLL_RST_EN_SHIFT       (24U)
#define USBPHY_CTRL_CLR_RSVD1_MASK               (0x6000000U)
#define USBPHY_CTRL_CLR_RSVD1_SHIFT              (25U)
#define USBPHY_CTRL_CLR_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << USBPHY_CTRL_CLR_RSVD1_SHIFT)) & USBPHY_CTRL_CLR_RSVD1_MASK)
#define USBPHY_CTRL_CLR_OTG_ID_VALUE_MASK        (0x8000000U)
#define USBPHY_CTRL_CLR_OTG_ID_VALUE_SHIFT       (27U)
#define USBPHY_CTRL_CLR_HOST_FORCE_LS_SE0_MASK   (0x10000000U)
#define USBPHY_CTRL_CLR_HOST_FORCE_LS_SE0_SHIFT  (28U)
#define USBPHY_CTRL_CLR_UTMI_SUSPENDM_MASK       (0x20000000U)
#define USBPHY_CTRL_CLR_UTMI_SUSPENDM_SHIFT      (29U)
#define USBPHY_CTRL_CLR_CLKGATE_MASK             (0x40000000U)
#define USBPHY_CTRL_CLR_CLKGATE_SHIFT            (30U)
#define USBPHY_CTRL_CLR_SFTRST_MASK              (0x80000000U)
#define USBPHY_CTRL_CLR_SFTRST_SHIFT             (31U)

/*! @name CTRL_TOG - USB PHY General Control Register */
#define USBPHY_CTRL_TOG_ENOTG_ID_CHG_IRQ_MASK    (0x1U)
#define USBPHY_CTRL_TOG_ENOTG_ID_CHG_IRQ_SHIFT   (0U)
#define USBPHY_CTRL_TOG_ENHOSTDISCONDETECT_MASK  (0x2U)
#define USBPHY_CTRL_TOG_ENHOSTDISCONDETECT_SHIFT (1U)
#define USBPHY_CTRL_TOG_ENIRQHOSTDISCON_MASK     (0x4U)
#define USBPHY_CTRL_TOG_ENIRQHOSTDISCON_SHIFT    (2U)
#define USBPHY_CTRL_TOG_HOSTDISCONDETECT_IRQ_MASK (0x8U)
#define USBPHY_CTRL_TOG_HOSTDISCONDETECT_IRQ_SHIFT (3U)
#define USBPHY_CTRL_TOG_ENDEVPLUGINDETECT_MASK   (0x10U)
#define USBPHY_CTRL_TOG_ENDEVPLUGINDETECT_SHIFT  (4U)
#define USBPHY_CTRL_TOG_DEVPLUGIN_POLARITY_MASK  (0x20U)
#define USBPHY_CTRL_TOG_DEVPLUGIN_POLARITY_SHIFT (5U)
#define USBPHY_CTRL_TOG_OTG_ID_CHG_IRQ_MASK      (0x40U)
#define USBPHY_CTRL_TOG_OTG_ID_CHG_IRQ_SHIFT     (6U)
#define USBPHY_CTRL_TOG_ENOTGIDDETECT_MASK       (0x80U)
#define USBPHY_CTRL_TOG_ENOTGIDDETECT_SHIFT      (7U)
#define USBPHY_CTRL_TOG_RESUMEIRQSTICKY_MASK     (0x100U)
#define USBPHY_CTRL_TOG_RESUMEIRQSTICKY_SHIFT    (8U)
#define USBPHY_CTRL_TOG_ENIRQRESUMEDETECT_MASK   (0x200U)
#define USBPHY_CTRL_TOG_ENIRQRESUMEDETECT_SHIFT  (9U)
#define USBPHY_CTRL_TOG_RESUME_IRQ_MASK          (0x400U)
#define USBPHY_CTRL_TOG_RESUME_IRQ_SHIFT         (10U)
#define USBPHY_CTRL_TOG_ENIRQDEVPLUGIN_MASK      (0x800U)
#define USBPHY_CTRL_TOG_ENIRQDEVPLUGIN_SHIFT     (11U)
#define USBPHY_CTRL_TOG_DEVPLUGIN_IRQ_MASK       (0x1000U)
#define USBPHY_CTRL_TOG_DEVPLUGIN_IRQ_SHIFT      (12U)
#define USBPHY_CTRL_TOG_DATA_ON_LRADC_MASK       (0x2000U)
#define USBPHY_CTRL_TOG_DATA_ON_LRADC_SHIFT      (13U)
#define USBPHY_CTRL_TOG_ENUTMILEVEL2_MASK        (0x4000U)
#define USBPHY_CTRL_TOG_ENUTMILEVEL2_SHIFT       (14U)
#define USBPHY_CTRL_TOG_ENUTMILEVEL3_MASK        (0x8000U)
#define USBPHY_CTRL_TOG_ENUTMILEVEL3_SHIFT       (15U)
#define USBPHY_CTRL_TOG_ENIRQWAKEUP_MASK         (0x10000U)
#define USBPHY_CTRL_TOG_ENIRQWAKEUP_SHIFT        (16U)
#define USBPHY_CTRL_TOG_WAKEUP_IRQ_MASK          (0x20000U)
#define USBPHY_CTRL_TOG_WAKEUP_IRQ_SHIFT         (17U)
#define USBPHY_CTRL_TOG_ENAUTO_PWRON_PLL_MASK    (0x40000U)
#define USBPHY_CTRL_TOG_ENAUTO_PWRON_PLL_SHIFT   (18U)
#define USBPHY_CTRL_TOG_ENAUTOCLR_CLKGATE_MASK   (0x80000U)
#define USBPHY_CTRL_TOG_ENAUTOCLR_CLKGATE_SHIFT  (19U)
#define USBPHY_CTRL_TOG_ENAUTOCLR_PHY_PWD_MASK   (0x100000U)
#define USBPHY_CTRL_TOG_ENAUTOCLR_PHY_PWD_SHIFT  (20U)
#define USBPHY_CTRL_TOG_ENDPDMCHG_WKUP_MASK      (0x200000U)
#define USBPHY_CTRL_TOG_ENDPDMCHG_WKUP_SHIFT     (21U)
#define USBPHY_CTRL_TOG_ENIDCHG_WKUP_MASK        (0x400000U)
#define USBPHY_CTRL_TOG_ENIDCHG_WKUP_SHIFT       (22U)
#define USBPHY_CTRL_TOG_ENVBUSCHG_WKUP_MASK      (0x800000U)
#define USBPHY_CTRL_TOG_ENVBUSCHG_WKUP_SHIFT     (23U)
#define USBPHY_CTRL_TOG_FSDLL_RST_EN_MASK        (0x1000000U)
#define USBPHY_CTRL_TOG_FSDLL_RST_EN_SHIFT       (24U)
#define USBPHY_CTRL_TOG_RSVD1_MASK               (0x6000000U)
#define USBPHY_CTRL_TOG_RSVD1_SHIFT              (25U)
#define USBPHY_CTRL_TOG_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << USBPHY_CTRL_TOG_RSVD1_SHIFT)) & USBPHY_CTRL_TOG_RSVD1_MASK)
#define USBPHY_CTRL_TOG_OTG_ID_VALUE_MASK        (0x8000000U)
#define USBPHY_CTRL_TOG_OTG_ID_VALUE_SHIFT       (27U)
#define USBPHY_CTRL_TOG_HOST_FORCE_LS_SE0_MASK   (0x10000000U)
#define USBPHY_CTRL_TOG_HOST_FORCE_LS_SE0_SHIFT  (28U)
#define USBPHY_CTRL_TOG_UTMI_SUSPENDM_MASK       (0x20000000U)
#define USBPHY_CTRL_TOG_UTMI_SUSPENDM_SHIFT      (29U)
#define USBPHY_CTRL_TOG_CLKGATE_MASK             (0x40000000U)
#define USBPHY_CTRL_TOG_CLKGATE_SHIFT            (30U)
#define USBPHY_CTRL_TOG_SFTRST_MASK              (0x80000000U)
#define USBPHY_CTRL_TOG_SFTRST_SHIFT             (31U)

/*! @name STATUS - USB PHY Status Register */
#define USBPHY_STATUS_RSVD0_MASK                 (0x7U)
#define USBPHY_STATUS_RSVD0_SHIFT                (0U)
#define USBPHY_STATUS_RSVD0(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_STATUS_RSVD0_SHIFT)) & USBPHY_STATUS_RSVD0_MASK)
#define USBPHY_STATUS_HOSTDISCONDETECT_STATUS_MASK (0x8U)
#define USBPHY_STATUS_HOSTDISCONDETECT_STATUS_SHIFT (3U)
#define USBPHY_STATUS_RSVD1_MASK                 (0x30U)
#define USBPHY_STATUS_RSVD1_SHIFT                (4U)
#define USBPHY_STATUS_RSVD1(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_STATUS_RSVD1_SHIFT)) & USBPHY_STATUS_RSVD1_MASK)
#define USBPHY_STATUS_DEVPLUGIN_STATUS_MASK      (0x40U)
#define USBPHY_STATUS_DEVPLUGIN_STATUS_SHIFT     (6U)
#define USBPHY_STATUS_RSVD2_MASK                 (0x80U)
#define USBPHY_STATUS_RSVD2_SHIFT                (7U)
#define USBPHY_STATUS_OTGID_STATUS_MASK          (0x100U)
#define USBPHY_STATUS_OTGID_STATUS_SHIFT         (8U)
#define USBPHY_STATUS_RSVD3_MASK                 (0x200U)
#define USBPHY_STATUS_RSVD3_SHIFT                (9U)
#define USBPHY_STATUS_RESUME_STATUS_MASK         (0x400U)
#define USBPHY_STATUS_RESUME_STATUS_SHIFT        (10U)
#define USBPHY_STATUS_RSVD4_MASK                 (0xFFFFF800U)
#define USBPHY_STATUS_RSVD4_SHIFT                (11U)
#define USBPHY_STATUS_RSVD4(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_STATUS_RSVD4_SHIFT)) & USBPHY_STATUS_RSVD4_MASK)

/*! @name DEBUG - USB PHY Debug Register */
#define USBPHY_DEBUG_OTGIDPIOLOCK_MASK           (0x1U)
#define USBPHY_DEBUG_OTGIDPIOLOCK_SHIFT          (0U)
#define USBPHY_DEBUG_DEBUG_INTERFACE_HOLD_MASK   (0x2U)
#define USBPHY_DEBUG_DEBUG_INTERFACE_HOLD_SHIFT  (1U)
#define USBPHY_DEBUG_HSTPULLDOWN_MASK            (0xCU)
#define USBPHY_DEBUG_HSTPULLDOWN_SHIFT           (2U)
#define USBPHY_DEBUG_HSTPULLDOWN(x)              (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_HSTPULLDOWN_SHIFT)) & USBPHY_DEBUG_HSTPULLDOWN_MASK)
#define USBPHY_DEBUG_ENHSTPULLDOWN_MASK          (0x30U)
#define USBPHY_DEBUG_ENHSTPULLDOWN_SHIFT         (4U)
#define USBPHY_DEBUG_ENHSTPULLDOWN(x)            (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_ENHSTPULLDOWN_SHIFT)) & USBPHY_DEBUG_ENHSTPULLDOWN_MASK)
#define USBPHY_DEBUG_RSVD0_MASK                  (0xC0U)
#define USBPHY_DEBUG_RSVD0_SHIFT                 (6U)
#define USBPHY_DEBUG_RSVD0(x)                    (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_RSVD0_SHIFT)) & USBPHY_DEBUG_RSVD0_MASK)
#define USBPHY_DEBUG_TX2RXCOUNT_MASK             (0xF00U)
#define USBPHY_DEBUG_TX2RXCOUNT_SHIFT            (8U)
#define USBPHY_DEBUG_TX2RXCOUNT(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_TX2RXCOUNT_SHIFT)) & USBPHY_DEBUG_TX2RXCOUNT_MASK)
#define USBPHY_DEBUG_ENTX2RXCOUNT_MASK           (0x1000U)
#define USBPHY_DEBUG_ENTX2RXCOUNT_SHIFT          (12U)
#define USBPHY_DEBUG_RSVD1_MASK                  (0xE000U)
#define USBPHY_DEBUG_RSVD1_SHIFT                 (13U)
#define USBPHY_DEBUG_RSVD1(x)                    (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_RSVD1_SHIFT)) & USBPHY_DEBUG_RSVD1_MASK)
#define USBPHY_DEBUG_SQUELCHRESETCOUNT_MASK      (0x1F0000U)
#define USBPHY_DEBUG_SQUELCHRESETCOUNT_SHIFT     (16U)
#define USBPHY_DEBUG_SQUELCHRESETCOUNT(x)        (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_SQUELCHRESETCOUNT_SHIFT)) & USBPHY_DEBUG_SQUELCHRESETCOUNT_MASK)
#define USBPHY_DEBUG_RSVD2_MASK                  (0xE00000U)
#define USBPHY_DEBUG_RSVD2_SHIFT                 (21U)
#define USBPHY_DEBUG_RSVD2(x)                    (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_RSVD2_SHIFT)) & USBPHY_DEBUG_RSVD2_MASK)
#define USBPHY_DEBUG_ENSQUELCHRESET_MASK         (0x1000000U)
#define USBPHY_DEBUG_ENSQUELCHRESET_SHIFT        (24U)
#define USBPHY_DEBUG_SQUELCHRESETLENGTH_MASK     (0x1E000000U)
#define USBPHY_DEBUG_SQUELCHRESETLENGTH_SHIFT    (25U)
#define USBPHY_DEBUG_SQUELCHRESETLENGTH(x)       (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_SQUELCHRESETLENGTH_SHIFT)) & USBPHY_DEBUG_SQUELCHRESETLENGTH_MASK)
#define USBPHY_DEBUG_HOST_RESUME_DEBUG_MASK      (0x20000000U)
#define USBPHY_DEBUG_HOST_RESUME_DEBUG_SHIFT     (29U)
#define USBPHY_DEBUG_CLKGATE_MASK                (0x40000000U)
#define USBPHY_DEBUG_CLKGATE_SHIFT               (30U)
#define USBPHY_DEBUG_RSVD3_MASK                  (0x80000000U)
#define USBPHY_DEBUG_RSVD3_SHIFT                 (31U)

/*! @name DEBUG_SET - USB PHY Debug Register */
#define USBPHY_DEBUG_SET_OTGIDPIOLOCK_MASK       (0x1U)
#define USBPHY_DEBUG_SET_OTGIDPIOLOCK_SHIFT      (0U)
#define USBPHY_DEBUG_SET_DEBUG_INTERFACE_HOLD_MASK (0x2U)
#define USBPHY_DEBUG_SET_DEBUG_INTERFACE_HOLD_SHIFT (1U)
#define USBPHY_DEBUG_SET_HSTPULLDOWN_MASK        (0xCU)
#define USBPHY_DEBUG_SET_HSTPULLDOWN_SHIFT       (2U)
#define USBPHY_DEBUG_SET_HSTPULLDOWN(x)          (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_SET_HSTPULLDOWN_SHIFT)) & USBPHY_DEBUG_SET_HSTPULLDOWN_MASK)
#define USBPHY_DEBUG_SET_ENHSTPULLDOWN_MASK      (0x30U)
#define USBPHY_DEBUG_SET_ENHSTPULLDOWN_SHIFT     (4U)
#define USBPHY_DEBUG_SET_ENHSTPULLDOWN(x)        (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_SET_ENHSTPULLDOWN_SHIFT)) & USBPHY_DEBUG_SET_ENHSTPULLDOWN_MASK)
#define USBPHY_DEBUG_SET_RSVD0_MASK              (0xC0U)
#define USBPHY_DEBUG_SET_RSVD0_SHIFT             (6U)
#define USBPHY_DEBUG_SET_RSVD0(x)                (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_SET_RSVD0_SHIFT)) & USBPHY_DEBUG_SET_RSVD0_MASK)
#define USBPHY_DEBUG_SET_TX2RXCOUNT_MASK         (0xF00U)
#define USBPHY_DEBUG_SET_TX2RXCOUNT_SHIFT        (8U)
#define USBPHY_DEBUG_SET_TX2RXCOUNT(x)           (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_SET_TX2RXCOUNT_SHIFT)) & USBPHY_DEBUG_SET_TX2RXCOUNT_MASK)
#define USBPHY_DEBUG_SET_ENTX2RXCOUNT_MASK       (0x1000U)
#define USBPHY_DEBUG_SET_ENTX2RXCOUNT_SHIFT      (12U)
#define USBPHY_DEBUG_SET_RSVD1_MASK              (0xE000U)
#define USBPHY_DEBUG_SET_RSVD1_SHIFT             (13U)
#define USBPHY_DEBUG_SET_RSVD1(x)                (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_SET_RSVD1_SHIFT)) & USBPHY_DEBUG_SET_RSVD1_MASK)
#define USBPHY_DEBUG_SET_SQUELCHRESETCOUNT_MASK  (0x1F0000U)
#define USBPHY_DEBUG_SET_SQUELCHRESETCOUNT_SHIFT (16U)
#define USBPHY_DEBUG_SET_SQUELCHRESETCOUNT(x)    (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_SET_SQUELCHRESETCOUNT_SHIFT)) & USBPHY_DEBUG_SET_SQUELCHRESETCOUNT_MASK)
#define USBPHY_DEBUG_SET_RSVD2_MASK              (0xE00000U)
#define USBPHY_DEBUG_SET_RSVD2_SHIFT             (21U)
#define USBPHY_DEBUG_SET_RSVD2(x)                (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_SET_RSVD2_SHIFT)) & USBPHY_DEBUG_SET_RSVD2_MASK)
#define USBPHY_DEBUG_SET_ENSQUELCHRESET_MASK     (0x1000000U)
#define USBPHY_DEBUG_SET_ENSQUELCHRESET_SHIFT    (24U)
#define USBPHY_DEBUG_SET_SQUELCHRESETLENGTH_MASK (0x1E000000U)
#define USBPHY_DEBUG_SET_SQUELCHRESETLENGTH_SHIFT (25U)
#define USBPHY_DEBUG_SET_SQUELCHRESETLENGTH(x)   (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_SET_SQUELCHRESETLENGTH_SHIFT)) & USBPHY_DEBUG_SET_SQUELCHRESETLENGTH_MASK)
#define USBPHY_DEBUG_SET_HOST_RESUME_DEBUG_MASK  (0x20000000U)
#define USBPHY_DEBUG_SET_HOST_RESUME_DEBUG_SHIFT (29U)
#define USBPHY_DEBUG_SET_CLKGATE_MASK            (0x40000000U)
#define USBPHY_DEBUG_SET_CLKGATE_SHIFT           (30U)
#define USBPHY_DEBUG_SET_RSVD3_MASK              (0x80000000U)
#define USBPHY_DEBUG_SET_RSVD3_SHIFT             (31U)

/*! @name DEBUG_CLR - USB PHY Debug Register */
#define USBPHY_DEBUG_CLR_OTGIDPIOLOCK_MASK       (0x1U)
#define USBPHY_DEBUG_CLR_OTGIDPIOLOCK_SHIFT      (0U)
#define USBPHY_DEBUG_CLR_DEBUG_INTERFACE_HOLD_MASK (0x2U)
#define USBPHY_DEBUG_CLR_DEBUG_INTERFACE_HOLD_SHIFT (1U)
#define USBPHY_DEBUG_CLR_HSTPULLDOWN_MASK        (0xCU)
#define USBPHY_DEBUG_CLR_HSTPULLDOWN_SHIFT       (2U)
#define USBPHY_DEBUG_CLR_HSTPULLDOWN(x)          (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_CLR_HSTPULLDOWN_SHIFT)) & USBPHY_DEBUG_CLR_HSTPULLDOWN_MASK)
#define USBPHY_DEBUG_CLR_ENHSTPULLDOWN_MASK      (0x30U)
#define USBPHY_DEBUG_CLR_ENHSTPULLDOWN_SHIFT     (4U)
#define USBPHY_DEBUG_CLR_ENHSTPULLDOWN(x)        (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_CLR_ENHSTPULLDOWN_SHIFT)) & USBPHY_DEBUG_CLR_ENHSTPULLDOWN_MASK)
#define USBPHY_DEBUG_CLR_RSVD0_MASK              (0xC0U)
#define USBPHY_DEBUG_CLR_RSVD0_SHIFT             (6U)
#define USBPHY_DEBUG_CLR_RSVD0(x)                (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_CLR_RSVD0_SHIFT)) & USBPHY_DEBUG_CLR_RSVD0_MASK)
#define USBPHY_DEBUG_CLR_TX2RXCOUNT_MASK         (0xF00U)
#define USBPHY_DEBUG_CLR_TX2RXCOUNT_SHIFT        (8U)
#define USBPHY_DEBUG_CLR_TX2RXCOUNT(x)           (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_CLR_TX2RXCOUNT_SHIFT)) & USBPHY_DEBUG_CLR_TX2RXCOUNT_MASK)
#define USBPHY_DEBUG_CLR_ENTX2RXCOUNT_MASK       (0x1000U)
#define USBPHY_DEBUG_CLR_ENTX2RXCOUNT_SHIFT      (12U)
#define USBPHY_DEBUG_CLR_RSVD1_MASK              (0xE000U)
#define USBPHY_DEBUG_CLR_RSVD1_SHIFT             (13U)
#define USBPHY_DEBUG_CLR_RSVD1(x)                (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_CLR_RSVD1_SHIFT)) & USBPHY_DEBUG_CLR_RSVD1_MASK)
#define USBPHY_DEBUG_CLR_SQUELCHRESETCOUNT_MASK  (0x1F0000U)
#define USBPHY_DEBUG_CLR_SQUELCHRESETCOUNT_SHIFT (16U)
#define USBPHY_DEBUG_CLR_SQUELCHRESETCOUNT(x)    (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_CLR_SQUELCHRESETCOUNT_SHIFT)) & USBPHY_DEBUG_CLR_SQUELCHRESETCOUNT_MASK)
#define USBPHY_DEBUG_CLR_RSVD2_MASK              (0xE00000U)
#define USBPHY_DEBUG_CLR_RSVD2_SHIFT             (21U)
#define USBPHY_DEBUG_CLR_RSVD2(x)                (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_CLR_RSVD2_SHIFT)) & USBPHY_DEBUG_CLR_RSVD2_MASK)
#define USBPHY_DEBUG_CLR_ENSQUELCHRESET_MASK     (0x1000000U)
#define USBPHY_DEBUG_CLR_ENSQUELCHRESET_SHIFT    (24U)
#define USBPHY_DEBUG_CLR_SQUELCHRESETLENGTH_MASK (0x1E000000U)
#define USBPHY_DEBUG_CLR_SQUELCHRESETLENGTH_SHIFT (25U)
#define USBPHY_DEBUG_CLR_SQUELCHRESETLENGTH(x)   (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_CLR_SQUELCHRESETLENGTH_SHIFT)) & USBPHY_DEBUG_CLR_SQUELCHRESETLENGTH_MASK)
#define USBPHY_DEBUG_CLR_HOST_RESUME_DEBUG_MASK  (0x20000000U)
#define USBPHY_DEBUG_CLR_HOST_RESUME_DEBUG_SHIFT (29U)
#define USBPHY_DEBUG_CLR_CLKGATE_MASK            (0x40000000U)
#define USBPHY_DEBUG_CLR_CLKGATE_SHIFT           (30U)
#define USBPHY_DEBUG_CLR_RSVD3_MASK              (0x80000000U)
#define USBPHY_DEBUG_CLR_RSVD3_SHIFT             (31U)

/*! @name DEBUG_TOG - USB PHY Debug Register */
#define USBPHY_DEBUG_TOG_OTGIDPIOLOCK_MASK       (0x1U)
#define USBPHY_DEBUG_TOG_OTGIDPIOLOCK_SHIFT      (0U)
#define USBPHY_DEBUG_TOG_DEBUG_INTERFACE_HOLD_MASK (0x2U)
#define USBPHY_DEBUG_TOG_DEBUG_INTERFACE_HOLD_SHIFT (1U)
#define USBPHY_DEBUG_TOG_HSTPULLDOWN_MASK        (0xCU)
#define USBPHY_DEBUG_TOG_HSTPULLDOWN_SHIFT       (2U)
#define USBPHY_DEBUG_TOG_HSTPULLDOWN(x)          (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_TOG_HSTPULLDOWN_SHIFT)) & USBPHY_DEBUG_TOG_HSTPULLDOWN_MASK)
#define USBPHY_DEBUG_TOG_ENHSTPULLDOWN_MASK      (0x30U)
#define USBPHY_DEBUG_TOG_ENHSTPULLDOWN_SHIFT     (4U)
#define USBPHY_DEBUG_TOG_ENHSTPULLDOWN(x)        (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_TOG_ENHSTPULLDOWN_SHIFT)) & USBPHY_DEBUG_TOG_ENHSTPULLDOWN_MASK)
#define USBPHY_DEBUG_TOG_RSVD0_MASK              (0xC0U)
#define USBPHY_DEBUG_TOG_RSVD0_SHIFT             (6U)
#define USBPHY_DEBUG_TOG_RSVD0(x)                (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_TOG_RSVD0_SHIFT)) & USBPHY_DEBUG_TOG_RSVD0_MASK)
#define USBPHY_DEBUG_TOG_TX2RXCOUNT_MASK         (0xF00U)
#define USBPHY_DEBUG_TOG_TX2RXCOUNT_SHIFT        (8U)
#define USBPHY_DEBUG_TOG_TX2RXCOUNT(x)           (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_TOG_TX2RXCOUNT_SHIFT)) & USBPHY_DEBUG_TOG_TX2RXCOUNT_MASK)
#define USBPHY_DEBUG_TOG_ENTX2RXCOUNT_MASK       (0x1000U)
#define USBPHY_DEBUG_TOG_ENTX2RXCOUNT_SHIFT      (12U)
#define USBPHY_DEBUG_TOG_RSVD1_MASK              (0xE000U)
#define USBPHY_DEBUG_TOG_RSVD1_SHIFT             (13U)
#define USBPHY_DEBUG_TOG_RSVD1(x)                (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_TOG_RSVD1_SHIFT)) & USBPHY_DEBUG_TOG_RSVD1_MASK)
#define USBPHY_DEBUG_TOG_SQUELCHRESETCOUNT_MASK  (0x1F0000U)
#define USBPHY_DEBUG_TOG_SQUELCHRESETCOUNT_SHIFT (16U)
#define USBPHY_DEBUG_TOG_SQUELCHRESETCOUNT(x)    (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_TOG_SQUELCHRESETCOUNT_SHIFT)) & USBPHY_DEBUG_TOG_SQUELCHRESETCOUNT_MASK)
#define USBPHY_DEBUG_TOG_RSVD2_MASK              (0xE00000U)
#define USBPHY_DEBUG_TOG_RSVD2_SHIFT             (21U)
#define USBPHY_DEBUG_TOG_RSVD2(x)                (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_TOG_RSVD2_SHIFT)) & USBPHY_DEBUG_TOG_RSVD2_MASK)
#define USBPHY_DEBUG_TOG_ENSQUELCHRESET_MASK     (0x1000000U)
#define USBPHY_DEBUG_TOG_ENSQUELCHRESET_SHIFT    (24U)
#define USBPHY_DEBUG_TOG_SQUELCHRESETLENGTH_MASK (0x1E000000U)
#define USBPHY_DEBUG_TOG_SQUELCHRESETLENGTH_SHIFT (25U)
#define USBPHY_DEBUG_TOG_SQUELCHRESETLENGTH(x)   (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG_TOG_SQUELCHRESETLENGTH_SHIFT)) & USBPHY_DEBUG_TOG_SQUELCHRESETLENGTH_MASK)
#define USBPHY_DEBUG_TOG_HOST_RESUME_DEBUG_MASK  (0x20000000U)
#define USBPHY_DEBUG_TOG_HOST_RESUME_DEBUG_SHIFT (29U)
#define USBPHY_DEBUG_TOG_CLKGATE_MASK            (0x40000000U)
#define USBPHY_DEBUG_TOG_CLKGATE_SHIFT           (30U)
#define USBPHY_DEBUG_TOG_RSVD3_MASK              (0x80000000U)
#define USBPHY_DEBUG_TOG_RSVD3_SHIFT             (31U)

/*! @name DEBUG0_STATUS - UTMI Debug Status Register 0 */
#define USBPHY_DEBUG0_STATUS_LOOP_BACK_FAIL_COUNT_MASK (0xFFFFU)
#define USBPHY_DEBUG0_STATUS_LOOP_BACK_FAIL_COUNT_SHIFT (0U)
#define USBPHY_DEBUG0_STATUS_LOOP_BACK_FAIL_COUNT(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_STATUS_LOOP_BACK_FAIL_COUNT_SHIFT)) & USBPHY_DEBUG0_STATUS_LOOP_BACK_FAIL_COUNT_MASK)
#define USBPHY_DEBUG0_STATUS_UTMI_RXERROR_FAIL_COUNT_MASK (0x3FF0000U)
#define USBPHY_DEBUG0_STATUS_UTMI_RXERROR_FAIL_COUNT_SHIFT (16U)
#define USBPHY_DEBUG0_STATUS_UTMI_RXERROR_FAIL_COUNT(x) (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_STATUS_UTMI_RXERROR_FAIL_COUNT_SHIFT)) & USBPHY_DEBUG0_STATUS_UTMI_RXERROR_FAIL_COUNT_MASK)
#define USBPHY_DEBUG0_STATUS_SQUELCH_COUNT_MASK  (0xFC000000U)
#define USBPHY_DEBUG0_STATUS_SQUELCH_COUNT_SHIFT (26U)
#define USBPHY_DEBUG0_STATUS_SQUELCH_COUNT(x)    (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG0_STATUS_SQUELCH_COUNT_SHIFT)) & USBPHY_DEBUG0_STATUS_SQUELCH_COUNT_MASK)

/*! @name DEBUG1 - UTMI Debug Status Register 1 */
#define USBPHY_DEBUG1_RSVD0_MASK                 (0x1FFFU)
#define USBPHY_DEBUG1_RSVD0_SHIFT                (0U)
#define USBPHY_DEBUG1_RSVD0(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_RSVD0_SHIFT)) & USBPHY_DEBUG1_RSVD0_MASK)
#define USBPHY_DEBUG1_ENTAILADJVD_MASK           (0x6000U)
#define USBPHY_DEBUG1_ENTAILADJVD_SHIFT          (13U)
#define USBPHY_DEBUG1_ENTAILADJVD(x)             (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_ENTAILADJVD_SHIFT)) & USBPHY_DEBUG1_ENTAILADJVD_MASK)
#define USBPHY_DEBUG1_RSVD1_MASK                 (0xFFFF8000U)
#define USBPHY_DEBUG1_RSVD1_SHIFT                (15U)
#define USBPHY_DEBUG1_RSVD1(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_RSVD1_SHIFT)) & USBPHY_DEBUG1_RSVD1_MASK)

/*! @name DEBUG1_SET - UTMI Debug Status Register 1 */
#define USBPHY_DEBUG1_SET_RSVD0_MASK             (0x1FFFU)
#define USBPHY_DEBUG1_SET_RSVD0_SHIFT            (0U)
#define USBPHY_DEBUG1_SET_RSVD0(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_SET_RSVD0_SHIFT)) & USBPHY_DEBUG1_SET_RSVD0_MASK)
#define USBPHY_DEBUG1_SET_ENTAILADJVD_MASK       (0x6000U)
#define USBPHY_DEBUG1_SET_ENTAILADJVD_SHIFT      (13U)
#define USBPHY_DEBUG1_SET_ENTAILADJVD(x)         (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_SET_ENTAILADJVD_SHIFT)) & USBPHY_DEBUG1_SET_ENTAILADJVD_MASK)
#define USBPHY_DEBUG1_SET_RSVD1_MASK             (0xFFFF8000U)
#define USBPHY_DEBUG1_SET_RSVD1_SHIFT            (15U)
#define USBPHY_DEBUG1_SET_RSVD1(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_SET_RSVD1_SHIFT)) & USBPHY_DEBUG1_SET_RSVD1_MASK)

/*! @name DEBUG1_CLR - UTMI Debug Status Register 1 */
#define USBPHY_DEBUG1_CLR_RSVD0_MASK             (0x1FFFU)
#define USBPHY_DEBUG1_CLR_RSVD0_SHIFT            (0U)
#define USBPHY_DEBUG1_CLR_RSVD0(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_CLR_RSVD0_SHIFT)) & USBPHY_DEBUG1_CLR_RSVD0_MASK)
#define USBPHY_DEBUG1_CLR_ENTAILADJVD_MASK       (0x6000U)
#define USBPHY_DEBUG1_CLR_ENTAILADJVD_SHIFT      (13U)
#define USBPHY_DEBUG1_CLR_ENTAILADJVD(x)         (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_CLR_ENTAILADJVD_SHIFT)) & USBPHY_DEBUG1_CLR_ENTAILADJVD_MASK)
#define USBPHY_DEBUG1_CLR_RSVD1_MASK             (0xFFFF8000U)
#define USBPHY_DEBUG1_CLR_RSVD1_SHIFT            (15U)
#define USBPHY_DEBUG1_CLR_RSVD1(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_CLR_RSVD1_SHIFT)) & USBPHY_DEBUG1_CLR_RSVD1_MASK)

/*! @name DEBUG1_TOG - UTMI Debug Status Register 1 */
#define USBPHY_DEBUG1_TOG_RSVD0_MASK             (0x1FFFU)
#define USBPHY_DEBUG1_TOG_RSVD0_SHIFT            (0U)
#define USBPHY_DEBUG1_TOG_RSVD0(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_TOG_RSVD0_SHIFT)) & USBPHY_DEBUG1_TOG_RSVD0_MASK)
#define USBPHY_DEBUG1_TOG_ENTAILADJVD_MASK       (0x6000U)
#define USBPHY_DEBUG1_TOG_ENTAILADJVD_SHIFT      (13U)
#define USBPHY_DEBUG1_TOG_ENTAILADJVD(x)         (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_TOG_ENTAILADJVD_SHIFT)) & USBPHY_DEBUG1_TOG_ENTAILADJVD_MASK)
#define USBPHY_DEBUG1_TOG_RSVD1_MASK             (0xFFFF8000U)
#define USBPHY_DEBUG1_TOG_RSVD1_SHIFT            (15U)
#define USBPHY_DEBUG1_TOG_RSVD1(x)               (((uint32_t)(((uint32_t)(x)) << USBPHY_DEBUG1_TOG_RSVD1_SHIFT)) & USBPHY_DEBUG1_TOG_RSVD1_MASK)

/*! @name VERSION - UTMI RTL Version */
#define USBPHY_VERSION_STEP_MASK                 (0xFFFFU)
#define USBPHY_VERSION_STEP_SHIFT                (0U)
#define USBPHY_VERSION_STEP(x)                   (((uint32_t)(((uint32_t)(x)) << USBPHY_VERSION_STEP_SHIFT)) & USBPHY_VERSION_STEP_MASK)
#define USBPHY_VERSION_MINOR_MASK                (0xFF0000U)
#define USBPHY_VERSION_MINOR_SHIFT               (16U)
#define USBPHY_VERSION_MINOR(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_VERSION_MINOR_SHIFT)) & USBPHY_VERSION_MINOR_MASK)
#define USBPHY_VERSION_MAJOR_MASK                (0xFF000000U)
#define USBPHY_VERSION_MAJOR_SHIFT               (24U)
#define USBPHY_VERSION_MAJOR(x)                  (((uint32_t)(((uint32_t)(x)) << USBPHY_VERSION_MAJOR_SHIFT)) & USBPHY_VERSION_MAJOR_MASK)


/*!
 * @}
 */ /* end of group USBPHY_Register_Masks */


/* USBPHY - Peripheral instance base addresses */
/** Peripheral USBPHY1 base pointer */
#define USBPHY1_BASE_PTR                         ((USBPHY_MemMapPtr)0x400D9000u)
/** Peripheral USBPHY2 base pointer */
#define USBPHY2_BASE_PTR                         ((USBPHY_MemMapPtr)0x400DA000u)
/** Array initializer of USBPHY peripheral base pointers */
#define USBPHY_BASE_PTRS                         { USBPHY1_BASE_PTR, USBPHY2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- USBPHY - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBPHY_Register_Accessor_Macros USBPHY - Register accessor macros
 * @{
 */


/* USBPHY - Register instance definitions */
/* USBPHY1 */
#define USBPHY1_PWD                              USBPHY_PWD_REG(USBPHY1_BASE_PTR)
#define USBPHY1_PWD_SET                          USBPHY_PWD_SET_REG(USBPHY1_BASE_PTR)
#define USBPHY1_PWD_CLR                          USBPHY_PWD_CLR_REG(USBPHY1_BASE_PTR)
#define USBPHY1_PWD_TOG                          USBPHY_PWD_TOG_REG(USBPHY1_BASE_PTR)
#define USBPHY1_TX                               USBPHY_TX_REG(USBPHY1_BASE_PTR)
#define USBPHY1_TX_SET                           USBPHY_TX_SET_REG(USBPHY1_BASE_PTR)
#define USBPHY1_TX_CLR                           USBPHY_TX_CLR_REG(USBPHY1_BASE_PTR)
#define USBPHY1_TX_TOG                           USBPHY_TX_TOG_REG(USBPHY1_BASE_PTR)
#define USBPHY1_RX                               USBPHY_RX_REG(USBPHY1_BASE_PTR)
#define USBPHY1_RX_SET                           USBPHY_RX_SET_REG(USBPHY1_BASE_PTR)
#define USBPHY1_RX_CLR                           USBPHY_RX_CLR_REG(USBPHY1_BASE_PTR)
#define USBPHY1_RX_TOG                           USBPHY_RX_TOG_REG(USBPHY1_BASE_PTR)
#define USBPHY1_CTRL                             USBPHY_CTRL_REG(USBPHY1_BASE_PTR)
#define USBPHY1_CTRL_SET                         USBPHY_CTRL_SET_REG(USBPHY1_BASE_PTR)
#define USBPHY1_CTRL_CLR                         USBPHY_CTRL_CLR_REG(USBPHY1_BASE_PTR)
#define USBPHY1_CTRL_TOG                         USBPHY_CTRL_TOG_REG(USBPHY1_BASE_PTR)
#define USBPHY1_STATUS                           USBPHY_STATUS_REG(USBPHY1_BASE_PTR)
#define USBPHY1_DEBUG                            USBPHY_DEBUG_REG(USBPHY1_BASE_PTR)
#define USBPHY1_DEBUG_SET                        USBPHY_DEBUG_SET_REG(USBPHY1_BASE_PTR)
#define USBPHY1_DEBUG_CLR                        USBPHY_DEBUG_CLR_REG(USBPHY1_BASE_PTR)
#define USBPHY1_DEBUG_TOG                        USBPHY_DEBUG_TOG_REG(USBPHY1_BASE_PTR)
#define USBPHY1_DEBUG0_STATUS                    USBPHY_DEBUG0_STATUS_REG(USBPHY1_BASE_PTR)
#define USBPHY1_DEBUG1                           USBPHY_DEBUG1_REG(USBPHY1_BASE_PTR)
#define USBPHY1_DEBUG1_SET                       USBPHY_DEBUG1_SET_REG(USBPHY1_BASE_PTR)
#define USBPHY1_DEBUG1_CLR                       USBPHY_DEBUG1_CLR_REG(USBPHY1_BASE_PTR)
#define USBPHY1_DEBUG1_TOG                       USBPHY_DEBUG1_TOG_REG(USBPHY1_BASE_PTR)
#define USBPHY1_VERSION                          USBPHY_VERSION_REG(USBPHY1_BASE_PTR)
/* USBPHY2 */
#define USBPHY2_PWD                              USBPHY_PWD_REG(USBPHY2_BASE_PTR)
#define USBPHY2_PWD_SET                          USBPHY_PWD_SET_REG(USBPHY2_BASE_PTR)
#define USBPHY2_PWD_CLR                          USBPHY_PWD_CLR_REG(USBPHY2_BASE_PTR)
#define USBPHY2_PWD_TOG                          USBPHY_PWD_TOG_REG(USBPHY2_BASE_PTR)
#define USBPHY2_TX                               USBPHY_TX_REG(USBPHY2_BASE_PTR)
#define USBPHY2_TX_SET                           USBPHY_TX_SET_REG(USBPHY2_BASE_PTR)
#define USBPHY2_TX_CLR                           USBPHY_TX_CLR_REG(USBPHY2_BASE_PTR)
#define USBPHY2_TX_TOG                           USBPHY_TX_TOG_REG(USBPHY2_BASE_PTR)
#define USBPHY2_RX                               USBPHY_RX_REG(USBPHY2_BASE_PTR)
#define USBPHY2_RX_SET                           USBPHY_RX_SET_REG(USBPHY2_BASE_PTR)
#define USBPHY2_RX_CLR                           USBPHY_RX_CLR_REG(USBPHY2_BASE_PTR)
#define USBPHY2_RX_TOG                           USBPHY_RX_TOG_REG(USBPHY2_BASE_PTR)
#define USBPHY2_CTRL                             USBPHY_CTRL_REG(USBPHY2_BASE_PTR)
#define USBPHY2_CTRL_SET                         USBPHY_CTRL_SET_REG(USBPHY2_BASE_PTR)
#define USBPHY2_CTRL_CLR                         USBPHY_CTRL_CLR_REG(USBPHY2_BASE_PTR)
#define USBPHY2_CTRL_TOG                         USBPHY_CTRL_TOG_REG(USBPHY2_BASE_PTR)
#define USBPHY2_STATUS                           USBPHY_STATUS_REG(USBPHY2_BASE_PTR)
#define USBPHY2_DEBUG                            USBPHY_DEBUG_REG(USBPHY2_BASE_PTR)
#define USBPHY2_DEBUG_SET                        USBPHY_DEBUG_SET_REG(USBPHY2_BASE_PTR)
#define USBPHY2_DEBUG_CLR                        USBPHY_DEBUG_CLR_REG(USBPHY2_BASE_PTR)
#define USBPHY2_DEBUG_TOG                        USBPHY_DEBUG_TOG_REG(USBPHY2_BASE_PTR)
#define USBPHY2_DEBUG0_STATUS                    USBPHY_DEBUG0_STATUS_REG(USBPHY2_BASE_PTR)
#define USBPHY2_DEBUG1                           USBPHY_DEBUG1_REG(USBPHY2_BASE_PTR)
#define USBPHY2_DEBUG1_SET                       USBPHY_DEBUG1_SET_REG(USBPHY2_BASE_PTR)
#define USBPHY2_DEBUG1_CLR                       USBPHY_DEBUG1_CLR_REG(USBPHY2_BASE_PTR)
#define USBPHY2_DEBUG1_TOG                       USBPHY_DEBUG1_TOG_REG(USBPHY2_BASE_PTR)
#define USBPHY2_VERSION                          USBPHY_VERSION_REG(USBPHY2_BASE_PTR)

/*!
 * @}
 */ /* end of group USBPHY_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group USBPHY_Peripheral */


/* ----------------------------------------------------------------------------
   -- USB_ANALOG
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USB_ANALOG_Peripheral USB_ANALOG
 * @{
 */

/** USB_ANALOG - Peripheral register structure */
typedef struct USB_ANALOG_MemMap {
  uint8_t RESERVED_0[416];
  struct {                                         /* offset: 0x1A0, array step: 0x60 */
    uint32_t VBUS_DETECT;                            /**< USB VBUS Detect Register, array offset: 0x1A0, array step: 0x60 */
    uint32_t VBUS_DETECT_SET;                        /**< USB VBUS Detect Register, array offset: 0x1A4, array step: 0x60 */
    uint32_t VBUS_DETECT_CLR;                        /**< USB VBUS Detect Register, array offset: 0x1A8, array step: 0x60 */
    uint32_t VBUS_DETECT_TOG;                        /**< USB VBUS Detect Register, array offset: 0x1AC, array step: 0x60 */
    uint32_t CHRG_DETECT;                            /**< USB Charger Detect Register, array offset: 0x1B0, array step: 0x60 */
    uint32_t CHRG_DETECT_SET;                        /**< USB Charger Detect Register, array offset: 0x1B4, array step: 0x60 */
    uint32_t CHRG_DETECT_CLR;                        /**< USB Charger Detect Register, array offset: 0x1B8, array step: 0x60 */
    uint32_t CHRG_DETECT_TOG;                        /**< USB Charger Detect Register, array offset: 0x1BC, array step: 0x60 */
    uint32_t VBUS_DETECT_STAT;                       /**< USB VBUS Detect Status Register, array offset: 0x1C0, array step: 0x60 */
    uint8_t RESERVED_0[12];
    uint32_t CHRG_DETECT_STAT;                       /**< USB Charger Detect Status Register, array offset: 0x1D0, array step: 0x60 */
    uint8_t RESERVED_1[28];
    uint32_t MISC;                                   /**< USB Misc Register, array offset: 0x1F0, array step: 0x60 */
    uint32_t MISC_SET;                               /**< USB Misc Register, array offset: 0x1F4, array step: 0x60 */
    uint32_t MISC_CLR;                               /**< USB Misc Register, array offset: 0x1F8, array step: 0x60 */
    uint32_t MISC_TOG;                               /**< USB Misc Register, array offset: 0x1FC, array step: 0x60 */
  } INSTANCE[2];
  uint32_t DIGPROG;                                /**< Chip Silicon Version, offset: 0x260 */
} volatile *USB_ANALOG_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- USB_ANALOG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USB_ANALOG_Register_Accessor_Macros USB_ANALOG - Register accessor macros
 * @{
 */


/* USB_ANALOG - Register accessors */
#define USB_ANALOG_VBUS_DETECT_REG(base,index)   ((base)->INSTANCE[index].VBUS_DETECT)
#define USB_ANALOG_VBUS_DETECT_SET_REG(base,index) ((base)->INSTANCE[index].VBUS_DETECT_SET)
#define USB_ANALOG_VBUS_DETECT_CLR_REG(base,index) ((base)->INSTANCE[index].VBUS_DETECT_CLR)
#define USB_ANALOG_VBUS_DETECT_TOG_REG(base,index) ((base)->INSTANCE[index].VBUS_DETECT_TOG)
#define USB_ANALOG_CHRG_DETECT_REG(base,index)   ((base)->INSTANCE[index].CHRG_DETECT)
#define USB_ANALOG_CHRG_DETECT_SET_REG(base,index) ((base)->INSTANCE[index].CHRG_DETECT_SET)
#define USB_ANALOG_CHRG_DETECT_CLR_REG(base,index) ((base)->INSTANCE[index].CHRG_DETECT_CLR)
#define USB_ANALOG_CHRG_DETECT_TOG_REG(base,index) ((base)->INSTANCE[index].CHRG_DETECT_TOG)
#define USB_ANALOG_VBUS_DETECT_STAT_REG(base,index) ((base)->INSTANCE[index].VBUS_DETECT_STAT)
#define USB_ANALOG_CHRG_DETECT_STAT_REG(base,index) ((base)->INSTANCE[index].CHRG_DETECT_STAT)
#define USB_ANALOG_MISC_REG(base,index)          ((base)->INSTANCE[index].MISC)
#define USB_ANALOG_MISC_SET_REG(base,index)      ((base)->INSTANCE[index].MISC_SET)
#define USB_ANALOG_MISC_CLR_REG(base,index)      ((base)->INSTANCE[index].MISC_CLR)
#define USB_ANALOG_MISC_TOG_REG(base,index)      ((base)->INSTANCE[index].MISC_TOG)
#define USB_ANALOG_DIGPROG_REG(base)             ((base)->DIGPROG)

/*!
 * @}
 */ /* end of group USB_ANALOG_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- USB_ANALOG Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USB_ANALOG_Register_Masks USB_ANALOG Register Masks
 * @{
 */

/*! @name VBUS_DETECT - USB VBUS Detect Register */
#define USB_ANALOG_VBUS_DETECT_VBUSVALID_THRESH_MASK (0x7U)
#define USB_ANALOG_VBUS_DETECT_VBUSVALID_THRESH_SHIFT (0U)
#define USB_ANALOG_VBUS_DETECT_VBUSVALID_THRESH(x) (((uint32_t)(((uint32_t)(x)) << USB_ANALOG_VBUS_DETECT_VBUSVALID_THRESH_SHIFT)) & USB_ANALOG_VBUS_DETECT_VBUSVALID_THRESH_MASK)
#define USB_ANALOG_VBUS_DETECT_VBUSVALID_PWRUP_CMPS_MASK (0x100000U)
#define USB_ANALOG_VBUS_DETECT_VBUSVALID_PWRUP_CMPS_SHIFT (20U)
#define USB_ANALOG_VBUS_DETECT_DISCHARGE_VBUS_MASK (0x4000000U)
#define USB_ANALOG_VBUS_DETECT_DISCHARGE_VBUS_SHIFT (26U)
#define USB_ANALOG_VBUS_DETECT_CHARGE_VBUS_MASK  (0x8000000U)
#define USB_ANALOG_VBUS_DETECT_CHARGE_VBUS_SHIFT (27U)

/* The count of USB_ANALOG_VBUS_DETECT */
#define USB_ANALOG_VBUS_DETECT_COUNT             (2U)

/*! @name VBUS_DETECT_SET - USB VBUS Detect Register */
#define USB_ANALOG_VBUS_DETECT_SET_VBUSVALID_THRESH_MASK (0x7U)
#define USB_ANALOG_VBUS_DETECT_SET_VBUSVALID_THRESH_SHIFT (0U)
#define USB_ANALOG_VBUS_DETECT_SET_VBUSVALID_THRESH(x) (((uint32_t)(((uint32_t)(x)) << USB_ANALOG_VBUS_DETECT_SET_VBUSVALID_THRESH_SHIFT)) & USB_ANALOG_VBUS_DETECT_SET_VBUSVALID_THRESH_MASK)
#define USB_ANALOG_VBUS_DETECT_SET_VBUSVALID_PWRUP_CMPS_MASK (0x100000U)
#define USB_ANALOG_VBUS_DETECT_SET_VBUSVALID_PWRUP_CMPS_SHIFT (20U)
#define USB_ANALOG_VBUS_DETECT_SET_DISCHARGE_VBUS_MASK (0x4000000U)
#define USB_ANALOG_VBUS_DETECT_SET_DISCHARGE_VBUS_SHIFT (26U)
#define USB_ANALOG_VBUS_DETECT_SET_CHARGE_VBUS_MASK (0x8000000U)
#define USB_ANALOG_VBUS_DETECT_SET_CHARGE_VBUS_SHIFT (27U)

/* The count of USB_ANALOG_VBUS_DETECT_SET */
#define USB_ANALOG_VBUS_DETECT_SET_COUNT         (2U)

/*! @name VBUS_DETECT_CLR - USB VBUS Detect Register */
#define USB_ANALOG_VBUS_DETECT_CLR_VBUSVALID_THRESH_MASK (0x7U)
#define USB_ANALOG_VBUS_DETECT_CLR_VBUSVALID_THRESH_SHIFT (0U)
#define USB_ANALOG_VBUS_DETECT_CLR_VBUSVALID_THRESH(x) (((uint32_t)(((uint32_t)(x)) << USB_ANALOG_VBUS_DETECT_CLR_VBUSVALID_THRESH_SHIFT)) & USB_ANALOG_VBUS_DETECT_CLR_VBUSVALID_THRESH_MASK)
#define USB_ANALOG_VBUS_DETECT_CLR_VBUSVALID_PWRUP_CMPS_MASK (0x100000U)
#define USB_ANALOG_VBUS_DETECT_CLR_VBUSVALID_PWRUP_CMPS_SHIFT (20U)
#define USB_ANALOG_VBUS_DETECT_CLR_DISCHARGE_VBUS_MASK (0x4000000U)
#define USB_ANALOG_VBUS_DETECT_CLR_DISCHARGE_VBUS_SHIFT (26U)
#define USB_ANALOG_VBUS_DETECT_CLR_CHARGE_VBUS_MASK (0x8000000U)
#define USB_ANALOG_VBUS_DETECT_CLR_CHARGE_VBUS_SHIFT (27U)

/* The count of USB_ANALOG_VBUS_DETECT_CLR */
#define USB_ANALOG_VBUS_DETECT_CLR_COUNT         (2U)

/*! @name VBUS_DETECT_TOG - USB VBUS Detect Register */
#define USB_ANALOG_VBUS_DETECT_TOG_VBUSVALID_THRESH_MASK (0x7U)
#define USB_ANALOG_VBUS_DETECT_TOG_VBUSVALID_THRESH_SHIFT (0U)
#define USB_ANALOG_VBUS_DETECT_TOG_VBUSVALID_THRESH(x) (((uint32_t)(((uint32_t)(x)) << USB_ANALOG_VBUS_DETECT_TOG_VBUSVALID_THRESH_SHIFT)) & USB_ANALOG_VBUS_DETECT_TOG_VBUSVALID_THRESH_MASK)
#define USB_ANALOG_VBUS_DETECT_TOG_VBUSVALID_PWRUP_CMPS_MASK (0x100000U)
#define USB_ANALOG_VBUS_DETECT_TOG_VBUSVALID_PWRUP_CMPS_SHIFT (20U)
#define USB_ANALOG_VBUS_DETECT_TOG_DISCHARGE_VBUS_MASK (0x4000000U)
#define USB_ANALOG_VBUS_DETECT_TOG_DISCHARGE_VBUS_SHIFT (26U)
#define USB_ANALOG_VBUS_DETECT_TOG_CHARGE_VBUS_MASK (0x8000000U)
#define USB_ANALOG_VBUS_DETECT_TOG_CHARGE_VBUS_SHIFT (27U)

/* The count of USB_ANALOG_VBUS_DETECT_TOG */
#define USB_ANALOG_VBUS_DETECT_TOG_COUNT         (2U)

/*! @name CHRG_DETECT - USB Charger Detect Register */
#define USB_ANALOG_CHRG_DETECT_CHK_CONTACT_MASK  (0x40000U)
#define USB_ANALOG_CHRG_DETECT_CHK_CONTACT_SHIFT (18U)
#define USB_ANALOG_CHRG_DETECT_CHK_CHRG_B_MASK   (0x80000U)
#define USB_ANALOG_CHRG_DETECT_CHK_CHRG_B_SHIFT  (19U)
#define USB_ANALOG_CHRG_DETECT_EN_B_MASK         (0x100000U)
#define USB_ANALOG_CHRG_DETECT_EN_B_SHIFT        (20U)

/* The count of USB_ANALOG_CHRG_DETECT */
#define USB_ANALOG_CHRG_DETECT_COUNT             (2U)

/*! @name CHRG_DETECT_SET - USB Charger Detect Register */
#define USB_ANALOG_CHRG_DETECT_SET_CHK_CONTACT_MASK (0x40000U)
#define USB_ANALOG_CHRG_DETECT_SET_CHK_CONTACT_SHIFT (18U)
#define USB_ANALOG_CHRG_DETECT_SET_CHK_CHRG_B_MASK (0x80000U)
#define USB_ANALOG_CHRG_DETECT_SET_CHK_CHRG_B_SHIFT (19U)
#define USB_ANALOG_CHRG_DETECT_SET_EN_B_MASK     (0x100000U)
#define USB_ANALOG_CHRG_DETECT_SET_EN_B_SHIFT    (20U)

/* The count of USB_ANALOG_CHRG_DETECT_SET */
#define USB_ANALOG_CHRG_DETECT_SET_COUNT         (2U)

/*! @name CHRG_DETECT_CLR - USB Charger Detect Register */
#define USB_ANALOG_CHRG_DETECT_CLR_CHK_CONTACT_MASK (0x40000U)
#define USB_ANALOG_CHRG_DETECT_CLR_CHK_CONTACT_SHIFT (18U)
#define USB_ANALOG_CHRG_DETECT_CLR_CHK_CHRG_B_MASK (0x80000U)
#define USB_ANALOG_CHRG_DETECT_CLR_CHK_CHRG_B_SHIFT (19U)
#define USB_ANALOG_CHRG_DETECT_CLR_EN_B_MASK     (0x100000U)
#define USB_ANALOG_CHRG_DETECT_CLR_EN_B_SHIFT    (20U)

/* The count of USB_ANALOG_CHRG_DETECT_CLR */
#define USB_ANALOG_CHRG_DETECT_CLR_COUNT         (2U)

/*! @name CHRG_DETECT_TOG - USB Charger Detect Register */
#define USB_ANALOG_CHRG_DETECT_TOG_CHK_CONTACT_MASK (0x40000U)
#define USB_ANALOG_CHRG_DETECT_TOG_CHK_CONTACT_SHIFT (18U)
#define USB_ANALOG_CHRG_DETECT_TOG_CHK_CHRG_B_MASK (0x80000U)
#define USB_ANALOG_CHRG_DETECT_TOG_CHK_CHRG_B_SHIFT (19U)
#define USB_ANALOG_CHRG_DETECT_TOG_EN_B_MASK     (0x100000U)
#define USB_ANALOG_CHRG_DETECT_TOG_EN_B_SHIFT    (20U)

/* The count of USB_ANALOG_CHRG_DETECT_TOG */
#define USB_ANALOG_CHRG_DETECT_TOG_COUNT         (2U)

/*! @name VBUS_DETECT_STAT - USB VBUS Detect Status Register */
#define USB_ANALOG_VBUS_DETECT_STAT_SESSEND_MASK (0x1U)
#define USB_ANALOG_VBUS_DETECT_STAT_SESSEND_SHIFT (0U)
#define USB_ANALOG_VBUS_DETECT_STAT_BVALID_MASK  (0x2U)
#define USB_ANALOG_VBUS_DETECT_STAT_BVALID_SHIFT (1U)
#define USB_ANALOG_VBUS_DETECT_STAT_AVALID_MASK  (0x4U)
#define USB_ANALOG_VBUS_DETECT_STAT_AVALID_SHIFT (2U)
#define USB_ANALOG_VBUS_DETECT_STAT_VBUS_VALID_MASK (0x8U)
#define USB_ANALOG_VBUS_DETECT_STAT_VBUS_VALID_SHIFT (3U)

/* The count of USB_ANALOG_VBUS_DETECT_STAT */
#define USB_ANALOG_VBUS_DETECT_STAT_COUNT        (2U)

/*! @name CHRG_DETECT_STAT - USB Charger Detect Status Register */
#define USB_ANALOG_CHRG_DETECT_STAT_PLUG_CONTACT_MASK (0x1U)
#define USB_ANALOG_CHRG_DETECT_STAT_PLUG_CONTACT_SHIFT (0U)
#define USB_ANALOG_CHRG_DETECT_STAT_CHRG_DETECTED_MASK (0x2U)
#define USB_ANALOG_CHRG_DETECT_STAT_CHRG_DETECTED_SHIFT (1U)
#define USB_ANALOG_CHRG_DETECT_STAT_DM_STATE_MASK (0x4U)
#define USB_ANALOG_CHRG_DETECT_STAT_DM_STATE_SHIFT (2U)
#define USB_ANALOG_CHRG_DETECT_STAT_DP_STATE_MASK (0x8U)
#define USB_ANALOG_CHRG_DETECT_STAT_DP_STATE_SHIFT (3U)

/* The count of USB_ANALOG_CHRG_DETECT_STAT */
#define USB_ANALOG_CHRG_DETECT_STAT_COUNT        (2U)

/*! @name MISC - USB Misc Register */
#define USB_ANALOG_MISC_HS_USE_EXTERNAL_R_MASK   (0x1U)
#define USB_ANALOG_MISC_HS_USE_EXTERNAL_R_SHIFT  (0U)
#define USB_ANALOG_MISC_EN_DEGLITCH_MASK         (0x2U)
#define USB_ANALOG_MISC_EN_DEGLITCH_SHIFT        (1U)
#define USB_ANALOG_MISC_EN_CLK_UTMI_MASK         (0x40000000U)
#define USB_ANALOG_MISC_EN_CLK_UTMI_SHIFT        (30U)

/* The count of USB_ANALOG_MISC */
#define USB_ANALOG_MISC_COUNT                    (2U)

/*! @name MISC_SET - USB Misc Register */
#define USB_ANALOG_MISC_SET_HS_USE_EXTERNAL_R_MASK (0x1U)
#define USB_ANALOG_MISC_SET_HS_USE_EXTERNAL_R_SHIFT (0U)
#define USB_ANALOG_MISC_SET_EN_DEGLITCH_MASK     (0x2U)
#define USB_ANALOG_MISC_SET_EN_DEGLITCH_SHIFT    (1U)
#define USB_ANALOG_MISC_SET_EN_CLK_UTMI_MASK     (0x40000000U)
#define USB_ANALOG_MISC_SET_EN_CLK_UTMI_SHIFT    (30U)

/* The count of USB_ANALOG_MISC_SET */
#define USB_ANALOG_MISC_SET_COUNT                (2U)

/*! @name MISC_CLR - USB Misc Register */
#define USB_ANALOG_MISC_CLR_HS_USE_EXTERNAL_R_MASK (0x1U)
#define USB_ANALOG_MISC_CLR_HS_USE_EXTERNAL_R_SHIFT (0U)
#define USB_ANALOG_MISC_CLR_EN_DEGLITCH_MASK     (0x2U)
#define USB_ANALOG_MISC_CLR_EN_DEGLITCH_SHIFT    (1U)
#define USB_ANALOG_MISC_CLR_EN_CLK_UTMI_MASK     (0x40000000U)
#define USB_ANALOG_MISC_CLR_EN_CLK_UTMI_SHIFT    (30U)

/* The count of USB_ANALOG_MISC_CLR */
#define USB_ANALOG_MISC_CLR_COUNT                (2U)

/*! @name MISC_TOG - USB Misc Register */
#define USB_ANALOG_MISC_TOG_HS_USE_EXTERNAL_R_MASK (0x1U)
#define USB_ANALOG_MISC_TOG_HS_USE_EXTERNAL_R_SHIFT (0U)
#define USB_ANALOG_MISC_TOG_EN_DEGLITCH_MASK     (0x2U)
#define USB_ANALOG_MISC_TOG_EN_DEGLITCH_SHIFT    (1U)
#define USB_ANALOG_MISC_TOG_EN_CLK_UTMI_MASK     (0x40000000U)
#define USB_ANALOG_MISC_TOG_EN_CLK_UTMI_SHIFT    (30U)

/* The count of USB_ANALOG_MISC_TOG */
#define USB_ANALOG_MISC_TOG_COUNT                (2U)

/*! @name DIGPROG - Chip Silicon Version */
#define USB_ANALOG_DIGPROG_MINOR_MASK            (0xFFU)
#define USB_ANALOG_DIGPROG_MINOR_SHIFT           (0U)
#define USB_ANALOG_DIGPROG_MINOR(x)              (((uint32_t)(((uint32_t)(x)) << USB_ANALOG_DIGPROG_MINOR_SHIFT)) & USB_ANALOG_DIGPROG_MINOR_MASK)
#define USB_ANALOG_DIGPROG_MAJOR_LOWER_MASK      (0xFF00U)
#define USB_ANALOG_DIGPROG_MAJOR_LOWER_SHIFT     (8U)
#define USB_ANALOG_DIGPROG_MAJOR_LOWER(x)        (((uint32_t)(((uint32_t)(x)) << USB_ANALOG_DIGPROG_MAJOR_LOWER_SHIFT)) & USB_ANALOG_DIGPROG_MAJOR_LOWER_MASK)
#define USB_ANALOG_DIGPROG_MAJOR_UPPER_MASK      (0xFF0000U)
#define USB_ANALOG_DIGPROG_MAJOR_UPPER_SHIFT     (16U)
#define USB_ANALOG_DIGPROG_MAJOR_UPPER(x)        (((uint32_t)(((uint32_t)(x)) << USB_ANALOG_DIGPROG_MAJOR_UPPER_SHIFT)) & USB_ANALOG_DIGPROG_MAJOR_UPPER_MASK)


/*!
 * @}
 */ /* end of group USB_ANALOG_Register_Masks */


/* USB_ANALOG - Peripheral instance base addresses */
/** Peripheral USB_ANALOG base pointer */
#define USB_ANALOG_BASE_PTR                      ((USB_ANALOG_MemMapPtr)0x400D8000u)
/** Array initializer of USB_ANALOG peripheral base pointers */
#define USB_ANALOG_BASE_PTRS                     { USB_ANALOG_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- USB_ANALOG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USB_ANALOG_Register_Accessor_Macros USB_ANALOG - Register accessor macros
 * @{
 */


/* USB_ANALOG - Register instance definitions */
/* USB_ANALOG */
#define USB_ANALOG_USB1_VBUS_DETECT              USB_ANALOG_VBUS_DETECT_REG(USB_ANALOG_BASE_PTR,0)
#define USB_ANALOG_USB1_VBUS_DETECT_SET          USB_ANALOG_VBUS_DETECT_SET_REG(USB_ANALOG_BASE_PTR,0)
#define USB_ANALOG_USB1_VBUS_DETECT_CLR          USB_ANALOG_VBUS_DETECT_CLR_REG(USB_ANALOG_BASE_PTR,0)
#define USB_ANALOG_USB1_VBUS_DETECT_TOG          USB_ANALOG_VBUS_DETECT_TOG_REG(USB_ANALOG_BASE_PTR,0)
#define USB_ANALOG_USB1_CHRG_DETECT              USB_ANALOG_CHRG_DETECT_REG(USB_ANALOG_BASE_PTR,0)
#define USB_ANALOG_USB1_CHRG_DETECT_SET          USB_ANALOG_CHRG_DETECT_SET_REG(USB_ANALOG_BASE_PTR,0)
#define USB_ANALOG_USB1_CHRG_DETECT_CLR          USB_ANALOG_CHRG_DETECT_CLR_REG(USB_ANALOG_BASE_PTR,0)
#define USB_ANALOG_USB1_CHRG_DETECT_TOG          USB_ANALOG_CHRG_DETECT_TOG_REG(USB_ANALOG_BASE_PTR,0)
#define USB_ANALOG_USB1_VBUS_DETECT_STAT         USB_ANALOG_VBUS_DETECT_STAT_REG(USB_ANALOG_BASE_PTR,0)
#define USB_ANALOG_USB1_CHRG_DETECT_STAT         USB_ANALOG_CHRG_DETECT_STAT_REG(USB_ANALOG_BASE_PTR,0)
#define USB_ANALOG_USB1_MISC                     USB_ANALOG_MISC_REG(USB_ANALOG_BASE_PTR,0)
#define USB_ANALOG_USB1_MISC_SET                 USB_ANALOG_MISC_SET_REG(USB_ANALOG_BASE_PTR,0)
#define USB_ANALOG_USB1_MISC_CLR                 USB_ANALOG_MISC_CLR_REG(USB_ANALOG_BASE_PTR,0)
#define USB_ANALOG_USB1_MISC_TOG                 USB_ANALOG_MISC_TOG_REG(USB_ANALOG_BASE_PTR,0)
#define USB_ANALOG_USB2_VBUS_DETECT              USB_ANALOG_VBUS_DETECT_REG(USB_ANALOG_BASE_PTR,1)
#define USB_ANALOG_USB2_VBUS_DETECT_SET          USB_ANALOG_VBUS_DETECT_SET_REG(USB_ANALOG_BASE_PTR,1)
#define USB_ANALOG_USB2_VBUS_DETECT_CLR          USB_ANALOG_VBUS_DETECT_CLR_REG(USB_ANALOG_BASE_PTR,1)
#define USB_ANALOG_USB2_VBUS_DETECT_TOG          USB_ANALOG_VBUS_DETECT_TOG_REG(USB_ANALOG_BASE_PTR,1)
#define USB_ANALOG_USB2_CHRG_DETECT              USB_ANALOG_CHRG_DETECT_REG(USB_ANALOG_BASE_PTR,1)
#define USB_ANALOG_USB2_CHRG_DETECT_SET          USB_ANALOG_CHRG_DETECT_SET_REG(USB_ANALOG_BASE_PTR,1)
#define USB_ANALOG_USB2_CHRG_DETECT_CLR          USB_ANALOG_CHRG_DETECT_CLR_REG(USB_ANALOG_BASE_PTR,1)
#define USB_ANALOG_USB2_CHRG_DETECT_TOG          USB_ANALOG_CHRG_DETECT_TOG_REG(USB_ANALOG_BASE_PTR,1)
#define USB_ANALOG_USB2_VBUS_DETECT_STAT         USB_ANALOG_VBUS_DETECT_STAT_REG(USB_ANALOG_BASE_PTR,1)
#define USB_ANALOG_USB2_CHRG_DETECT_STAT         USB_ANALOG_CHRG_DETECT_STAT_REG(USB_ANALOG_BASE_PTR,1)
#define USB_ANALOG_USB2_MISC                     USB_ANALOG_MISC_REG(USB_ANALOG_BASE_PTR,1)
#define USB_ANALOG_USB2_MISC_SET                 USB_ANALOG_MISC_SET_REG(USB_ANALOG_BASE_PTR,1)
#define USB_ANALOG_USB2_MISC_CLR                 USB_ANALOG_MISC_CLR_REG(USB_ANALOG_BASE_PTR,1)
#define USB_ANALOG_USB2_MISC_TOG                 USB_ANALOG_MISC_TOG_REG(USB_ANALOG_BASE_PTR,1)
#define USB_ANALOG_DIGPROG                       USB_ANALOG_DIGPROG_REG(USB_ANALOG_BASE_PTR)

/* USB_ANALOG - Register array accessors */
#define USB_ANALOG_VBUS_DETECT(index)            USB_ANALOG_VBUS_DETECT_REG(USB_ANALOG_BASE_PTR,index)
#define USB_ANALOG_VBUS_DETECT_SET(index)        USB_ANALOG_VBUS_DETECT_SET_REG(USB_ANALOG_BASE_PTR,index)
#define USB_ANALOG_VBUS_DETECT_CLR(index)        USB_ANALOG_VBUS_DETECT_CLR_REG(USB_ANALOG_BASE_PTR,index)
#define USB_ANALOG_VBUS_DETECT_TOG(index)        USB_ANALOG_VBUS_DETECT_TOG_REG(USB_ANALOG_BASE_PTR,index)
#define USB_ANALOG_CHRG_DETECT(index)            USB_ANALOG_CHRG_DETECT_REG(USB_ANALOG_BASE_PTR,index)
#define USB_ANALOG_CHRG_DETECT_SET(index)        USB_ANALOG_CHRG_DETECT_SET_REG(USB_ANALOG_BASE_PTR,index)
#define USB_ANALOG_CHRG_DETECT_CLR(index)        USB_ANALOG_CHRG_DETECT_CLR_REG(USB_ANALOG_BASE_PTR,index)
#define USB_ANALOG_CHRG_DETECT_TOG(index)        USB_ANALOG_CHRG_DETECT_TOG_REG(USB_ANALOG_BASE_PTR,index)
#define USB_ANALOG_VBUS_DETECT_STAT(index)       USB_ANALOG_VBUS_DETECT_STAT_REG(USB_ANALOG_BASE_PTR,index)
#define USB_ANALOG_CHRG_DETECT_STAT(index)       USB_ANALOG_CHRG_DETECT_STAT_REG(USB_ANALOG_BASE_PTR,index)
#define USB_ANALOG_MISC(index)                   USB_ANALOG_MISC_REG(USB_ANALOG_BASE_PTR,index)
#define USB_ANALOG_MISC_SET(index)               USB_ANALOG_MISC_SET_REG(USB_ANALOG_BASE_PTR,index)
#define USB_ANALOG_MISC_CLR(index)               USB_ANALOG_MISC_CLR_REG(USB_ANALOG_BASE_PTR,index)
#define USB_ANALOG_MISC_TOG(index)               USB_ANALOG_MISC_TOG_REG(USB_ANALOG_BASE_PTR,index)

/*!
 * @}
 */ /* end of group USB_ANALOG_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group USB_ANALOG_Peripheral */


/* ----------------------------------------------------------------------------
   -- USDHC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Peripheral USDHC
 * @{
 */

/** USDHC - Peripheral register structure */
typedef struct USDHC_MemMap {
  uint32_t DS_ADDR;                                /**< DMA System Address, offset: 0x0 */
  uint32_t BLK_ATT;                                /**< Block Attributes, offset: 0x4 */
  uint32_t CMD_ARG;                                /**< Command Argument, offset: 0x8 */
  uint32_t CMD_XFR_TYP;                            /**< Command Transfer Type, offset: 0xC */
  uint32_t CMD_RSP0;                               /**< Command Response0, offset: 0x10 */
  uint32_t CMD_RSP1;                               /**< Command Response1, offset: 0x14 */
  uint32_t CMD_RSP2;                               /**< Command Response2, offset: 0x18 */
  uint32_t CMD_RSP3;                               /**< Command Response3, offset: 0x1C */
  uint32_t DATA_BUFF_ACC_PORT;                     /**< Data Buffer Access Port, offset: 0x20 */
  uint32_t PRES_STATE;                             /**< Present State, offset: 0x24 */
  uint32_t PROT_CTRL;                              /**< Protocol Control, offset: 0x28 */
  uint32_t SYS_CTRL;                               /**< System Control, offset: 0x2C */
  uint32_t INT_STATUS;                             /**< Interrupt Status, offset: 0x30 */
  uint32_t INT_STATUS_EN;                          /**< Interrupt Status Enable, offset: 0x34 */
  uint32_t INT_SIGNAL_EN;                          /**< Interrupt Signal Enable, offset: 0x38 */
  uint32_t AUTOCMD12_ERR_STATUS;                   /**< Auto CMD12 Error Status, offset: 0x3C */
  uint32_t HOST_CTRL_CAP;                          /**< Host Controller Capabilities, offset: 0x40 */
  uint32_t WTMK_LVL;                               /**< Watermark Level, offset: 0x44 */
  uint32_t MIX_CTRL;                               /**< Mixer Control, offset: 0x48 */
  uint8_t RESERVED_0[4];
  uint32_t FORCE_EVENT;                            /**< Force Event, offset: 0x50 */
  uint32_t ADMA_ERR_STATUS;                        /**< ADMA Error Status Register, offset: 0x54 */
  uint32_t ADMA_SYS_ADDR;                          /**< ADMA System Address, offset: 0x58 */
  uint8_t RESERVED_1[4];
  uint32_t DLL_CTRL;                               /**< DLL (Delay Line) Control, offset: 0x60 */
  uint32_t DLL_STATUS;                             /**< DLL Status, offset: 0x64 */
  uint32_t CLK_TUNE_CTRL_STATUS;                   /**< CLK Tuning Control and Status, offset: 0x68 */
  uint8_t RESERVED_2[84];
  uint32_t VEND_SPEC;                              /**< Vendor Specific Register, offset: 0xC0 */
  uint32_t MMC_BOOT;                               /**< MMC Boot Register, offset: 0xC4 */
  uint32_t VEND_SPEC2;                             /**< Vendor Specific 2 Register, offset: 0xC8 */
  uint32_t TUNING_CTRL;                            /**< Tuning Control Register, offset: 0xCC */
} volatile *USDHC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- USDHC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Register_Accessor_Macros USDHC - Register accessor macros
 * @{
 */


/* USDHC - Register accessors */
#define USDHC_DS_ADDR_REG(base)                  ((base)->DS_ADDR)
#define USDHC_BLK_ATT_REG(base)                  ((base)->BLK_ATT)
#define USDHC_CMD_ARG_REG(base)                  ((base)->CMD_ARG)
#define USDHC_CMD_XFR_TYP_REG(base)              ((base)->CMD_XFR_TYP)
#define USDHC_CMD_RSP0_REG(base)                 ((base)->CMD_RSP0)
#define USDHC_CMD_RSP1_REG(base)                 ((base)->CMD_RSP1)
#define USDHC_CMD_RSP2_REG(base)                 ((base)->CMD_RSP2)
#define USDHC_CMD_RSP3_REG(base)                 ((base)->CMD_RSP3)
#define USDHC_DATA_BUFF_ACC_PORT_REG(base)       ((base)->DATA_BUFF_ACC_PORT)
#define USDHC_PRES_STATE_REG(base)               ((base)->PRES_STATE)
#define USDHC_PROT_CTRL_REG(base)                ((base)->PROT_CTRL)
#define USDHC_SYS_CTRL_REG(base)                 ((base)->SYS_CTRL)
#define USDHC_INT_STATUS_REG(base)               ((base)->INT_STATUS)
#define USDHC_INT_STATUS_EN_REG(base)            ((base)->INT_STATUS_EN)
#define USDHC_INT_SIGNAL_EN_REG(base)            ((base)->INT_SIGNAL_EN)
#define USDHC_AUTOCMD12_ERR_STATUS_REG(base)     ((base)->AUTOCMD12_ERR_STATUS)
#define USDHC_HOST_CTRL_CAP_REG(base)            ((base)->HOST_CTRL_CAP)
#define USDHC_WTMK_LVL_REG(base)                 ((base)->WTMK_LVL)
#define USDHC_MIX_CTRL_REG(base)                 ((base)->MIX_CTRL)
#define USDHC_FORCE_EVENT_REG(base)              ((base)->FORCE_EVENT)
#define USDHC_ADMA_ERR_STATUS_REG(base)          ((base)->ADMA_ERR_STATUS)
#define USDHC_ADMA_SYS_ADDR_REG(base)            ((base)->ADMA_SYS_ADDR)
#define USDHC_DLL_CTRL_REG(base)                 ((base)->DLL_CTRL)
#define USDHC_DLL_STATUS_REG(base)               ((base)->DLL_STATUS)
#define USDHC_CLK_TUNE_CTRL_STATUS_REG(base)     ((base)->CLK_TUNE_CTRL_STATUS)
#define USDHC_VEND_SPEC_REG(base)                ((base)->VEND_SPEC)
#define USDHC_MMC_BOOT_REG(base)                 ((base)->MMC_BOOT)
#define USDHC_VEND_SPEC2_REG(base)               ((base)->VEND_SPEC2)
#define USDHC_TUNING_CTRL_REG(base)              ((base)->TUNING_CTRL)

/*!
 * @}
 */ /* end of group USDHC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- USDHC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Register_Masks USDHC Register Masks
 * @{
 */

/*! @name DS_ADDR - DMA System Address */
#define USDHC_DS_ADDR_DS_ADDR_MASK               (0xFFFFFFFFU)
#define USDHC_DS_ADDR_DS_ADDR_SHIFT              (0U)
#define USDHC_DS_ADDR_DS_ADDR(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_DS_ADDR_DS_ADDR_SHIFT)) & USDHC_DS_ADDR_DS_ADDR_MASK)

/*! @name BLK_ATT - Block Attributes */
#define USDHC_BLK_ATT_BLKSIZE_MASK               (0x1FFFU)
#define USDHC_BLK_ATT_BLKSIZE_SHIFT              (0U)
#define USDHC_BLK_ATT_BLKSIZE(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_BLK_ATT_BLKSIZE_SHIFT)) & USDHC_BLK_ATT_BLKSIZE_MASK)
#define USDHC_BLK_ATT_BLKCNT_MASK                (0xFFFF0000U)
#define USDHC_BLK_ATT_BLKCNT_SHIFT               (16U)
#define USDHC_BLK_ATT_BLKCNT(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_BLK_ATT_BLKCNT_SHIFT)) & USDHC_BLK_ATT_BLKCNT_MASK)

/*! @name CMD_ARG - Command Argument */
#define USDHC_CMD_ARG_CMDARG_MASK                (0xFFFFFFFFU)
#define USDHC_CMD_ARG_CMDARG_SHIFT               (0U)
#define USDHC_CMD_ARG_CMDARG(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_ARG_CMDARG_SHIFT)) & USDHC_CMD_ARG_CMDARG_MASK)

/*! @name CMD_XFR_TYP - Command Transfer Type */
#define USDHC_CMD_XFR_TYP_RSPTYP_MASK            (0x30000U)
#define USDHC_CMD_XFR_TYP_RSPTYP_SHIFT           (16U)
#define USDHC_CMD_XFR_TYP_RSPTYP(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_RSPTYP_SHIFT)) & USDHC_CMD_XFR_TYP_RSPTYP_MASK)
#define USDHC_CMD_XFR_TYP_CCCEN_MASK             (0x80000U)
#define USDHC_CMD_XFR_TYP_CCCEN_SHIFT            (19U)
#define USDHC_CMD_XFR_TYP_CICEN_MASK             (0x100000U)
#define USDHC_CMD_XFR_TYP_CICEN_SHIFT            (20U)
#define USDHC_CMD_XFR_TYP_DPSEL_MASK             (0x200000U)
#define USDHC_CMD_XFR_TYP_DPSEL_SHIFT            (21U)
#define USDHC_CMD_XFR_TYP_CMDTYP_MASK            (0xC00000U)
#define USDHC_CMD_XFR_TYP_CMDTYP_SHIFT           (22U)
#define USDHC_CMD_XFR_TYP_CMDTYP(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_CMDTYP_SHIFT)) & USDHC_CMD_XFR_TYP_CMDTYP_MASK)
#define USDHC_CMD_XFR_TYP_CMDINX_MASK            (0x3F000000U)
#define USDHC_CMD_XFR_TYP_CMDINX_SHIFT           (24U)
#define USDHC_CMD_XFR_TYP_CMDINX(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_CMDINX_SHIFT)) & USDHC_CMD_XFR_TYP_CMDINX_MASK)

/*! @name CMD_RSP0 - Command Response0 */
#define USDHC_CMD_RSP0_CMDRSP0_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP0_CMDRSP0_SHIFT             (0U)
#define USDHC_CMD_RSP0_CMDRSP0(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP0_CMDRSP0_SHIFT)) & USDHC_CMD_RSP0_CMDRSP0_MASK)

/*! @name CMD_RSP1 - Command Response1 */
#define USDHC_CMD_RSP1_CMDRSP1_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP1_CMDRSP1_SHIFT             (0U)
#define USDHC_CMD_RSP1_CMDRSP1(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP1_CMDRSP1_SHIFT)) & USDHC_CMD_RSP1_CMDRSP1_MASK)

/*! @name CMD_RSP2 - Command Response2 */
#define USDHC_CMD_RSP2_CMDRSP2_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP2_CMDRSP2_SHIFT             (0U)
#define USDHC_CMD_RSP2_CMDRSP2(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP2_CMDRSP2_SHIFT)) & USDHC_CMD_RSP2_CMDRSP2_MASK)

/*! @name CMD_RSP3 - Command Response3 */
#define USDHC_CMD_RSP3_CMDRSP3_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP3_CMDRSP3_SHIFT             (0U)
#define USDHC_CMD_RSP3_CMDRSP3(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP3_CMDRSP3_SHIFT)) & USDHC_CMD_RSP3_CMDRSP3_MASK)

/*! @name DATA_BUFF_ACC_PORT - Data Buffer Access Port */
#define USDHC_DATA_BUFF_ACC_PORT_DATCONT_MASK    (0xFFFFFFFFU)
#define USDHC_DATA_BUFF_ACC_PORT_DATCONT_SHIFT   (0U)
#define USDHC_DATA_BUFF_ACC_PORT_DATCONT(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_DATA_BUFF_ACC_PORT_DATCONT_SHIFT)) & USDHC_DATA_BUFF_ACC_PORT_DATCONT_MASK)

/*! @name PRES_STATE - Present State */
#define USDHC_PRES_STATE_CIHB_MASK               (0x1U)
#define USDHC_PRES_STATE_CIHB_SHIFT              (0U)
#define USDHC_PRES_STATE_CDIHB_MASK              (0x2U)
#define USDHC_PRES_STATE_CDIHB_SHIFT             (1U)
#define USDHC_PRES_STATE_DLA_MASK                (0x4U)
#define USDHC_PRES_STATE_DLA_SHIFT               (2U)
#define USDHC_PRES_STATE_SDSTB_MASK              (0x8U)
#define USDHC_PRES_STATE_SDSTB_SHIFT             (3U)
#define USDHC_PRES_STATE_IPGOFF_MASK             (0x10U)
#define USDHC_PRES_STATE_IPGOFF_SHIFT            (4U)
#define USDHC_PRES_STATE_HCKOFF_MASK             (0x20U)
#define USDHC_PRES_STATE_HCKOFF_SHIFT            (5U)
#define USDHC_PRES_STATE_PEROFF_MASK             (0x40U)
#define USDHC_PRES_STATE_PEROFF_SHIFT            (6U)
#define USDHC_PRES_STATE_SDOFF_MASK              (0x80U)
#define USDHC_PRES_STATE_SDOFF_SHIFT             (7U)
#define USDHC_PRES_STATE_WTA_MASK                (0x100U)
#define USDHC_PRES_STATE_WTA_SHIFT               (8U)
#define USDHC_PRES_STATE_RTA_MASK                (0x200U)
#define USDHC_PRES_STATE_RTA_SHIFT               (9U)
#define USDHC_PRES_STATE_BWEN_MASK               (0x400U)
#define USDHC_PRES_STATE_BWEN_SHIFT              (10U)
#define USDHC_PRES_STATE_BREN_MASK               (0x800U)
#define USDHC_PRES_STATE_BREN_SHIFT              (11U)
#define USDHC_PRES_STATE_RTR_MASK                (0x1000U)
#define USDHC_PRES_STATE_RTR_SHIFT               (12U)
#define USDHC_PRES_STATE_TSCD_MASK               (0x8000U)
#define USDHC_PRES_STATE_TSCD_SHIFT              (15U)
#define USDHC_PRES_STATE_CINST_MASK              (0x10000U)
#define USDHC_PRES_STATE_CINST_SHIFT             (16U)
#define USDHC_PRES_STATE_CDPL_MASK               (0x40000U)
#define USDHC_PRES_STATE_CDPL_SHIFT              (18U)
#define USDHC_PRES_STATE_WPSPL_MASK              (0x80000U)
#define USDHC_PRES_STATE_WPSPL_SHIFT             (19U)
#define USDHC_PRES_STATE_CLSL_MASK               (0x800000U)
#define USDHC_PRES_STATE_CLSL_SHIFT              (23U)
#define USDHC_PRES_STATE_DLSL_MASK               (0xFF000000U)
#define USDHC_PRES_STATE_DLSL_SHIFT              (24U)
#define USDHC_PRES_STATE_DLSL(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_DLSL_SHIFT)) & USDHC_PRES_STATE_DLSL_MASK)

/*! @name PROT_CTRL - Protocol Control */
#define USDHC_PROT_CTRL_LCTL_MASK                (0x1U)
#define USDHC_PROT_CTRL_LCTL_SHIFT               (0U)
#define USDHC_PROT_CTRL_DTW_MASK                 (0x6U)
#define USDHC_PROT_CTRL_DTW_SHIFT                (1U)
#define USDHC_PROT_CTRL_DTW(x)                   (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_DTW_SHIFT)) & USDHC_PROT_CTRL_DTW_MASK)
#define USDHC_PROT_CTRL_D3CD_MASK                (0x8U)
#define USDHC_PROT_CTRL_D3CD_SHIFT               (3U)
#define USDHC_PROT_CTRL_EMODE_MASK               (0x30U)
#define USDHC_PROT_CTRL_EMODE_SHIFT              (4U)
#define USDHC_PROT_CTRL_EMODE(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_EMODE_SHIFT)) & USDHC_PROT_CTRL_EMODE_MASK)
#define USDHC_PROT_CTRL_CDTL_MASK                (0x40U)
#define USDHC_PROT_CTRL_CDTL_SHIFT               (6U)
#define USDHC_PROT_CTRL_CDSS_MASK                (0x80U)
#define USDHC_PROT_CTRL_CDSS_SHIFT               (7U)
#define USDHC_PROT_CTRL_DMASEL_MASK              (0x300U)
#define USDHC_PROT_CTRL_DMASEL_SHIFT             (8U)
#define USDHC_PROT_CTRL_DMASEL(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_DMASEL_SHIFT)) & USDHC_PROT_CTRL_DMASEL_MASK)
#define USDHC_PROT_CTRL_SABGREQ_MASK             (0x10000U)
#define USDHC_PROT_CTRL_SABGREQ_SHIFT            (16U)
#define USDHC_PROT_CTRL_CREQ_MASK                (0x20000U)
#define USDHC_PROT_CTRL_CREQ_SHIFT               (17U)
#define USDHC_PROT_CTRL_RWCTL_MASK               (0x40000U)
#define USDHC_PROT_CTRL_RWCTL_SHIFT              (18U)
#define USDHC_PROT_CTRL_IABG_MASK                (0x80000U)
#define USDHC_PROT_CTRL_IABG_SHIFT               (19U)
#define USDHC_PROT_CTRL_RD_DONE_NO_8CLK_MASK     (0x100000U)
#define USDHC_PROT_CTRL_RD_DONE_NO_8CLK_SHIFT    (20U)
#define USDHC_PROT_CTRL_WECINT_MASK              (0x1000000U)
#define USDHC_PROT_CTRL_WECINT_SHIFT             (24U)
#define USDHC_PROT_CTRL_WECINS_MASK              (0x2000000U)
#define USDHC_PROT_CTRL_WECINS_SHIFT             (25U)
#define USDHC_PROT_CTRL_WECRM_MASK               (0x4000000U)
#define USDHC_PROT_CTRL_WECRM_SHIFT              (26U)
#define USDHC_PROT_CTRL_BURST_LEN_EN_MASK        (0x38000000U)
#define USDHC_PROT_CTRL_BURST_LEN_EN_SHIFT       (27U)
#define USDHC_PROT_CTRL_BURST_LEN_EN(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_BURST_LEN_EN_SHIFT)) & USDHC_PROT_CTRL_BURST_LEN_EN_MASK)
#define USDHC_PROT_CTRL_NON_EXACT_BLK_RD_MASK    (0x40000000U)
#define USDHC_PROT_CTRL_NON_EXACT_BLK_RD_SHIFT   (30U)

/*! @name SYS_CTRL - System Control */
#define USDHC_SYS_CTRL_DVS_MASK                  (0xF0U)
#define USDHC_SYS_CTRL_DVS_SHIFT                 (4U)
#define USDHC_SYS_CTRL_DVS(x)                    (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_DVS_SHIFT)) & USDHC_SYS_CTRL_DVS_MASK)
#define USDHC_SYS_CTRL_SDCLKFS_MASK              (0xFF00U)
#define USDHC_SYS_CTRL_SDCLKFS_SHIFT             (8U)
#define USDHC_SYS_CTRL_SDCLKFS(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_SDCLKFS_SHIFT)) & USDHC_SYS_CTRL_SDCLKFS_MASK)
#define USDHC_SYS_CTRL_DTOCV_MASK                (0xF0000U)
#define USDHC_SYS_CTRL_DTOCV_SHIFT               (16U)
#define USDHC_SYS_CTRL_DTOCV(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_DTOCV_SHIFT)) & USDHC_SYS_CTRL_DTOCV_MASK)
#define USDHC_SYS_CTRL_IPP_RST_N_MASK            (0x800000U)
#define USDHC_SYS_CTRL_IPP_RST_N_SHIFT           (23U)
#define USDHC_SYS_CTRL_RSTA_MASK                 (0x1000000U)
#define USDHC_SYS_CTRL_RSTA_SHIFT                (24U)
#define USDHC_SYS_CTRL_RSTC_MASK                 (0x2000000U)
#define USDHC_SYS_CTRL_RSTC_SHIFT                (25U)
#define USDHC_SYS_CTRL_RSTD_MASK                 (0x4000000U)
#define USDHC_SYS_CTRL_RSTD_SHIFT                (26U)
#define USDHC_SYS_CTRL_INITA_MASK                (0x8000000U)
#define USDHC_SYS_CTRL_INITA_SHIFT               (27U)
#define USDHC_SYS_CTRL_RSTT_MASK                 (0x10000000U)
#define USDHC_SYS_CTRL_RSTT_SHIFT                (28U)

/*! @name INT_STATUS - Interrupt Status */
#define USDHC_INT_STATUS_CC_MASK                 (0x1U)
#define USDHC_INT_STATUS_CC_SHIFT                (0U)
#define USDHC_INT_STATUS_TC_MASK                 (0x2U)
#define USDHC_INT_STATUS_TC_SHIFT                (1U)
#define USDHC_INT_STATUS_BGE_MASK                (0x4U)
#define USDHC_INT_STATUS_BGE_SHIFT               (2U)
#define USDHC_INT_STATUS_DINT_MASK               (0x8U)
#define USDHC_INT_STATUS_DINT_SHIFT              (3U)
#define USDHC_INT_STATUS_BWR_MASK                (0x10U)
#define USDHC_INT_STATUS_BWR_SHIFT               (4U)
#define USDHC_INT_STATUS_BRR_MASK                (0x20U)
#define USDHC_INT_STATUS_BRR_SHIFT               (5U)
#define USDHC_INT_STATUS_CINS_MASK               (0x40U)
#define USDHC_INT_STATUS_CINS_SHIFT              (6U)
#define USDHC_INT_STATUS_CRM_MASK                (0x80U)
#define USDHC_INT_STATUS_CRM_SHIFT               (7U)
#define USDHC_INT_STATUS_CINT_MASK               (0x100U)
#define USDHC_INT_STATUS_CINT_SHIFT              (8U)
#define USDHC_INT_STATUS_RTE_MASK                (0x1000U)
#define USDHC_INT_STATUS_RTE_SHIFT               (12U)
#define USDHC_INT_STATUS_TP_MASK                 (0x4000U)
#define USDHC_INT_STATUS_TP_SHIFT                (14U)
#define USDHC_INT_STATUS_CTOE_MASK               (0x10000U)
#define USDHC_INT_STATUS_CTOE_SHIFT              (16U)
#define USDHC_INT_STATUS_CCE_MASK                (0x20000U)
#define USDHC_INT_STATUS_CCE_SHIFT               (17U)
#define USDHC_INT_STATUS_CEBE_MASK               (0x40000U)
#define USDHC_INT_STATUS_CEBE_SHIFT              (18U)
#define USDHC_INT_STATUS_CIE_MASK                (0x80000U)
#define USDHC_INT_STATUS_CIE_SHIFT               (19U)
#define USDHC_INT_STATUS_DTOE_MASK               (0x100000U)
#define USDHC_INT_STATUS_DTOE_SHIFT              (20U)
#define USDHC_INT_STATUS_DCE_MASK                (0x200000U)
#define USDHC_INT_STATUS_DCE_SHIFT               (21U)
#define USDHC_INT_STATUS_DEBE_MASK               (0x400000U)
#define USDHC_INT_STATUS_DEBE_SHIFT              (22U)
#define USDHC_INT_STATUS_AC12E_MASK              (0x1000000U)
#define USDHC_INT_STATUS_AC12E_SHIFT             (24U)
#define USDHC_INT_STATUS_TNE_MASK                (0x4000000U)
#define USDHC_INT_STATUS_TNE_SHIFT               (26U)
#define USDHC_INT_STATUS_DMAE_MASK               (0x10000000U)
#define USDHC_INT_STATUS_DMAE_SHIFT              (28U)

/*! @name INT_STATUS_EN - Interrupt Status Enable */
#define USDHC_INT_STATUS_EN_CCSEN_MASK           (0x1U)
#define USDHC_INT_STATUS_EN_CCSEN_SHIFT          (0U)
#define USDHC_INT_STATUS_EN_TCSEN_MASK           (0x2U)
#define USDHC_INT_STATUS_EN_TCSEN_SHIFT          (1U)
#define USDHC_INT_STATUS_EN_BGESEN_MASK          (0x4U)
#define USDHC_INT_STATUS_EN_BGESEN_SHIFT         (2U)
#define USDHC_INT_STATUS_EN_DINTSEN_MASK         (0x8U)
#define USDHC_INT_STATUS_EN_DINTSEN_SHIFT        (3U)
#define USDHC_INT_STATUS_EN_BWRSEN_MASK          (0x10U)
#define USDHC_INT_STATUS_EN_BWRSEN_SHIFT         (4U)
#define USDHC_INT_STATUS_EN_BRRSEN_MASK          (0x20U)
#define USDHC_INT_STATUS_EN_BRRSEN_SHIFT         (5U)
#define USDHC_INT_STATUS_EN_CINSSEN_MASK         (0x40U)
#define USDHC_INT_STATUS_EN_CINSSEN_SHIFT        (6U)
#define USDHC_INT_STATUS_EN_CRMSEN_MASK          (0x80U)
#define USDHC_INT_STATUS_EN_CRMSEN_SHIFT         (7U)
#define USDHC_INT_STATUS_EN_CINTSEN_MASK         (0x100U)
#define USDHC_INT_STATUS_EN_CINTSEN_SHIFT        (8U)
#define USDHC_INT_STATUS_EN_RTESEN_MASK          (0x1000U)
#define USDHC_INT_STATUS_EN_RTESEN_SHIFT         (12U)
#define USDHC_INT_STATUS_EN_TPSEN_MASK           (0x4000U)
#define USDHC_INT_STATUS_EN_TPSEN_SHIFT          (14U)
#define USDHC_INT_STATUS_EN_CTOESEN_MASK         (0x10000U)
#define USDHC_INT_STATUS_EN_CTOESEN_SHIFT        (16U)
#define USDHC_INT_STATUS_EN_CCESEN_MASK          (0x20000U)
#define USDHC_INT_STATUS_EN_CCESEN_SHIFT         (17U)
#define USDHC_INT_STATUS_EN_CEBESEN_MASK         (0x40000U)
#define USDHC_INT_STATUS_EN_CEBESEN_SHIFT        (18U)
#define USDHC_INT_STATUS_EN_CIESEN_MASK          (0x80000U)
#define USDHC_INT_STATUS_EN_CIESEN_SHIFT         (19U)
#define USDHC_INT_STATUS_EN_DTOESEN_MASK         (0x100000U)
#define USDHC_INT_STATUS_EN_DTOESEN_SHIFT        (20U)
#define USDHC_INT_STATUS_EN_DCESEN_MASK          (0x200000U)
#define USDHC_INT_STATUS_EN_DCESEN_SHIFT         (21U)
#define USDHC_INT_STATUS_EN_DEBESEN_MASK         (0x400000U)
#define USDHC_INT_STATUS_EN_DEBESEN_SHIFT        (22U)
#define USDHC_INT_STATUS_EN_AC12ESEN_MASK        (0x1000000U)
#define USDHC_INT_STATUS_EN_AC12ESEN_SHIFT       (24U)
#define USDHC_INT_STATUS_EN_TNESEN_MASK          (0x4000000U)
#define USDHC_INT_STATUS_EN_TNESEN_SHIFT         (26U)
#define USDHC_INT_STATUS_EN_DMAESEN_MASK         (0x10000000U)
#define USDHC_INT_STATUS_EN_DMAESEN_SHIFT        (28U)

/*! @name INT_SIGNAL_EN - Interrupt Signal Enable */
#define USDHC_INT_SIGNAL_EN_CCIEN_MASK           (0x1U)
#define USDHC_INT_SIGNAL_EN_CCIEN_SHIFT          (0U)
#define USDHC_INT_SIGNAL_EN_TCIEN_MASK           (0x2U)
#define USDHC_INT_SIGNAL_EN_TCIEN_SHIFT          (1U)
#define USDHC_INT_SIGNAL_EN_BGEIEN_MASK          (0x4U)
#define USDHC_INT_SIGNAL_EN_BGEIEN_SHIFT         (2U)
#define USDHC_INT_SIGNAL_EN_DINTIEN_MASK         (0x8U)
#define USDHC_INT_SIGNAL_EN_DINTIEN_SHIFT        (3U)
#define USDHC_INT_SIGNAL_EN_BWRIEN_MASK          (0x10U)
#define USDHC_INT_SIGNAL_EN_BWRIEN_SHIFT         (4U)
#define USDHC_INT_SIGNAL_EN_BRRIEN_MASK          (0x20U)
#define USDHC_INT_SIGNAL_EN_BRRIEN_SHIFT         (5U)
#define USDHC_INT_SIGNAL_EN_CINSIEN_MASK         (0x40U)
#define USDHC_INT_SIGNAL_EN_CINSIEN_SHIFT        (6U)
#define USDHC_INT_SIGNAL_EN_CRMIEN_MASK          (0x80U)
#define USDHC_INT_SIGNAL_EN_CRMIEN_SHIFT         (7U)
#define USDHC_INT_SIGNAL_EN_CINTIEN_MASK         (0x100U)
#define USDHC_INT_SIGNAL_EN_CINTIEN_SHIFT        (8U)
#define USDHC_INT_SIGNAL_EN_RTEIEN_MASK          (0x1000U)
#define USDHC_INT_SIGNAL_EN_RTEIEN_SHIFT         (12U)
#define USDHC_INT_SIGNAL_EN_TPIEN_MASK           (0x4000U)
#define USDHC_INT_SIGNAL_EN_TPIEN_SHIFT          (14U)
#define USDHC_INT_SIGNAL_EN_CTOEIEN_MASK         (0x10000U)
#define USDHC_INT_SIGNAL_EN_CTOEIEN_SHIFT        (16U)
#define USDHC_INT_SIGNAL_EN_CCEIEN_MASK          (0x20000U)
#define USDHC_INT_SIGNAL_EN_CCEIEN_SHIFT         (17U)
#define USDHC_INT_SIGNAL_EN_CEBEIEN_MASK         (0x40000U)
#define USDHC_INT_SIGNAL_EN_CEBEIEN_SHIFT        (18U)
#define USDHC_INT_SIGNAL_EN_CIEIEN_MASK          (0x80000U)
#define USDHC_INT_SIGNAL_EN_CIEIEN_SHIFT         (19U)
#define USDHC_INT_SIGNAL_EN_DTOEIEN_MASK         (0x100000U)
#define USDHC_INT_SIGNAL_EN_DTOEIEN_SHIFT        (20U)
#define USDHC_INT_SIGNAL_EN_DCEIEN_MASK          (0x200000U)
#define USDHC_INT_SIGNAL_EN_DCEIEN_SHIFT         (21U)
#define USDHC_INT_SIGNAL_EN_DEBEIEN_MASK         (0x400000U)
#define USDHC_INT_SIGNAL_EN_DEBEIEN_SHIFT        (22U)
#define USDHC_INT_SIGNAL_EN_AC12EIEN_MASK        (0x1000000U)
#define USDHC_INT_SIGNAL_EN_AC12EIEN_SHIFT       (24U)
#define USDHC_INT_SIGNAL_EN_TNEIEN_MASK          (0x4000000U)
#define USDHC_INT_SIGNAL_EN_TNEIEN_SHIFT         (26U)
#define USDHC_INT_SIGNAL_EN_DMAEIEN_MASK         (0x10000000U)
#define USDHC_INT_SIGNAL_EN_DMAEIEN_SHIFT        (28U)

/*! @name AUTOCMD12_ERR_STATUS - Auto CMD12 Error Status */
#define USDHC_AUTOCMD12_ERR_STATUS_AC12NE_MASK   (0x1U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12NE_SHIFT  (0U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12TOE_MASK  (0x2U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12TOE_SHIFT (1U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12EBE_MASK  (0x4U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12EBE_SHIFT (2U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12CE_MASK   (0x8U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12CE_SHIFT  (3U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12IE_MASK   (0x10U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12IE_SHIFT  (4U)
#define USDHC_AUTOCMD12_ERR_STATUS_CNIBAC12E_MASK (0x80U)
#define USDHC_AUTOCMD12_ERR_STATUS_CNIBAC12E_SHIFT (7U)
#define USDHC_AUTOCMD12_ERR_STATUS_EXECUTE_TUNING_MASK (0x400000U)
#define USDHC_AUTOCMD12_ERR_STATUS_EXECUTE_TUNING_SHIFT (22U)
#define USDHC_AUTOCMD12_ERR_STATUS_SMP_CLK_SEL_MASK (0x800000U)
#define USDHC_AUTOCMD12_ERR_STATUS_SMP_CLK_SEL_SHIFT (23U)

/*! @name HOST_CTRL_CAP - Host Controller Capabilities */
#define USDHC_HOST_CTRL_CAP_SDR50_SUPPORT_MASK   (0x1U)
#define USDHC_HOST_CTRL_CAP_SDR50_SUPPORT_SHIFT  (0U)
#define USDHC_HOST_CTRL_CAP_SDR104_SUPPORT_MASK  (0x2U)
#define USDHC_HOST_CTRL_CAP_SDR104_SUPPORT_SHIFT (1U)
#define USDHC_HOST_CTRL_CAP_DDR50_SUPPORT_MASK   (0x4U)
#define USDHC_HOST_CTRL_CAP_DDR50_SUPPORT_SHIFT  (2U)
#define USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_MASK (0xF00U)
#define USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_SHIFT (8U)
#define USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING(x) (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_SHIFT)) & USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_MASK)
#define USDHC_HOST_CTRL_CAP_USE_TUNING_SDR50_MASK (0x2000U)
#define USDHC_HOST_CTRL_CAP_USE_TUNING_SDR50_SHIFT (13U)
#define USDHC_HOST_CTRL_CAP_RETUNING_MODE_MASK   (0xC000U)
#define USDHC_HOST_CTRL_CAP_RETUNING_MODE_SHIFT  (14U)
#define USDHC_HOST_CTRL_CAP_RETUNING_MODE(x)     (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_RETUNING_MODE_SHIFT)) & USDHC_HOST_CTRL_CAP_RETUNING_MODE_MASK)
#define USDHC_HOST_CTRL_CAP_MBL_MASK             (0x70000U)
#define USDHC_HOST_CTRL_CAP_MBL_SHIFT            (16U)
#define USDHC_HOST_CTRL_CAP_MBL(x)               (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_MBL_SHIFT)) & USDHC_HOST_CTRL_CAP_MBL_MASK)
#define USDHC_HOST_CTRL_CAP_ADMAS_MASK           (0x100000U)
#define USDHC_HOST_CTRL_CAP_ADMAS_SHIFT          (20U)
#define USDHC_HOST_CTRL_CAP_HSS_MASK             (0x200000U)
#define USDHC_HOST_CTRL_CAP_HSS_SHIFT            (21U)
#define USDHC_HOST_CTRL_CAP_DMAS_MASK            (0x400000U)
#define USDHC_HOST_CTRL_CAP_DMAS_SHIFT           (22U)
#define USDHC_HOST_CTRL_CAP_SRS_MASK             (0x800000U)
#define USDHC_HOST_CTRL_CAP_SRS_SHIFT            (23U)
#define USDHC_HOST_CTRL_CAP_VS33_MASK            (0x1000000U)
#define USDHC_HOST_CTRL_CAP_VS33_SHIFT           (24U)
#define USDHC_HOST_CTRL_CAP_VS30_MASK            (0x2000000U)
#define USDHC_HOST_CTRL_CAP_VS30_SHIFT           (25U)
#define USDHC_HOST_CTRL_CAP_VS18_MASK            (0x4000000U)
#define USDHC_HOST_CTRL_CAP_VS18_SHIFT           (26U)

/*! @name WTMK_LVL - Watermark Level */
#define USDHC_WTMK_LVL_RD_WML_MASK               (0xFFU)
#define USDHC_WTMK_LVL_RD_WML_SHIFT              (0U)
#define USDHC_WTMK_LVL_RD_WML(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_RD_WML_SHIFT)) & USDHC_WTMK_LVL_RD_WML_MASK)
#define USDHC_WTMK_LVL_RD_BRST_LEN_MASK          (0x1F00U)
#define USDHC_WTMK_LVL_RD_BRST_LEN_SHIFT         (8U)
#define USDHC_WTMK_LVL_RD_BRST_LEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_RD_BRST_LEN_SHIFT)) & USDHC_WTMK_LVL_RD_BRST_LEN_MASK)
#define USDHC_WTMK_LVL_WR_WML_MASK               (0xFF0000U)
#define USDHC_WTMK_LVL_WR_WML_SHIFT              (16U)
#define USDHC_WTMK_LVL_WR_WML(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_WR_WML_SHIFT)) & USDHC_WTMK_LVL_WR_WML_MASK)
#define USDHC_WTMK_LVL_WR_BRST_LEN_MASK          (0x1F000000U)
#define USDHC_WTMK_LVL_WR_BRST_LEN_SHIFT         (24U)
#define USDHC_WTMK_LVL_WR_BRST_LEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_WR_BRST_LEN_SHIFT)) & USDHC_WTMK_LVL_WR_BRST_LEN_MASK)

/*! @name MIX_CTRL - Mixer Control */
#define USDHC_MIX_CTRL_DMAEN_MASK                (0x1U)
#define USDHC_MIX_CTRL_DMAEN_SHIFT               (0U)
#define USDHC_MIX_CTRL_BCEN_MASK                 (0x2U)
#define USDHC_MIX_CTRL_BCEN_SHIFT                (1U)
#define USDHC_MIX_CTRL_AC12EN_MASK               (0x4U)
#define USDHC_MIX_CTRL_AC12EN_SHIFT              (2U)
#define USDHC_MIX_CTRL_DDR_EN_MASK               (0x8U)
#define USDHC_MIX_CTRL_DDR_EN_SHIFT              (3U)
#define USDHC_MIX_CTRL_DTDSEL_MASK               (0x10U)
#define USDHC_MIX_CTRL_DTDSEL_SHIFT              (4U)
#define USDHC_MIX_CTRL_MSBSEL_MASK               (0x20U)
#define USDHC_MIX_CTRL_MSBSEL_SHIFT              (5U)
#define USDHC_MIX_CTRL_NIBBLE_POS_MASK           (0x40U)
#define USDHC_MIX_CTRL_NIBBLE_POS_SHIFT          (6U)
#define USDHC_MIX_CTRL_AC23EN_MASK               (0x80U)
#define USDHC_MIX_CTRL_AC23EN_SHIFT              (7U)
#define USDHC_MIX_CTRL_EXE_TUNE_MASK             (0x400000U)
#define USDHC_MIX_CTRL_EXE_TUNE_SHIFT            (22U)
#define USDHC_MIX_CTRL_SMP_CLK_SEL_MASK          (0x800000U)
#define USDHC_MIX_CTRL_SMP_CLK_SEL_SHIFT         (23U)
#define USDHC_MIX_CTRL_AUTO_TUNE_EN_MASK         (0x1000000U)
#define USDHC_MIX_CTRL_AUTO_TUNE_EN_SHIFT        (24U)
#define USDHC_MIX_CTRL_FBCLK_SEL_MASK            (0x2000000U)
#define USDHC_MIX_CTRL_FBCLK_SEL_SHIFT           (25U)

/*! @name FORCE_EVENT - Force Event */
#define USDHC_FORCE_EVENT_FEVTAC12NE_MASK        (0x1U)
#define USDHC_FORCE_EVENT_FEVTAC12NE_SHIFT       (0U)
#define USDHC_FORCE_EVENT_FEVTAC12TOE_MASK       (0x2U)
#define USDHC_FORCE_EVENT_FEVTAC12TOE_SHIFT      (1U)
#define USDHC_FORCE_EVENT_FEVTAC12CE_MASK        (0x4U)
#define USDHC_FORCE_EVENT_FEVTAC12CE_SHIFT       (2U)
#define USDHC_FORCE_EVENT_FEVTAC12EBE_MASK       (0x8U)
#define USDHC_FORCE_EVENT_FEVTAC12EBE_SHIFT      (3U)
#define USDHC_FORCE_EVENT_FEVTAC12IE_MASK        (0x10U)
#define USDHC_FORCE_EVENT_FEVTAC12IE_SHIFT       (4U)
#define USDHC_FORCE_EVENT_FEVTCNIBAC12E_MASK     (0x80U)
#define USDHC_FORCE_EVENT_FEVTCNIBAC12E_SHIFT    (7U)
#define USDHC_FORCE_EVENT_FEVTCTOE_MASK          (0x10000U)
#define USDHC_FORCE_EVENT_FEVTCTOE_SHIFT         (16U)
#define USDHC_FORCE_EVENT_FEVTCCE_MASK           (0x20000U)
#define USDHC_FORCE_EVENT_FEVTCCE_SHIFT          (17U)
#define USDHC_FORCE_EVENT_FEVTCEBE_MASK          (0x40000U)
#define USDHC_FORCE_EVENT_FEVTCEBE_SHIFT         (18U)
#define USDHC_FORCE_EVENT_FEVTCIE_MASK           (0x80000U)
#define USDHC_FORCE_EVENT_FEVTCIE_SHIFT          (19U)
#define USDHC_FORCE_EVENT_FEVTDTOE_MASK          (0x100000U)
#define USDHC_FORCE_EVENT_FEVTDTOE_SHIFT         (20U)
#define USDHC_FORCE_EVENT_FEVTDCE_MASK           (0x200000U)
#define USDHC_FORCE_EVENT_FEVTDCE_SHIFT          (21U)
#define USDHC_FORCE_EVENT_FEVTDEBE_MASK          (0x400000U)
#define USDHC_FORCE_EVENT_FEVTDEBE_SHIFT         (22U)
#define USDHC_FORCE_EVENT_FEVTAC12E_MASK         (0x1000000U)
#define USDHC_FORCE_EVENT_FEVTAC12E_SHIFT        (24U)
#define USDHC_FORCE_EVENT_FEVTTNE_MASK           (0x4000000U)
#define USDHC_FORCE_EVENT_FEVTTNE_SHIFT          (26U)
#define USDHC_FORCE_EVENT_FEVTDMAE_MASK          (0x10000000U)
#define USDHC_FORCE_EVENT_FEVTDMAE_SHIFT         (28U)
#define USDHC_FORCE_EVENT_FEVTCINT_MASK          (0x80000000U)
#define USDHC_FORCE_EVENT_FEVTCINT_SHIFT         (31U)

/*! @name ADMA_ERR_STATUS - ADMA Error Status Register */
#define USDHC_ADMA_ERR_STATUS_ADMAES_MASK        (0x3U)
#define USDHC_ADMA_ERR_STATUS_ADMAES_SHIFT       (0U)
#define USDHC_ADMA_ERR_STATUS_ADMAES(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_ADMA_ERR_STATUS_ADMAES_SHIFT)) & USDHC_ADMA_ERR_STATUS_ADMAES_MASK)
#define USDHC_ADMA_ERR_STATUS_ADMALME_MASK       (0x4U)
#define USDHC_ADMA_ERR_STATUS_ADMALME_SHIFT      (2U)
#define USDHC_ADMA_ERR_STATUS_ADMADCE_MASK       (0x8U)
#define USDHC_ADMA_ERR_STATUS_ADMADCE_SHIFT      (3U)

/*! @name ADMA_SYS_ADDR - ADMA System Address */
#define USDHC_ADMA_SYS_ADDR_ADS_ADDR_MASK        (0xFFFFFFFCU)
#define USDHC_ADMA_SYS_ADDR_ADS_ADDR_SHIFT       (2U)
#define USDHC_ADMA_SYS_ADDR_ADS_ADDR(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_ADMA_SYS_ADDR_ADS_ADDR_SHIFT)) & USDHC_ADMA_SYS_ADDR_ADS_ADDR_MASK)

/*! @name DLL_CTRL - DLL (Delay Line) Control */
#define USDHC_DLL_CTRL_DLL_CTRL_ENABLE_MASK      (0x1U)
#define USDHC_DLL_CTRL_DLL_CTRL_ENABLE_SHIFT     (0U)
#define USDHC_DLL_CTRL_DLL_CTRL_RESET_MASK       (0x2U)
#define USDHC_DLL_CTRL_DLL_CTRL_RESET_SHIFT      (1U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_FORCE_UPD_MASK (0x4U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_FORCE_UPD_SHIFT (2U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_MASK (0x78U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_SHIFT (3U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_GATE_UPDATE_MASK (0x80U)
#define USDHC_DLL_CTRL_DLL_CTRL_GATE_UPDATE_SHIFT (7U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_MASK (0x100U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_SHIFT (8U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_MASK (0xFE00U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT (9U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_MASK (0x70000U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_SHIFT (16U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_MASK (0xFF00000U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_SHIFT (20U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_MASK (0xF0000000U)
#define USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_SHIFT (28U)
#define USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_MASK)

/*! @name DLL_STATUS - DLL Status */
#define USDHC_DLL_STATUS_DLL_STS_SLV_LOCK_MASK   (0x1U)
#define USDHC_DLL_STATUS_DLL_STS_SLV_LOCK_SHIFT  (0U)
#define USDHC_DLL_STATUS_DLL_STS_REF_LOCK_MASK   (0x2U)
#define USDHC_DLL_STATUS_DLL_STS_REF_LOCK_SHIFT  (1U)
#define USDHC_DLL_STATUS_DLL_STS_SLV_SEL_MASK    (0x1FCU)
#define USDHC_DLL_STATUS_DLL_STS_SLV_SEL_SHIFT   (2U)
#define USDHC_DLL_STATUS_DLL_STS_SLV_SEL(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_STATUS_DLL_STS_SLV_SEL_SHIFT)) & USDHC_DLL_STATUS_DLL_STS_SLV_SEL_MASK)
#define USDHC_DLL_STATUS_DLL_STS_REF_SEL_MASK    (0xFE00U)
#define USDHC_DLL_STATUS_DLL_STS_REF_SEL_SHIFT   (9U)
#define USDHC_DLL_STATUS_DLL_STS_REF_SEL(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_STATUS_DLL_STS_REF_SEL_SHIFT)) & USDHC_DLL_STATUS_DLL_STS_REF_SEL_MASK)

/*! @name CLK_TUNE_CTRL_STATUS - CLK Tuning Control and Status */
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_MASK (0xFU)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_SHIFT (0U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_MASK (0xF0U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_SHIFT (4U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_MASK (0x7F00U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_SHIFT (8U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_NXT_ERR_MASK  (0x8000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_NXT_ERR_SHIFT (15U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_MASK (0xF0000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_SHIFT (16U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_MASK (0xF00000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_SHIFT (20U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_MASK (0x7F000000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_SHIFT (24U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_PRE_ERR_MASK  (0x80000000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_PRE_ERR_SHIFT (31U)

/*! @name VEND_SPEC - Vendor Specific Register */
#define USDHC_VEND_SPEC_VSELECT_MASK             (0x2U)
#define USDHC_VEND_SPEC_VSELECT_SHIFT            (1U)
#define USDHC_VEND_SPEC_CONFLICT_CHK_EN_MASK     (0x4U)
#define USDHC_VEND_SPEC_CONFLICT_CHK_EN_SHIFT    (2U)
#define USDHC_VEND_SPEC_AC12_WR_CHKBUSY_EN_MASK  (0x8U)
#define USDHC_VEND_SPEC_AC12_WR_CHKBUSY_EN_SHIFT (3U)
#define USDHC_VEND_SPEC_FRC_SDCLK_ON_MASK        (0x100U)
#define USDHC_VEND_SPEC_FRC_SDCLK_ON_SHIFT       (8U)
#define USDHC_VEND_SPEC_CRC_CHK_DIS_MASK         (0x8000U)
#define USDHC_VEND_SPEC_CRC_CHK_DIS_SHIFT        (15U)
#define USDHC_VEND_SPEC_CMD_BYTE_EN_MASK         (0x80000000U)
#define USDHC_VEND_SPEC_CMD_BYTE_EN_SHIFT        (31U)

/*! @name MMC_BOOT - MMC Boot Register */
#define USDHC_MMC_BOOT_DTOCV_ACK_MASK            (0xFU)
#define USDHC_MMC_BOOT_DTOCV_ACK_SHIFT           (0U)
#define USDHC_MMC_BOOT_DTOCV_ACK(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_MMC_BOOT_DTOCV_ACK_SHIFT)) & USDHC_MMC_BOOT_DTOCV_ACK_MASK)
#define USDHC_MMC_BOOT_BOOT_ACK_MASK             (0x10U)
#define USDHC_MMC_BOOT_BOOT_ACK_SHIFT            (4U)
#define USDHC_MMC_BOOT_BOOT_MODE_MASK            (0x20U)
#define USDHC_MMC_BOOT_BOOT_MODE_SHIFT           (5U)
#define USDHC_MMC_BOOT_BOOT_EN_MASK              (0x40U)
#define USDHC_MMC_BOOT_BOOT_EN_SHIFT             (6U)
#define USDHC_MMC_BOOT_AUTO_SABG_EN_MASK         (0x80U)
#define USDHC_MMC_BOOT_AUTO_SABG_EN_SHIFT        (7U)
#define USDHC_MMC_BOOT_DISABLE_TIME_OUT_MASK     (0x100U)
#define USDHC_MMC_BOOT_DISABLE_TIME_OUT_SHIFT    (8U)
#define USDHC_MMC_BOOT_BOOT_BLK_CNT_MASK         (0xFFFF0000U)
#define USDHC_MMC_BOOT_BOOT_BLK_CNT_SHIFT        (16U)
#define USDHC_MMC_BOOT_BOOT_BLK_CNT(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_MMC_BOOT_BOOT_BLK_CNT_SHIFT)) & USDHC_MMC_BOOT_BOOT_BLK_CNT_MASK)

/*! @name VEND_SPEC2 - Vendor Specific 2 Register */
#define USDHC_VEND_SPEC2_CARD_INT_D3_TEST_MASK   (0x8U)
#define USDHC_VEND_SPEC2_CARD_INT_D3_TEST_SHIFT  (3U)
#define USDHC_VEND_SPEC2_TUNING_8bit_EN_MASK     (0x10U)
#define USDHC_VEND_SPEC2_TUNING_8bit_EN_SHIFT    (4U)
#define USDHC_VEND_SPEC2_TUNING_1bit_EN_MASK     (0x20U)
#define USDHC_VEND_SPEC2_TUNING_1bit_EN_SHIFT    (5U)
#define USDHC_VEND_SPEC2_TUNING_CMD_EN_MASK      (0x40U)
#define USDHC_VEND_SPEC2_TUNING_CMD_EN_SHIFT     (6U)
#define USDHC_VEND_SPEC2_ACMD23_ARGU2_EN_MASK    (0x1000U)
#define USDHC_VEND_SPEC2_ACMD23_ARGU2_EN_SHIFT   (12U)
#define USDHC_VEND_SPEC2_AHB_RST_MASK            (0x4000U)
#define USDHC_VEND_SPEC2_AHB_RST_SHIFT           (14U)

/*! @name TUNING_CTRL - Tuning Control Register */
#define USDHC_TUNING_CTRL_TUNING_START_TAP_MASK  (0xFFU)
#define USDHC_TUNING_CTRL_TUNING_START_TAP_SHIFT (0U)
#define USDHC_TUNING_CTRL_TUNING_START_TAP(x)    (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_START_TAP_SHIFT)) & USDHC_TUNING_CTRL_TUNING_START_TAP_MASK)
#define USDHC_TUNING_CTRL_TUNING_COUNTER_MASK    (0xFF00U)
#define USDHC_TUNING_CTRL_TUNING_COUNTER_SHIFT   (8U)
#define USDHC_TUNING_CTRL_TUNING_COUNTER(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_COUNTER_SHIFT)) & USDHC_TUNING_CTRL_TUNING_COUNTER_MASK)
#define USDHC_TUNING_CTRL_TUNING_STEP_MASK       (0x70000U)
#define USDHC_TUNING_CTRL_TUNING_STEP_SHIFT      (16U)
#define USDHC_TUNING_CTRL_TUNING_STEP(x)         (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_STEP_SHIFT)) & USDHC_TUNING_CTRL_TUNING_STEP_MASK)
#define USDHC_TUNING_CTRL_TUNING_WINDOW_MASK     (0x700000U)
#define USDHC_TUNING_CTRL_TUNING_WINDOW_SHIFT    (20U)
#define USDHC_TUNING_CTRL_TUNING_WINDOW(x)       (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_WINDOW_SHIFT)) & USDHC_TUNING_CTRL_TUNING_WINDOW_MASK)
#define USDHC_TUNING_CTRL_STD_TUNING_EN_MASK     (0x1000000U)
#define USDHC_TUNING_CTRL_STD_TUNING_EN_SHIFT    (24U)


/*!
 * @}
 */ /* end of group USDHC_Register_Masks */


/* USDHC - Peripheral instance base addresses */
/** Peripheral USDHC1 base pointer */
#define USDHC1_BASE_PTR                          ((USDHC_MemMapPtr)0x402C0000u)
/** Peripheral USDHC2 base pointer */
#define USDHC2_BASE_PTR                          ((USDHC_MemMapPtr)0x402C4000u)
/** Array initializer of USDHC peripheral base pointers */
#define USDHC_BASE_PTRS                          { USDHC1_BASE_PTR, USDHC2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- USDHC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Register_Accessor_Macros USDHC - Register accessor macros
 * @{
 */


/* USDHC - Register instance definitions */
/* USDHC1 */
#define USDHC1_DS_ADDR                           USDHC_DS_ADDR_REG(USDHC1_BASE_PTR)
#define USDHC1_BLK_ATT                           USDHC_BLK_ATT_REG(USDHC1_BASE_PTR)
#define USDHC1_CMD_ARG                           USDHC_CMD_ARG_REG(USDHC1_BASE_PTR)
#define USDHC1_CMD_XFR_TYP                       USDHC_CMD_XFR_TYP_REG(USDHC1_BASE_PTR)
#define USDHC1_CMD_RSP0                          USDHC_CMD_RSP0_REG(USDHC1_BASE_PTR)
#define USDHC1_CMD_RSP1                          USDHC_CMD_RSP1_REG(USDHC1_BASE_PTR)
#define USDHC1_CMD_RSP2                          USDHC_CMD_RSP2_REG(USDHC1_BASE_PTR)
#define USDHC1_CMD_RSP3                          USDHC_CMD_RSP3_REG(USDHC1_BASE_PTR)
#define USDHC1_DATA_BUFF_ACC_PORT                USDHC_DATA_BUFF_ACC_PORT_REG(USDHC1_BASE_PTR)
#define USDHC1_PRES_STATE                        USDHC_PRES_STATE_REG(USDHC1_BASE_PTR)
#define USDHC1_PROT_CTRL                         USDHC_PROT_CTRL_REG(USDHC1_BASE_PTR)
#define USDHC1_SYS_CTRL                          USDHC_SYS_CTRL_REG(USDHC1_BASE_PTR)
#define USDHC1_INT_STATUS                        USDHC_INT_STATUS_REG(USDHC1_BASE_PTR)
#define USDHC1_INT_STATUS_EN                     USDHC_INT_STATUS_EN_REG(USDHC1_BASE_PTR)
#define USDHC1_INT_SIGNAL_EN                     USDHC_INT_SIGNAL_EN_REG(USDHC1_BASE_PTR)
#define USDHC1_AUTOCMD12_ERR_STATUS              USDHC_AUTOCMD12_ERR_STATUS_REG(USDHC1_BASE_PTR)
#define USDHC1_HOST_CTRL_CAP                     USDHC_HOST_CTRL_CAP_REG(USDHC1_BASE_PTR)
#define USDHC1_WTMK_LVL                          USDHC_WTMK_LVL_REG(USDHC1_BASE_PTR)
#define USDHC1_MIX_CTRL                          USDHC_MIX_CTRL_REG(USDHC1_BASE_PTR)
#define USDHC1_FORCE_EVENT                       USDHC_FORCE_EVENT_REG(USDHC1_BASE_PTR)
#define USDHC1_ADMA_ERR_STATUS                   USDHC_ADMA_ERR_STATUS_REG(USDHC1_BASE_PTR)
#define USDHC1_ADMA_SYS_ADDR                     USDHC_ADMA_SYS_ADDR_REG(USDHC1_BASE_PTR)
#define USDHC1_DLL_CTRL                          USDHC_DLL_CTRL_REG(USDHC1_BASE_PTR)
#define USDHC1_DLL_STATUS                        USDHC_DLL_STATUS_REG(USDHC1_BASE_PTR)
#define USDHC1_CLK_TUNE_CTRL_STATUS              USDHC_CLK_TUNE_CTRL_STATUS_REG(USDHC1_BASE_PTR)
#define USDHC1_VEND_SPEC                         USDHC_VEND_SPEC_REG(USDHC1_BASE_PTR)
#define USDHC1_MMC_BOOT                          USDHC_MMC_BOOT_REG(USDHC1_BASE_PTR)
#define USDHC1_VEND_SPEC2                        USDHC_VEND_SPEC2_REG(USDHC1_BASE_PTR)
#define USDHC1_TUNING_CTRL                       USDHC_TUNING_CTRL_REG(USDHC1_BASE_PTR)
/* USDHC2 */
#define USDHC2_DS_ADDR                           USDHC_DS_ADDR_REG(USDHC2_BASE_PTR)
#define USDHC2_BLK_ATT                           USDHC_BLK_ATT_REG(USDHC2_BASE_PTR)
#define USDHC2_CMD_ARG                           USDHC_CMD_ARG_REG(USDHC2_BASE_PTR)
#define USDHC2_CMD_XFR_TYP                       USDHC_CMD_XFR_TYP_REG(USDHC2_BASE_PTR)
#define USDHC2_CMD_RSP0                          USDHC_CMD_RSP0_REG(USDHC2_BASE_PTR)
#define USDHC2_CMD_RSP1                          USDHC_CMD_RSP1_REG(USDHC2_BASE_PTR)
#define USDHC2_CMD_RSP2                          USDHC_CMD_RSP2_REG(USDHC2_BASE_PTR)
#define USDHC2_CMD_RSP3                          USDHC_CMD_RSP3_REG(USDHC2_BASE_PTR)
#define USDHC2_DATA_BUFF_ACC_PORT                USDHC_DATA_BUFF_ACC_PORT_REG(USDHC2_BASE_PTR)
#define USDHC2_PRES_STATE                        USDHC_PRES_STATE_REG(USDHC2_BASE_PTR)
#define USDHC2_PROT_CTRL                         USDHC_PROT_CTRL_REG(USDHC2_BASE_PTR)
#define USDHC2_SYS_CTRL                          USDHC_SYS_CTRL_REG(USDHC2_BASE_PTR)
#define USDHC2_INT_STATUS                        USDHC_INT_STATUS_REG(USDHC2_BASE_PTR)
#define USDHC2_INT_STATUS_EN                     USDHC_INT_STATUS_EN_REG(USDHC2_BASE_PTR)
#define USDHC2_INT_SIGNAL_EN                     USDHC_INT_SIGNAL_EN_REG(USDHC2_BASE_PTR)
#define USDHC2_AUTOCMD12_ERR_STATUS              USDHC_AUTOCMD12_ERR_STATUS_REG(USDHC2_BASE_PTR)
#define USDHC2_HOST_CTRL_CAP                     USDHC_HOST_CTRL_CAP_REG(USDHC2_BASE_PTR)
#define USDHC2_WTMK_LVL                          USDHC_WTMK_LVL_REG(USDHC2_BASE_PTR)
#define USDHC2_MIX_CTRL                          USDHC_MIX_CTRL_REG(USDHC2_BASE_PTR)
#define USDHC2_FORCE_EVENT                       USDHC_FORCE_EVENT_REG(USDHC2_BASE_PTR)
#define USDHC2_ADMA_ERR_STATUS                   USDHC_ADMA_ERR_STATUS_REG(USDHC2_BASE_PTR)
#define USDHC2_ADMA_SYS_ADDR                     USDHC_ADMA_SYS_ADDR_REG(USDHC2_BASE_PTR)
#define USDHC2_DLL_CTRL                          USDHC_DLL_CTRL_REG(USDHC2_BASE_PTR)
#define USDHC2_DLL_STATUS                        USDHC_DLL_STATUS_REG(USDHC2_BASE_PTR)
#define USDHC2_CLK_TUNE_CTRL_STATUS              USDHC_CLK_TUNE_CTRL_STATUS_REG(USDHC2_BASE_PTR)
#define USDHC2_VEND_SPEC                         USDHC_VEND_SPEC_REG(USDHC2_BASE_PTR)
#define USDHC2_MMC_BOOT                          USDHC_MMC_BOOT_REG(USDHC2_BASE_PTR)
#define USDHC2_VEND_SPEC2                        USDHC_VEND_SPEC2_REG(USDHC2_BASE_PTR)
#define USDHC2_TUNING_CTRL                       USDHC_TUNING_CTRL_REG(USDHC2_BASE_PTR)

/*!
 * @}
 */ /* end of group USDHC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group USDHC_Peripheral */


/* ----------------------------------------------------------------------------
   -- WDOG
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WDOG_Peripheral WDOG
 * @{
 */

/** WDOG - Peripheral register structure */
typedef struct WDOG_MemMap {
  uint16_t WCR;                                    /**< Watchdog Control Register, offset: 0x0 */
  uint16_t WSR;                                    /**< Watchdog Service Register, offset: 0x2 */
  uint16_t WRSR;                                   /**< Watchdog Reset Status Register, offset: 0x4 */
  uint16_t WICR;                                   /**< Watchdog Interrupt Control Register, offset: 0x6 */
  uint16_t WMCR;                                   /**< Watchdog Miscellaneous Control Register, offset: 0x8 */
} volatile *WDOG_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- WDOG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WDOG_Register_Accessor_Macros WDOG - Register accessor macros
 * @{
 */


/* WDOG - Register accessors */
#define WDOG_WCR_REG(base)                       ((base)->WCR)
#define WDOG_WSR_REG(base)                       ((base)->WSR)
#define WDOG_WRSR_REG(base)                      ((base)->WRSR)
#define WDOG_WICR_REG(base)                      ((base)->WICR)
#define WDOG_WMCR_REG(base)                      ((base)->WMCR)

/*!
 * @}
 */ /* end of group WDOG_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- WDOG Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WDOG_Register_Masks WDOG Register Masks
 * @{
 */

/*! @name WCR - Watchdog Control Register */
#define WDOG_WCR_WDZST_MASK                      (0x1U)
#define WDOG_WCR_WDZST_SHIFT                     (0U)
#define WDOG_WCR_WDBG_MASK                       (0x2U)
#define WDOG_WCR_WDBG_SHIFT                      (1U)
#define WDOG_WCR_WDE_MASK                        (0x4U)
#define WDOG_WCR_WDE_SHIFT                       (2U)
#define WDOG_WCR_WDT_MASK                        (0x8U)
#define WDOG_WCR_WDT_SHIFT                       (3U)
#define WDOG_WCR_SRS_MASK                        (0x10U)
#define WDOG_WCR_SRS_SHIFT                       (4U)
#define WDOG_WCR_WDA_MASK                        (0x20U)
#define WDOG_WCR_WDA_SHIFT                       (5U)
#define WDOG_WCR_SRE_MASK                        (0x40U)
#define WDOG_WCR_SRE_SHIFT                       (6U)
#define WDOG_WCR_WDW_MASK                        (0x80U)
#define WDOG_WCR_WDW_SHIFT                       (7U)
#define WDOG_WCR_WT_MASK                         (0xFF00U)
#define WDOG_WCR_WT_SHIFT                        (8U)
#define WDOG_WCR_WT(x)                           (((uint16_t)(((uint16_t)(x)) << WDOG_WCR_WT_SHIFT)) & WDOG_WCR_WT_MASK)

/*! @name WSR - Watchdog Service Register */
#define WDOG_WSR_WSR_MASK                        (0xFFFFU)
#define WDOG_WSR_WSR_SHIFT                       (0U)
#define WDOG_WSR_WSR(x)                          (((uint16_t)(((uint16_t)(x)) << WDOG_WSR_WSR_SHIFT)) & WDOG_WSR_WSR_MASK)

/*! @name WRSR - Watchdog Reset Status Register */
#define WDOG_WRSR_SFTW_MASK                      (0x1U)
#define WDOG_WRSR_SFTW_SHIFT                     (0U)
#define WDOG_WRSR_TOUT_MASK                      (0x2U)
#define WDOG_WRSR_TOUT_SHIFT                     (1U)
#define WDOG_WRSR_POR_MASK                       (0x10U)
#define WDOG_WRSR_POR_SHIFT                      (4U)

/*! @name WICR - Watchdog Interrupt Control Register */
#define WDOG_WICR_WICT_MASK                      (0xFFU)
#define WDOG_WICR_WICT_SHIFT                     (0U)
#define WDOG_WICR_WICT(x)                        (((uint16_t)(((uint16_t)(x)) << WDOG_WICR_WICT_SHIFT)) & WDOG_WICR_WICT_MASK)
#define WDOG_WICR_WTIS_MASK                      (0x4000U)
#define WDOG_WICR_WTIS_SHIFT                     (14U)
#define WDOG_WICR_WIE_MASK                       (0x8000U)
#define WDOG_WICR_WIE_SHIFT                      (15U)

/*! @name WMCR - Watchdog Miscellaneous Control Register */
#define WDOG_WMCR_PDE_MASK                       (0x1U)
#define WDOG_WMCR_PDE_SHIFT                      (0U)


/*!
 * @}
 */ /* end of group WDOG_Register_Masks */


/* WDOG - Peripheral instance base addresses */
/** Peripheral WDOG1 base pointer */
#define WDOG1_BASE_PTR                           ((WDOG_MemMapPtr)0x400B8000u)
/** Peripheral WDOG2 base pointer */
#define WDOG2_BASE_PTR                           ((WDOG_MemMapPtr)0x400D0000u)
/** Array initializer of WDOG peripheral base pointers */
#define WDOG_BASE_PTRS                           { WDOG1_BASE_PTR, WDOG2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- WDOG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WDOG_Register_Accessor_Macros WDOG - Register accessor macros
 * @{
 */


/* WDOG - Register instance definitions */
/* WDOG1 */
#define WDOG1_WCR                                WDOG_WCR_REG(WDOG1_BASE_PTR)
#define WDOG1_WSR                                WDOG_WSR_REG(WDOG1_BASE_PTR)
#define WDOG1_WRSR                               WDOG_WRSR_REG(WDOG1_BASE_PTR)
#define WDOG1_WICR                               WDOG_WICR_REG(WDOG1_BASE_PTR)
#define WDOG1_WMCR                               WDOG_WMCR_REG(WDOG1_BASE_PTR)
/* WDOG2 */
#define WDOG2_WCR                                WDOG_WCR_REG(WDOG2_BASE_PTR)
#define WDOG2_WSR                                WDOG_WSR_REG(WDOG2_BASE_PTR)
#define WDOG2_WRSR                               WDOG_WRSR_REG(WDOG2_BASE_PTR)
#define WDOG2_WICR                               WDOG_WICR_REG(WDOG2_BASE_PTR)
#define WDOG2_WMCR                               WDOG_WMCR_REG(WDOG2_BASE_PTR)

/*!
 * @}
 */ /* end of group WDOG_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group WDOG_Peripheral */


/* ----------------------------------------------------------------------------
   -- XBARA
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XBARA_Peripheral XBARA
 * @{
 */

/** XBARA - Peripheral register structure */
typedef struct XBARA_MemMap {
  uint16_t SEL0;                                   /**< Crossbar A Select Register 0, offset: 0x0 */
  uint16_t SEL1;                                   /**< Crossbar A Select Register 1, offset: 0x2 */
  uint16_t SEL2;                                   /**< Crossbar A Select Register 2, offset: 0x4 */
  uint16_t SEL3;                                   /**< Crossbar A Select Register 3, offset: 0x6 */
  uint16_t SEL4;                                   /**< Crossbar A Select Register 4, offset: 0x8 */
  uint16_t SEL5;                                   /**< Crossbar A Select Register 5, offset: 0xA */
  uint16_t SEL6;                                   /**< Crossbar A Select Register 6, offset: 0xC */
  uint16_t SEL7;                                   /**< Crossbar A Select Register 7, offset: 0xE */
  uint16_t SEL8;                                   /**< Crossbar A Select Register 8, offset: 0x10 */
  uint16_t SEL9;                                   /**< Crossbar A Select Register 9, offset: 0x12 */
  uint16_t SEL10;                                  /**< Crossbar A Select Register 10, offset: 0x14 */
  uint16_t SEL11;                                  /**< Crossbar A Select Register 11, offset: 0x16 */
  uint16_t SEL12;                                  /**< Crossbar A Select Register 12, offset: 0x18 */
  uint16_t SEL13;                                  /**< Crossbar A Select Register 13, offset: 0x1A */
  uint16_t SEL14;                                  /**< Crossbar A Select Register 14, offset: 0x1C */
  uint16_t SEL15;                                  /**< Crossbar A Select Register 15, offset: 0x1E */
  uint16_t SEL16;                                  /**< Crossbar A Select Register 16, offset: 0x20 */
  uint16_t SEL17;                                  /**< Crossbar A Select Register 17, offset: 0x22 */
  uint16_t SEL18;                                  /**< Crossbar A Select Register 18, offset: 0x24 */
  uint16_t SEL19;                                  /**< Crossbar A Select Register 19, offset: 0x26 */
  uint16_t SEL20;                                  /**< Crossbar A Select Register 20, offset: 0x28 */
  uint16_t SEL21;                                  /**< Crossbar A Select Register 21, offset: 0x2A */
  uint16_t SEL22;                                  /**< Crossbar A Select Register 22, offset: 0x2C */
  uint16_t SEL23;                                  /**< Crossbar A Select Register 23, offset: 0x2E */
  uint16_t SEL24;                                  /**< Crossbar A Select Register 24, offset: 0x30 */
  uint16_t SEL25;                                  /**< Crossbar A Select Register 25, offset: 0x32 */
  uint16_t SEL26;                                  /**< Crossbar A Select Register 26, offset: 0x34 */
  uint16_t SEL27;                                  /**< Crossbar A Select Register 27, offset: 0x36 */
  uint16_t SEL28;                                  /**< Crossbar A Select Register 28, offset: 0x38 */
  uint16_t SEL29;                                  /**< Crossbar A Select Register 29, offset: 0x3A */
  uint16_t SEL30;                                  /**< Crossbar A Select Register 30, offset: 0x3C */
  uint16_t SEL31;                                  /**< Crossbar A Select Register 31, offset: 0x3E */
  uint16_t SEL32;                                  /**< Crossbar A Select Register 32, offset: 0x40 */
  uint16_t SEL33;                                  /**< Crossbar A Select Register 33, offset: 0x42 */
  uint16_t SEL34;                                  /**< Crossbar A Select Register 34, offset: 0x44 */
  uint16_t SEL35;                                  /**< Crossbar A Select Register 35, offset: 0x46 */
  uint16_t SEL36;                                  /**< Crossbar A Select Register 36, offset: 0x48 */
  uint16_t SEL37;                                  /**< Crossbar A Select Register 37, offset: 0x4A */
  uint16_t SEL38;                                  /**< Crossbar A Select Register 38, offset: 0x4C */
  uint16_t SEL39;                                  /**< Crossbar A Select Register 39, offset: 0x4E */
  uint16_t SEL40;                                  /**< Crossbar A Select Register 40, offset: 0x50 */
  uint16_t SEL41;                                  /**< Crossbar A Select Register 41, offset: 0x52 */
  uint16_t SEL42;                                  /**< Crossbar A Select Register 42, offset: 0x54 */
  uint16_t SEL43;                                  /**< Crossbar A Select Register 43, offset: 0x56 */
  uint16_t SEL44;                                  /**< Crossbar A Select Register 44, offset: 0x58 */
  uint16_t SEL45;                                  /**< Crossbar A Select Register 45, offset: 0x5A */
  uint16_t SEL46;                                  /**< Crossbar A Select Register 46, offset: 0x5C */
  uint16_t SEL47;                                  /**< Crossbar A Select Register 47, offset: 0x5E */
  uint16_t SEL48;                                  /**< Crossbar A Select Register 48, offset: 0x60 */
  uint16_t SEL49;                                  /**< Crossbar A Select Register 49, offset: 0x62 */
  uint16_t SEL50;                                  /**< Crossbar A Select Register 50, offset: 0x64 */
  uint16_t SEL51;                                  /**< Crossbar A Select Register 51, offset: 0x66 */
  uint16_t SEL52;                                  /**< Crossbar A Select Register 52, offset: 0x68 */
  uint16_t SEL53;                                  /**< Crossbar A Select Register 53, offset: 0x6A */
  uint16_t SEL54;                                  /**< Crossbar A Select Register 54, offset: 0x6C */
  uint16_t SEL55;                                  /**< Crossbar A Select Register 55, offset: 0x6E */
  uint16_t SEL56;                                  /**< Crossbar A Select Register 56, offset: 0x70 */
  uint16_t SEL57;                                  /**< Crossbar A Select Register 57, offset: 0x72 */
  uint16_t SEL58;                                  /**< Crossbar A Select Register 58, offset: 0x74 */
  uint16_t SEL59;                                  /**< Crossbar A Select Register 59, offset: 0x76 */
  uint16_t SEL60;                                  /**< Crossbar A Select Register 60, offset: 0x78 */
  uint16_t SEL61;                                  /**< Crossbar A Select Register 61, offset: 0x7A */
  uint16_t SEL62;                                  /**< Crossbar A Select Register 62, offset: 0x7C */
  uint16_t SEL63;                                  /**< Crossbar A Select Register 63, offset: 0x7E */
  uint16_t SEL64;                                  /**< Crossbar A Select Register 64, offset: 0x80 */
  uint16_t SEL65;                                  /**< Crossbar A Select Register 65, offset: 0x82 */
  uint16_t CTRL0;                                  /**< Crossbar A Control Register 0, offset: 0x84 */
  uint16_t CTRL1;                                  /**< Crossbar A Control Register 1, offset: 0x86 */
} volatile *XBARA_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- XBARA - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XBARA_Register_Accessor_Macros XBARA - Register accessor macros
 * @{
 */


/* XBARA - Register accessors */
#define XBARA_SEL0_REG(base)                     ((base)->SEL0)
#define XBARA_SEL1_REG(base)                     ((base)->SEL1)
#define XBARA_SEL2_REG(base)                     ((base)->SEL2)
#define XBARA_SEL3_REG(base)                     ((base)->SEL3)
#define XBARA_SEL4_REG(base)                     ((base)->SEL4)
#define XBARA_SEL5_REG(base)                     ((base)->SEL5)
#define XBARA_SEL6_REG(base)                     ((base)->SEL6)
#define XBARA_SEL7_REG(base)                     ((base)->SEL7)
#define XBARA_SEL8_REG(base)                     ((base)->SEL8)
#define XBARA_SEL9_REG(base)                     ((base)->SEL9)
#define XBARA_SEL10_REG(base)                    ((base)->SEL10)
#define XBARA_SEL11_REG(base)                    ((base)->SEL11)
#define XBARA_SEL12_REG(base)                    ((base)->SEL12)
#define XBARA_SEL13_REG(base)                    ((base)->SEL13)
#define XBARA_SEL14_REG(base)                    ((base)->SEL14)
#define XBARA_SEL15_REG(base)                    ((base)->SEL15)
#define XBARA_SEL16_REG(base)                    ((base)->SEL16)
#define XBARA_SEL17_REG(base)                    ((base)->SEL17)
#define XBARA_SEL18_REG(base)                    ((base)->SEL18)
#define XBARA_SEL19_REG(base)                    ((base)->SEL19)
#define XBARA_SEL20_REG(base)                    ((base)->SEL20)
#define XBARA_SEL21_REG(base)                    ((base)->SEL21)
#define XBARA_SEL22_REG(base)                    ((base)->SEL22)
#define XBARA_SEL23_REG(base)                    ((base)->SEL23)
#define XBARA_SEL24_REG(base)                    ((base)->SEL24)
#define XBARA_SEL25_REG(base)                    ((base)->SEL25)
#define XBARA_SEL26_REG(base)                    ((base)->SEL26)
#define XBARA_SEL27_REG(base)                    ((base)->SEL27)
#define XBARA_SEL28_REG(base)                    ((base)->SEL28)
#define XBARA_SEL29_REG(base)                    ((base)->SEL29)
#define XBARA_SEL30_REG(base)                    ((base)->SEL30)
#define XBARA_SEL31_REG(base)                    ((base)->SEL31)
#define XBARA_SEL32_REG(base)                    ((base)->SEL32)
#define XBARA_SEL33_REG(base)                    ((base)->SEL33)
#define XBARA_SEL34_REG(base)                    ((base)->SEL34)
#define XBARA_SEL35_REG(base)                    ((base)->SEL35)
#define XBARA_SEL36_REG(base)                    ((base)->SEL36)
#define XBARA_SEL37_REG(base)                    ((base)->SEL37)
#define XBARA_SEL38_REG(base)                    ((base)->SEL38)
#define XBARA_SEL39_REG(base)                    ((base)->SEL39)
#define XBARA_SEL40_REG(base)                    ((base)->SEL40)
#define XBARA_SEL41_REG(base)                    ((base)->SEL41)
#define XBARA_SEL42_REG(base)                    ((base)->SEL42)
#define XBARA_SEL43_REG(base)                    ((base)->SEL43)
#define XBARA_SEL44_REG(base)                    ((base)->SEL44)
#define XBARA_SEL45_REG(base)                    ((base)->SEL45)
#define XBARA_SEL46_REG(base)                    ((base)->SEL46)
#define XBARA_SEL47_REG(base)                    ((base)->SEL47)
#define XBARA_SEL48_REG(base)                    ((base)->SEL48)
#define XBARA_SEL49_REG(base)                    ((base)->SEL49)
#define XBARA_SEL50_REG(base)                    ((base)->SEL50)
#define XBARA_SEL51_REG(base)                    ((base)->SEL51)
#define XBARA_SEL52_REG(base)                    ((base)->SEL52)
#define XBARA_SEL53_REG(base)                    ((base)->SEL53)
#define XBARA_SEL54_REG(base)                    ((base)->SEL54)
#define XBARA_SEL55_REG(base)                    ((base)->SEL55)
#define XBARA_SEL56_REG(base)                    ((base)->SEL56)
#define XBARA_SEL57_REG(base)                    ((base)->SEL57)
#define XBARA_SEL58_REG(base)                    ((base)->SEL58)
#define XBARA_SEL59_REG(base)                    ((base)->SEL59)
#define XBARA_SEL60_REG(base)                    ((base)->SEL60)
#define XBARA_SEL61_REG(base)                    ((base)->SEL61)
#define XBARA_SEL62_REG(base)                    ((base)->SEL62)
#define XBARA_SEL63_REG(base)                    ((base)->SEL63)
#define XBARA_SEL64_REG(base)                    ((base)->SEL64)
#define XBARA_SEL65_REG(base)                    ((base)->SEL65)
#define XBARA_CTRL0_REG(base)                    ((base)->CTRL0)
#define XBARA_CTRL1_REG(base)                    ((base)->CTRL1)

/*!
 * @}
 */ /* end of group XBARA_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- XBARA Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XBARA_Register_Masks XBARA Register Masks
 * @{
 */

/*! @name SEL0 - Crossbar A Select Register 0 */
#define XBARA_SEL0_SEL0_MASK                     (0x7FU)
#define XBARA_SEL0_SEL0_SHIFT                    (0U)
#define XBARA_SEL0_SEL0(x)                       (((uint16_t)(((uint16_t)(x)) << XBARA_SEL0_SEL0_SHIFT)) & XBARA_SEL0_SEL0_MASK)
#define XBARA_SEL0_SEL1_MASK                     (0x7F00U)
#define XBARA_SEL0_SEL1_SHIFT                    (8U)
#define XBARA_SEL0_SEL1(x)                       (((uint16_t)(((uint16_t)(x)) << XBARA_SEL0_SEL1_SHIFT)) & XBARA_SEL0_SEL1_MASK)

/*! @name SEL1 - Crossbar A Select Register 1 */
#define XBARA_SEL1_SEL2_MASK                     (0x7FU)
#define XBARA_SEL1_SEL2_SHIFT                    (0U)
#define XBARA_SEL1_SEL2(x)                       (((uint16_t)(((uint16_t)(x)) << XBARA_SEL1_SEL2_SHIFT)) & XBARA_SEL1_SEL2_MASK)
#define XBARA_SEL1_SEL3_MASK                     (0x7F00U)
#define XBARA_SEL1_SEL3_SHIFT                    (8U)
#define XBARA_SEL1_SEL3(x)                       (((uint16_t)(((uint16_t)(x)) << XBARA_SEL1_SEL3_SHIFT)) & XBARA_SEL1_SEL3_MASK)

/*! @name SEL2 - Crossbar A Select Register 2 */
#define XBARA_SEL2_SEL4_MASK                     (0x7FU)
#define XBARA_SEL2_SEL4_SHIFT                    (0U)
#define XBARA_SEL2_SEL4(x)                       (((uint16_t)(((uint16_t)(x)) << XBARA_SEL2_SEL4_SHIFT)) & XBARA_SEL2_SEL4_MASK)
#define XBARA_SEL2_SEL5_MASK                     (0x7F00U)
#define XBARA_SEL2_SEL5_SHIFT                    (8U)
#define XBARA_SEL2_SEL5(x)                       (((uint16_t)(((uint16_t)(x)) << XBARA_SEL2_SEL5_SHIFT)) & XBARA_SEL2_SEL5_MASK)

/*! @name SEL3 - Crossbar A Select Register 3 */
#define XBARA_SEL3_SEL6_MASK                     (0x7FU)
#define XBARA_SEL3_SEL6_SHIFT                    (0U)
#define XBARA_SEL3_SEL6(x)                       (((uint16_t)(((uint16_t)(x)) << XBARA_SEL3_SEL6_SHIFT)) & XBARA_SEL3_SEL6_MASK)
#define XBARA_SEL3_SEL7_MASK                     (0x7F00U)
#define XBARA_SEL3_SEL7_SHIFT                    (8U)
#define XBARA_SEL3_SEL7(x)                       (((uint16_t)(((uint16_t)(x)) << XBARA_SEL3_SEL7_SHIFT)) & XBARA_SEL3_SEL7_MASK)

/*! @name SEL4 - Crossbar A Select Register 4 */
#define XBARA_SEL4_SEL8_MASK                     (0x7FU)
#define XBARA_SEL4_SEL8_SHIFT                    (0U)
#define XBARA_SEL4_SEL8(x)                       (((uint16_t)(((uint16_t)(x)) << XBARA_SEL4_SEL8_SHIFT)) & XBARA_SEL4_SEL8_MASK)
#define XBARA_SEL4_SEL9_MASK                     (0x7F00U)
#define XBARA_SEL4_SEL9_SHIFT                    (8U)
#define XBARA_SEL4_SEL9(x)                       (((uint16_t)(((uint16_t)(x)) << XBARA_SEL4_SEL9_SHIFT)) & XBARA_SEL4_SEL9_MASK)

/*! @name SEL5 - Crossbar A Select Register 5 */
#define XBARA_SEL5_SEL10_MASK                    (0x7FU)
#define XBARA_SEL5_SEL10_SHIFT                   (0U)
#define XBARA_SEL5_SEL10(x)                      (((uint16_t)(((uint16_t)(x)) << XBARA_SEL5_SEL10_SHIFT)) & XBARA_SEL5_SEL10_MASK)
#define XBARA_SEL5_SEL11_MASK                    (0x7F00U)
#define XBARA_SEL5_SEL11_SHIFT                   (8U)
#define XBARA_SEL5_SEL11(x)                      (((uint16_t)(((uint16_t)(x)) << XBARA_SEL5_SEL11_SHIFT)) & XBARA_SEL5_SEL11_MASK)

/*! @name SEL6 - Crossbar A Select Register 6 */
#define XBARA_SEL6_SEL12_MASK                    (0x7FU)
#define XBARA_SEL6_SEL12_SHIFT                   (0U)
#define XBARA_SEL6_SEL12(x)                      (((uint16_t)(((uint16_t)(x)) << XBARA_SEL6_SEL12_SHIFT)) & XBARA_SEL6_SEL12_MASK)
#define XBARA_SEL6_SEL13_MASK                    (0x7F00U)
#define XBARA_SEL6_SEL13_SHIFT                   (8U)
#define XBARA_SEL6_SEL13(x)                      (((uint16_t)(((uint16_t)(x)) << XBARA_SEL6_SEL13_SHIFT)) & XBARA_SEL6_SEL13_MASK)

/*! @name SEL7 - Crossbar A Select Register 7 */
#define XBARA_SEL7_SEL14_MASK                    (0x7FU)
#define XBARA_SEL7_SEL14_SHIFT                   (0U)
#define XBARA_SEL7_SEL14(x)                      (((uint16_t)(((uint16_t)(x)) << XBARA_SEL7_SEL14_SHIFT)) & XBARA_SEL7_SEL14_MASK)
#define XBARA_SEL7_SEL15_MASK                    (0x7F00U)
#define XBARA_SEL7_SEL15_SHIFT                   (8U)
#define XBARA_SEL7_SEL15(x)                      (((uint16_t)(((uint16_t)(x)) << XBARA_SEL7_SEL15_SHIFT)) & XBARA_SEL7_SEL15_MASK)

/*! @name SEL8 - Crossbar A Select Register 8 */
#define XBARA_SEL8_SEL16_MASK                    (0x7FU)
#define XBARA_SEL8_SEL16_SHIFT                   (0U)
#define XBARA_SEL8_SEL16(x)                      (((uint16_t)(((uint16_t)(x)) << XBARA_SEL8_SEL16_SHIFT)) & XBARA_SEL8_SEL16_MASK)
#define XBARA_SEL8_SEL17_MASK                    (0x7F00U)
#define XBARA_SEL8_SEL17_SHIFT                   (8U)
#define XBARA_SEL8_SEL17(x)                      (((uint16_t)(((uint16_t)(x)) << XBARA_SEL8_SEL17_SHIFT)) & XBARA_SEL8_SEL17_MASK)

/*! @name SEL9 - Crossbar A Select Register 9 */
#define XBARA_SEL9_SEL18_MASK                    (0x7FU)
#define XBARA_SEL9_SEL18_SHIFT                   (0U)
#define XBARA_SEL9_SEL18(x)                      (((uint16_t)(((uint16_t)(x)) << XBARA_SEL9_SEL18_SHIFT)) & XBARA_SEL9_SEL18_MASK)
#define XBARA_SEL9_SEL19_MASK                    (0x7F00U)
#define XBARA_SEL9_SEL19_SHIFT                   (8U)
#define XBARA_SEL9_SEL19(x)                      (((uint16_t)(((uint16_t)(x)) << XBARA_SEL9_SEL19_SHIFT)) & XBARA_SEL9_SEL19_MASK)

/*! @name SEL10 - Crossbar A Select Register 10 */
#define XBARA_SEL10_SEL20_MASK                   (0x7FU)
#define XBARA_SEL10_SEL20_SHIFT                  (0U)
#define XBARA_SEL10_SEL20(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL10_SEL20_SHIFT)) & XBARA_SEL10_SEL20_MASK)
#define XBARA_SEL10_SEL21_MASK                   (0x7F00U)
#define XBARA_SEL10_SEL21_SHIFT                  (8U)
#define XBARA_SEL10_SEL21(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL10_SEL21_SHIFT)) & XBARA_SEL10_SEL21_MASK)

/*! @name SEL11 - Crossbar A Select Register 11 */
#define XBARA_SEL11_SEL22_MASK                   (0x7FU)
#define XBARA_SEL11_SEL22_SHIFT                  (0U)
#define XBARA_SEL11_SEL22(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL11_SEL22_SHIFT)) & XBARA_SEL11_SEL22_MASK)
#define XBARA_SEL11_SEL23_MASK                   (0x7F00U)
#define XBARA_SEL11_SEL23_SHIFT                  (8U)
#define XBARA_SEL11_SEL23(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL11_SEL23_SHIFT)) & XBARA_SEL11_SEL23_MASK)

/*! @name SEL12 - Crossbar A Select Register 12 */
#define XBARA_SEL12_SEL24_MASK                   (0x7FU)
#define XBARA_SEL12_SEL24_SHIFT                  (0U)
#define XBARA_SEL12_SEL24(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL12_SEL24_SHIFT)) & XBARA_SEL12_SEL24_MASK)
#define XBARA_SEL12_SEL25_MASK                   (0x7F00U)
#define XBARA_SEL12_SEL25_SHIFT                  (8U)
#define XBARA_SEL12_SEL25(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL12_SEL25_SHIFT)) & XBARA_SEL12_SEL25_MASK)

/*! @name SEL13 - Crossbar A Select Register 13 */
#define XBARA_SEL13_SEL26_MASK                   (0x7FU)
#define XBARA_SEL13_SEL26_SHIFT                  (0U)
#define XBARA_SEL13_SEL26(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL13_SEL26_SHIFT)) & XBARA_SEL13_SEL26_MASK)
#define XBARA_SEL13_SEL27_MASK                   (0x7F00U)
#define XBARA_SEL13_SEL27_SHIFT                  (8U)
#define XBARA_SEL13_SEL27(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL13_SEL27_SHIFT)) & XBARA_SEL13_SEL27_MASK)

/*! @name SEL14 - Crossbar A Select Register 14 */
#define XBARA_SEL14_SEL28_MASK                   (0x7FU)
#define XBARA_SEL14_SEL28_SHIFT                  (0U)
#define XBARA_SEL14_SEL28(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL14_SEL28_SHIFT)) & XBARA_SEL14_SEL28_MASK)
#define XBARA_SEL14_SEL29_MASK                   (0x7F00U)
#define XBARA_SEL14_SEL29_SHIFT                  (8U)
#define XBARA_SEL14_SEL29(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL14_SEL29_SHIFT)) & XBARA_SEL14_SEL29_MASK)

/*! @name SEL15 - Crossbar A Select Register 15 */
#define XBARA_SEL15_SEL30_MASK                   (0x7FU)
#define XBARA_SEL15_SEL30_SHIFT                  (0U)
#define XBARA_SEL15_SEL30(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL15_SEL30_SHIFT)) & XBARA_SEL15_SEL30_MASK)
#define XBARA_SEL15_SEL31_MASK                   (0x7F00U)
#define XBARA_SEL15_SEL31_SHIFT                  (8U)
#define XBARA_SEL15_SEL31(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL15_SEL31_SHIFT)) & XBARA_SEL15_SEL31_MASK)

/*! @name SEL16 - Crossbar A Select Register 16 */
#define XBARA_SEL16_SEL32_MASK                   (0x7FU)
#define XBARA_SEL16_SEL32_SHIFT                  (0U)
#define XBARA_SEL16_SEL32(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL16_SEL32_SHIFT)) & XBARA_SEL16_SEL32_MASK)
#define XBARA_SEL16_SEL33_MASK                   (0x7F00U)
#define XBARA_SEL16_SEL33_SHIFT                  (8U)
#define XBARA_SEL16_SEL33(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL16_SEL33_SHIFT)) & XBARA_SEL16_SEL33_MASK)

/*! @name SEL17 - Crossbar A Select Register 17 */
#define XBARA_SEL17_SEL34_MASK                   (0x7FU)
#define XBARA_SEL17_SEL34_SHIFT                  (0U)
#define XBARA_SEL17_SEL34(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL17_SEL34_SHIFT)) & XBARA_SEL17_SEL34_MASK)
#define XBARA_SEL17_SEL35_MASK                   (0x7F00U)
#define XBARA_SEL17_SEL35_SHIFT                  (8U)
#define XBARA_SEL17_SEL35(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL17_SEL35_SHIFT)) & XBARA_SEL17_SEL35_MASK)

/*! @name SEL18 - Crossbar A Select Register 18 */
#define XBARA_SEL18_SEL36_MASK                   (0x7FU)
#define XBARA_SEL18_SEL36_SHIFT                  (0U)
#define XBARA_SEL18_SEL36(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL18_SEL36_SHIFT)) & XBARA_SEL18_SEL36_MASK)
#define XBARA_SEL18_SEL37_MASK                   (0x7F00U)
#define XBARA_SEL18_SEL37_SHIFT                  (8U)
#define XBARA_SEL18_SEL37(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL18_SEL37_SHIFT)) & XBARA_SEL18_SEL37_MASK)

/*! @name SEL19 - Crossbar A Select Register 19 */
#define XBARA_SEL19_SEL38_MASK                   (0x7FU)
#define XBARA_SEL19_SEL38_SHIFT                  (0U)
#define XBARA_SEL19_SEL38(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL19_SEL38_SHIFT)) & XBARA_SEL19_SEL38_MASK)
#define XBARA_SEL19_SEL39_MASK                   (0x7F00U)
#define XBARA_SEL19_SEL39_SHIFT                  (8U)
#define XBARA_SEL19_SEL39(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL19_SEL39_SHIFT)) & XBARA_SEL19_SEL39_MASK)

/*! @name SEL20 - Crossbar A Select Register 20 */
#define XBARA_SEL20_SEL40_MASK                   (0x7FU)
#define XBARA_SEL20_SEL40_SHIFT                  (0U)
#define XBARA_SEL20_SEL40(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL20_SEL40_SHIFT)) & XBARA_SEL20_SEL40_MASK)
#define XBARA_SEL20_SEL41_MASK                   (0x7F00U)
#define XBARA_SEL20_SEL41_SHIFT                  (8U)
#define XBARA_SEL20_SEL41(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL20_SEL41_SHIFT)) & XBARA_SEL20_SEL41_MASK)

/*! @name SEL21 - Crossbar A Select Register 21 */
#define XBARA_SEL21_SEL42_MASK                   (0x7FU)
#define XBARA_SEL21_SEL42_SHIFT                  (0U)
#define XBARA_SEL21_SEL42(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL21_SEL42_SHIFT)) & XBARA_SEL21_SEL42_MASK)
#define XBARA_SEL21_SEL43_MASK                   (0x7F00U)
#define XBARA_SEL21_SEL43_SHIFT                  (8U)
#define XBARA_SEL21_SEL43(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL21_SEL43_SHIFT)) & XBARA_SEL21_SEL43_MASK)

/*! @name SEL22 - Crossbar A Select Register 22 */
#define XBARA_SEL22_SEL44_MASK                   (0x7FU)
#define XBARA_SEL22_SEL44_SHIFT                  (0U)
#define XBARA_SEL22_SEL44(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL22_SEL44_SHIFT)) & XBARA_SEL22_SEL44_MASK)
#define XBARA_SEL22_SEL45_MASK                   (0x7F00U)
#define XBARA_SEL22_SEL45_SHIFT                  (8U)
#define XBARA_SEL22_SEL45(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL22_SEL45_SHIFT)) & XBARA_SEL22_SEL45_MASK)

/*! @name SEL23 - Crossbar A Select Register 23 */
#define XBARA_SEL23_SEL46_MASK                   (0x7FU)
#define XBARA_SEL23_SEL46_SHIFT                  (0U)
#define XBARA_SEL23_SEL46(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL23_SEL46_SHIFT)) & XBARA_SEL23_SEL46_MASK)
#define XBARA_SEL23_SEL47_MASK                   (0x7F00U)
#define XBARA_SEL23_SEL47_SHIFT                  (8U)
#define XBARA_SEL23_SEL47(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL23_SEL47_SHIFT)) & XBARA_SEL23_SEL47_MASK)

/*! @name SEL24 - Crossbar A Select Register 24 */
#define XBARA_SEL24_SEL48_MASK                   (0x7FU)
#define XBARA_SEL24_SEL48_SHIFT                  (0U)
#define XBARA_SEL24_SEL48(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL24_SEL48_SHIFT)) & XBARA_SEL24_SEL48_MASK)
#define XBARA_SEL24_SEL49_MASK                   (0x7F00U)
#define XBARA_SEL24_SEL49_SHIFT                  (8U)
#define XBARA_SEL24_SEL49(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL24_SEL49_SHIFT)) & XBARA_SEL24_SEL49_MASK)

/*! @name SEL25 - Crossbar A Select Register 25 */
#define XBARA_SEL25_SEL50_MASK                   (0x7FU)
#define XBARA_SEL25_SEL50_SHIFT                  (0U)
#define XBARA_SEL25_SEL50(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL25_SEL50_SHIFT)) & XBARA_SEL25_SEL50_MASK)
#define XBARA_SEL25_SEL51_MASK                   (0x7F00U)
#define XBARA_SEL25_SEL51_SHIFT                  (8U)
#define XBARA_SEL25_SEL51(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL25_SEL51_SHIFT)) & XBARA_SEL25_SEL51_MASK)

/*! @name SEL26 - Crossbar A Select Register 26 */
#define XBARA_SEL26_SEL52_MASK                   (0x7FU)
#define XBARA_SEL26_SEL52_SHIFT                  (0U)
#define XBARA_SEL26_SEL52(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL26_SEL52_SHIFT)) & XBARA_SEL26_SEL52_MASK)
#define XBARA_SEL26_SEL53_MASK                   (0x7F00U)
#define XBARA_SEL26_SEL53_SHIFT                  (8U)
#define XBARA_SEL26_SEL53(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL26_SEL53_SHIFT)) & XBARA_SEL26_SEL53_MASK)

/*! @name SEL27 - Crossbar A Select Register 27 */
#define XBARA_SEL27_SEL54_MASK                   (0x7FU)
#define XBARA_SEL27_SEL54_SHIFT                  (0U)
#define XBARA_SEL27_SEL54(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL27_SEL54_SHIFT)) & XBARA_SEL27_SEL54_MASK)
#define XBARA_SEL27_SEL55_MASK                   (0x7F00U)
#define XBARA_SEL27_SEL55_SHIFT                  (8U)
#define XBARA_SEL27_SEL55(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL27_SEL55_SHIFT)) & XBARA_SEL27_SEL55_MASK)

/*! @name SEL28 - Crossbar A Select Register 28 */
#define XBARA_SEL28_SEL56_MASK                   (0x7FU)
#define XBARA_SEL28_SEL56_SHIFT                  (0U)
#define XBARA_SEL28_SEL56(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL28_SEL56_SHIFT)) & XBARA_SEL28_SEL56_MASK)
#define XBARA_SEL28_SEL57_MASK                   (0x7F00U)
#define XBARA_SEL28_SEL57_SHIFT                  (8U)
#define XBARA_SEL28_SEL57(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL28_SEL57_SHIFT)) & XBARA_SEL28_SEL57_MASK)

/*! @name SEL29 - Crossbar A Select Register 29 */
#define XBARA_SEL29_SEL58_MASK                   (0x7FU)
#define XBARA_SEL29_SEL58_SHIFT                  (0U)
#define XBARA_SEL29_SEL58(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL29_SEL58_SHIFT)) & XBARA_SEL29_SEL58_MASK)
#define XBARA_SEL29_SEL59_MASK                   (0x7F00U)
#define XBARA_SEL29_SEL59_SHIFT                  (8U)
#define XBARA_SEL29_SEL59(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL29_SEL59_SHIFT)) & XBARA_SEL29_SEL59_MASK)

/*! @name SEL30 - Crossbar A Select Register 30 */
#define XBARA_SEL30_SEL60_MASK                   (0x7FU)
#define XBARA_SEL30_SEL60_SHIFT                  (0U)
#define XBARA_SEL30_SEL60(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL30_SEL60_SHIFT)) & XBARA_SEL30_SEL60_MASK)
#define XBARA_SEL30_SEL61_MASK                   (0x7F00U)
#define XBARA_SEL30_SEL61_SHIFT                  (8U)
#define XBARA_SEL30_SEL61(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL30_SEL61_SHIFT)) & XBARA_SEL30_SEL61_MASK)

/*! @name SEL31 - Crossbar A Select Register 31 */
#define XBARA_SEL31_SEL62_MASK                   (0x7FU)
#define XBARA_SEL31_SEL62_SHIFT                  (0U)
#define XBARA_SEL31_SEL62(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL31_SEL62_SHIFT)) & XBARA_SEL31_SEL62_MASK)
#define XBARA_SEL31_SEL63_MASK                   (0x7F00U)
#define XBARA_SEL31_SEL63_SHIFT                  (8U)
#define XBARA_SEL31_SEL63(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL31_SEL63_SHIFT)) & XBARA_SEL31_SEL63_MASK)

/*! @name SEL32 - Crossbar A Select Register 32 */
#define XBARA_SEL32_SEL64_MASK                   (0x7FU)
#define XBARA_SEL32_SEL64_SHIFT                  (0U)
#define XBARA_SEL32_SEL64(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL32_SEL64_SHIFT)) & XBARA_SEL32_SEL64_MASK)
#define XBARA_SEL32_SEL65_MASK                   (0x7F00U)
#define XBARA_SEL32_SEL65_SHIFT                  (8U)
#define XBARA_SEL32_SEL65(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL32_SEL65_SHIFT)) & XBARA_SEL32_SEL65_MASK)

/*! @name SEL33 - Crossbar A Select Register 33 */
#define XBARA_SEL33_SEL66_MASK                   (0x7FU)
#define XBARA_SEL33_SEL66_SHIFT                  (0U)
#define XBARA_SEL33_SEL66(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL33_SEL66_SHIFT)) & XBARA_SEL33_SEL66_MASK)
#define XBARA_SEL33_SEL67_MASK                   (0x7F00U)
#define XBARA_SEL33_SEL67_SHIFT                  (8U)
#define XBARA_SEL33_SEL67(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL33_SEL67_SHIFT)) & XBARA_SEL33_SEL67_MASK)

/*! @name SEL34 - Crossbar A Select Register 34 */
#define XBARA_SEL34_SEL68_MASK                   (0x7FU)
#define XBARA_SEL34_SEL68_SHIFT                  (0U)
#define XBARA_SEL34_SEL68(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL34_SEL68_SHIFT)) & XBARA_SEL34_SEL68_MASK)
#define XBARA_SEL34_SEL69_MASK                   (0x7F00U)
#define XBARA_SEL34_SEL69_SHIFT                  (8U)
#define XBARA_SEL34_SEL69(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL34_SEL69_SHIFT)) & XBARA_SEL34_SEL69_MASK)

/*! @name SEL35 - Crossbar A Select Register 35 */
#define XBARA_SEL35_SEL70_MASK                   (0x7FU)
#define XBARA_SEL35_SEL70_SHIFT                  (0U)
#define XBARA_SEL35_SEL70(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL35_SEL70_SHIFT)) & XBARA_SEL35_SEL70_MASK)
#define XBARA_SEL35_SEL71_MASK                   (0x7F00U)
#define XBARA_SEL35_SEL71_SHIFT                  (8U)
#define XBARA_SEL35_SEL71(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL35_SEL71_SHIFT)) & XBARA_SEL35_SEL71_MASK)

/*! @name SEL36 - Crossbar A Select Register 36 */
#define XBARA_SEL36_SEL72_MASK                   (0x7FU)
#define XBARA_SEL36_SEL72_SHIFT                  (0U)
#define XBARA_SEL36_SEL72(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL36_SEL72_SHIFT)) & XBARA_SEL36_SEL72_MASK)
#define XBARA_SEL36_SEL73_MASK                   (0x7F00U)
#define XBARA_SEL36_SEL73_SHIFT                  (8U)
#define XBARA_SEL36_SEL73(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL36_SEL73_SHIFT)) & XBARA_SEL36_SEL73_MASK)

/*! @name SEL37 - Crossbar A Select Register 37 */
#define XBARA_SEL37_SEL74_MASK                   (0x7FU)
#define XBARA_SEL37_SEL74_SHIFT                  (0U)
#define XBARA_SEL37_SEL74(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL37_SEL74_SHIFT)) & XBARA_SEL37_SEL74_MASK)
#define XBARA_SEL37_SEL75_MASK                   (0x7F00U)
#define XBARA_SEL37_SEL75_SHIFT                  (8U)
#define XBARA_SEL37_SEL75(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL37_SEL75_SHIFT)) & XBARA_SEL37_SEL75_MASK)

/*! @name SEL38 - Crossbar A Select Register 38 */
#define XBARA_SEL38_SEL76_MASK                   (0x7FU)
#define XBARA_SEL38_SEL76_SHIFT                  (0U)
#define XBARA_SEL38_SEL76(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL38_SEL76_SHIFT)) & XBARA_SEL38_SEL76_MASK)
#define XBARA_SEL38_SEL77_MASK                   (0x7F00U)
#define XBARA_SEL38_SEL77_SHIFT                  (8U)
#define XBARA_SEL38_SEL77(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL38_SEL77_SHIFT)) & XBARA_SEL38_SEL77_MASK)

/*! @name SEL39 - Crossbar A Select Register 39 */
#define XBARA_SEL39_SEL78_MASK                   (0x7FU)
#define XBARA_SEL39_SEL78_SHIFT                  (0U)
#define XBARA_SEL39_SEL78(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL39_SEL78_SHIFT)) & XBARA_SEL39_SEL78_MASK)
#define XBARA_SEL39_SEL79_MASK                   (0x7F00U)
#define XBARA_SEL39_SEL79_SHIFT                  (8U)
#define XBARA_SEL39_SEL79(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL39_SEL79_SHIFT)) & XBARA_SEL39_SEL79_MASK)

/*! @name SEL40 - Crossbar A Select Register 40 */
#define XBARA_SEL40_SEL80_MASK                   (0x7FU)
#define XBARA_SEL40_SEL80_SHIFT                  (0U)
#define XBARA_SEL40_SEL80(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL40_SEL80_SHIFT)) & XBARA_SEL40_SEL80_MASK)
#define XBARA_SEL40_SEL81_MASK                   (0x7F00U)
#define XBARA_SEL40_SEL81_SHIFT                  (8U)
#define XBARA_SEL40_SEL81(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL40_SEL81_SHIFT)) & XBARA_SEL40_SEL81_MASK)

/*! @name SEL41 - Crossbar A Select Register 41 */
#define XBARA_SEL41_SEL82_MASK                   (0x7FU)
#define XBARA_SEL41_SEL82_SHIFT                  (0U)
#define XBARA_SEL41_SEL82(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL41_SEL82_SHIFT)) & XBARA_SEL41_SEL82_MASK)
#define XBARA_SEL41_SEL83_MASK                   (0x7F00U)
#define XBARA_SEL41_SEL83_SHIFT                  (8U)
#define XBARA_SEL41_SEL83(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL41_SEL83_SHIFT)) & XBARA_SEL41_SEL83_MASK)

/*! @name SEL42 - Crossbar A Select Register 42 */
#define XBARA_SEL42_SEL84_MASK                   (0x7FU)
#define XBARA_SEL42_SEL84_SHIFT                  (0U)
#define XBARA_SEL42_SEL84(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL42_SEL84_SHIFT)) & XBARA_SEL42_SEL84_MASK)
#define XBARA_SEL42_SEL85_MASK                   (0x7F00U)
#define XBARA_SEL42_SEL85_SHIFT                  (8U)
#define XBARA_SEL42_SEL85(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL42_SEL85_SHIFT)) & XBARA_SEL42_SEL85_MASK)

/*! @name SEL43 - Crossbar A Select Register 43 */
#define XBARA_SEL43_SEL86_MASK                   (0x7FU)
#define XBARA_SEL43_SEL86_SHIFT                  (0U)
#define XBARA_SEL43_SEL86(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL43_SEL86_SHIFT)) & XBARA_SEL43_SEL86_MASK)
#define XBARA_SEL43_SEL87_MASK                   (0x7F00U)
#define XBARA_SEL43_SEL87_SHIFT                  (8U)
#define XBARA_SEL43_SEL87(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL43_SEL87_SHIFT)) & XBARA_SEL43_SEL87_MASK)

/*! @name SEL44 - Crossbar A Select Register 44 */
#define XBARA_SEL44_SEL88_MASK                   (0x7FU)
#define XBARA_SEL44_SEL88_SHIFT                  (0U)
#define XBARA_SEL44_SEL88(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL44_SEL88_SHIFT)) & XBARA_SEL44_SEL88_MASK)
#define XBARA_SEL44_SEL89_MASK                   (0x7F00U)
#define XBARA_SEL44_SEL89_SHIFT                  (8U)
#define XBARA_SEL44_SEL89(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL44_SEL89_SHIFT)) & XBARA_SEL44_SEL89_MASK)

/*! @name SEL45 - Crossbar A Select Register 45 */
#define XBARA_SEL45_SEL90_MASK                   (0x7FU)
#define XBARA_SEL45_SEL90_SHIFT                  (0U)
#define XBARA_SEL45_SEL90(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL45_SEL90_SHIFT)) & XBARA_SEL45_SEL90_MASK)
#define XBARA_SEL45_SEL91_MASK                   (0x7F00U)
#define XBARA_SEL45_SEL91_SHIFT                  (8U)
#define XBARA_SEL45_SEL91(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL45_SEL91_SHIFT)) & XBARA_SEL45_SEL91_MASK)

/*! @name SEL46 - Crossbar A Select Register 46 */
#define XBARA_SEL46_SEL92_MASK                   (0x7FU)
#define XBARA_SEL46_SEL92_SHIFT                  (0U)
#define XBARA_SEL46_SEL92(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL46_SEL92_SHIFT)) & XBARA_SEL46_SEL92_MASK)
#define XBARA_SEL46_SEL93_MASK                   (0x7F00U)
#define XBARA_SEL46_SEL93_SHIFT                  (8U)
#define XBARA_SEL46_SEL93(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL46_SEL93_SHIFT)) & XBARA_SEL46_SEL93_MASK)

/*! @name SEL47 - Crossbar A Select Register 47 */
#define XBARA_SEL47_SEL94_MASK                   (0x7FU)
#define XBARA_SEL47_SEL94_SHIFT                  (0U)
#define XBARA_SEL47_SEL94(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL47_SEL94_SHIFT)) & XBARA_SEL47_SEL94_MASK)
#define XBARA_SEL47_SEL95_MASK                   (0x7F00U)
#define XBARA_SEL47_SEL95_SHIFT                  (8U)
#define XBARA_SEL47_SEL95(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL47_SEL95_SHIFT)) & XBARA_SEL47_SEL95_MASK)

/*! @name SEL48 - Crossbar A Select Register 48 */
#define XBARA_SEL48_SEL96_MASK                   (0x7FU)
#define XBARA_SEL48_SEL96_SHIFT                  (0U)
#define XBARA_SEL48_SEL96(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL48_SEL96_SHIFT)) & XBARA_SEL48_SEL96_MASK)
#define XBARA_SEL48_SEL97_MASK                   (0x7F00U)
#define XBARA_SEL48_SEL97_SHIFT                  (8U)
#define XBARA_SEL48_SEL97(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL48_SEL97_SHIFT)) & XBARA_SEL48_SEL97_MASK)

/*! @name SEL49 - Crossbar A Select Register 49 */
#define XBARA_SEL49_SEL98_MASK                   (0x7FU)
#define XBARA_SEL49_SEL98_SHIFT                  (0U)
#define XBARA_SEL49_SEL98(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL49_SEL98_SHIFT)) & XBARA_SEL49_SEL98_MASK)
#define XBARA_SEL49_SEL99_MASK                   (0x7F00U)
#define XBARA_SEL49_SEL99_SHIFT                  (8U)
#define XBARA_SEL49_SEL99(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_SEL49_SEL99_SHIFT)) & XBARA_SEL49_SEL99_MASK)

/*! @name SEL50 - Crossbar A Select Register 50 */
#define XBARA_SEL50_SEL100_MASK                  (0x7FU)
#define XBARA_SEL50_SEL100_SHIFT                 (0U)
#define XBARA_SEL50_SEL100(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL50_SEL100_SHIFT)) & XBARA_SEL50_SEL100_MASK)
#define XBARA_SEL50_SEL101_MASK                  (0x7F00U)
#define XBARA_SEL50_SEL101_SHIFT                 (8U)
#define XBARA_SEL50_SEL101(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL50_SEL101_SHIFT)) & XBARA_SEL50_SEL101_MASK)

/*! @name SEL51 - Crossbar A Select Register 51 */
#define XBARA_SEL51_SEL102_MASK                  (0x7FU)
#define XBARA_SEL51_SEL102_SHIFT                 (0U)
#define XBARA_SEL51_SEL102(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL51_SEL102_SHIFT)) & XBARA_SEL51_SEL102_MASK)
#define XBARA_SEL51_SEL103_MASK                  (0x7F00U)
#define XBARA_SEL51_SEL103_SHIFT                 (8U)
#define XBARA_SEL51_SEL103(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL51_SEL103_SHIFT)) & XBARA_SEL51_SEL103_MASK)

/*! @name SEL52 - Crossbar A Select Register 52 */
#define XBARA_SEL52_SEL104_MASK                  (0x7FU)
#define XBARA_SEL52_SEL104_SHIFT                 (0U)
#define XBARA_SEL52_SEL104(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL52_SEL104_SHIFT)) & XBARA_SEL52_SEL104_MASK)
#define XBARA_SEL52_SEL105_MASK                  (0x7F00U)
#define XBARA_SEL52_SEL105_SHIFT                 (8U)
#define XBARA_SEL52_SEL105(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL52_SEL105_SHIFT)) & XBARA_SEL52_SEL105_MASK)

/*! @name SEL53 - Crossbar A Select Register 53 */
#define XBARA_SEL53_SEL106_MASK                  (0x7FU)
#define XBARA_SEL53_SEL106_SHIFT                 (0U)
#define XBARA_SEL53_SEL106(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL53_SEL106_SHIFT)) & XBARA_SEL53_SEL106_MASK)
#define XBARA_SEL53_SEL107_MASK                  (0x7F00U)
#define XBARA_SEL53_SEL107_SHIFT                 (8U)
#define XBARA_SEL53_SEL107(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL53_SEL107_SHIFT)) & XBARA_SEL53_SEL107_MASK)

/*! @name SEL54 - Crossbar A Select Register 54 */
#define XBARA_SEL54_SEL108_MASK                  (0x7FU)
#define XBARA_SEL54_SEL108_SHIFT                 (0U)
#define XBARA_SEL54_SEL108(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL54_SEL108_SHIFT)) & XBARA_SEL54_SEL108_MASK)
#define XBARA_SEL54_SEL109_MASK                  (0x7F00U)
#define XBARA_SEL54_SEL109_SHIFT                 (8U)
#define XBARA_SEL54_SEL109(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL54_SEL109_SHIFT)) & XBARA_SEL54_SEL109_MASK)

/*! @name SEL55 - Crossbar A Select Register 55 */
#define XBARA_SEL55_SEL110_MASK                  (0x7FU)
#define XBARA_SEL55_SEL110_SHIFT                 (0U)
#define XBARA_SEL55_SEL110(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL55_SEL110_SHIFT)) & XBARA_SEL55_SEL110_MASK)
#define XBARA_SEL55_SEL111_MASK                  (0x7F00U)
#define XBARA_SEL55_SEL111_SHIFT                 (8U)
#define XBARA_SEL55_SEL111(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL55_SEL111_SHIFT)) & XBARA_SEL55_SEL111_MASK)

/*! @name SEL56 - Crossbar A Select Register 56 */
#define XBARA_SEL56_SEL112_MASK                  (0x7FU)
#define XBARA_SEL56_SEL112_SHIFT                 (0U)
#define XBARA_SEL56_SEL112(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL56_SEL112_SHIFT)) & XBARA_SEL56_SEL112_MASK)
#define XBARA_SEL56_SEL113_MASK                  (0x7F00U)
#define XBARA_SEL56_SEL113_SHIFT                 (8U)
#define XBARA_SEL56_SEL113(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL56_SEL113_SHIFT)) & XBARA_SEL56_SEL113_MASK)

/*! @name SEL57 - Crossbar A Select Register 57 */
#define XBARA_SEL57_SEL114_MASK                  (0x7FU)
#define XBARA_SEL57_SEL114_SHIFT                 (0U)
#define XBARA_SEL57_SEL114(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL57_SEL114_SHIFT)) & XBARA_SEL57_SEL114_MASK)
#define XBARA_SEL57_SEL115_MASK                  (0x7F00U)
#define XBARA_SEL57_SEL115_SHIFT                 (8U)
#define XBARA_SEL57_SEL115(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL57_SEL115_SHIFT)) & XBARA_SEL57_SEL115_MASK)

/*! @name SEL58 - Crossbar A Select Register 58 */
#define XBARA_SEL58_SEL116_MASK                  (0x7FU)
#define XBARA_SEL58_SEL116_SHIFT                 (0U)
#define XBARA_SEL58_SEL116(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL58_SEL116_SHIFT)) & XBARA_SEL58_SEL116_MASK)
#define XBARA_SEL58_SEL117_MASK                  (0x7F00U)
#define XBARA_SEL58_SEL117_SHIFT                 (8U)
#define XBARA_SEL58_SEL117(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL58_SEL117_SHIFT)) & XBARA_SEL58_SEL117_MASK)

/*! @name SEL59 - Crossbar A Select Register 59 */
#define XBARA_SEL59_SEL118_MASK                  (0x7FU)
#define XBARA_SEL59_SEL118_SHIFT                 (0U)
#define XBARA_SEL59_SEL118(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL59_SEL118_SHIFT)) & XBARA_SEL59_SEL118_MASK)
#define XBARA_SEL59_SEL119_MASK                  (0x7F00U)
#define XBARA_SEL59_SEL119_SHIFT                 (8U)
#define XBARA_SEL59_SEL119(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL59_SEL119_SHIFT)) & XBARA_SEL59_SEL119_MASK)

/*! @name SEL60 - Crossbar A Select Register 60 */
#define XBARA_SEL60_SEL120_MASK                  (0x7FU)
#define XBARA_SEL60_SEL120_SHIFT                 (0U)
#define XBARA_SEL60_SEL120(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL60_SEL120_SHIFT)) & XBARA_SEL60_SEL120_MASK)
#define XBARA_SEL60_SEL121_MASK                  (0x7F00U)
#define XBARA_SEL60_SEL121_SHIFT                 (8U)
#define XBARA_SEL60_SEL121(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL60_SEL121_SHIFT)) & XBARA_SEL60_SEL121_MASK)

/*! @name SEL61 - Crossbar A Select Register 61 */
#define XBARA_SEL61_SEL122_MASK                  (0x7FU)
#define XBARA_SEL61_SEL122_SHIFT                 (0U)
#define XBARA_SEL61_SEL122(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL61_SEL122_SHIFT)) & XBARA_SEL61_SEL122_MASK)
#define XBARA_SEL61_SEL123_MASK                  (0x7F00U)
#define XBARA_SEL61_SEL123_SHIFT                 (8U)
#define XBARA_SEL61_SEL123(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL61_SEL123_SHIFT)) & XBARA_SEL61_SEL123_MASK)

/*! @name SEL62 - Crossbar A Select Register 62 */
#define XBARA_SEL62_SEL124_MASK                  (0x7FU)
#define XBARA_SEL62_SEL124_SHIFT                 (0U)
#define XBARA_SEL62_SEL124(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL62_SEL124_SHIFT)) & XBARA_SEL62_SEL124_MASK)
#define XBARA_SEL62_SEL125_MASK                  (0x7F00U)
#define XBARA_SEL62_SEL125_SHIFT                 (8U)
#define XBARA_SEL62_SEL125(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL62_SEL125_SHIFT)) & XBARA_SEL62_SEL125_MASK)

/*! @name SEL63 - Crossbar A Select Register 63 */
#define XBARA_SEL63_SEL126_MASK                  (0x7FU)
#define XBARA_SEL63_SEL126_SHIFT                 (0U)
#define XBARA_SEL63_SEL126(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL63_SEL126_SHIFT)) & XBARA_SEL63_SEL126_MASK)
#define XBARA_SEL63_SEL127_MASK                  (0x7F00U)
#define XBARA_SEL63_SEL127_SHIFT                 (8U)
#define XBARA_SEL63_SEL127(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL63_SEL127_SHIFT)) & XBARA_SEL63_SEL127_MASK)

/*! @name SEL64 - Crossbar A Select Register 64 */
#define XBARA_SEL64_SEL128_MASK                  (0x7FU)
#define XBARA_SEL64_SEL128_SHIFT                 (0U)
#define XBARA_SEL64_SEL128(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL64_SEL128_SHIFT)) & XBARA_SEL64_SEL128_MASK)
#define XBARA_SEL64_SEL129_MASK                  (0x7F00U)
#define XBARA_SEL64_SEL129_SHIFT                 (8U)
#define XBARA_SEL64_SEL129(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL64_SEL129_SHIFT)) & XBARA_SEL64_SEL129_MASK)

/*! @name SEL65 - Crossbar A Select Register 65 */
#define XBARA_SEL65_SEL130_MASK                  (0x7FU)
#define XBARA_SEL65_SEL130_SHIFT                 (0U)
#define XBARA_SEL65_SEL130(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL65_SEL130_SHIFT)) & XBARA_SEL65_SEL130_MASK)
#define XBARA_SEL65_SEL131_MASK                  (0x7F00U)
#define XBARA_SEL65_SEL131_SHIFT                 (8U)
#define XBARA_SEL65_SEL131(x)                    (((uint16_t)(((uint16_t)(x)) << XBARA_SEL65_SEL131_SHIFT)) & XBARA_SEL65_SEL131_MASK)

/*! @name CTRL0 - Crossbar A Control Register 0 */
#define XBARA_CTRL0_DEN0_MASK                    (0x1U)
#define XBARA_CTRL0_DEN0_SHIFT                   (0U)
#define XBARA_CTRL0_IEN0_MASK                    (0x2U)
#define XBARA_CTRL0_IEN0_SHIFT                   (1U)
#define XBARA_CTRL0_EDGE0_MASK                   (0xCU)
#define XBARA_CTRL0_EDGE0_SHIFT                  (2U)
#define XBARA_CTRL0_EDGE0(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_CTRL0_EDGE0_SHIFT)) & XBARA_CTRL0_EDGE0_MASK)
#define XBARA_CTRL0_STS0_MASK                    (0x10U)
#define XBARA_CTRL0_STS0_SHIFT                   (4U)
#define XBARA_CTRL0_DEN1_MASK                    (0x100U)
#define XBARA_CTRL0_DEN1_SHIFT                   (8U)
#define XBARA_CTRL0_IEN1_MASK                    (0x200U)
#define XBARA_CTRL0_IEN1_SHIFT                   (9U)
#define XBARA_CTRL0_EDGE1_MASK                   (0xC00U)
#define XBARA_CTRL0_EDGE1_SHIFT                  (10U)
#define XBARA_CTRL0_EDGE1(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_CTRL0_EDGE1_SHIFT)) & XBARA_CTRL0_EDGE1_MASK)
#define XBARA_CTRL0_STS1_MASK                    (0x1000U)
#define XBARA_CTRL0_STS1_SHIFT                   (12U)

/*! @name CTRL1 - Crossbar A Control Register 1 */
#define XBARA_CTRL1_DEN2_MASK                    (0x1U)
#define XBARA_CTRL1_DEN2_SHIFT                   (0U)
#define XBARA_CTRL1_IEN2_MASK                    (0x2U)
#define XBARA_CTRL1_IEN2_SHIFT                   (1U)
#define XBARA_CTRL1_EDGE2_MASK                   (0xCU)
#define XBARA_CTRL1_EDGE2_SHIFT                  (2U)
#define XBARA_CTRL1_EDGE2(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_CTRL1_EDGE2_SHIFT)) & XBARA_CTRL1_EDGE2_MASK)
#define XBARA_CTRL1_STS2_MASK                    (0x10U)
#define XBARA_CTRL1_STS2_SHIFT                   (4U)
#define XBARA_CTRL1_DEN3_MASK                    (0x100U)
#define XBARA_CTRL1_DEN3_SHIFT                   (8U)
#define XBARA_CTRL1_IEN3_MASK                    (0x200U)
#define XBARA_CTRL1_IEN3_SHIFT                   (9U)
#define XBARA_CTRL1_EDGE3_MASK                   (0xC00U)
#define XBARA_CTRL1_EDGE3_SHIFT                  (10U)
#define XBARA_CTRL1_EDGE3(x)                     (((uint16_t)(((uint16_t)(x)) << XBARA_CTRL1_EDGE3_SHIFT)) & XBARA_CTRL1_EDGE3_MASK)
#define XBARA_CTRL1_STS3_MASK                    (0x1000U)
#define XBARA_CTRL1_STS3_SHIFT                   (12U)


/*!
 * @}
 */ /* end of group XBARA_Register_Masks */


/* XBARA - Peripheral instance base addresses */
/** Peripheral XBARA base pointer */
#define XBARA_BASE_PTR                           ((XBARA_MemMapPtr)0x403BC000u)
/** Array initializer of XBARA peripheral base pointers */
#define XBARA_BASE_PTRS                          { XBARA_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- XBARA - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XBARA_Register_Accessor_Macros XBARA - Register accessor macros
 * @{
 */


/* XBARA - Register instance definitions */
/* XBARA */
#define XBARA_SEL0                               XBARA_SEL0_REG(XBARA_BASE_PTR)
#define XBARA_SEL1                               XBARA_SEL1_REG(XBARA_BASE_PTR)
#define XBARA_SEL2                               XBARA_SEL2_REG(XBARA_BASE_PTR)
#define XBARA_SEL3                               XBARA_SEL3_REG(XBARA_BASE_PTR)
#define XBARA_SEL4                               XBARA_SEL4_REG(XBARA_BASE_PTR)
#define XBARA_SEL5                               XBARA_SEL5_REG(XBARA_BASE_PTR)
#define XBARA_SEL6                               XBARA_SEL6_REG(XBARA_BASE_PTR)
#define XBARA_SEL7                               XBARA_SEL7_REG(XBARA_BASE_PTR)
#define XBARA_SEL8                               XBARA_SEL8_REG(XBARA_BASE_PTR)
#define XBARA_SEL9                               XBARA_SEL9_REG(XBARA_BASE_PTR)
#define XBARA_SEL10                              XBARA_SEL10_REG(XBARA_BASE_PTR)
#define XBARA_SEL11                              XBARA_SEL11_REG(XBARA_BASE_PTR)
#define XBARA_SEL12                              XBARA_SEL12_REG(XBARA_BASE_PTR)
#define XBARA_SEL13                              XBARA_SEL13_REG(XBARA_BASE_PTR)
#define XBARA_SEL14                              XBARA_SEL14_REG(XBARA_BASE_PTR)
#define XBARA_SEL15                              XBARA_SEL15_REG(XBARA_BASE_PTR)
#define XBARA_SEL16                              XBARA_SEL16_REG(XBARA_BASE_PTR)
#define XBARA_SEL17                              XBARA_SEL17_REG(XBARA_BASE_PTR)
#define XBARA_SEL18                              XBARA_SEL18_REG(XBARA_BASE_PTR)
#define XBARA_SEL19                              XBARA_SEL19_REG(XBARA_BASE_PTR)
#define XBARA_SEL20                              XBARA_SEL20_REG(XBARA_BASE_PTR)
#define XBARA_SEL21                              XBARA_SEL21_REG(XBARA_BASE_PTR)
#define XBARA_SEL22                              XBARA_SEL22_REG(XBARA_BASE_PTR)
#define XBARA_SEL23                              XBARA_SEL23_REG(XBARA_BASE_PTR)
#define XBARA_SEL24                              XBARA_SEL24_REG(XBARA_BASE_PTR)
#define XBARA_SEL25                              XBARA_SEL25_REG(XBARA_BASE_PTR)
#define XBARA_SEL26                              XBARA_SEL26_REG(XBARA_BASE_PTR)
#define XBARA_SEL27                              XBARA_SEL27_REG(XBARA_BASE_PTR)
#define XBARA_SEL28                              XBARA_SEL28_REG(XBARA_BASE_PTR)
#define XBARA_SEL29                              XBARA_SEL29_REG(XBARA_BASE_PTR)
#define XBARA_SEL30                              XBARA_SEL30_REG(XBARA_BASE_PTR)
#define XBARA_SEL31                              XBARA_SEL31_REG(XBARA_BASE_PTR)
#define XBARA_SEL32                              XBARA_SEL32_REG(XBARA_BASE_PTR)
#define XBARA_SEL33                              XBARA_SEL33_REG(XBARA_BASE_PTR)
#define XBARA_SEL34                              XBARA_SEL34_REG(XBARA_BASE_PTR)
#define XBARA_SEL35                              XBARA_SEL35_REG(XBARA_BASE_PTR)
#define XBARA_SEL36                              XBARA_SEL36_REG(XBARA_BASE_PTR)
#define XBARA_SEL37                              XBARA_SEL37_REG(XBARA_BASE_PTR)
#define XBARA_SEL38                              XBARA_SEL38_REG(XBARA_BASE_PTR)
#define XBARA_SEL39                              XBARA_SEL39_REG(XBARA_BASE_PTR)
#define XBARA_SEL40                              XBARA_SEL40_REG(XBARA_BASE_PTR)
#define XBARA_SEL41                              XBARA_SEL41_REG(XBARA_BASE_PTR)
#define XBARA_SEL42                              XBARA_SEL42_REG(XBARA_BASE_PTR)
#define XBARA_SEL43                              XBARA_SEL43_REG(XBARA_BASE_PTR)
#define XBARA_SEL44                              XBARA_SEL44_REG(XBARA_BASE_PTR)
#define XBARA_SEL45                              XBARA_SEL45_REG(XBARA_BASE_PTR)
#define XBARA_SEL46                              XBARA_SEL46_REG(XBARA_BASE_PTR)
#define XBARA_SEL47                              XBARA_SEL47_REG(XBARA_BASE_PTR)
#define XBARA_SEL48                              XBARA_SEL48_REG(XBARA_BASE_PTR)
#define XBARA_SEL49                              XBARA_SEL49_REG(XBARA_BASE_PTR)
#define XBARA_SEL50                              XBARA_SEL50_REG(XBARA_BASE_PTR)
#define XBARA_SEL51                              XBARA_SEL51_REG(XBARA_BASE_PTR)
#define XBARA_SEL52                              XBARA_SEL52_REG(XBARA_BASE_PTR)
#define XBARA_SEL53                              XBARA_SEL53_REG(XBARA_BASE_PTR)
#define XBARA_SEL54                              XBARA_SEL54_REG(XBARA_BASE_PTR)
#define XBARA_SEL55                              XBARA_SEL55_REG(XBARA_BASE_PTR)
#define XBARA_SEL56                              XBARA_SEL56_REG(XBARA_BASE_PTR)
#define XBARA_SEL57                              XBARA_SEL57_REG(XBARA_BASE_PTR)
#define XBARA_SEL58                              XBARA_SEL58_REG(XBARA_BASE_PTR)
#define XBARA_SEL59                              XBARA_SEL59_REG(XBARA_BASE_PTR)
#define XBARA_SEL60                              XBARA_SEL60_REG(XBARA_BASE_PTR)
#define XBARA_SEL61                              XBARA_SEL61_REG(XBARA_BASE_PTR)
#define XBARA_SEL62                              XBARA_SEL62_REG(XBARA_BASE_PTR)
#define XBARA_SEL63                              XBARA_SEL63_REG(XBARA_BASE_PTR)
#define XBARA_SEL64                              XBARA_SEL64_REG(XBARA_BASE_PTR)
#define XBARA_SEL65                              XBARA_SEL65_REG(XBARA_BASE_PTR)
#define XBARA_CTRL0                              XBARA_CTRL0_REG(XBARA_BASE_PTR)
#define XBARA_CTRL1                              XBARA_CTRL1_REG(XBARA_BASE_PTR)

/*!
 * @}
 */ /* end of group XBARA_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group XBARA_Peripheral */


/* ----------------------------------------------------------------------------
   -- XBARB
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XBARB_Peripheral XBARB
 * @{
 */

/** XBARB - Peripheral register structure */
typedef struct XBARB_MemMap {
  uint16_t SEL0;                                   /**< Crossbar B Select Register 0, offset: 0x0 */
  uint16_t SEL1;                                   /**< Crossbar B Select Register 1, offset: 0x2 */
  uint16_t SEL2;                                   /**< Crossbar B Select Register 2, offset: 0x4 */
  uint16_t SEL3;                                   /**< Crossbar B Select Register 3, offset: 0x6 */
  uint16_t SEL4;                                   /**< Crossbar B Select Register 4, offset: 0x8 */
  uint16_t SEL5;                                   /**< Crossbar B Select Register 5, offset: 0xA */
  uint16_t SEL6;                                   /**< Crossbar B Select Register 6, offset: 0xC */
  uint16_t SEL7;                                   /**< Crossbar B Select Register 7, offset: 0xE */
} volatile *XBARB_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- XBARB - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XBARB_Register_Accessor_Macros XBARB - Register accessor macros
 * @{
 */


/* XBARB - Register accessors */
#define XBARB_SEL0_REG(base)                     ((base)->SEL0)
#define XBARB_SEL1_REG(base)                     ((base)->SEL1)
#define XBARB_SEL2_REG(base)                     ((base)->SEL2)
#define XBARB_SEL3_REG(base)                     ((base)->SEL3)
#define XBARB_SEL4_REG(base)                     ((base)->SEL4)
#define XBARB_SEL5_REG(base)                     ((base)->SEL5)
#define XBARB_SEL6_REG(base)                     ((base)->SEL6)
#define XBARB_SEL7_REG(base)                     ((base)->SEL7)

/*!
 * @}
 */ /* end of group XBARB_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- XBARB Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XBARB_Register_Masks XBARB Register Masks
 * @{
 */

/*! @name SEL0 - Crossbar B Select Register 0 */
#define XBARB_SEL0_SEL0_MASK                     (0x3FU)
#define XBARB_SEL0_SEL0_SHIFT                    (0U)
#define XBARB_SEL0_SEL0(x)                       (((uint16_t)(((uint16_t)(x)) << XBARB_SEL0_SEL0_SHIFT)) & XBARB_SEL0_SEL0_MASK)
#define XBARB_SEL0_SEL1_MASK                     (0x3F00U)
#define XBARB_SEL0_SEL1_SHIFT                    (8U)
#define XBARB_SEL0_SEL1(x)                       (((uint16_t)(((uint16_t)(x)) << XBARB_SEL0_SEL1_SHIFT)) & XBARB_SEL0_SEL1_MASK)

/*! @name SEL1 - Crossbar B Select Register 1 */
#define XBARB_SEL1_SEL2_MASK                     (0x3FU)
#define XBARB_SEL1_SEL2_SHIFT                    (0U)
#define XBARB_SEL1_SEL2(x)                       (((uint16_t)(((uint16_t)(x)) << XBARB_SEL1_SEL2_SHIFT)) & XBARB_SEL1_SEL2_MASK)
#define XBARB_SEL1_SEL3_MASK                     (0x3F00U)
#define XBARB_SEL1_SEL3_SHIFT                    (8U)
#define XBARB_SEL1_SEL3(x)                       (((uint16_t)(((uint16_t)(x)) << XBARB_SEL1_SEL3_SHIFT)) & XBARB_SEL1_SEL3_MASK)

/*! @name SEL2 - Crossbar B Select Register 2 */
#define XBARB_SEL2_SEL4_MASK                     (0x3FU)
#define XBARB_SEL2_SEL4_SHIFT                    (0U)
#define XBARB_SEL2_SEL4(x)                       (((uint16_t)(((uint16_t)(x)) << XBARB_SEL2_SEL4_SHIFT)) & XBARB_SEL2_SEL4_MASK)
#define XBARB_SEL2_SEL5_MASK                     (0x3F00U)
#define XBARB_SEL2_SEL5_SHIFT                    (8U)
#define XBARB_SEL2_SEL5(x)                       (((uint16_t)(((uint16_t)(x)) << XBARB_SEL2_SEL5_SHIFT)) & XBARB_SEL2_SEL5_MASK)

/*! @name SEL3 - Crossbar B Select Register 3 */
#define XBARB_SEL3_SEL6_MASK                     (0x3FU)
#define XBARB_SEL3_SEL6_SHIFT                    (0U)
#define XBARB_SEL3_SEL6(x)                       (((uint16_t)(((uint16_t)(x)) << XBARB_SEL3_SEL6_SHIFT)) & XBARB_SEL3_SEL6_MASK)
#define XBARB_SEL3_SEL7_MASK                     (0x3F00U)
#define XBARB_SEL3_SEL7_SHIFT                    (8U)
#define XBARB_SEL3_SEL7(x)                       (((uint16_t)(((uint16_t)(x)) << XBARB_SEL3_SEL7_SHIFT)) & XBARB_SEL3_SEL7_MASK)

/*! @name SEL4 - Crossbar B Select Register 4 */
#define XBARB_SEL4_SEL8_MASK                     (0x3FU)
#define XBARB_SEL4_SEL8_SHIFT                    (0U)
#define XBARB_SEL4_SEL8(x)                       (((uint16_t)(((uint16_t)(x)) << XBARB_SEL4_SEL8_SHIFT)) & XBARB_SEL4_SEL8_MASK)
#define XBARB_SEL4_SEL9_MASK                     (0x3F00U)
#define XBARB_SEL4_SEL9_SHIFT                    (8U)
#define XBARB_SEL4_SEL9(x)                       (((uint16_t)(((uint16_t)(x)) << XBARB_SEL4_SEL9_SHIFT)) & XBARB_SEL4_SEL9_MASK)

/*! @name SEL5 - Crossbar B Select Register 5 */
#define XBARB_SEL5_SEL10_MASK                    (0x3FU)
#define XBARB_SEL5_SEL10_SHIFT                   (0U)
#define XBARB_SEL5_SEL10(x)                      (((uint16_t)(((uint16_t)(x)) << XBARB_SEL5_SEL10_SHIFT)) & XBARB_SEL5_SEL10_MASK)
#define XBARB_SEL5_SEL11_MASK                    (0x3F00U)
#define XBARB_SEL5_SEL11_SHIFT                   (8U)
#define XBARB_SEL5_SEL11(x)                      (((uint16_t)(((uint16_t)(x)) << XBARB_SEL5_SEL11_SHIFT)) & XBARB_SEL5_SEL11_MASK)

/*! @name SEL6 - Crossbar B Select Register 6 */
#define XBARB_SEL6_SEL12_MASK                    (0x3FU)
#define XBARB_SEL6_SEL12_SHIFT                   (0U)
#define XBARB_SEL6_SEL12(x)                      (((uint16_t)(((uint16_t)(x)) << XBARB_SEL6_SEL12_SHIFT)) & XBARB_SEL6_SEL12_MASK)
#define XBARB_SEL6_SEL13_MASK                    (0x3F00U)
#define XBARB_SEL6_SEL13_SHIFT                   (8U)
#define XBARB_SEL6_SEL13(x)                      (((uint16_t)(((uint16_t)(x)) << XBARB_SEL6_SEL13_SHIFT)) & XBARB_SEL6_SEL13_MASK)

/*! @name SEL7 - Crossbar B Select Register 7 */
#define XBARB_SEL7_SEL14_MASK                    (0x3FU)
#define XBARB_SEL7_SEL14_SHIFT                   (0U)
#define XBARB_SEL7_SEL14(x)                      (((uint16_t)(((uint16_t)(x)) << XBARB_SEL7_SEL14_SHIFT)) & XBARB_SEL7_SEL14_MASK)
#define XBARB_SEL7_SEL15_MASK                    (0x3F00U)
#define XBARB_SEL7_SEL15_SHIFT                   (8U)
#define XBARB_SEL7_SEL15(x)                      (((uint16_t)(((uint16_t)(x)) << XBARB_SEL7_SEL15_SHIFT)) & XBARB_SEL7_SEL15_MASK)


/*!
 * @}
 */ /* end of group XBARB_Register_Masks */


/* XBARB - Peripheral instance base addresses */
/** Peripheral XBARB base pointer */
#define XBARB_BASE_PTR                           ((XBARB_MemMapPtr)0x403C0000u)
/** Array initializer of XBARB peripheral base pointers */
#define XBARB_BASE_PTRS                          { XBARB_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- XBARB - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XBARB_Register_Accessor_Macros XBARB - Register accessor macros
 * @{
 */


/* XBARB - Register instance definitions */
/* XBARB */
#define XBARB_SEL0                               XBARB_SEL0_REG(XBARB_BASE_PTR)
#define XBARB_SEL1                               XBARB_SEL1_REG(XBARB_BASE_PTR)
#define XBARB_SEL2                               XBARB_SEL2_REG(XBARB_BASE_PTR)
#define XBARB_SEL3                               XBARB_SEL3_REG(XBARB_BASE_PTR)
#define XBARB_SEL4                               XBARB_SEL4_REG(XBARB_BASE_PTR)
#define XBARB_SEL5                               XBARB_SEL5_REG(XBARB_BASE_PTR)
#define XBARB_SEL6                               XBARB_SEL6_REG(XBARB_BASE_PTR)
#define XBARB_SEL7                               XBARB_SEL7_REG(XBARB_BASE_PTR)

/*!
 * @}
 */ /* end of group XBARB_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group XBARB_Peripheral */


/* ----------------------------------------------------------------------------
   -- XTALOSC24M
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XTALOSC24M_Peripheral XTALOSC24M
 * @{
 */

/** XTALOSC24M - Peripheral register structure */
typedef struct XTALOSC24M_MemMap {
  uint8_t RESERVED_0[336];
  uint32_t MISC0;                                  /**< Miscellaneous Register 0, offset: 0x150 */
  uint32_t MISC0_SET;                              /**< Miscellaneous Register 0, offset: 0x154 */
  uint32_t MISC0_CLR;                              /**< Miscellaneous Register 0, offset: 0x158 */
  uint32_t MISC0_TOG;                              /**< Miscellaneous Register 0, offset: 0x15C */
  uint8_t RESERVED_1[272];
  uint32_t LOWPWR_CTRL;                            /**< XTAL OSC (LP) Control Register, offset: 0x270 */
  uint32_t LOWPWR_CTRL_SET;                        /**< XTAL OSC (LP) Control Register, offset: 0x274 */
  uint32_t LOWPWR_CTRL_CLR;                        /**< XTAL OSC (LP) Control Register, offset: 0x278 */
  uint32_t LOWPWR_CTRL_TOG;                        /**< XTAL OSC (LP) Control Register, offset: 0x27C */
  uint8_t RESERVED_2[32];
  uint32_t OSC_CONFIG0;                            /**< XTAL OSC Configuration 0 Register, offset: 0x2A0 */
  uint32_t OSC_CONFIG0_SET;                        /**< XTAL OSC Configuration 0 Register, offset: 0x2A4 */
  uint32_t OSC_CONFIG0_CLR;                        /**< XTAL OSC Configuration 0 Register, offset: 0x2A8 */
  uint32_t OSC_CONFIG0_TOG;                        /**< XTAL OSC Configuration 0 Register, offset: 0x2AC */
  uint32_t OSC_CONFIG1;                            /**< XTAL OSC Configuration 1 Register, offset: 0x2B0 */
  uint32_t OSC_CONFIG1_SET;                        /**< XTAL OSC Configuration 1 Register, offset: 0x2B4 */
  uint32_t OSC_CONFIG1_CLR;                        /**< XTAL OSC Configuration 1 Register, offset: 0x2B8 */
  uint32_t OSC_CONFIG1_TOG;                        /**< XTAL OSC Configuration 1 Register, offset: 0x2BC */
  uint32_t OSC_CONFIG2;                            /**< XTAL OSC Configuration 2 Register, offset: 0x2C0 */
  uint32_t OSC_CONFIG2_SET;                        /**< XTAL OSC Configuration 2 Register, offset: 0x2C4 */
  uint32_t OSC_CONFIG2_CLR;                        /**< XTAL OSC Configuration 2 Register, offset: 0x2C8 */
  uint32_t OSC_CONFIG2_TOG;                        /**< XTAL OSC Configuration 2 Register, offset: 0x2CC */
} volatile *XTALOSC24M_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- XTALOSC24M - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XTALOSC24M_Register_Accessor_Macros XTALOSC24M - Register accessor macros
 * @{
 */


/* XTALOSC24M - Register accessors */
#define XTALOSC24M_MISC0_REG(base)               ((base)->MISC0)
#define XTALOSC24M_MISC0_SET_REG(base)           ((base)->MISC0_SET)
#define XTALOSC24M_MISC0_CLR_REG(base)           ((base)->MISC0_CLR)
#define XTALOSC24M_MISC0_TOG_REG(base)           ((base)->MISC0_TOG)
#define XTALOSC24M_LOWPWR_CTRL_REG(base)         ((base)->LOWPWR_CTRL)
#define XTALOSC24M_LOWPWR_CTRL_SET_REG(base)     ((base)->LOWPWR_CTRL_SET)
#define XTALOSC24M_LOWPWR_CTRL_CLR_REG(base)     ((base)->LOWPWR_CTRL_CLR)
#define XTALOSC24M_LOWPWR_CTRL_TOG_REG(base)     ((base)->LOWPWR_CTRL_TOG)
#define XTALOSC24M_OSC_CONFIG0_REG(base)         ((base)->OSC_CONFIG0)
#define XTALOSC24M_OSC_CONFIG0_SET_REG(base)     ((base)->OSC_CONFIG0_SET)
#define XTALOSC24M_OSC_CONFIG0_CLR_REG(base)     ((base)->OSC_CONFIG0_CLR)
#define XTALOSC24M_OSC_CONFIG0_TOG_REG(base)     ((base)->OSC_CONFIG0_TOG)
#define XTALOSC24M_OSC_CONFIG1_REG(base)         ((base)->OSC_CONFIG1)
#define XTALOSC24M_OSC_CONFIG1_SET_REG(base)     ((base)->OSC_CONFIG1_SET)
#define XTALOSC24M_OSC_CONFIG1_CLR_REG(base)     ((base)->OSC_CONFIG1_CLR)
#define XTALOSC24M_OSC_CONFIG1_TOG_REG(base)     ((base)->OSC_CONFIG1_TOG)
#define XTALOSC24M_OSC_CONFIG2_REG(base)         ((base)->OSC_CONFIG2)
#define XTALOSC24M_OSC_CONFIG2_SET_REG(base)     ((base)->OSC_CONFIG2_SET)
#define XTALOSC24M_OSC_CONFIG2_CLR_REG(base)     ((base)->OSC_CONFIG2_CLR)
#define XTALOSC24M_OSC_CONFIG2_TOG_REG(base)     ((base)->OSC_CONFIG2_TOG)

/*!
 * @}
 */ /* end of group XTALOSC24M_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- XTALOSC24M Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XTALOSC24M_Register_Masks XTALOSC24M Register Masks
 * @{
 */

/*! @name MISC0 - Miscellaneous Register 0 */
#define XTALOSC24M_MISC0_REFTOP_PWD_MASK         (0x1U)
#define XTALOSC24M_MISC0_REFTOP_PWD_SHIFT        (0U)
#define XTALOSC24M_MISC0_REFTOP_SELFBIASOFF_MASK (0x8U)
#define XTALOSC24M_MISC0_REFTOP_SELFBIASOFF_SHIFT (3U)
#define XTALOSC24M_MISC0_REFTOP_VBGADJ_MASK      (0x70U)
#define XTALOSC24M_MISC0_REFTOP_VBGADJ_SHIFT     (4U)
#define XTALOSC24M_MISC0_REFTOP_VBGADJ(x)        (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_MISC0_REFTOP_VBGADJ_SHIFT)) & XTALOSC24M_MISC0_REFTOP_VBGADJ_MASK)
#define XTALOSC24M_MISC0_REFTOP_VBGUP_MASK       (0x80U)
#define XTALOSC24M_MISC0_REFTOP_VBGUP_SHIFT      (7U)
#define XTALOSC24M_MISC0_STOP_MODE_CONFIG_MASK   (0xC00U)
#define XTALOSC24M_MISC0_STOP_MODE_CONFIG_SHIFT  (10U)
#define XTALOSC24M_MISC0_STOP_MODE_CONFIG(x)     (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_MISC0_STOP_MODE_CONFIG_SHIFT)) & XTALOSC24M_MISC0_STOP_MODE_CONFIG_MASK)
#define XTALOSC24M_MISC0_DISCON_HIGH_SNVS_MASK   (0x1000U)
#define XTALOSC24M_MISC0_DISCON_HIGH_SNVS_SHIFT  (12U)
#define XTALOSC24M_MISC0_OSC_I_MASK              (0x6000U)
#define XTALOSC24M_MISC0_OSC_I_SHIFT             (13U)
#define XTALOSC24M_MISC0_OSC_I(x)                (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_MISC0_OSC_I_SHIFT)) & XTALOSC24M_MISC0_OSC_I_MASK)
#define XTALOSC24M_MISC0_OSC_XTALOK_MASK         (0x8000U)
#define XTALOSC24M_MISC0_OSC_XTALOK_SHIFT        (15U)
#define XTALOSC24M_MISC0_OSC_XTALOK_EN_MASK      (0x10000U)
#define XTALOSC24M_MISC0_OSC_XTALOK_EN_SHIFT     (16U)
#define XTALOSC24M_MISC0_CLKGATE_CTRL_MASK       (0x2000000U)
#define XTALOSC24M_MISC0_CLKGATE_CTRL_SHIFT      (25U)
#define XTALOSC24M_MISC0_CLKGATE_DELAY_MASK      (0x1C000000U)
#define XTALOSC24M_MISC0_CLKGATE_DELAY_SHIFT     (26U)
#define XTALOSC24M_MISC0_CLKGATE_DELAY(x)        (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_MISC0_CLKGATE_DELAY_SHIFT)) & XTALOSC24M_MISC0_CLKGATE_DELAY_MASK)
#define XTALOSC24M_MISC0_RTC_XTAL_SOURCE_MASK    (0x20000000U)
#define XTALOSC24M_MISC0_RTC_XTAL_SOURCE_SHIFT   (29U)
#define XTALOSC24M_MISC0_XTAL_24M_PWD_MASK       (0x40000000U)
#define XTALOSC24M_MISC0_XTAL_24M_PWD_SHIFT      (30U)
#define XTALOSC24M_MISC0_VID_PLL_PREDIV_MASK     (0x80000000U)
#define XTALOSC24M_MISC0_VID_PLL_PREDIV_SHIFT    (31U)

/*! @name MISC0_SET - Miscellaneous Register 0 */
#define XTALOSC24M_MISC0_SET_REFTOP_PWD_MASK     (0x1U)
#define XTALOSC24M_MISC0_SET_REFTOP_PWD_SHIFT    (0U)
#define XTALOSC24M_MISC0_SET_REFTOP_SELFBIASOFF_MASK (0x8U)
#define XTALOSC24M_MISC0_SET_REFTOP_SELFBIASOFF_SHIFT (3U)
#define XTALOSC24M_MISC0_SET_REFTOP_VBGADJ_MASK  (0x70U)
#define XTALOSC24M_MISC0_SET_REFTOP_VBGADJ_SHIFT (4U)
#define XTALOSC24M_MISC0_SET_REFTOP_VBGADJ(x)    (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_MISC0_SET_REFTOP_VBGADJ_SHIFT)) & XTALOSC24M_MISC0_SET_REFTOP_VBGADJ_MASK)
#define XTALOSC24M_MISC0_SET_REFTOP_VBGUP_MASK   (0x80U)
#define XTALOSC24M_MISC0_SET_REFTOP_VBGUP_SHIFT  (7U)
#define XTALOSC24M_MISC0_SET_STOP_MODE_CONFIG_MASK (0xC00U)
#define XTALOSC24M_MISC0_SET_STOP_MODE_CONFIG_SHIFT (10U)
#define XTALOSC24M_MISC0_SET_STOP_MODE_CONFIG(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_MISC0_SET_STOP_MODE_CONFIG_SHIFT)) & XTALOSC24M_MISC0_SET_STOP_MODE_CONFIG_MASK)
#define XTALOSC24M_MISC0_SET_DISCON_HIGH_SNVS_MASK (0x1000U)
#define XTALOSC24M_MISC0_SET_DISCON_HIGH_SNVS_SHIFT (12U)
#define XTALOSC24M_MISC0_SET_OSC_I_MASK          (0x6000U)
#define XTALOSC24M_MISC0_SET_OSC_I_SHIFT         (13U)
#define XTALOSC24M_MISC0_SET_OSC_I(x)            (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_MISC0_SET_OSC_I_SHIFT)) & XTALOSC24M_MISC0_SET_OSC_I_MASK)
#define XTALOSC24M_MISC0_SET_OSC_XTALOK_MASK     (0x8000U)
#define XTALOSC24M_MISC0_SET_OSC_XTALOK_SHIFT    (15U)
#define XTALOSC24M_MISC0_SET_OSC_XTALOK_EN_MASK  (0x10000U)
#define XTALOSC24M_MISC0_SET_OSC_XTALOK_EN_SHIFT (16U)
#define XTALOSC24M_MISC0_SET_CLKGATE_CTRL_MASK   (0x2000000U)
#define XTALOSC24M_MISC0_SET_CLKGATE_CTRL_SHIFT  (25U)
#define XTALOSC24M_MISC0_SET_CLKGATE_DELAY_MASK  (0x1C000000U)
#define XTALOSC24M_MISC0_SET_CLKGATE_DELAY_SHIFT (26U)
#define XTALOSC24M_MISC0_SET_CLKGATE_DELAY(x)    (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_MISC0_SET_CLKGATE_DELAY_SHIFT)) & XTALOSC24M_MISC0_SET_CLKGATE_DELAY_MASK)
#define XTALOSC24M_MISC0_SET_RTC_XTAL_SOURCE_MASK (0x20000000U)
#define XTALOSC24M_MISC0_SET_RTC_XTAL_SOURCE_SHIFT (29U)
#define XTALOSC24M_MISC0_SET_XTAL_24M_PWD_MASK   (0x40000000U)
#define XTALOSC24M_MISC0_SET_XTAL_24M_PWD_SHIFT  (30U)
#define XTALOSC24M_MISC0_SET_VID_PLL_PREDIV_MASK (0x80000000U)
#define XTALOSC24M_MISC0_SET_VID_PLL_PREDIV_SHIFT (31U)

/*! @name MISC0_CLR - Miscellaneous Register 0 */
#define XTALOSC24M_MISC0_CLR_REFTOP_PWD_MASK     (0x1U)
#define XTALOSC24M_MISC0_CLR_REFTOP_PWD_SHIFT    (0U)
#define XTALOSC24M_MISC0_CLR_REFTOP_SELFBIASOFF_MASK (0x8U)
#define XTALOSC24M_MISC0_CLR_REFTOP_SELFBIASOFF_SHIFT (3U)
#define XTALOSC24M_MISC0_CLR_REFTOP_VBGADJ_MASK  (0x70U)
#define XTALOSC24M_MISC0_CLR_REFTOP_VBGADJ_SHIFT (4U)
#define XTALOSC24M_MISC0_CLR_REFTOP_VBGADJ(x)    (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_MISC0_CLR_REFTOP_VBGADJ_SHIFT)) & XTALOSC24M_MISC0_CLR_REFTOP_VBGADJ_MASK)
#define XTALOSC24M_MISC0_CLR_REFTOP_VBGUP_MASK   (0x80U)
#define XTALOSC24M_MISC0_CLR_REFTOP_VBGUP_SHIFT  (7U)
#define XTALOSC24M_MISC0_CLR_STOP_MODE_CONFIG_MASK (0xC00U)
#define XTALOSC24M_MISC0_CLR_STOP_MODE_CONFIG_SHIFT (10U)
#define XTALOSC24M_MISC0_CLR_STOP_MODE_CONFIG(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_MISC0_CLR_STOP_MODE_CONFIG_SHIFT)) & XTALOSC24M_MISC0_CLR_STOP_MODE_CONFIG_MASK)
#define XTALOSC24M_MISC0_CLR_DISCON_HIGH_SNVS_MASK (0x1000U)
#define XTALOSC24M_MISC0_CLR_DISCON_HIGH_SNVS_SHIFT (12U)
#define XTALOSC24M_MISC0_CLR_OSC_I_MASK          (0x6000U)
#define XTALOSC24M_MISC0_CLR_OSC_I_SHIFT         (13U)
#define XTALOSC24M_MISC0_CLR_OSC_I(x)            (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_MISC0_CLR_OSC_I_SHIFT)) & XTALOSC24M_MISC0_CLR_OSC_I_MASK)
#define XTALOSC24M_MISC0_CLR_OSC_XTALOK_MASK     (0x8000U)
#define XTALOSC24M_MISC0_CLR_OSC_XTALOK_SHIFT    (15U)
#define XTALOSC24M_MISC0_CLR_OSC_XTALOK_EN_MASK  (0x10000U)
#define XTALOSC24M_MISC0_CLR_OSC_XTALOK_EN_SHIFT (16U)
#define XTALOSC24M_MISC0_CLR_CLKGATE_CTRL_MASK   (0x2000000U)
#define XTALOSC24M_MISC0_CLR_CLKGATE_CTRL_SHIFT  (25U)
#define XTALOSC24M_MISC0_CLR_CLKGATE_DELAY_MASK  (0x1C000000U)
#define XTALOSC24M_MISC0_CLR_CLKGATE_DELAY_SHIFT (26U)
#define XTALOSC24M_MISC0_CLR_CLKGATE_DELAY(x)    (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_MISC0_CLR_CLKGATE_DELAY_SHIFT)) & XTALOSC24M_MISC0_CLR_CLKGATE_DELAY_MASK)
#define XTALOSC24M_MISC0_CLR_RTC_XTAL_SOURCE_MASK (0x20000000U)
#define XTALOSC24M_MISC0_CLR_RTC_XTAL_SOURCE_SHIFT (29U)
#define XTALOSC24M_MISC0_CLR_XTAL_24M_PWD_MASK   (0x40000000U)
#define XTALOSC24M_MISC0_CLR_XTAL_24M_PWD_SHIFT  (30U)
#define XTALOSC24M_MISC0_CLR_VID_PLL_PREDIV_MASK (0x80000000U)
#define XTALOSC24M_MISC0_CLR_VID_PLL_PREDIV_SHIFT (31U)

/*! @name MISC0_TOG - Miscellaneous Register 0 */
#define XTALOSC24M_MISC0_TOG_REFTOP_PWD_MASK     (0x1U)
#define XTALOSC24M_MISC0_TOG_REFTOP_PWD_SHIFT    (0U)
#define XTALOSC24M_MISC0_TOG_REFTOP_SELFBIASOFF_MASK (0x8U)
#define XTALOSC24M_MISC0_TOG_REFTOP_SELFBIASOFF_SHIFT (3U)
#define XTALOSC24M_MISC0_TOG_REFTOP_VBGADJ_MASK  (0x70U)
#define XTALOSC24M_MISC0_TOG_REFTOP_VBGADJ_SHIFT (4U)
#define XTALOSC24M_MISC0_TOG_REFTOP_VBGADJ(x)    (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_MISC0_TOG_REFTOP_VBGADJ_SHIFT)) & XTALOSC24M_MISC0_TOG_REFTOP_VBGADJ_MASK)
#define XTALOSC24M_MISC0_TOG_REFTOP_VBGUP_MASK   (0x80U)
#define XTALOSC24M_MISC0_TOG_REFTOP_VBGUP_SHIFT  (7U)
#define XTALOSC24M_MISC0_TOG_STOP_MODE_CONFIG_MASK (0xC00U)
#define XTALOSC24M_MISC0_TOG_STOP_MODE_CONFIG_SHIFT (10U)
#define XTALOSC24M_MISC0_TOG_STOP_MODE_CONFIG(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_MISC0_TOG_STOP_MODE_CONFIG_SHIFT)) & XTALOSC24M_MISC0_TOG_STOP_MODE_CONFIG_MASK)
#define XTALOSC24M_MISC0_TOG_DISCON_HIGH_SNVS_MASK (0x1000U)
#define XTALOSC24M_MISC0_TOG_DISCON_HIGH_SNVS_SHIFT (12U)
#define XTALOSC24M_MISC0_TOG_OSC_I_MASK          (0x6000U)
#define XTALOSC24M_MISC0_TOG_OSC_I_SHIFT         (13U)
#define XTALOSC24M_MISC0_TOG_OSC_I(x)            (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_MISC0_TOG_OSC_I_SHIFT)) & XTALOSC24M_MISC0_TOG_OSC_I_MASK)
#define XTALOSC24M_MISC0_TOG_OSC_XTALOK_MASK     (0x8000U)
#define XTALOSC24M_MISC0_TOG_OSC_XTALOK_SHIFT    (15U)
#define XTALOSC24M_MISC0_TOG_OSC_XTALOK_EN_MASK  (0x10000U)
#define XTALOSC24M_MISC0_TOG_OSC_XTALOK_EN_SHIFT (16U)
#define XTALOSC24M_MISC0_TOG_CLKGATE_CTRL_MASK   (0x2000000U)
#define XTALOSC24M_MISC0_TOG_CLKGATE_CTRL_SHIFT  (25U)
#define XTALOSC24M_MISC0_TOG_CLKGATE_DELAY_MASK  (0x1C000000U)
#define XTALOSC24M_MISC0_TOG_CLKGATE_DELAY_SHIFT (26U)
#define XTALOSC24M_MISC0_TOG_CLKGATE_DELAY(x)    (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_MISC0_TOG_CLKGATE_DELAY_SHIFT)) & XTALOSC24M_MISC0_TOG_CLKGATE_DELAY_MASK)
#define XTALOSC24M_MISC0_TOG_RTC_XTAL_SOURCE_MASK (0x20000000U)
#define XTALOSC24M_MISC0_TOG_RTC_XTAL_SOURCE_SHIFT (29U)
#define XTALOSC24M_MISC0_TOG_XTAL_24M_PWD_MASK   (0x40000000U)
#define XTALOSC24M_MISC0_TOG_XTAL_24M_PWD_SHIFT  (30U)
#define XTALOSC24M_MISC0_TOG_VID_PLL_PREDIV_MASK (0x80000000U)
#define XTALOSC24M_MISC0_TOG_VID_PLL_PREDIV_SHIFT (31U)

/*! @name LOWPWR_CTRL - XTAL OSC (LP) Control Register */
#define XTALOSC24M_LOWPWR_CTRL_RC_OSC_EN_MASK    (0x1U)
#define XTALOSC24M_LOWPWR_CTRL_RC_OSC_EN_SHIFT   (0U)
#define XTALOSC24M_LOWPWR_CTRL_RC_OSC_PROG_MASK  (0xEU)
#define XTALOSC24M_LOWPWR_CTRL_RC_OSC_PROG_SHIFT (1U)
#define XTALOSC24M_LOWPWR_CTRL_RC_OSC_PROG(x)    (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_LOWPWR_CTRL_RC_OSC_PROG_SHIFT)) & XTALOSC24M_LOWPWR_CTRL_RC_OSC_PROG_MASK)
#define XTALOSC24M_LOWPWR_CTRL_OSC_SEL_MASK      (0x10U)
#define XTALOSC24M_LOWPWR_CTRL_OSC_SEL_SHIFT     (4U)
#define XTALOSC24M_LOWPWR_CTRL_LPBG_SEL_MASK     (0x20U)
#define XTALOSC24M_LOWPWR_CTRL_LPBG_SEL_SHIFT    (5U)
#define XTALOSC24M_LOWPWR_CTRL_LPBG_TEST_MASK    (0x40U)
#define XTALOSC24M_LOWPWR_CTRL_LPBG_TEST_SHIFT   (6U)
#define XTALOSC24M_LOWPWR_CTRL_REFTOP_IBIAS_OFF_MASK (0x80U)
#define XTALOSC24M_LOWPWR_CTRL_REFTOP_IBIAS_OFF_SHIFT (7U)
#define XTALOSC24M_LOWPWR_CTRL_L1_PWRGATE_MASK   (0x100U)
#define XTALOSC24M_LOWPWR_CTRL_L1_PWRGATE_SHIFT  (8U)
#define XTALOSC24M_LOWPWR_CTRL_L2_PWRGATE_MASK   (0x200U)
#define XTALOSC24M_LOWPWR_CTRL_L2_PWRGATE_SHIFT  (9U)
#define XTALOSC24M_LOWPWR_CTRL_CPU_PWRGATE_MASK  (0x400U)
#define XTALOSC24M_LOWPWR_CTRL_CPU_PWRGATE_SHIFT (10U)
#define XTALOSC24M_LOWPWR_CTRL_DISPLAY_PWRGATE_MASK (0x800U)
#define XTALOSC24M_LOWPWR_CTRL_DISPLAY_PWRGATE_SHIFT (11U)
#define XTALOSC24M_LOWPWR_CTRL_RCOSC_CG_OVERRIDE_MASK (0x2000U)
#define XTALOSC24M_LOWPWR_CTRL_RCOSC_CG_OVERRIDE_SHIFT (13U)
#define XTALOSC24M_LOWPWR_CTRL_XTALOSC_PWRUP_DELAY_MASK (0xC000U)
#define XTALOSC24M_LOWPWR_CTRL_XTALOSC_PWRUP_DELAY_SHIFT (14U)
#define XTALOSC24M_LOWPWR_CTRL_XTALOSC_PWRUP_DELAY(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_LOWPWR_CTRL_XTALOSC_PWRUP_DELAY_SHIFT)) & XTALOSC24M_LOWPWR_CTRL_XTALOSC_PWRUP_DELAY_MASK)
#define XTALOSC24M_LOWPWR_CTRL_XTALOSC_PWRUP_STAT_MASK (0x10000U)
#define XTALOSC24M_LOWPWR_CTRL_XTALOSC_PWRUP_STAT_SHIFT (16U)
#define XTALOSC24M_LOWPWR_CTRL_MIX_PWRGATE_MASK  (0x20000U)
#define XTALOSC24M_LOWPWR_CTRL_MIX_PWRGATE_SHIFT (17U)

/*! @name LOWPWR_CTRL_SET - XTAL OSC (LP) Control Register */
#define XTALOSC24M_LOWPWR_CTRL_SET_RC_OSC_EN_MASK (0x1U)
#define XTALOSC24M_LOWPWR_CTRL_SET_RC_OSC_EN_SHIFT (0U)
#define XTALOSC24M_LOWPWR_CTRL_SET_RC_OSC_PROG_MASK (0xEU)
#define XTALOSC24M_LOWPWR_CTRL_SET_RC_OSC_PROG_SHIFT (1U)
#define XTALOSC24M_LOWPWR_CTRL_SET_RC_OSC_PROG(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_LOWPWR_CTRL_SET_RC_OSC_PROG_SHIFT)) & XTALOSC24M_LOWPWR_CTRL_SET_RC_OSC_PROG_MASK)
#define XTALOSC24M_LOWPWR_CTRL_SET_OSC_SEL_MASK  (0x10U)
#define XTALOSC24M_LOWPWR_CTRL_SET_OSC_SEL_SHIFT (4U)
#define XTALOSC24M_LOWPWR_CTRL_SET_LPBG_SEL_MASK (0x20U)
#define XTALOSC24M_LOWPWR_CTRL_SET_LPBG_SEL_SHIFT (5U)
#define XTALOSC24M_LOWPWR_CTRL_SET_LPBG_TEST_MASK (0x40U)
#define XTALOSC24M_LOWPWR_CTRL_SET_LPBG_TEST_SHIFT (6U)
#define XTALOSC24M_LOWPWR_CTRL_SET_REFTOP_IBIAS_OFF_MASK (0x80U)
#define XTALOSC24M_LOWPWR_CTRL_SET_REFTOP_IBIAS_OFF_SHIFT (7U)
#define XTALOSC24M_LOWPWR_CTRL_SET_L1_PWRGATE_MASK (0x100U)
#define XTALOSC24M_LOWPWR_CTRL_SET_L1_PWRGATE_SHIFT (8U)
#define XTALOSC24M_LOWPWR_CTRL_SET_L2_PWRGATE_MASK (0x200U)
#define XTALOSC24M_LOWPWR_CTRL_SET_L2_PWRGATE_SHIFT (9U)
#define XTALOSC24M_LOWPWR_CTRL_SET_CPU_PWRGATE_MASK (0x400U)
#define XTALOSC24M_LOWPWR_CTRL_SET_CPU_PWRGATE_SHIFT (10U)
#define XTALOSC24M_LOWPWR_CTRL_SET_DISPLAY_PWRGATE_MASK (0x800U)
#define XTALOSC24M_LOWPWR_CTRL_SET_DISPLAY_PWRGATE_SHIFT (11U)
#define XTALOSC24M_LOWPWR_CTRL_SET_RCOSC_CG_OVERRIDE_MASK (0x2000U)
#define XTALOSC24M_LOWPWR_CTRL_SET_RCOSC_CG_OVERRIDE_SHIFT (13U)
#define XTALOSC24M_LOWPWR_CTRL_SET_XTALOSC_PWRUP_DELAY_MASK (0xC000U)
#define XTALOSC24M_LOWPWR_CTRL_SET_XTALOSC_PWRUP_DELAY_SHIFT (14U)
#define XTALOSC24M_LOWPWR_CTRL_SET_XTALOSC_PWRUP_DELAY(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_LOWPWR_CTRL_SET_XTALOSC_PWRUP_DELAY_SHIFT)) & XTALOSC24M_LOWPWR_CTRL_SET_XTALOSC_PWRUP_DELAY_MASK)
#define XTALOSC24M_LOWPWR_CTRL_SET_XTALOSC_PWRUP_STAT_MASK (0x10000U)
#define XTALOSC24M_LOWPWR_CTRL_SET_XTALOSC_PWRUP_STAT_SHIFT (16U)
#define XTALOSC24M_LOWPWR_CTRL_SET_MIX_PWRGATE_MASK (0x20000U)
#define XTALOSC24M_LOWPWR_CTRL_SET_MIX_PWRGATE_SHIFT (17U)

/*! @name LOWPWR_CTRL_CLR - XTAL OSC (LP) Control Register */
#define XTALOSC24M_LOWPWR_CTRL_CLR_RC_OSC_EN_MASK (0x1U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_RC_OSC_EN_SHIFT (0U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_RC_OSC_PROG_MASK (0xEU)
#define XTALOSC24M_LOWPWR_CTRL_CLR_RC_OSC_PROG_SHIFT (1U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_RC_OSC_PROG(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_LOWPWR_CTRL_CLR_RC_OSC_PROG_SHIFT)) & XTALOSC24M_LOWPWR_CTRL_CLR_RC_OSC_PROG_MASK)
#define XTALOSC24M_LOWPWR_CTRL_CLR_OSC_SEL_MASK  (0x10U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_OSC_SEL_SHIFT (4U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_LPBG_SEL_MASK (0x20U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_LPBG_SEL_SHIFT (5U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_LPBG_TEST_MASK (0x40U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_LPBG_TEST_SHIFT (6U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_REFTOP_IBIAS_OFF_MASK (0x80U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_REFTOP_IBIAS_OFF_SHIFT (7U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_L1_PWRGATE_MASK (0x100U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_L1_PWRGATE_SHIFT (8U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_L2_PWRGATE_MASK (0x200U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_L2_PWRGATE_SHIFT (9U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_CPU_PWRGATE_MASK (0x400U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_CPU_PWRGATE_SHIFT (10U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_DISPLAY_PWRGATE_MASK (0x800U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_DISPLAY_PWRGATE_SHIFT (11U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_RCOSC_CG_OVERRIDE_MASK (0x2000U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_RCOSC_CG_OVERRIDE_SHIFT (13U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_DELAY_MASK (0xC000U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_DELAY_SHIFT (14U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_DELAY(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_DELAY_SHIFT)) & XTALOSC24M_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_DELAY_MASK)
#define XTALOSC24M_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_STAT_MASK (0x10000U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_STAT_SHIFT (16U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_MIX_PWRGATE_MASK (0x20000U)
#define XTALOSC24M_LOWPWR_CTRL_CLR_MIX_PWRGATE_SHIFT (17U)

/*! @name LOWPWR_CTRL_TOG - XTAL OSC (LP) Control Register */
#define XTALOSC24M_LOWPWR_CTRL_TOG_RC_OSC_EN_MASK (0x1U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_RC_OSC_EN_SHIFT (0U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_RC_OSC_PROG_MASK (0xEU)
#define XTALOSC24M_LOWPWR_CTRL_TOG_RC_OSC_PROG_SHIFT (1U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_RC_OSC_PROG(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_LOWPWR_CTRL_TOG_RC_OSC_PROG_SHIFT)) & XTALOSC24M_LOWPWR_CTRL_TOG_RC_OSC_PROG_MASK)
#define XTALOSC24M_LOWPWR_CTRL_TOG_OSC_SEL_MASK  (0x10U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_OSC_SEL_SHIFT (4U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_LPBG_SEL_MASK (0x20U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_LPBG_SEL_SHIFT (5U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_LPBG_TEST_MASK (0x40U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_LPBG_TEST_SHIFT (6U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_REFTOP_IBIAS_OFF_MASK (0x80U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_REFTOP_IBIAS_OFF_SHIFT (7U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_L1_PWRGATE_MASK (0x100U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_L1_PWRGATE_SHIFT (8U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_L2_PWRGATE_MASK (0x200U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_L2_PWRGATE_SHIFT (9U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_CPU_PWRGATE_MASK (0x400U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_CPU_PWRGATE_SHIFT (10U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_DISPLAY_PWRGATE_MASK (0x800U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_DISPLAY_PWRGATE_SHIFT (11U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_RCOSC_CG_OVERRIDE_MASK (0x2000U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_RCOSC_CG_OVERRIDE_SHIFT (13U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_DELAY_MASK (0xC000U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_DELAY_SHIFT (14U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_DELAY(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_DELAY_SHIFT)) & XTALOSC24M_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_DELAY_MASK)
#define XTALOSC24M_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_STAT_MASK (0x10000U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_STAT_SHIFT (16U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_MIX_PWRGATE_MASK (0x20000U)
#define XTALOSC24M_LOWPWR_CTRL_TOG_MIX_PWRGATE_SHIFT (17U)

/*! @name OSC_CONFIG0 - XTAL OSC Configuration 0 Register */
#define XTALOSC24M_OSC_CONFIG0_START_MASK        (0x1U)
#define XTALOSC24M_OSC_CONFIG0_START_SHIFT       (0U)
#define XTALOSC24M_OSC_CONFIG0_ENABLE_MASK       (0x2U)
#define XTALOSC24M_OSC_CONFIG0_ENABLE_SHIFT      (1U)
#define XTALOSC24M_OSC_CONFIG0_BYPASS_MASK       (0x4U)
#define XTALOSC24M_OSC_CONFIG0_BYPASS_SHIFT      (2U)
#define XTALOSC24M_OSC_CONFIG0_INVERT_MASK       (0x8U)
#define XTALOSC24M_OSC_CONFIG0_INVERT_SHIFT      (3U)
#define XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_MASK  (0xFF0U)
#define XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_SHIFT (4U)
#define XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG(x)    (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_SHIFT)) & XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_MASK)
#define XTALOSC24M_OSC_CONFIG0_HYST_PLUS_MASK    (0xF000U)
#define XTALOSC24M_OSC_CONFIG0_HYST_PLUS_SHIFT   (12U)
#define XTALOSC24M_OSC_CONFIG0_HYST_PLUS(x)      (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG0_HYST_PLUS_SHIFT)) & XTALOSC24M_OSC_CONFIG0_HYST_PLUS_MASK)
#define XTALOSC24M_OSC_CONFIG0_HYST_MINUS_MASK   (0xF0000U)
#define XTALOSC24M_OSC_CONFIG0_HYST_MINUS_SHIFT  (16U)
#define XTALOSC24M_OSC_CONFIG0_HYST_MINUS(x)     (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG0_HYST_MINUS_SHIFT)) & XTALOSC24M_OSC_CONFIG0_HYST_MINUS_MASK)
#define XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_CUR_MASK (0xFF000000U)
#define XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_CUR_SHIFT (24U)
#define XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_CUR(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_CUR_SHIFT)) & XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_CUR_MASK)

/*! @name OSC_CONFIG0_SET - XTAL OSC Configuration 0 Register */
#define XTALOSC24M_OSC_CONFIG0_SET_START_MASK    (0x1U)
#define XTALOSC24M_OSC_CONFIG0_SET_START_SHIFT   (0U)
#define XTALOSC24M_OSC_CONFIG0_SET_ENABLE_MASK   (0x2U)
#define XTALOSC24M_OSC_CONFIG0_SET_ENABLE_SHIFT  (1U)
#define XTALOSC24M_OSC_CONFIG0_SET_BYPASS_MASK   (0x4U)
#define XTALOSC24M_OSC_CONFIG0_SET_BYPASS_SHIFT  (2U)
#define XTALOSC24M_OSC_CONFIG0_SET_INVERT_MASK   (0x8U)
#define XTALOSC24M_OSC_CONFIG0_SET_INVERT_SHIFT  (3U)
#define XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_MASK (0xFF0U)
#define XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_SHIFT (4U)
#define XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_SHIFT)) & XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_MASK)
#define XTALOSC24M_OSC_CONFIG0_SET_HYST_PLUS_MASK (0xF000U)
#define XTALOSC24M_OSC_CONFIG0_SET_HYST_PLUS_SHIFT (12U)
#define XTALOSC24M_OSC_CONFIG0_SET_HYST_PLUS(x)  (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG0_SET_HYST_PLUS_SHIFT)) & XTALOSC24M_OSC_CONFIG0_SET_HYST_PLUS_MASK)
#define XTALOSC24M_OSC_CONFIG0_SET_HYST_MINUS_MASK (0xF0000U)
#define XTALOSC24M_OSC_CONFIG0_SET_HYST_MINUS_SHIFT (16U)
#define XTALOSC24M_OSC_CONFIG0_SET_HYST_MINUS(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG0_SET_HYST_MINUS_SHIFT)) & XTALOSC24M_OSC_CONFIG0_SET_HYST_MINUS_MASK)
#define XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_CUR_MASK (0xFF000000U)
#define XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_CUR_SHIFT (24U)
#define XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_CUR(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_CUR_SHIFT)) & XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_CUR_MASK)

/*! @name OSC_CONFIG0_CLR - XTAL OSC Configuration 0 Register */
#define XTALOSC24M_OSC_CONFIG0_CLR_START_MASK    (0x1U)
#define XTALOSC24M_OSC_CONFIG0_CLR_START_SHIFT   (0U)
#define XTALOSC24M_OSC_CONFIG0_CLR_ENABLE_MASK   (0x2U)
#define XTALOSC24M_OSC_CONFIG0_CLR_ENABLE_SHIFT  (1U)
#define XTALOSC24M_OSC_CONFIG0_CLR_BYPASS_MASK   (0x4U)
#define XTALOSC24M_OSC_CONFIG0_CLR_BYPASS_SHIFT  (2U)
#define XTALOSC24M_OSC_CONFIG0_CLR_INVERT_MASK   (0x8U)
#define XTALOSC24M_OSC_CONFIG0_CLR_INVERT_SHIFT  (3U)
#define XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_MASK (0xFF0U)
#define XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_SHIFT (4U)
#define XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_SHIFT)) & XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_MASK)
#define XTALOSC24M_OSC_CONFIG0_CLR_HYST_PLUS_MASK (0xF000U)
#define XTALOSC24M_OSC_CONFIG0_CLR_HYST_PLUS_SHIFT (12U)
#define XTALOSC24M_OSC_CONFIG0_CLR_HYST_PLUS(x)  (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG0_CLR_HYST_PLUS_SHIFT)) & XTALOSC24M_OSC_CONFIG0_CLR_HYST_PLUS_MASK)
#define XTALOSC24M_OSC_CONFIG0_CLR_HYST_MINUS_MASK (0xF0000U)
#define XTALOSC24M_OSC_CONFIG0_CLR_HYST_MINUS_SHIFT (16U)
#define XTALOSC24M_OSC_CONFIG0_CLR_HYST_MINUS(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG0_CLR_HYST_MINUS_SHIFT)) & XTALOSC24M_OSC_CONFIG0_CLR_HYST_MINUS_MASK)
#define XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_CUR_MASK (0xFF000000U)
#define XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_CUR_SHIFT (24U)
#define XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_CUR(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_CUR_SHIFT)) & XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_CUR_MASK)

/*! @name OSC_CONFIG0_TOG - XTAL OSC Configuration 0 Register */
#define XTALOSC24M_OSC_CONFIG0_TOG_START_MASK    (0x1U)
#define XTALOSC24M_OSC_CONFIG0_TOG_START_SHIFT   (0U)
#define XTALOSC24M_OSC_CONFIG0_TOG_ENABLE_MASK   (0x2U)
#define XTALOSC24M_OSC_CONFIG0_TOG_ENABLE_SHIFT  (1U)
#define XTALOSC24M_OSC_CONFIG0_TOG_BYPASS_MASK   (0x4U)
#define XTALOSC24M_OSC_CONFIG0_TOG_BYPASS_SHIFT  (2U)
#define XTALOSC24M_OSC_CONFIG0_TOG_INVERT_MASK   (0x8U)
#define XTALOSC24M_OSC_CONFIG0_TOG_INVERT_SHIFT  (3U)
#define XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_MASK (0xFF0U)
#define XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_SHIFT (4U)
#define XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_SHIFT)) & XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_MASK)
#define XTALOSC24M_OSC_CONFIG0_TOG_HYST_PLUS_MASK (0xF000U)
#define XTALOSC24M_OSC_CONFIG0_TOG_HYST_PLUS_SHIFT (12U)
#define XTALOSC24M_OSC_CONFIG0_TOG_HYST_PLUS(x)  (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG0_TOG_HYST_PLUS_SHIFT)) & XTALOSC24M_OSC_CONFIG0_TOG_HYST_PLUS_MASK)
#define XTALOSC24M_OSC_CONFIG0_TOG_HYST_MINUS_MASK (0xF0000U)
#define XTALOSC24M_OSC_CONFIG0_TOG_HYST_MINUS_SHIFT (16U)
#define XTALOSC24M_OSC_CONFIG0_TOG_HYST_MINUS(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG0_TOG_HYST_MINUS_SHIFT)) & XTALOSC24M_OSC_CONFIG0_TOG_HYST_MINUS_MASK)
#define XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_CUR_MASK (0xFF000000U)
#define XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_CUR_SHIFT (24U)
#define XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_CUR(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_CUR_SHIFT)) & XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_CUR_MASK)

/*! @name OSC_CONFIG1 - XTAL OSC Configuration 1 Register */
#define XTALOSC24M_OSC_CONFIG1_COUNT_RC_TRG_MASK (0xFFFU)
#define XTALOSC24M_OSC_CONFIG1_COUNT_RC_TRG_SHIFT (0U)
#define XTALOSC24M_OSC_CONFIG1_COUNT_RC_TRG(x)   (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG1_COUNT_RC_TRG_SHIFT)) & XTALOSC24M_OSC_CONFIG1_COUNT_RC_TRG_MASK)
#define XTALOSC24M_OSC_CONFIG1_COUNT_RC_CUR_MASK (0xFFF00000U)
#define XTALOSC24M_OSC_CONFIG1_COUNT_RC_CUR_SHIFT (20U)
#define XTALOSC24M_OSC_CONFIG1_COUNT_RC_CUR(x)   (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG1_COUNT_RC_CUR_SHIFT)) & XTALOSC24M_OSC_CONFIG1_COUNT_RC_CUR_MASK)

/*! @name OSC_CONFIG1_SET - XTAL OSC Configuration 1 Register */
#define XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_TRG_MASK (0xFFFU)
#define XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_TRG_SHIFT (0U)
#define XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_TRG(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_TRG_SHIFT)) & XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_TRG_MASK)
#define XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_CUR_MASK (0xFFF00000U)
#define XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_CUR_SHIFT (20U)
#define XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_CUR(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_CUR_SHIFT)) & XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_CUR_MASK)

/*! @name OSC_CONFIG1_CLR - XTAL OSC Configuration 1 Register */
#define XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_TRG_MASK (0xFFFU)
#define XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_TRG_SHIFT (0U)
#define XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_TRG(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_TRG_SHIFT)) & XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_TRG_MASK)
#define XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_CUR_MASK (0xFFF00000U)
#define XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_CUR_SHIFT (20U)
#define XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_CUR(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_CUR_SHIFT)) & XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_CUR_MASK)

/*! @name OSC_CONFIG1_TOG - XTAL OSC Configuration 1 Register */
#define XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_TRG_MASK (0xFFFU)
#define XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_TRG_SHIFT (0U)
#define XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_TRG(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_TRG_SHIFT)) & XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_TRG_MASK)
#define XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_CUR_MASK (0xFFF00000U)
#define XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_CUR_SHIFT (20U)
#define XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_CUR(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_CUR_SHIFT)) & XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_CUR_MASK)

/*! @name OSC_CONFIG2 - XTAL OSC Configuration 2 Register */
#define XTALOSC24M_OSC_CONFIG2_COUNT_1M_TRG_MASK (0xFFFU)
#define XTALOSC24M_OSC_CONFIG2_COUNT_1M_TRG_SHIFT (0U)
#define XTALOSC24M_OSC_CONFIG2_COUNT_1M_TRG(x)   (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG2_COUNT_1M_TRG_SHIFT)) & XTALOSC24M_OSC_CONFIG2_COUNT_1M_TRG_MASK)
#define XTALOSC24M_OSC_CONFIG2_ENABLE_1M_MASK    (0x10000U)
#define XTALOSC24M_OSC_CONFIG2_ENABLE_1M_SHIFT   (16U)
#define XTALOSC24M_OSC_CONFIG2_MUX_1M_MASK       (0x20000U)
#define XTALOSC24M_OSC_CONFIG2_MUX_1M_SHIFT      (17U)
#define XTALOSC24M_OSC_CONFIG2_CLK_1M_ERR_FL_MASK (0x80000000U)
#define XTALOSC24M_OSC_CONFIG2_CLK_1M_ERR_FL_SHIFT (31U)

/*! @name OSC_CONFIG2_SET - XTAL OSC Configuration 2 Register */
#define XTALOSC24M_OSC_CONFIG2_SET_COUNT_1M_TRG_MASK (0xFFFU)
#define XTALOSC24M_OSC_CONFIG2_SET_COUNT_1M_TRG_SHIFT (0U)
#define XTALOSC24M_OSC_CONFIG2_SET_COUNT_1M_TRG(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG2_SET_COUNT_1M_TRG_SHIFT)) & XTALOSC24M_OSC_CONFIG2_SET_COUNT_1M_TRG_MASK)
#define XTALOSC24M_OSC_CONFIG2_SET_ENABLE_1M_MASK (0x10000U)
#define XTALOSC24M_OSC_CONFIG2_SET_ENABLE_1M_SHIFT (16U)
#define XTALOSC24M_OSC_CONFIG2_SET_MUX_1M_MASK   (0x20000U)
#define XTALOSC24M_OSC_CONFIG2_SET_MUX_1M_SHIFT  (17U)
#define XTALOSC24M_OSC_CONFIG2_SET_CLK_1M_ERR_FL_MASK (0x80000000U)
#define XTALOSC24M_OSC_CONFIG2_SET_CLK_1M_ERR_FL_SHIFT (31U)

/*! @name OSC_CONFIG2_CLR - XTAL OSC Configuration 2 Register */
#define XTALOSC24M_OSC_CONFIG2_CLR_COUNT_1M_TRG_MASK (0xFFFU)
#define XTALOSC24M_OSC_CONFIG2_CLR_COUNT_1M_TRG_SHIFT (0U)
#define XTALOSC24M_OSC_CONFIG2_CLR_COUNT_1M_TRG(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG2_CLR_COUNT_1M_TRG_SHIFT)) & XTALOSC24M_OSC_CONFIG2_CLR_COUNT_1M_TRG_MASK)
#define XTALOSC24M_OSC_CONFIG2_CLR_ENABLE_1M_MASK (0x10000U)
#define XTALOSC24M_OSC_CONFIG2_CLR_ENABLE_1M_SHIFT (16U)
#define XTALOSC24M_OSC_CONFIG2_CLR_MUX_1M_MASK   (0x20000U)
#define XTALOSC24M_OSC_CONFIG2_CLR_MUX_1M_SHIFT  (17U)
#define XTALOSC24M_OSC_CONFIG2_CLR_CLK_1M_ERR_FL_MASK (0x80000000U)
#define XTALOSC24M_OSC_CONFIG2_CLR_CLK_1M_ERR_FL_SHIFT (31U)

/*! @name OSC_CONFIG2_TOG - XTAL OSC Configuration 2 Register */
#define XTALOSC24M_OSC_CONFIG2_TOG_COUNT_1M_TRG_MASK (0xFFFU)
#define XTALOSC24M_OSC_CONFIG2_TOG_COUNT_1M_TRG_SHIFT (0U)
#define XTALOSC24M_OSC_CONFIG2_TOG_COUNT_1M_TRG(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC24M_OSC_CONFIG2_TOG_COUNT_1M_TRG_SHIFT)) & XTALOSC24M_OSC_CONFIG2_TOG_COUNT_1M_TRG_MASK)
#define XTALOSC24M_OSC_CONFIG2_TOG_ENABLE_1M_MASK (0x10000U)
#define XTALOSC24M_OSC_CONFIG2_TOG_ENABLE_1M_SHIFT (16U)
#define XTALOSC24M_OSC_CONFIG2_TOG_MUX_1M_MASK   (0x20000U)
#define XTALOSC24M_OSC_CONFIG2_TOG_MUX_1M_SHIFT  (17U)
#define XTALOSC24M_OSC_CONFIG2_TOG_CLK_1M_ERR_FL_MASK (0x80000000U)
#define XTALOSC24M_OSC_CONFIG2_TOG_CLK_1M_ERR_FL_SHIFT (31U)


/*!
 * @}
 */ /* end of group XTALOSC24M_Register_Masks */


/* XTALOSC24M - Peripheral instance base addresses */
/** Peripheral XTALOSC24M base pointer */
#define XTALOSC24M_BASE_PTR                      ((XTALOSC24M_MemMapPtr)0x400D8000u)
/** Array initializer of XTALOSC24M peripheral base pointers */
#define XTALOSC24M_BASE_PTRS                     { XTALOSC24M_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- XTALOSC24M - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XTALOSC24M_Register_Accessor_Macros XTALOSC24M - Register accessor macros
 * @{
 */


/* XTALOSC24M - Register instance definitions */
/* XTALOSC24M */
#define XTALOSC24M_MISC0                         XTALOSC24M_MISC0_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_MISC0_SET                     XTALOSC24M_MISC0_SET_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_MISC0_CLR                     XTALOSC24M_MISC0_CLR_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_MISC0_TOG                     XTALOSC24M_MISC0_TOG_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_LOWPWR_CTRL                   XTALOSC24M_LOWPWR_CTRL_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_LOWPWR_CTRL_SET               XTALOSC24M_LOWPWR_CTRL_SET_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_LOWPWR_CTRL_CLR               XTALOSC24M_LOWPWR_CTRL_CLR_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_LOWPWR_CTRL_TOG               XTALOSC24M_LOWPWR_CTRL_TOG_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_OSC_CONFIG0                   XTALOSC24M_OSC_CONFIG0_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_OSC_CONFIG0_SET               XTALOSC24M_OSC_CONFIG0_SET_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_OSC_CONFIG0_CLR               XTALOSC24M_OSC_CONFIG0_CLR_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_OSC_CONFIG0_TOG               XTALOSC24M_OSC_CONFIG0_TOG_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_OSC_CONFIG1                   XTALOSC24M_OSC_CONFIG1_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_OSC_CONFIG1_SET               XTALOSC24M_OSC_CONFIG1_SET_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_OSC_CONFIG1_CLR               XTALOSC24M_OSC_CONFIG1_CLR_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_OSC_CONFIG1_TOG               XTALOSC24M_OSC_CONFIG1_TOG_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_OSC_CONFIG2                   XTALOSC24M_OSC_CONFIG2_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_OSC_CONFIG2_SET               XTALOSC24M_OSC_CONFIG2_SET_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_OSC_CONFIG2_CLR               XTALOSC24M_OSC_CONFIG2_CLR_REG(XTALOSC24M_BASE_PTR)
#define XTALOSC24M_OSC_CONFIG2_TOG               XTALOSC24M_OSC_CONFIG2_TOG_REG(XTALOSC24M_BASE_PTR)

/*!
 * @}
 */ /* end of group XTALOSC24M_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group XTALOSC24M_Peripheral */


/*
** End of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
  #pragma pop
#elif defined(__CWCC__)
  #pragma pop
#elif defined(__GNUC__)
  /* leave anonymous unions enabled */
#elif defined(__IAR_SYSTEMS_ICC__)
  #pragma language=default
#else
  #error Not supported compiler type
#endif

/*!
 * @}
 */ /* end of group Peripheral_defines */


/* ----------------------------------------------------------------------------
   -- SDK Compatibility
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDK_Compatibility_Symbols SDK Compatibility
 * @{
 */

/* No SDK compatibility issues. */

/*!
 * @}
 */ /* end of group SDK_Compatibility_Symbols */


#else /* #if !defined(MCU_MIMXRT1021) */
  /* There is already included the same memory map. Check if it is compatible (has the same major version) */
  #if (MCU_MEM_MAP_VERSION != 0x0000U)
    #if (!defined(MCU_MEM_MAP_SUPPRESS_VERSION_WARNING))
      #warning There are included two not compatible versions of memory maps. Please check possible differences.
    #endif /* (!defined(MCU_MEM_MAP_SUPPRESS_VERSION_WARNING)) */
  #endif /* (MCU_MEM_MAP_VERSION != 0x0000U) */
#endif  /* #if !defined(MCU_MIMXRT1021) */

